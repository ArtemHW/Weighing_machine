
Weighing_machine.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008d68  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001ac  08008ef8  08008ef8  00018ef8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080090a4  080090a4  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  080090a4  080090a4  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  080090a4  080090a4  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080090a4  080090a4  000190a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080090a8  080090a8  000190a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080090ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002400  20000074  08009120  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002474  08009120  00022474  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d74e  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003f25  00000000  00000000  0003d7f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001648  00000000  00000000  00041718  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000014e0  00000000  00000000  00042d60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f109  00000000  00000000  00044240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001be48  00000000  00000000  00063349  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b671a  00000000  00000000  0007f191  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000c5  00000000  00000000  001358ab  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006198  00000000  00000000  00135970  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    00000210  00000000  00000000  0013bb08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008ee0 	.word	0x08008ee0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08008ee0 	.word	0x08008ee0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <vApplicationIdleHook>:
void vApplicationIdleHook(void);
void vApplicationTickHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 8000280:	b480      	push	{r7}
 8000282:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 8000284:	bf00      	nop
 8000286:	46bd      	mov	sp, r7
 8000288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800028c:	4770      	bx	lr

0800028e <vApplicationTickHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 3 */
__weak void vApplicationTickHook( void )
{
 800028e:	b480      	push	{r7}
 8000290:	af00      	add	r7, sp, #0
   /* This function will be called by each tick interrupt if
   configUSE_TICK_HOOK is set to 1 in FreeRTOSConfig.h. User code can be
   added here, but the tick hook is called from an interrupt context, so
   code must not attempt to block, and only the interrupt safe FreeRTOS API
   functions can be used (those that end in FromISR()). */
}
 8000292:	bf00      	nop
 8000294:	46bd      	mov	sp, r7
 8000296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800029a:	4770      	bx	lr

0800029c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800029c:	b480      	push	{r7}
 800029e:	b085      	sub	sp, #20
 80002a0:	af00      	add	r7, sp, #0
 80002a2:	60f8      	str	r0, [r7, #12]
 80002a4:	60b9      	str	r1, [r7, #8]
 80002a6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80002a8:	68fb      	ldr	r3, [r7, #12]
 80002aa:	4a07      	ldr	r2, [pc, #28]	; (80002c8 <vApplicationGetIdleTaskMemory+0x2c>)
 80002ac:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80002ae:	68bb      	ldr	r3, [r7, #8]
 80002b0:	4a06      	ldr	r2, [pc, #24]	; (80002cc <vApplicationGetIdleTaskMemory+0x30>)
 80002b2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	2240      	movs	r2, #64	; 0x40
 80002b8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80002ba:	bf00      	nop
 80002bc:	3714      	adds	r7, #20
 80002be:	46bd      	mov	sp, r7
 80002c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002c4:	4770      	bx	lr
 80002c6:	bf00      	nop
 80002c8:	20000090 	.word	0x20000090
 80002cc:	20000148 	.word	0x20000148

080002d0 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 80002d0:	b480      	push	{r7}
 80002d2:	b085      	sub	sp, #20
 80002d4:	af00      	add	r7, sp, #0
 80002d6:	60f8      	str	r0, [r7, #12]
 80002d8:	60b9      	str	r1, [r7, #8]
 80002da:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 80002dc:	68fb      	ldr	r3, [r7, #12]
 80002de:	4a07      	ldr	r2, [pc, #28]	; (80002fc <vApplicationGetTimerTaskMemory+0x2c>)
 80002e0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 80002e2:	68bb      	ldr	r3, [r7, #8]
 80002e4:	4a06      	ldr	r2, [pc, #24]	; (8000300 <vApplicationGetTimerTaskMemory+0x30>)
 80002e6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 80002e8:	687b      	ldr	r3, [r7, #4]
 80002ea:	2240      	movs	r2, #64	; 0x40
 80002ec:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80002ee:	bf00      	nop
 80002f0:	3714      	adds	r7, #20
 80002f2:	46bd      	mov	sp, r7
 80002f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f8:	4770      	bx	lr
 80002fa:	bf00      	nop
 80002fc:	20000248 	.word	0x20000248
 8000300:	20000300 	.word	0x20000300

08000304 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000304:	b5b0      	push	{r4, r5, r7, lr}
 8000306:	b08c      	sub	sp, #48	; 0x30
 8000308:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	buffer.offset = 0;
 800030a:	4b4b      	ldr	r3, [pc, #300]	; (8000438 <main+0x134>)
 800030c:	2200      	movs	r2, #0
 800030e:	f8a3 20da 	strh.w	r2, [r3, #218]	; 0xda
	buffer.k = 1;
 8000312:	4b49      	ldr	r3, [pc, #292]	; (8000438 <main+0x134>)
 8000314:	2201      	movs	r2, #1
 8000316:	f8a3 20dc 	strh.w	r2, [r3, #220]	; 0xdc
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800031a:	f000 fed1 	bl	80010c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800031e:	f000 f8b3 	bl	8000488 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000322:	f000 f9c3 	bl	80006ac <MX_GPIO_Init>
  MX_ADC1_Init();
 8000326:	f000 f909 	bl	800053c <MX_ADC1_Init>
  MX_DMA_Init();
 800032a:	f000 f9a1 	bl	8000670 <MX_DMA_Init>
  MX_USART1_UART_Init();
 800032e:	f000 f96f 	bl	8000610 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000332:	4842      	ldr	r0, [pc, #264]	; (800043c <main+0x138>)
 8000334:	f001 fe02 	bl	8001f3c <HAL_DMA_Init>
 8000338:	4603      	mov	r3, r0
 800033a:	2b00      	cmp	r3, #0
 800033c:	d001      	beq.n	8000342 <main+0x3e>
  {
    Error_Handler();
 800033e:	f000 fcdf 	bl	8000d00 <Error_Handler>
  }

  __HAL_LINKDMA(&hadc1,DMA_Handle,hdma_adc1);
 8000342:	4b3f      	ldr	r3, [pc, #252]	; (8000440 <main+0x13c>)
 8000344:	4a3d      	ldr	r2, [pc, #244]	; (800043c <main+0x138>)
 8000346:	639a      	str	r2, [r3, #56]	; 0x38
 8000348:	4b3c      	ldr	r3, [pc, #240]	; (800043c <main+0x138>)
 800034a:	4a3d      	ldr	r2, [pc, #244]	; (8000440 <main+0x13c>)
 800034c:	625a      	str	r2, [r3, #36]	; 0x24
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&buffer.adc_buf, sizeof(buffer.adc_buf)/2);
 800034e:	2232      	movs	r2, #50	; 0x32
 8000350:	493c      	ldr	r1, [pc, #240]	; (8000444 <main+0x140>)
 8000352:	483b      	ldr	r0, [pc, #236]	; (8000440 <main+0x13c>)
 8000354:	f001 f88e 	bl	8001474 <HAL_ADC_Start_DMA>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* add semaphores, ... */
  xSemaphore1 = xSemaphoreCreateBinary();
 8000358:	2203      	movs	r2, #3
 800035a:	2100      	movs	r1, #0
 800035c:	2001      	movs	r0, #1
 800035e:	f004 ff94 	bl	800528a <xQueueGenericCreate>
 8000362:	4603      	mov	r3, r0
 8000364:	4a38      	ldr	r2, [pc, #224]	; (8000448 <main+0x144>)
 8000366:	6013      	str	r3, [r2, #0]
  //xSemaphore2 = xSemaphoreCreateCounting(4, 0);
  xCreatedEventGroup1 = xEventGroupCreate();
 8000368:	f004 fc5a 	bl	8004c20 <xEventGroupCreate>
 800036c:	4603      	mov	r3, r0
 800036e:	4a37      	ldr	r2, [pc, #220]	; (800044c <main+0x148>)
 8000370:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  QueueHandle_t myQueue1;
  myQueue1 = xQueueCreate(40, sizeof(char));
 8000372:	2200      	movs	r2, #0
 8000374:	2101      	movs	r1, #1
 8000376:	2028      	movs	r0, #40	; 0x28
 8000378:	f004 ff87 	bl	800528a <xQueueGenericCreate>
 800037c:	6278      	str	r0, [r7, #36]	; 0x24
  buffer.queueh = myQueue1;
 800037e:	4a2e      	ldr	r2, [pc, #184]	; (8000438 <main+0x134>)
 8000380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000382:	6013      	str	r3, [r2, #0]

  QueueHandle_t myQueue2;
  myQueue2 = xQueueCreate(40, sizeof(char));
 8000384:	2200      	movs	r2, #0
 8000386:	2101      	movs	r1, #1
 8000388:	2028      	movs	r0, #40	; 0x28
 800038a:	f004 ff7e 	bl	800528a <xQueueGenericCreate>
 800038e:	6238      	str	r0, [r7, #32]
  buffer.queueh_clbrt = myQueue2;
 8000390:	4a29      	ldr	r2, [pc, #164]	; (8000438 <main+0x134>)
 8000392:	6a3b      	ldr	r3, [r7, #32]
 8000394:	6053      	str	r3, [r2, #4]
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityIdle, 0, 80);
 8000396:	4b2e      	ldr	r3, [pc, #184]	; (8000450 <main+0x14c>)
 8000398:	1d3c      	adds	r4, r7, #4
 800039a:	461d      	mov	r5, r3
 800039c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800039e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80003a0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80003a4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80003a8:	1d3b      	adds	r3, r7, #4
 80003aa:	2100      	movs	r1, #0
 80003ac:	4618      	mov	r0, r3
 80003ae:	f004 fbeb 	bl	8004b88 <osThreadCreate>
 80003b2:	4603      	mov	r3, r0
 80003b4:	4a27      	ldr	r2, [pc, #156]	; (8000454 <main+0x150>)
 80003b6:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  xTaskCreate(calibration, "calibration", 180, NULL, 5, NULL);
 80003b8:	2300      	movs	r3, #0
 80003ba:	9301      	str	r3, [sp, #4]
 80003bc:	2305      	movs	r3, #5
 80003be:	9300      	str	r3, [sp, #0]
 80003c0:	2300      	movs	r3, #0
 80003c2:	22b4      	movs	r2, #180	; 0xb4
 80003c4:	4924      	ldr	r1, [pc, #144]	; (8000458 <main+0x154>)
 80003c6:	4825      	ldr	r0, [pc, #148]	; (800045c <main+0x158>)
 80003c8:	f005 fdae 	bl	8005f28 <xTaskCreate>
  xTaskCreate(weighing, "weighing", 64, NULL, 2, NULL);
 80003cc:	2300      	movs	r3, #0
 80003ce:	9301      	str	r3, [sp, #4]
 80003d0:	2302      	movs	r3, #2
 80003d2:	9300      	str	r3, [sp, #0]
 80003d4:	2300      	movs	r3, #0
 80003d6:	2240      	movs	r2, #64	; 0x40
 80003d8:	4921      	ldr	r1, [pc, #132]	; (8000460 <main+0x15c>)
 80003da:	4822      	ldr	r0, [pc, #136]	; (8000464 <main+0x160>)
 80003dc:	f005 fda4 	bl	8005f28 <xTaskCreate>
  xTaskCreate(sendUSART1weighing, "send data W", 128, NULL, 3, NULL);
 80003e0:	2300      	movs	r3, #0
 80003e2:	9301      	str	r3, [sp, #4]
 80003e4:	2303      	movs	r3, #3
 80003e6:	9300      	str	r3, [sp, #0]
 80003e8:	2300      	movs	r3, #0
 80003ea:	2280      	movs	r2, #128	; 0x80
 80003ec:	491e      	ldr	r1, [pc, #120]	; (8000468 <main+0x164>)
 80003ee:	481f      	ldr	r0, [pc, #124]	; (800046c <main+0x168>)
 80003f0:	f005 fd9a 	bl	8005f28 <xTaskCreate>
  xTaskCreate(receiveUSART1, "receive data", 64, NULL, 2, NULL);
 80003f4:	2300      	movs	r3, #0
 80003f6:	9301      	str	r3, [sp, #4]
 80003f8:	2302      	movs	r3, #2
 80003fa:	9300      	str	r3, [sp, #0]
 80003fc:	2300      	movs	r3, #0
 80003fe:	2240      	movs	r2, #64	; 0x40
 8000400:	491b      	ldr	r1, [pc, #108]	; (8000470 <main+0x16c>)
 8000402:	481c      	ldr	r0, [pc, #112]	; (8000474 <main+0x170>)
 8000404:	f005 fd90 	bl	8005f28 <xTaskCreate>
  xTaskCreate(sendUSART1int, "send data i", 160, NULL, 4, NULL);
 8000408:	2300      	movs	r3, #0
 800040a:	9301      	str	r3, [sp, #4]
 800040c:	2304      	movs	r3, #4
 800040e:	9300      	str	r3, [sp, #0]
 8000410:	2300      	movs	r3, #0
 8000412:	22a0      	movs	r2, #160	; 0xa0
 8000414:	4918      	ldr	r1, [pc, #96]	; (8000478 <main+0x174>)
 8000416:	4819      	ldr	r0, [pc, #100]	; (800047c <main+0x178>)
 8000418:	f005 fd86 	bl	8005f28 <xTaskCreate>
  xTaskCreate(sendUSART1char, "send data c", 128, NULL, 4, NULL);
 800041c:	2300      	movs	r3, #0
 800041e:	9301      	str	r3, [sp, #4]
 8000420:	2304      	movs	r3, #4
 8000422:	9300      	str	r3, [sp, #0]
 8000424:	2300      	movs	r3, #0
 8000426:	2280      	movs	r2, #128	; 0x80
 8000428:	4915      	ldr	r1, [pc, #84]	; (8000480 <main+0x17c>)
 800042a:	4816      	ldr	r0, [pc, #88]	; (8000484 <main+0x180>)
 800042c:	f005 fd7c 	bl	8005f28 <xTaskCreate>
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000430:	f004 fba3 	bl	8004b7a <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000434:	e7fe      	b.n	8000434 <main+0x130>
 8000436:	bf00      	nop
 8000438:	20000520 	.word	0x20000520
 800043c:	20000450 	.word	0x20000450
 8000440:	20000400 	.word	0x20000400
 8000444:	2000052c 	.word	0x2000052c
 8000448:	20000600 	.word	0x20000600
 800044c:	20000604 	.word	0x20000604
 8000450:	08008f50 	.word	0x08008f50
 8000454:	2000051c 	.word	0x2000051c
 8000458:	08008f04 	.word	0x08008f04
 800045c:	08000759 	.word	0x08000759
 8000460:	08008f10 	.word	0x08008f10
 8000464:	08000a29 	.word	0x08000a29
 8000468:	08008f1c 	.word	0x08008f1c
 800046c:	08000ab9 	.word	0x08000ab9
 8000470:	08008f28 	.word	0x08008f28
 8000474:	08000c79 	.word	0x08000c79
 8000478:	08008f38 	.word	0x08008f38
 800047c:	08000b35 	.word	0x08000b35
 8000480:	08008f44 	.word	0x08008f44
 8000484:	08000bd9 	.word	0x08000bd9

08000488 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000488:	b580      	push	{r7, lr}
 800048a:	b09c      	sub	sp, #112	; 0x70
 800048c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800048e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000492:	2228      	movs	r2, #40	; 0x28
 8000494:	2100      	movs	r1, #0
 8000496:	4618      	mov	r0, r3
 8000498:	f008 f852 	bl	8008540 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800049c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80004a0:	2200      	movs	r2, #0
 80004a2:	601a      	str	r2, [r3, #0]
 80004a4:	605a      	str	r2, [r3, #4]
 80004a6:	609a      	str	r2, [r3, #8]
 80004a8:	60da      	str	r2, [r3, #12]
 80004aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80004ac:	463b      	mov	r3, r7
 80004ae:	2234      	movs	r2, #52	; 0x34
 80004b0:	2100      	movs	r1, #0
 80004b2:	4618      	mov	r0, r3
 80004b4:	f008 f844 	bl	8008540 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80004b8:	2302      	movs	r3, #2
 80004ba:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004bc:	2301      	movs	r3, #1
 80004be:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80004c0:	2310      	movs	r3, #16
 80004c2:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80004c4:	2302      	movs	r3, #2
 80004c6:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80004c8:	2300      	movs	r3, #0
 80004ca:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80004cc:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80004d0:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004d2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80004d6:	4618      	mov	r0, r3
 80004d8:	f002 f852 	bl	8002580 <HAL_RCC_OscConfig>
 80004dc:	4603      	mov	r3, r0
 80004de:	2b00      	cmp	r3, #0
 80004e0:	d001      	beq.n	80004e6 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80004e2:	f000 fc0d 	bl	8000d00 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004e6:	230f      	movs	r3, #15
 80004e8:	637b      	str	r3, [r7, #52]	; 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004ea:	2302      	movs	r3, #2
 80004ec:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004ee:	2300      	movs	r3, #0
 80004f0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80004f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80004f6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004f8:	2300      	movs	r3, #0
 80004fa:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80004fc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000500:	2102      	movs	r1, #2
 8000502:	4618      	mov	r0, r3
 8000504:	f003 f87a 	bl	80035fc <HAL_RCC_ClockConfig>
 8000508:	4603      	mov	r3, r0
 800050a:	2b00      	cmp	r3, #0
 800050c:	d001      	beq.n	8000512 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800050e:	f000 fbf7 	bl	8000d00 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_ADC1;
 8000512:	2381      	movs	r3, #129	; 0x81
 8000514:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000516:	2300      	movs	r3, #0
 8000518:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.Adc1ClockSelection = RCC_ADC1PLLCLK_DIV1;
 800051a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800051e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000520:	463b      	mov	r3, r7
 8000522:	4618      	mov	r0, r3
 8000524:	f003 fad2 	bl	8003acc <HAL_RCCEx_PeriphCLKConfig>
 8000528:	4603      	mov	r3, r0
 800052a:	2b00      	cmp	r3, #0
 800052c:	d001      	beq.n	8000532 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800052e:	f000 fbe7 	bl	8000d00 <Error_Handler>
  }
}
 8000532:	bf00      	nop
 8000534:	3770      	adds	r7, #112	; 0x70
 8000536:	46bd      	mov	sp, r7
 8000538:	bd80      	pop	{r7, pc}
	...

0800053c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b086      	sub	sp, #24
 8000540:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000542:	463b      	mov	r3, r7
 8000544:	2200      	movs	r2, #0
 8000546:	601a      	str	r2, [r3, #0]
 8000548:	605a      	str	r2, [r3, #4]
 800054a:	609a      	str	r2, [r3, #8]
 800054c:	60da      	str	r2, [r3, #12]
 800054e:	611a      	str	r2, [r3, #16]
 8000550:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000552:	4b2e      	ldr	r3, [pc, #184]	; (800060c <MX_ADC1_Init+0xd0>)
 8000554:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000558:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800055a:	4b2c      	ldr	r3, [pc, #176]	; (800060c <MX_ADC1_Init+0xd0>)
 800055c:	2200      	movs	r2, #0
 800055e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000560:	4b2a      	ldr	r3, [pc, #168]	; (800060c <MX_ADC1_Init+0xd0>)
 8000562:	2200      	movs	r2, #0
 8000564:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000566:	4b29      	ldr	r3, [pc, #164]	; (800060c <MX_ADC1_Init+0xd0>)
 8000568:	2201      	movs	r2, #1
 800056a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800056c:	4b27      	ldr	r3, [pc, #156]	; (800060c <MX_ADC1_Init+0xd0>)
 800056e:	2201      	movs	r2, #1
 8000570:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000572:	4b26      	ldr	r3, [pc, #152]	; (800060c <MX_ADC1_Init+0xd0>)
 8000574:	2200      	movs	r2, #0
 8000576:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800057a:	4b24      	ldr	r3, [pc, #144]	; (800060c <MX_ADC1_Init+0xd0>)
 800057c:	2200      	movs	r2, #0
 800057e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000580:	4b22      	ldr	r3, [pc, #136]	; (800060c <MX_ADC1_Init+0xd0>)
 8000582:	2201      	movs	r2, #1
 8000584:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000586:	4b21      	ldr	r3, [pc, #132]	; (800060c <MX_ADC1_Init+0xd0>)
 8000588:	2200      	movs	r2, #0
 800058a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 800058c:	4b1f      	ldr	r3, [pc, #124]	; (800060c <MX_ADC1_Init+0xd0>)
 800058e:	2202      	movs	r2, #2
 8000590:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000592:	4b1e      	ldr	r3, [pc, #120]	; (800060c <MX_ADC1_Init+0xd0>)
 8000594:	2201      	movs	r2, #1
 8000596:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800059a:	4b1c      	ldr	r3, [pc, #112]	; (800060c <MX_ADC1_Init+0xd0>)
 800059c:	2204      	movs	r2, #4
 800059e:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80005a0:	4b1a      	ldr	r3, [pc, #104]	; (800060c <MX_ADC1_Init+0xd0>)
 80005a2:	2200      	movs	r2, #0
 80005a4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80005a6:	4b19      	ldr	r3, [pc, #100]	; (800060c <MX_ADC1_Init+0xd0>)
 80005a8:	2200      	movs	r2, #0
 80005aa:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80005ac:	4817      	ldr	r0, [pc, #92]	; (800060c <MX_ADC1_Init+0xd0>)
 80005ae:	f000 fddb 	bl	8001168 <HAL_ADC_Init>
 80005b2:	4603      	mov	r3, r0
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d001      	beq.n	80005bc <MX_ADC1_Init+0x80>
  {
    Error_Handler();
 80005b8:	f000 fba2 	bl	8000d00 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80005bc:	2301      	movs	r3, #1
 80005be:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80005c0:	2301      	movs	r3, #1
 80005c2:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80005c4:	2300      	movs	r3, #0
 80005c6:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80005c8:	2300      	movs	r3, #0
 80005ca:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80005cc:	2300      	movs	r3, #0
 80005ce:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80005d0:	2300      	movs	r3, #0
 80005d2:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005d4:	463b      	mov	r3, r7
 80005d6:	4619      	mov	r1, r3
 80005d8:	480c      	ldr	r0, [pc, #48]	; (800060c <MX_ADC1_Init+0xd0>)
 80005da:	f000 ffe7 	bl	80015ac <HAL_ADC_ConfigChannel>
 80005de:	4603      	mov	r3, r0
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d001      	beq.n	80005e8 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80005e4:	f000 fb8c 	bl	8000d00 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80005e8:	2302      	movs	r3, #2
 80005ea:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80005ec:	2302      	movs	r3, #2
 80005ee:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005f0:	463b      	mov	r3, r7
 80005f2:	4619      	mov	r1, r3
 80005f4:	4805      	ldr	r0, [pc, #20]	; (800060c <MX_ADC1_Init+0xd0>)
 80005f6:	f000 ffd9 	bl	80015ac <HAL_ADC_ConfigChannel>
 80005fa:	4603      	mov	r3, r0
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d001      	beq.n	8000604 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8000600:	f000 fb7e 	bl	8000d00 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000604:	bf00      	nop
 8000606:	3718      	adds	r7, #24
 8000608:	46bd      	mov	sp, r7
 800060a:	bd80      	pop	{r7, pc}
 800060c:	20000400 	.word	0x20000400

08000610 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000614:	4b14      	ldr	r3, [pc, #80]	; (8000668 <MX_USART1_UART_Init+0x58>)
 8000616:	4a15      	ldr	r2, [pc, #84]	; (800066c <MX_USART1_UART_Init+0x5c>)
 8000618:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800061a:	4b13      	ldr	r3, [pc, #76]	; (8000668 <MX_USART1_UART_Init+0x58>)
 800061c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000620:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000622:	4b11      	ldr	r3, [pc, #68]	; (8000668 <MX_USART1_UART_Init+0x58>)
 8000624:	2200      	movs	r2, #0
 8000626:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000628:	4b0f      	ldr	r3, [pc, #60]	; (8000668 <MX_USART1_UART_Init+0x58>)
 800062a:	2200      	movs	r2, #0
 800062c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800062e:	4b0e      	ldr	r3, [pc, #56]	; (8000668 <MX_USART1_UART_Init+0x58>)
 8000630:	2200      	movs	r2, #0
 8000632:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000634:	4b0c      	ldr	r3, [pc, #48]	; (8000668 <MX_USART1_UART_Init+0x58>)
 8000636:	220c      	movs	r2, #12
 8000638:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800063a:	4b0b      	ldr	r3, [pc, #44]	; (8000668 <MX_USART1_UART_Init+0x58>)
 800063c:	2200      	movs	r2, #0
 800063e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000640:	4b09      	ldr	r3, [pc, #36]	; (8000668 <MX_USART1_UART_Init+0x58>)
 8000642:	2200      	movs	r2, #0
 8000644:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000646:	4b08      	ldr	r3, [pc, #32]	; (8000668 <MX_USART1_UART_Init+0x58>)
 8000648:	2200      	movs	r2, #0
 800064a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800064c:	4b06      	ldr	r3, [pc, #24]	; (8000668 <MX_USART1_UART_Init+0x58>)
 800064e:	2200      	movs	r2, #0
 8000650:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000652:	4805      	ldr	r0, [pc, #20]	; (8000668 <MX_USART1_UART_Init+0x58>)
 8000654:	f003 fe56 	bl	8004304 <HAL_UART_Init>
 8000658:	4603      	mov	r3, r0
 800065a:	2b00      	cmp	r3, #0
 800065c:	d001      	beq.n	8000662 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800065e:	f000 fb4f 	bl	8000d00 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000662:	bf00      	nop
 8000664:	bd80      	pop	{r7, pc}
 8000666:	bf00      	nop
 8000668:	20000494 	.word	0x20000494
 800066c:	40013800 	.word	0x40013800

08000670 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b082      	sub	sp, #8
 8000674:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000676:	4b0c      	ldr	r3, [pc, #48]	; (80006a8 <MX_DMA_Init+0x38>)
 8000678:	695b      	ldr	r3, [r3, #20]
 800067a:	4a0b      	ldr	r2, [pc, #44]	; (80006a8 <MX_DMA_Init+0x38>)
 800067c:	f043 0301 	orr.w	r3, r3, #1
 8000680:	6153      	str	r3, [r2, #20]
 8000682:	4b09      	ldr	r3, [pc, #36]	; (80006a8 <MX_DMA_Init+0x38>)
 8000684:	695b      	ldr	r3, [r3, #20]
 8000686:	f003 0301 	and.w	r3, r3, #1
 800068a:	607b      	str	r3, [r7, #4]
 800068c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 800068e:	2200      	movs	r2, #0
 8000690:	2105      	movs	r1, #5
 8000692:	200b      	movs	r0, #11
 8000694:	f001 fc28 	bl	8001ee8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000698:	200b      	movs	r0, #11
 800069a:	f001 fc41 	bl	8001f20 <HAL_NVIC_EnableIRQ>

}
 800069e:	bf00      	nop
 80006a0:	3708      	adds	r7, #8
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	bf00      	nop
 80006a8:	40021000 	.word	0x40021000

080006ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b088      	sub	sp, #32
 80006b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006b2:	f107 030c 	add.w	r3, r7, #12
 80006b6:	2200      	movs	r2, #0
 80006b8:	601a      	str	r2, [r3, #0]
 80006ba:	605a      	str	r2, [r3, #4]
 80006bc:	609a      	str	r2, [r3, #8]
 80006be:	60da      	str	r2, [r3, #12]
 80006c0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006c2:	4b23      	ldr	r3, [pc, #140]	; (8000750 <MX_GPIO_Init+0xa4>)
 80006c4:	695b      	ldr	r3, [r3, #20]
 80006c6:	4a22      	ldr	r2, [pc, #136]	; (8000750 <MX_GPIO_Init+0xa4>)
 80006c8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80006cc:	6153      	str	r3, [r2, #20]
 80006ce:	4b20      	ldr	r3, [pc, #128]	; (8000750 <MX_GPIO_Init+0xa4>)
 80006d0:	695b      	ldr	r3, [r3, #20]
 80006d2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80006d6:	60bb      	str	r3, [r7, #8]
 80006d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006da:	4b1d      	ldr	r3, [pc, #116]	; (8000750 <MX_GPIO_Init+0xa4>)
 80006dc:	695b      	ldr	r3, [r3, #20]
 80006de:	4a1c      	ldr	r2, [pc, #112]	; (8000750 <MX_GPIO_Init+0xa4>)
 80006e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006e4:	6153      	str	r3, [r2, #20]
 80006e6:	4b1a      	ldr	r3, [pc, #104]	; (8000750 <MX_GPIO_Init+0xa4>)
 80006e8:	695b      	ldr	r3, [r3, #20]
 80006ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80006ee:	607b      	str	r3, [r7, #4]
 80006f0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80006f2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006f6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80006f8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80006fc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006fe:	2300      	movs	r3, #0
 8000700:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000702:	f107 030c 	add.w	r3, r7, #12
 8000706:	4619      	mov	r1, r3
 8000708:	4812      	ldr	r0, [pc, #72]	; (8000754 <MX_GPIO_Init+0xa8>)
 800070a:	f001 fdaf 	bl	800226c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800070e:	2304      	movs	r3, #4
 8000710:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000712:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000716:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000718:	2302      	movs	r3, #2
 800071a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800071c:	f107 030c 	add.w	r3, r7, #12
 8000720:	4619      	mov	r1, r3
 8000722:	480c      	ldr	r0, [pc, #48]	; (8000754 <MX_GPIO_Init+0xa8>)
 8000724:	f001 fda2 	bl	800226c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_TSC_IRQn, 5, 0);
 8000728:	2200      	movs	r2, #0
 800072a:	2105      	movs	r1, #5
 800072c:	2008      	movs	r0, #8
 800072e:	f001 fbdb 	bl	8001ee8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_TSC_IRQn);
 8000732:	2008      	movs	r0, #8
 8000734:	f001 fbf4 	bl	8001f20 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000738:	2200      	movs	r2, #0
 800073a:	2105      	movs	r1, #5
 800073c:	2028      	movs	r0, #40	; 0x28
 800073e:	f001 fbd3 	bl	8001ee8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000742:	2028      	movs	r0, #40	; 0x28
 8000744:	f001 fbec 	bl	8001f20 <HAL_NVIC_EnableIRQ>

}
 8000748:	bf00      	nop
 800074a:	3720      	adds	r7, #32
 800074c:	46bd      	mov	sp, r7
 800074e:	bd80      	pop	{r7, pc}
 8000750:	40021000 	.word	0x40021000
 8000754:	48000800 	.word	0x48000800

08000758 <calibration>:

/* USER CODE BEGIN 4 */
void calibration(void)
{
 8000758:	b5b0      	push	{r4, r5, r7, lr}
 800075a:	b09a      	sub	sp, #104	; 0x68
 800075c:	af02      	add	r7, sp, #8
	for( ;; )
	{
		xSemaphoreTake(xSemaphore1, portMAX_DELAY);
 800075e:	4ba6      	ldr	r3, [pc, #664]	; (80009f8 <calibration+0x2a0>)
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	f04f 31ff 	mov.w	r1, #4294967295
 8000766:	4618      	mov	r0, r3
 8000768:	f005 f8f0 	bl	800594c <xQueueSemaphoreTake>
		for(int i = 0; i < SIZE_BUFFER; i++)
 800076c:	2300      	movs	r3, #0
 800076e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8000770:	e010      	b.n	8000794 <calibration+0x3c>
		{
			arm_mean_q15((int16_t*)&buffer.adc_buf, sizeof(buffer.adc_buf)/2, (int16_t*)&buffer.adc_calibration[i]);
 8000772:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000774:	3338      	adds	r3, #56	; 0x38
 8000776:	005b      	lsls	r3, r3, #1
 8000778:	4aa0      	ldr	r2, [pc, #640]	; (80009fc <calibration+0x2a4>)
 800077a:	4413      	add	r3, r2
 800077c:	3302      	adds	r3, #2
 800077e:	461a      	mov	r2, r3
 8000780:	2132      	movs	r1, #50	; 0x32
 8000782:	489f      	ldr	r0, [pc, #636]	; (8000a00 <calibration+0x2a8>)
 8000784:	f007 fe72 	bl	800846c <arm_mean_q15>
			vTaskDelay(50);
 8000788:	2032      	movs	r0, #50	; 0x32
 800078a:	f005 fda3 	bl	80062d4 <vTaskDelay>
		for(int i = 0; i < SIZE_BUFFER; i++)
 800078e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000790:	3301      	adds	r3, #1
 8000792:	65fb      	str	r3, [r7, #92]	; 0x5c
 8000794:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000796:	2b31      	cmp	r3, #49	; 0x31
 8000798:	ddeb      	ble.n	8000772 <calibration+0x1a>
		}
		arm_mean_q15((int16_t*)&buffer.adc_calibration, sizeof(buffer.adc_calibration)/2, (int16_t*)&buffer.adc_calibration_result);
 800079a:	4a9a      	ldr	r2, [pc, #616]	; (8000a04 <calibration+0x2ac>)
 800079c:	2132      	movs	r1, #50	; 0x32
 800079e:	489a      	ldr	r0, [pc, #616]	; (8000a08 <calibration+0x2b0>)
 80007a0:	f007 fe64 	bl	800846c <arm_mean_q15>
		char string_buff[] = "Calibration 0 value: = ";
 80007a4:	4b99      	ldr	r3, [pc, #612]	; (8000a0c <calibration+0x2b4>)
 80007a6:	f107 0438 	add.w	r4, r7, #56	; 0x38
 80007aa:	461d      	mov	r5, r3
 80007ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007b0:	e895 0003 	ldmia.w	r5, {r0, r1}
 80007b4:	e884 0003 	stmia.w	r4, {r0, r1}
		for(uint8_t i = 0; i<(sizeof(string_buff)); i++)
 80007b8:	2300      	movs	r3, #0
 80007ba:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
 80007be:	e00f      	b.n	80007e0 <calibration+0x88>
		{
			xQueueSend(buffer.queueh_clbrt, (void*)(&string_buff[i]), 5);
 80007c0:	4b8e      	ldr	r3, [pc, #568]	; (80009fc <calibration+0x2a4>)
 80007c2:	6858      	ldr	r0, [r3, #4]
 80007c4:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 80007c8:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80007cc:	18d1      	adds	r1, r2, r3
 80007ce:	2300      	movs	r3, #0
 80007d0:	2205      	movs	r2, #5
 80007d2:	f004 fdb7 	bl	8005344 <xQueueGenericSend>
		for(uint8_t i = 0; i<(sizeof(string_buff)); i++)
 80007d6:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 80007da:	3301      	adds	r3, #1
 80007dc:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
 80007e0:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 80007e4:	2b17      	cmp	r3, #23
 80007e6:	d9eb      	bls.n	80007c0 <calibration+0x68>
		}
		xEventGroupSetBits(xCreatedEventGroup1, 0x1);
 80007e8:	4b89      	ldr	r3, [pc, #548]	; (8000a10 <calibration+0x2b8>)
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	2101      	movs	r1, #1
 80007ee:	4618      	mov	r0, r3
 80007f0:	f004 fafe 	bl	8004df0 <xEventGroupSetBits>
		xEventGroupWaitBits(xCreatedEventGroup1, 0x2, pdTRUE, pdTRUE, portMAX_DELAY);
 80007f4:	4b86      	ldr	r3, [pc, #536]	; (8000a10 <calibration+0x2b8>)
 80007f6:	6818      	ldr	r0, [r3, #0]
 80007f8:	f04f 33ff 	mov.w	r3, #4294967295
 80007fc:	9300      	str	r3, [sp, #0]
 80007fe:	2301      	movs	r3, #1
 8000800:	2201      	movs	r2, #1
 8000802:	2102      	movs	r1, #2
 8000804:	f004 fa26 	bl	8004c54 <xEventGroupWaitBits>
		xQueueSend(buffer.queueh_clbrt, (void*)(((char*) &buffer.adc_calibration_result)), 1);
 8000808:	4b7c      	ldr	r3, [pc, #496]	; (80009fc <calibration+0x2a4>)
 800080a:	6858      	ldr	r0, [r3, #4]
 800080c:	2300      	movs	r3, #0
 800080e:	2201      	movs	r2, #1
 8000810:	497c      	ldr	r1, [pc, #496]	; (8000a04 <calibration+0x2ac>)
 8000812:	f004 fd97 	bl	8005344 <xQueueGenericSend>
		xQueueSend(buffer.queueh_clbrt, (void*)(((char*) &buffer.adc_calibration_result)+1), 1);
 8000816:	4b79      	ldr	r3, [pc, #484]	; (80009fc <calibration+0x2a4>)
 8000818:	6858      	ldr	r0, [r3, #4]
 800081a:	497e      	ldr	r1, [pc, #504]	; (8000a14 <calibration+0x2bc>)
 800081c:	2300      	movs	r3, #0
 800081e:	2201      	movs	r2, #1
 8000820:	f004 fd90 	bl	8005344 <xQueueGenericSend>
		xEventGroupSetBits(xCreatedEventGroup1, 0x4);
 8000824:	4b7a      	ldr	r3, [pc, #488]	; (8000a10 <calibration+0x2b8>)
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	2104      	movs	r1, #4
 800082a:	4618      	mov	r0, r3
 800082c:	f004 fae0 	bl	8004df0 <xEventGroupSetBits>
		xEventGroupWaitBits(xCreatedEventGroup1, 0x8, pdTRUE, pdTRUE, portMAX_DELAY);
 8000830:	4b77      	ldr	r3, [pc, #476]	; (8000a10 <calibration+0x2b8>)
 8000832:	6818      	ldr	r0, [r3, #0]
 8000834:	f04f 33ff 	mov.w	r3, #4294967295
 8000838:	9300      	str	r3, [sp, #0]
 800083a:	2301      	movs	r3, #1
 800083c:	2201      	movs	r2, #1
 800083e:	2108      	movs	r1, #8
 8000840:	f004 fa08 	bl	8004c54 <xEventGroupWaitBits>
		char string_buff2[] = "Place 197 grams etalon\r\n";
 8000844:	4b74      	ldr	r3, [pc, #464]	; (8000a18 <calibration+0x2c0>)
 8000846:	f107 041c 	add.w	r4, r7, #28
 800084a:	461d      	mov	r5, r3
 800084c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800084e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000850:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000854:	c403      	stmia	r4!, {r0, r1}
 8000856:	7022      	strb	r2, [r4, #0]
		xQueueReset(buffer.queueh_clbrt);
 8000858:	4b68      	ldr	r3, [pc, #416]	; (80009fc <calibration+0x2a4>)
 800085a:	685b      	ldr	r3, [r3, #4]
 800085c:	2100      	movs	r1, #0
 800085e:	4618      	mov	r0, r3
 8000860:	f004 fc34 	bl	80050cc <xQueueGenericReset>
		for(uint8_t i = 0; i<(sizeof(string_buff2)); i++)
 8000864:	2300      	movs	r3, #0
 8000866:	f887 305a 	strb.w	r3, [r7, #90]	; 0x5a
 800086a:	e00f      	b.n	800088c <calibration+0x134>
		{
			xQueueSend(buffer.queueh_clbrt, (void*)(&string_buff2[i]), 5);
 800086c:	4b63      	ldr	r3, [pc, #396]	; (80009fc <calibration+0x2a4>)
 800086e:	6858      	ldr	r0, [r3, #4]
 8000870:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 8000874:	f107 021c 	add.w	r2, r7, #28
 8000878:	18d1      	adds	r1, r2, r3
 800087a:	2300      	movs	r3, #0
 800087c:	2205      	movs	r2, #5
 800087e:	f004 fd61 	bl	8005344 <xQueueGenericSend>
		for(uint8_t i = 0; i<(sizeof(string_buff2)); i++)
 8000882:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 8000886:	3301      	adds	r3, #1
 8000888:	f887 305a 	strb.w	r3, [r7, #90]	; 0x5a
 800088c:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 8000890:	2b18      	cmp	r3, #24
 8000892:	d9eb      	bls.n	800086c <calibration+0x114>
		}
		xEventGroupSetBits(xCreatedEventGroup1, 0x1);
 8000894:	4b5e      	ldr	r3, [pc, #376]	; (8000a10 <calibration+0x2b8>)
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	2101      	movs	r1, #1
 800089a:	4618      	mov	r0, r3
 800089c:	f004 faa8 	bl	8004df0 <xEventGroupSetBits>
		xEventGroupWaitBits(xCreatedEventGroup1, 0x2, pdTRUE, pdTRUE, portMAX_DELAY);
 80008a0:	4b5b      	ldr	r3, [pc, #364]	; (8000a10 <calibration+0x2b8>)
 80008a2:	6818      	ldr	r0, [r3, #0]
 80008a4:	f04f 33ff 	mov.w	r3, #4294967295
 80008a8:	9300      	str	r3, [sp, #0]
 80008aa:	2301      	movs	r3, #1
 80008ac:	2201      	movs	r2, #1
 80008ae:	2102      	movs	r1, #2
 80008b0:	f004 f9d0 	bl	8004c54 <xEventGroupWaitBits>
		xEventGroupWaitBits(xCreatedEventGroup1, 0x10, pdTRUE, pdTRUE, portMAX_DELAY);
 80008b4:	4b56      	ldr	r3, [pc, #344]	; (8000a10 <calibration+0x2b8>)
 80008b6:	6818      	ldr	r0, [r3, #0]
 80008b8:	f04f 33ff 	mov.w	r3, #4294967295
 80008bc:	9300      	str	r3, [sp, #0]
 80008be:	2301      	movs	r3, #1
 80008c0:	2201      	movs	r2, #1
 80008c2:	2110      	movs	r1, #16
 80008c4:	f004 f9c6 	bl	8004c54 <xEventGroupWaitBits>
		for(int i = 0; i < SIZE_BUFFER; i++)
 80008c8:	2300      	movs	r3, #0
 80008ca:	657b      	str	r3, [r7, #84]	; 0x54
 80008cc:	e010      	b.n	80008f0 <calibration+0x198>
		{
			arm_mean_q15((int16_t*)&buffer.adc_buf, sizeof(buffer.adc_buf)/2, (int16_t*)&buffer.adc_calibration[i]);
 80008ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80008d0:	3338      	adds	r3, #56	; 0x38
 80008d2:	005b      	lsls	r3, r3, #1
 80008d4:	4a49      	ldr	r2, [pc, #292]	; (80009fc <calibration+0x2a4>)
 80008d6:	4413      	add	r3, r2
 80008d8:	3302      	adds	r3, #2
 80008da:	461a      	mov	r2, r3
 80008dc:	2132      	movs	r1, #50	; 0x32
 80008de:	4848      	ldr	r0, [pc, #288]	; (8000a00 <calibration+0x2a8>)
 80008e0:	f007 fdc4 	bl	800846c <arm_mean_q15>
			vTaskDelay(50);
 80008e4:	2032      	movs	r0, #50	; 0x32
 80008e6:	f005 fcf5 	bl	80062d4 <vTaskDelay>
		for(int i = 0; i < SIZE_BUFFER; i++)
 80008ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80008ec:	3301      	adds	r3, #1
 80008ee:	657b      	str	r3, [r7, #84]	; 0x54
 80008f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80008f2:	2b31      	cmp	r3, #49	; 0x31
 80008f4:	ddeb      	ble.n	80008ce <calibration+0x176>
		}
		arm_mean_q15((int16_t*)&buffer.adc_calibration, sizeof(buffer.adc_calibration)/2, (int16_t*)&buffer.adc_calibration_result1);
 80008f6:	4a49      	ldr	r2, [pc, #292]	; (8000a1c <calibration+0x2c4>)
 80008f8:	2132      	movs	r1, #50	; 0x32
 80008fa:	4843      	ldr	r0, [pc, #268]	; (8000a08 <calibration+0x2b0>)
 80008fc:	f007 fdb6 	bl	800846c <arm_mean_q15>
		char string_buff3[] = "Calibration 1 value: = ";
 8000900:	4b47      	ldr	r3, [pc, #284]	; (8000a20 <calibration+0x2c8>)
 8000902:	1d3c      	adds	r4, r7, #4
 8000904:	461d      	mov	r5, r3
 8000906:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000908:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800090a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800090e:	e884 0003 	stmia.w	r4, {r0, r1}
				for(uint8_t i = 0; i<(sizeof(string_buff3)); i++)
 8000912:	2300      	movs	r3, #0
 8000914:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
 8000918:	e00e      	b.n	8000938 <calibration+0x1e0>
		{
			xQueueSend(buffer.queueh_clbrt, (void*)(&string_buff3[i]), 5);
 800091a:	4b38      	ldr	r3, [pc, #224]	; (80009fc <calibration+0x2a4>)
 800091c:	6858      	ldr	r0, [r3, #4]
 800091e:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8000922:	1d3a      	adds	r2, r7, #4
 8000924:	18d1      	adds	r1, r2, r3
 8000926:	2300      	movs	r3, #0
 8000928:	2205      	movs	r2, #5
 800092a:	f004 fd0b 	bl	8005344 <xQueueGenericSend>
				for(uint8_t i = 0; i<(sizeof(string_buff3)); i++)
 800092e:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8000932:	3301      	adds	r3, #1
 8000934:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
 8000938:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 800093c:	2b17      	cmp	r3, #23
 800093e:	d9ec      	bls.n	800091a <calibration+0x1c2>
		}
		xEventGroupSetBits(xCreatedEventGroup1, 0x1);
 8000940:	4b33      	ldr	r3, [pc, #204]	; (8000a10 <calibration+0x2b8>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	2101      	movs	r1, #1
 8000946:	4618      	mov	r0, r3
 8000948:	f004 fa52 	bl	8004df0 <xEventGroupSetBits>
		xEventGroupWaitBits(xCreatedEventGroup1, 0x2, pdTRUE, pdTRUE, portMAX_DELAY);
 800094c:	4b30      	ldr	r3, [pc, #192]	; (8000a10 <calibration+0x2b8>)
 800094e:	6818      	ldr	r0, [r3, #0]
 8000950:	f04f 33ff 	mov.w	r3, #4294967295
 8000954:	9300      	str	r3, [sp, #0]
 8000956:	2301      	movs	r3, #1
 8000958:	2201      	movs	r2, #1
 800095a:	2102      	movs	r1, #2
 800095c:	f004 f97a 	bl	8004c54 <xEventGroupWaitBits>
		xQueueSend(buffer.queueh_clbrt, (void*)(((char*) &buffer.adc_calibration_result1)), 1);
 8000960:	4b26      	ldr	r3, [pc, #152]	; (80009fc <calibration+0x2a4>)
 8000962:	6858      	ldr	r0, [r3, #4]
 8000964:	2300      	movs	r3, #0
 8000966:	2201      	movs	r2, #1
 8000968:	492c      	ldr	r1, [pc, #176]	; (8000a1c <calibration+0x2c4>)
 800096a:	f004 fceb 	bl	8005344 <xQueueGenericSend>
		xQueueSend(buffer.queueh_clbrt, (void*)(((char*) &buffer.adc_calibration_result1)+1), 1);
 800096e:	4b23      	ldr	r3, [pc, #140]	; (80009fc <calibration+0x2a4>)
 8000970:	6858      	ldr	r0, [r3, #4]
 8000972:	492c      	ldr	r1, [pc, #176]	; (8000a24 <calibration+0x2cc>)
 8000974:	2300      	movs	r3, #0
 8000976:	2201      	movs	r2, #1
 8000978:	f004 fce4 	bl	8005344 <xQueueGenericSend>
		xEventGroupSetBits(xCreatedEventGroup1, 0x4);
 800097c:	4b24      	ldr	r3, [pc, #144]	; (8000a10 <calibration+0x2b8>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	2104      	movs	r1, #4
 8000982:	4618      	mov	r0, r3
 8000984:	f004 fa34 	bl	8004df0 <xEventGroupSetBits>
		xEventGroupWaitBits(xCreatedEventGroup1, 0x8, pdTRUE, pdTRUE, portMAX_DELAY);
 8000988:	4b21      	ldr	r3, [pc, #132]	; (8000a10 <calibration+0x2b8>)
 800098a:	6818      	ldr	r0, [r3, #0]
 800098c:	f04f 33ff 	mov.w	r3, #4294967295
 8000990:	9300      	str	r3, [sp, #0]
 8000992:	2301      	movs	r3, #1
 8000994:	2201      	movs	r2, #1
 8000996:	2108      	movs	r1, #8
 8000998:	f004 f95c 	bl	8004c54 <xEventGroupWaitBits>
		buffer.offset = buffer.adc_calibration_result1 - buffer.adc_calibration_result;
 800099c:	4b17      	ldr	r3, [pc, #92]	; (80009fc <calibration+0x2a4>)
 800099e:	f8b3 20d8 	ldrh.w	r2, [r3, #216]	; 0xd8
 80009a2:	4b16      	ldr	r3, [pc, #88]	; (80009fc <calibration+0x2a4>)
 80009a4:	f8b3 30d6 	ldrh.w	r3, [r3, #214]	; 0xd6
 80009a8:	1ad3      	subs	r3, r2, r3
 80009aa:	b29a      	uxth	r2, r3
 80009ac:	4b13      	ldr	r3, [pc, #76]	; (80009fc <calibration+0x2a4>)
 80009ae:	f8a3 20da 	strh.w	r2, [r3, #218]	; 0xda
		buffer.k = ETALON/(buffer.adc_calibration_result1 - buffer.adc_calibration_result);
 80009b2:	4b12      	ldr	r3, [pc, #72]	; (80009fc <calibration+0x2a4>)
 80009b4:	f8b3 30d8 	ldrh.w	r3, [r3, #216]	; 0xd8
 80009b8:	461a      	mov	r2, r3
 80009ba:	4b10      	ldr	r3, [pc, #64]	; (80009fc <calibration+0x2a4>)
 80009bc:	f8b3 30d6 	ldrh.w	r3, [r3, #214]	; 0xd6
 80009c0:	1ad3      	subs	r3, r2, r3
 80009c2:	22c5      	movs	r2, #197	; 0xc5
 80009c4:	fb92 f3f3 	sdiv	r3, r2, r3
 80009c8:	b29a      	uxth	r2, r3
 80009ca:	4b0c      	ldr	r3, [pc, #48]	; (80009fc <calibration+0x2a4>)
 80009cc:	f8a3 20dc 	strh.w	r2, [r3, #220]	; 0xdc

		vTaskDelay(400);
 80009d0:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80009d4:	f005 fc7e 	bl	80062d4 <vTaskDelay>
		xSemaphoreTake(xSemaphore1, 1);
 80009d8:	4b07      	ldr	r3, [pc, #28]	; (80009f8 <calibration+0x2a0>)
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	2101      	movs	r1, #1
 80009de:	4618      	mov	r0, r3
 80009e0:	f004 ffb4 	bl	800594c <xQueueSemaphoreTake>
		xEventGroupWaitBits(xCreatedEventGroup1, 0x10, pdTRUE, pdTRUE, 1);
 80009e4:	4b0a      	ldr	r3, [pc, #40]	; (8000a10 <calibration+0x2b8>)
 80009e6:	6818      	ldr	r0, [r3, #0]
 80009e8:	2301      	movs	r3, #1
 80009ea:	9300      	str	r3, [sp, #0]
 80009ec:	2301      	movs	r3, #1
 80009ee:	2201      	movs	r2, #1
 80009f0:	2110      	movs	r1, #16
 80009f2:	f004 f92f 	bl	8004c54 <xEventGroupWaitBits>
	{
 80009f6:	e6b2      	b.n	800075e <calibration+0x6>
 80009f8:	20000600 	.word	0x20000600
 80009fc:	20000520 	.word	0x20000520
 8000a00:	2000052c 	.word	0x2000052c
 8000a04:	200005f6 	.word	0x200005f6
 8000a08:	20000592 	.word	0x20000592
 8000a0c:	08008f6c 	.word	0x08008f6c
 8000a10:	20000604 	.word	0x20000604
 8000a14:	200005f7 	.word	0x200005f7
 8000a18:	08008f84 	.word	0x08008f84
 8000a1c:	200005f8 	.word	0x200005f8
 8000a20:	08008fa0 	.word	0x08008fa0
 8000a24:	200005f9 	.word	0x200005f9

08000a28 <weighing>:
	}
	vTaskDelete(xTaskGetHandle("calibration"));
}

void weighing(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	af00      	add	r7, sp, #0
	for( ;; )
	{
		vTaskDelay(500);
 8000a2c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000a30:	f005 fc50 	bl	80062d4 <vTaskDelay>
		arm_mean_q15((int16_t*)&buffer.adc_buf, sizeof(buffer.adc_buf)/2, (int16_t*)&buffer.adc_buf_result);
 8000a34:	4a1a      	ldr	r2, [pc, #104]	; (8000aa0 <weighing+0x78>)
 8000a36:	2132      	movs	r1, #50	; 0x32
 8000a38:	481a      	ldr	r0, [pc, #104]	; (8000aa4 <weighing+0x7c>)
 8000a3a:	f007 fd17 	bl	800846c <arm_mean_q15>
		buffer.adc_buf_result = (buffer.adc_buf_result - buffer.offset)*buffer.k;
 8000a3e:	4b1a      	ldr	r3, [pc, #104]	; (8000aa8 <weighing+0x80>)
 8000a40:	f8b3 2070 	ldrh.w	r2, [r3, #112]	; 0x70
 8000a44:	4b18      	ldr	r3, [pc, #96]	; (8000aa8 <weighing+0x80>)
 8000a46:	f8b3 30da 	ldrh.w	r3, [r3, #218]	; 0xda
 8000a4a:	1ad3      	subs	r3, r2, r3
 8000a4c:	b29a      	uxth	r2, r3
 8000a4e:	4b16      	ldr	r3, [pc, #88]	; (8000aa8 <weighing+0x80>)
 8000a50:	f8b3 30dc 	ldrh.w	r3, [r3, #220]	; 0xdc
 8000a54:	fb12 f303 	smulbb	r3, r2, r3
 8000a58:	b29a      	uxth	r2, r3
 8000a5a:	4b13      	ldr	r3, [pc, #76]	; (8000aa8 <weighing+0x80>)
 8000a5c:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
		xQueueSend(buffer.queueh, (void*)(((char*) &buffer.adc_buf_result)), 1);
 8000a60:	4b11      	ldr	r3, [pc, #68]	; (8000aa8 <weighing+0x80>)
 8000a62:	6818      	ldr	r0, [r3, #0]
 8000a64:	2300      	movs	r3, #0
 8000a66:	2201      	movs	r2, #1
 8000a68:	490d      	ldr	r1, [pc, #52]	; (8000aa0 <weighing+0x78>)
 8000a6a:	f004 fc6b 	bl	8005344 <xQueueGenericSend>
		xQueueSend(buffer.queueh, (void*)(((char*) &buffer.adc_buf_result)+1), 1);
 8000a6e:	4b0e      	ldr	r3, [pc, #56]	; (8000aa8 <weighing+0x80>)
 8000a70:	6818      	ldr	r0, [r3, #0]
 8000a72:	490e      	ldr	r1, [pc, #56]	; (8000aac <weighing+0x84>)
 8000a74:	2300      	movs	r3, #0
 8000a76:	2201      	movs	r2, #1
 8000a78:	f004 fc64 	bl	8005344 <xQueueGenericSend>
		xTaskNotify(xTaskGetHandle("send data W"), 0, eNoAction);
 8000a7c:	480c      	ldr	r0, [pc, #48]	; (8000ab0 <weighing+0x88>)
 8000a7e:	f005 fded 	bl	800665c <xTaskGetHandle>
 8000a82:	2300      	movs	r3, #0
 8000a84:	2200      	movs	r2, #0
 8000a86:	2100      	movs	r1, #0
 8000a88:	f006 fc82 	bl	8007390 <xTaskGenericNotify>
		taskYIELD();
 8000a8c:	4b09      	ldr	r3, [pc, #36]	; (8000ab4 <weighing+0x8c>)
 8000a8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000a92:	601a      	str	r2, [r3, #0]
 8000a94:	f3bf 8f4f 	dsb	sy
 8000a98:	f3bf 8f6f 	isb	sy
	{
 8000a9c:	e7c6      	b.n	8000a2c <weighing+0x4>
 8000a9e:	bf00      	nop
 8000aa0:	20000590 	.word	0x20000590
 8000aa4:	2000052c 	.word	0x2000052c
 8000aa8:	20000520 	.word	0x20000520
 8000aac:	20000591 	.word	0x20000591
 8000ab0:	08008f1c 	.word	0x08008f1c
 8000ab4:	e000ed04 	.word	0xe000ed04

08000ab8 <sendUSART1weighing>:
	}
}

void sendUSART1weighing(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b084      	sub	sp, #16
 8000abc:	af00      	add	r7, sp, #0
	uint16_t res_to_uart;
	char string_buff[8];
	for( ;; )
	{
		xTaskNotifyWait(0x00, 0xffffffff, NULL, portMAX_DELAY);
 8000abe:	f04f 33ff 	mov.w	r3, #4294967295
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	f04f 31ff 	mov.w	r1, #4294967295
 8000ac8:	2000      	movs	r0, #0
 8000aca:	f006 fc01 	bl	80072d0 <xTaskNotifyWait>
		xQueueReceive(buffer.queueh, &buffer.tx[0], portMAX_DELAY);
 8000ace:	4b14      	ldr	r3, [pc, #80]	; (8000b20 <sendUSART1weighing+0x68>)
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	f04f 32ff 	mov.w	r2, #4294967295
 8000ad6:	4913      	ldr	r1, [pc, #76]	; (8000b24 <sendUSART1weighing+0x6c>)
 8000ad8:	4618      	mov	r0, r3
 8000ada:	f004 fe57 	bl	800578c <xQueueReceive>
		xQueueReceive(buffer.queueh, &buffer.tx[1], portMAX_DELAY);
 8000ade:	4b10      	ldr	r3, [pc, #64]	; (8000b20 <sendUSART1weighing+0x68>)
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	f04f 32ff 	mov.w	r2, #4294967295
 8000ae6:	4910      	ldr	r1, [pc, #64]	; (8000b28 <sendUSART1weighing+0x70>)
 8000ae8:	4618      	mov	r0, r3
 8000aea:	f004 fe4f 	bl	800578c <xQueueReceive>
		res_to_uart = buffer.tx[0];
 8000aee:	4b0c      	ldr	r3, [pc, #48]	; (8000b20 <sendUSART1weighing+0x68>)
 8000af0:	7a1b      	ldrb	r3, [r3, #8]
 8000af2:	81fb      	strh	r3, [r7, #14]
		res_to_uart = res_to_uart + (buffer.tx[1] << 8);
 8000af4:	4b0a      	ldr	r3, [pc, #40]	; (8000b20 <sendUSART1weighing+0x68>)
 8000af6:	7a5b      	ldrb	r3, [r3, #9]
 8000af8:	b29b      	uxth	r3, r3
 8000afa:	021b      	lsls	r3, r3, #8
 8000afc:	b29a      	uxth	r2, r3
 8000afe:	89fb      	ldrh	r3, [r7, #14]
 8000b00:	4413      	add	r3, r2
 8000b02:	81fb      	strh	r3, [r7, #14]
		sprintf(string_buff, "%d\r\n", res_to_uart);
 8000b04:	89fa      	ldrh	r2, [r7, #14]
 8000b06:	1d3b      	adds	r3, r7, #4
 8000b08:	4908      	ldr	r1, [pc, #32]	; (8000b2c <sendUSART1weighing+0x74>)
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	f007 fe2e 	bl	800876c <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*) string_buff, sizeof(string_buff), 100);
 8000b10:	1d39      	adds	r1, r7, #4
 8000b12:	2364      	movs	r3, #100	; 0x64
 8000b14:	2208      	movs	r2, #8
 8000b16:	4806      	ldr	r0, [pc, #24]	; (8000b30 <sendUSART1weighing+0x78>)
 8000b18:	f003 fc42 	bl	80043a0 <HAL_UART_Transmit>
		xTaskNotifyWait(0x00, 0xffffffff, NULL, portMAX_DELAY);
 8000b1c:	e7cf      	b.n	8000abe <sendUSART1weighing+0x6>
 8000b1e:	bf00      	nop
 8000b20:	20000520 	.word	0x20000520
 8000b24:	20000528 	.word	0x20000528
 8000b28:	20000529 	.word	0x20000529
 8000b2c:	08008fb8 	.word	0x08008fb8
 8000b30:	20000494 	.word	0x20000494

08000b34 <sendUSART1int>:
	}
	 vTaskDelete(xTaskGetHandle("send data W"));
}

void sendUSART1int(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b08a      	sub	sp, #40	; 0x28
 8000b38:	af02      	add	r7, sp, #8
	for( ;; )
	{
		uint16_t res_to_uart;
		char string_buff[30] = {0};
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	603b      	str	r3, [r7, #0]
 8000b3e:	1d3b      	adds	r3, r7, #4
 8000b40:	2200      	movs	r2, #0
 8000b42:	601a      	str	r2, [r3, #0]
 8000b44:	605a      	str	r2, [r3, #4]
 8000b46:	609a      	str	r2, [r3, #8]
 8000b48:	60da      	str	r2, [r3, #12]
 8000b4a:	611a      	str	r2, [r3, #16]
 8000b4c:	615a      	str	r2, [r3, #20]
 8000b4e:	831a      	strh	r2, [r3, #24]
		xEventGroupWaitBits(xCreatedEventGroup1, 0x4, pdTRUE, pdTRUE, portMAX_DELAY);
 8000b50:	4b1b      	ldr	r3, [pc, #108]	; (8000bc0 <sendUSART1int+0x8c>)
 8000b52:	6818      	ldr	r0, [r3, #0]
 8000b54:	f04f 33ff 	mov.w	r3, #4294967295
 8000b58:	9300      	str	r3, [sp, #0]
 8000b5a:	2301      	movs	r3, #1
 8000b5c:	2201      	movs	r2, #1
 8000b5e:	2104      	movs	r1, #4
 8000b60:	f004 f878 	bl	8004c54 <xEventGroupWaitBits>
		xQueueReceive(buffer.queueh_clbrt, &buffer.tx[0], portMAX_DELAY);
 8000b64:	4b17      	ldr	r3, [pc, #92]	; (8000bc4 <sendUSART1int+0x90>)
 8000b66:	685b      	ldr	r3, [r3, #4]
 8000b68:	f04f 32ff 	mov.w	r2, #4294967295
 8000b6c:	4916      	ldr	r1, [pc, #88]	; (8000bc8 <sendUSART1int+0x94>)
 8000b6e:	4618      	mov	r0, r3
 8000b70:	f004 fe0c 	bl	800578c <xQueueReceive>
		xQueueReceive(buffer.queueh_clbrt, &buffer.tx[1], portMAX_DELAY);
 8000b74:	4b13      	ldr	r3, [pc, #76]	; (8000bc4 <sendUSART1int+0x90>)
 8000b76:	685b      	ldr	r3, [r3, #4]
 8000b78:	f04f 32ff 	mov.w	r2, #4294967295
 8000b7c:	4913      	ldr	r1, [pc, #76]	; (8000bcc <sendUSART1int+0x98>)
 8000b7e:	4618      	mov	r0, r3
 8000b80:	f004 fe04 	bl	800578c <xQueueReceive>
		res_to_uart = buffer.tx[0];
 8000b84:	4b0f      	ldr	r3, [pc, #60]	; (8000bc4 <sendUSART1int+0x90>)
 8000b86:	7a1b      	ldrb	r3, [r3, #8]
 8000b88:	83fb      	strh	r3, [r7, #30]
		res_to_uart = res_to_uart + (buffer.tx[1] << 8);
 8000b8a:	4b0e      	ldr	r3, [pc, #56]	; (8000bc4 <sendUSART1int+0x90>)
 8000b8c:	7a5b      	ldrb	r3, [r3, #9]
 8000b8e:	b29b      	uxth	r3, r3
 8000b90:	021b      	lsls	r3, r3, #8
 8000b92:	b29a      	uxth	r2, r3
 8000b94:	8bfb      	ldrh	r3, [r7, #30]
 8000b96:	4413      	add	r3, r2
 8000b98:	83fb      	strh	r3, [r7, #30]
		sprintf(string_buff, "%d\r\n", res_to_uart);
 8000b9a:	8bfa      	ldrh	r2, [r7, #30]
 8000b9c:	463b      	mov	r3, r7
 8000b9e:	490c      	ldr	r1, [pc, #48]	; (8000bd0 <sendUSART1int+0x9c>)
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	f007 fde3 	bl	800876c <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*) string_buff, sizeof(string_buff), 100);
 8000ba6:	4639      	mov	r1, r7
 8000ba8:	2364      	movs	r3, #100	; 0x64
 8000baa:	221e      	movs	r2, #30
 8000bac:	4809      	ldr	r0, [pc, #36]	; (8000bd4 <sendUSART1int+0xa0>)
 8000bae:	f003 fbf7 	bl	80043a0 <HAL_UART_Transmit>
		xEventGroupSetBits(xCreatedEventGroup1, 0x8);
 8000bb2:	4b03      	ldr	r3, [pc, #12]	; (8000bc0 <sendUSART1int+0x8c>)
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	2108      	movs	r1, #8
 8000bb8:	4618      	mov	r0, r3
 8000bba:	f004 f919 	bl	8004df0 <xEventGroupSetBits>
	{
 8000bbe:	e7bc      	b.n	8000b3a <sendUSART1int+0x6>
 8000bc0:	20000604 	.word	0x20000604
 8000bc4:	20000520 	.word	0x20000520
 8000bc8:	20000528 	.word	0x20000528
 8000bcc:	20000529 	.word	0x20000529
 8000bd0:	08008fb8 	.word	0x08008fb8
 8000bd4:	20000494 	.word	0x20000494

08000bd8 <sendUSART1char>:
	}
	 vTaskDelete(xTaskGetHandle("send data i"));
}
void sendUSART1char(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b08c      	sub	sp, #48	; 0x30
 8000bdc:	af02      	add	r7, sp, #8
	for( ;; )
	{
		char string_buff[30] = {0};
 8000bde:	2300      	movs	r3, #0
 8000be0:	603b      	str	r3, [r7, #0]
 8000be2:	1d3b      	adds	r3, r7, #4
 8000be4:	2200      	movs	r2, #0
 8000be6:	601a      	str	r2, [r3, #0]
 8000be8:	605a      	str	r2, [r3, #4]
 8000bea:	609a      	str	r2, [r3, #8]
 8000bec:	60da      	str	r2, [r3, #12]
 8000bee:	611a      	str	r2, [r3, #16]
 8000bf0:	615a      	str	r2, [r3, #20]
 8000bf2:	831a      	strh	r2, [r3, #24]
		BaseType_t res;
		uint8_t i = 0;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		xEventGroupWaitBits(xCreatedEventGroup1, 0x1, pdTRUE, pdTRUE, portMAX_DELAY);
 8000bfa:	4b1c      	ldr	r3, [pc, #112]	; (8000c6c <sendUSART1char+0x94>)
 8000bfc:	6818      	ldr	r0, [r3, #0]
 8000bfe:	f04f 33ff 	mov.w	r3, #4294967295
 8000c02:	9300      	str	r3, [sp, #0]
 8000c04:	2301      	movs	r3, #1
 8000c06:	2201      	movs	r2, #1
 8000c08:	2101      	movs	r1, #1
 8000c0a:	f004 f823 	bl	8004c54 <xEventGroupWaitBits>
		do{
			res = xQueueReceive(buffer.queueh_clbrt, &string_buff[i], portMAX_DELAY);
 8000c0e:	4b18      	ldr	r3, [pc, #96]	; (8000c70 <sendUSART1char+0x98>)
 8000c10:	6858      	ldr	r0, [r3, #4]
 8000c12:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000c16:	463a      	mov	r2, r7
 8000c18:	4413      	add	r3, r2
 8000c1a:	f04f 32ff 	mov.w	r2, #4294967295
 8000c1e:	4619      	mov	r1, r3
 8000c20:	f004 fdb4 	bl	800578c <xQueueReceive>
 8000c24:	6238      	str	r0, [r7, #32]
			i++;
 8000c26:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000c2a:	3301      	adds	r3, #1
 8000c2c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		}while(res != errQUEUE_EMPTY && string_buff[i-1] != '\0');
 8000c30:	6a3b      	ldr	r3, [r7, #32]
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d008      	beq.n	8000c48 <sendUSART1char+0x70>
 8000c36:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000c3a:	3b01      	subs	r3, #1
 8000c3c:	3328      	adds	r3, #40	; 0x28
 8000c3e:	443b      	add	r3, r7
 8000c40:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d1e2      	bne.n	8000c0e <sendUSART1char+0x36>

		HAL_UART_Transmit(&huart1, (uint8_t*) string_buff, i+1, 100);
 8000c48:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000c4c:	b29b      	uxth	r3, r3
 8000c4e:	3301      	adds	r3, #1
 8000c50:	b29a      	uxth	r2, r3
 8000c52:	4639      	mov	r1, r7
 8000c54:	2364      	movs	r3, #100	; 0x64
 8000c56:	4807      	ldr	r0, [pc, #28]	; (8000c74 <sendUSART1char+0x9c>)
 8000c58:	f003 fba2 	bl	80043a0 <HAL_UART_Transmit>
		xEventGroupSetBits(xCreatedEventGroup1, 0x2);
 8000c5c:	4b03      	ldr	r3, [pc, #12]	; (8000c6c <sendUSART1char+0x94>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	2102      	movs	r1, #2
 8000c62:	4618      	mov	r0, r3
 8000c64:	f004 f8c4 	bl	8004df0 <xEventGroupSetBits>
	{
 8000c68:	e7b9      	b.n	8000bde <sendUSART1char+0x6>
 8000c6a:	bf00      	nop
 8000c6c:	20000604 	.word	0x20000604
 8000c70:	20000520 	.word	0x20000520
 8000c74:	20000494 	.word	0x20000494

08000c78 <receiveUSART1>:
	}
	 vTaskDelete(xTaskGetHandle("send data c"));
}

void receiveUSART1(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	af00      	add	r7, sp, #0
	for( ;; )
	{
		vTaskDelete(xTaskGetHandle("receive data"));
 8000c7c:	4803      	ldr	r0, [pc, #12]	; (8000c8c <receiveUSART1+0x14>)
 8000c7e:	f005 fced 	bl	800665c <xTaskGetHandle>
 8000c82:	4603      	mov	r3, r0
 8000c84:	4618      	mov	r0, r3
 8000c86:	f005 fa95 	bl	80061b4 <vTaskDelete>
 8000c8a:	e7f7      	b.n	8000c7c <receiveUSART1+0x4>
 8000c8c:	08008f28 	.word	0x08008f28

08000c90 <HAL_GPIO_EXTI_Callback>:
	}
	vTaskDelete(xTaskGetHandle("receive data"));
}

HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b082      	sub	sp, #8
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	4603      	mov	r3, r0
 8000c98:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_2)
 8000c9a:	88fb      	ldrh	r3, [r7, #6]
 8000c9c:	2b04      	cmp	r3, #4
 8000c9e:	d105      	bne.n	8000cac <HAL_GPIO_EXTI_Callback+0x1c>
	{
		xSemaphoreGiveFromISR(xSemaphore1, NULL);
 8000ca0:	4b0a      	ldr	r3, [pc, #40]	; (8000ccc <HAL_GPIO_EXTI_Callback+0x3c>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	2100      	movs	r1, #0
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	f004 fce2 	bl	8005670 <xQueueGiveFromISR>
	}
	if(GPIO_Pin == GPIO_PIN_13)
 8000cac:	88fb      	ldrh	r3, [r7, #6]
 8000cae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000cb2:	d106      	bne.n	8000cc2 <HAL_GPIO_EXTI_Callback+0x32>
	{
		xEventGroupSetBitsFromISR(xCreatedEventGroup1, 0x10, pdFALSE);
 8000cb4:	4b06      	ldr	r3, [pc, #24]	; (8000cd0 <HAL_GPIO_EXTI_Callback+0x40>)
 8000cb6:	6819      	ldr	r1, [r3, #0]
 8000cb8:	2300      	movs	r3, #0
 8000cba:	2210      	movs	r2, #16
 8000cbc:	4805      	ldr	r0, [pc, #20]	; (8000cd4 <HAL_GPIO_EXTI_Callback+0x44>)
 8000cbe:	f006 ff89 	bl	8007bd4 <xTimerPendFunctionCallFromISR>
	}
}
 8000cc2:	bf00      	nop
 8000cc4:	3708      	adds	r7, #8
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	20000600 	.word	0x20000600
 8000cd0:	20000604 	.word	0x20000604
 8000cd4:	08004f07 	.word	0x08004f07

08000cd8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	b083      	sub	sp, #12
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
 8000ce0:	e7fe      	b.n	8000ce0 <StartDefaultTask+0x8>

08000ce2 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ce2:	b580      	push	{r7, lr}
 8000ce4:	b082      	sub	sp, #8
 8000ce6:	af00      	add	r7, sp, #0
 8000ce8:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000cf2:	d101      	bne.n	8000cf8 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000cf4:	f000 f9fa 	bl	80010ec <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000cf8:	bf00      	nop
 8000cfa:	3708      	adds	r7, #8
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bd80      	pop	{r7, pc}

08000d00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d04:	b672      	cpsid	i
}
 8000d06:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d08:	e7fe      	b.n	8000d08 <Error_Handler+0x8>
	...

08000d0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b082      	sub	sp, #8
 8000d10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d12:	4b11      	ldr	r3, [pc, #68]	; (8000d58 <HAL_MspInit+0x4c>)
 8000d14:	699b      	ldr	r3, [r3, #24]
 8000d16:	4a10      	ldr	r2, [pc, #64]	; (8000d58 <HAL_MspInit+0x4c>)
 8000d18:	f043 0301 	orr.w	r3, r3, #1
 8000d1c:	6193      	str	r3, [r2, #24]
 8000d1e:	4b0e      	ldr	r3, [pc, #56]	; (8000d58 <HAL_MspInit+0x4c>)
 8000d20:	699b      	ldr	r3, [r3, #24]
 8000d22:	f003 0301 	and.w	r3, r3, #1
 8000d26:	607b      	str	r3, [r7, #4]
 8000d28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d2a:	4b0b      	ldr	r3, [pc, #44]	; (8000d58 <HAL_MspInit+0x4c>)
 8000d2c:	69db      	ldr	r3, [r3, #28]
 8000d2e:	4a0a      	ldr	r2, [pc, #40]	; (8000d58 <HAL_MspInit+0x4c>)
 8000d30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d34:	61d3      	str	r3, [r2, #28]
 8000d36:	4b08      	ldr	r3, [pc, #32]	; (8000d58 <HAL_MspInit+0x4c>)
 8000d38:	69db      	ldr	r3, [r3, #28]
 8000d3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d3e:	603b      	str	r3, [r7, #0]
 8000d40:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000d42:	2200      	movs	r2, #0
 8000d44:	210f      	movs	r1, #15
 8000d46:	f06f 0001 	mvn.w	r0, #1
 8000d4a:	f001 f8cd 	bl	8001ee8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d4e:	bf00      	nop
 8000d50:	3708      	adds	r7, #8
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	40021000 	.word	0x40021000

08000d5c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b08a      	sub	sp, #40	; 0x28
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d64:	f107 0314 	add.w	r3, r7, #20
 8000d68:	2200      	movs	r2, #0
 8000d6a:	601a      	str	r2, [r3, #0]
 8000d6c:	605a      	str	r2, [r3, #4]
 8000d6e:	609a      	str	r2, [r3, #8]
 8000d70:	60da      	str	r2, [r3, #12]
 8000d72:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000d7c:	d14d      	bne.n	8000e1a <HAL_ADC_MspInit+0xbe>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000d7e:	4b29      	ldr	r3, [pc, #164]	; (8000e24 <HAL_ADC_MspInit+0xc8>)
 8000d80:	695b      	ldr	r3, [r3, #20]
 8000d82:	4a28      	ldr	r2, [pc, #160]	; (8000e24 <HAL_ADC_MspInit+0xc8>)
 8000d84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d88:	6153      	str	r3, [r2, #20]
 8000d8a:	4b26      	ldr	r3, [pc, #152]	; (8000e24 <HAL_ADC_MspInit+0xc8>)
 8000d8c:	695b      	ldr	r3, [r3, #20]
 8000d8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d92:	613b      	str	r3, [r7, #16]
 8000d94:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d96:	4b23      	ldr	r3, [pc, #140]	; (8000e24 <HAL_ADC_MspInit+0xc8>)
 8000d98:	695b      	ldr	r3, [r3, #20]
 8000d9a:	4a22      	ldr	r2, [pc, #136]	; (8000e24 <HAL_ADC_MspInit+0xc8>)
 8000d9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000da0:	6153      	str	r3, [r2, #20]
 8000da2:	4b20      	ldr	r3, [pc, #128]	; (8000e24 <HAL_ADC_MspInit+0xc8>)
 8000da4:	695b      	ldr	r3, [r3, #20]
 8000da6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000daa:	60fb      	str	r3, [r7, #12]
 8000dac:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000dae:	2303      	movs	r3, #3
 8000db0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000db2:	2303      	movs	r3, #3
 8000db4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db6:	2300      	movs	r3, #0
 8000db8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dba:	f107 0314 	add.w	r3, r7, #20
 8000dbe:	4619      	mov	r1, r3
 8000dc0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dc4:	f001 fa52 	bl	800226c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000dc8:	4b17      	ldr	r3, [pc, #92]	; (8000e28 <HAL_ADC_MspInit+0xcc>)
 8000dca:	4a18      	ldr	r2, [pc, #96]	; (8000e2c <HAL_ADC_MspInit+0xd0>)
 8000dcc:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000dce:	4b16      	ldr	r3, [pc, #88]	; (8000e28 <HAL_ADC_MspInit+0xcc>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000dd4:	4b14      	ldr	r3, [pc, #80]	; (8000e28 <HAL_ADC_MspInit+0xcc>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000dda:	4b13      	ldr	r3, [pc, #76]	; (8000e28 <HAL_ADC_MspInit+0xcc>)
 8000ddc:	2280      	movs	r2, #128	; 0x80
 8000dde:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000de0:	4b11      	ldr	r3, [pc, #68]	; (8000e28 <HAL_ADC_MspInit+0xcc>)
 8000de2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000de6:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000de8:	4b0f      	ldr	r3, [pc, #60]	; (8000e28 <HAL_ADC_MspInit+0xcc>)
 8000dea:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000dee:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000df0:	4b0d      	ldr	r3, [pc, #52]	; (8000e28 <HAL_ADC_MspInit+0xcc>)
 8000df2:	2220      	movs	r2, #32
 8000df4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000df6:	4b0c      	ldr	r3, [pc, #48]	; (8000e28 <HAL_ADC_MspInit+0xcc>)
 8000df8:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8000dfc:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000dfe:	480a      	ldr	r0, [pc, #40]	; (8000e28 <HAL_ADC_MspInit+0xcc>)
 8000e00:	f001 f89c 	bl	8001f3c <HAL_DMA_Init>
 8000e04:	4603      	mov	r3, r0
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d001      	beq.n	8000e0e <HAL_ADC_MspInit+0xb2>
    {
      Error_Handler();
 8000e0a:	f7ff ff79 	bl	8000d00 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	4a05      	ldr	r2, [pc, #20]	; (8000e28 <HAL_ADC_MspInit+0xcc>)
 8000e12:	639a      	str	r2, [r3, #56]	; 0x38
 8000e14:	4a04      	ldr	r2, [pc, #16]	; (8000e28 <HAL_ADC_MspInit+0xcc>)
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000e1a:	bf00      	nop
 8000e1c:	3728      	adds	r7, #40	; 0x28
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	bf00      	nop
 8000e24:	40021000 	.word	0x40021000
 8000e28:	20000450 	.word	0x20000450
 8000e2c:	40020008 	.word	0x40020008

08000e30 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b08a      	sub	sp, #40	; 0x28
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e38:	f107 0314 	add.w	r3, r7, #20
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	601a      	str	r2, [r3, #0]
 8000e40:	605a      	str	r2, [r3, #4]
 8000e42:	609a      	str	r2, [r3, #8]
 8000e44:	60da      	str	r2, [r3, #12]
 8000e46:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	4a17      	ldr	r2, [pc, #92]	; (8000eac <HAL_UART_MspInit+0x7c>)
 8000e4e:	4293      	cmp	r3, r2
 8000e50:	d127      	bne.n	8000ea2 <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000e52:	4b17      	ldr	r3, [pc, #92]	; (8000eb0 <HAL_UART_MspInit+0x80>)
 8000e54:	699b      	ldr	r3, [r3, #24]
 8000e56:	4a16      	ldr	r2, [pc, #88]	; (8000eb0 <HAL_UART_MspInit+0x80>)
 8000e58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e5c:	6193      	str	r3, [r2, #24]
 8000e5e:	4b14      	ldr	r3, [pc, #80]	; (8000eb0 <HAL_UART_MspInit+0x80>)
 8000e60:	699b      	ldr	r3, [r3, #24]
 8000e62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e66:	613b      	str	r3, [r7, #16]
 8000e68:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e6a:	4b11      	ldr	r3, [pc, #68]	; (8000eb0 <HAL_UART_MspInit+0x80>)
 8000e6c:	695b      	ldr	r3, [r3, #20]
 8000e6e:	4a10      	ldr	r2, [pc, #64]	; (8000eb0 <HAL_UART_MspInit+0x80>)
 8000e70:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000e74:	6153      	str	r3, [r2, #20]
 8000e76:	4b0e      	ldr	r3, [pc, #56]	; (8000eb0 <HAL_UART_MspInit+0x80>)
 8000e78:	695b      	ldr	r3, [r3, #20]
 8000e7a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000e7e:	60fb      	str	r3, [r7, #12]
 8000e80:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000e82:	2330      	movs	r3, #48	; 0x30
 8000e84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e86:	2302      	movs	r3, #2
 8000e88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e8e:	2303      	movs	r3, #3
 8000e90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000e92:	2307      	movs	r3, #7
 8000e94:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e96:	f107 0314 	add.w	r3, r7, #20
 8000e9a:	4619      	mov	r1, r3
 8000e9c:	4805      	ldr	r0, [pc, #20]	; (8000eb4 <HAL_UART_MspInit+0x84>)
 8000e9e:	f001 f9e5 	bl	800226c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000ea2:	bf00      	nop
 8000ea4:	3728      	adds	r7, #40	; 0x28
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	40013800 	.word	0x40013800
 8000eb0:	40021000 	.word	0x40021000
 8000eb4:	48000800 	.word	0x48000800

08000eb8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b08c      	sub	sp, #48	; 0x30
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM2 IRQ priority */
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0);
 8000ec8:	2200      	movs	r2, #0
 8000eca:	6879      	ldr	r1, [r7, #4]
 8000ecc:	201c      	movs	r0, #28
 8000ece:	f001 f80b 	bl	8001ee8 <HAL_NVIC_SetPriority>

  /* Enable the TIM2 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000ed2:	201c      	movs	r0, #28
 8000ed4:	f001 f824 	bl	8001f20 <HAL_NVIC_EnableIRQ>

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8000ed8:	4b20      	ldr	r3, [pc, #128]	; (8000f5c <HAL_InitTick+0xa4>)
 8000eda:	69db      	ldr	r3, [r3, #28]
 8000edc:	4a1f      	ldr	r2, [pc, #124]	; (8000f5c <HAL_InitTick+0xa4>)
 8000ede:	f043 0301 	orr.w	r3, r3, #1
 8000ee2:	61d3      	str	r3, [r2, #28]
 8000ee4:	4b1d      	ldr	r3, [pc, #116]	; (8000f5c <HAL_InitTick+0xa4>)
 8000ee6:	69db      	ldr	r3, [r3, #28]
 8000ee8:	f003 0301 	and.w	r3, r3, #1
 8000eec:	60fb      	str	r3, [r7, #12]
 8000eee:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000ef0:	f107 0210 	add.w	r2, r7, #16
 8000ef4:	f107 0314 	add.w	r3, r7, #20
 8000ef8:	4611      	mov	r1, r2
 8000efa:	4618      	mov	r0, r3
 8000efc:	f002 fdb4 	bl	8003a68 <HAL_RCC_GetClockConfig>

  /* Compute TIM2 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000f00:	f002 fd6e 	bl	80039e0 <HAL_RCC_GetPCLK1Freq>
 8000f04:	4603      	mov	r3, r0
 8000f06:	005b      	lsls	r3, r3, #1
 8000f08:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000f0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f0c:	4a14      	ldr	r2, [pc, #80]	; (8000f60 <HAL_InitTick+0xa8>)
 8000f0e:	fba2 2303 	umull	r2, r3, r2, r3
 8000f12:	0c9b      	lsrs	r3, r3, #18
 8000f14:	3b01      	subs	r3, #1
 8000f16:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8000f18:	4b12      	ldr	r3, [pc, #72]	; (8000f64 <HAL_InitTick+0xac>)
 8000f1a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f1e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8000f20:	4b10      	ldr	r3, [pc, #64]	; (8000f64 <HAL_InitTick+0xac>)
 8000f22:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000f26:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8000f28:	4a0e      	ldr	r2, [pc, #56]	; (8000f64 <HAL_InitTick+0xac>)
 8000f2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f2c:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8000f2e:	4b0d      	ldr	r3, [pc, #52]	; (8000f64 <HAL_InitTick+0xac>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f34:	4b0b      	ldr	r3, [pc, #44]	; (8000f64 <HAL_InitTick+0xac>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 8000f3a:	480a      	ldr	r0, [pc, #40]	; (8000f64 <HAL_InitTick+0xac>)
 8000f3c:	f002 ff58 	bl	8003df0 <HAL_TIM_Base_Init>
 8000f40:	4603      	mov	r3, r0
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d104      	bne.n	8000f50 <HAL_InitTick+0x98>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim2);
 8000f46:	4807      	ldr	r0, [pc, #28]	; (8000f64 <HAL_InitTick+0xac>)
 8000f48:	f002 ffb4 	bl	8003eb4 <HAL_TIM_Base_Start_IT>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	e000      	b.n	8000f52 <HAL_InitTick+0x9a>
  }

  /* Return function status */
  return HAL_ERROR;
 8000f50:	2301      	movs	r3, #1
}
 8000f52:	4618      	mov	r0, r3
 8000f54:	3730      	adds	r7, #48	; 0x30
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	40021000 	.word	0x40021000
 8000f60:	431bde83 	.word	0x431bde83
 8000f64:	20000608 	.word	0x20000608

08000f68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f6c:	e7fe      	b.n	8000f6c <NMI_Handler+0x4>

08000f6e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f6e:	b480      	push	{r7}
 8000f70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f72:	e7fe      	b.n	8000f72 <HardFault_Handler+0x4>

08000f74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f78:	e7fe      	b.n	8000f78 <MemManage_Handler+0x4>

08000f7a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f7a:	b480      	push	{r7}
 8000f7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f7e:	e7fe      	b.n	8000f7e <BusFault_Handler+0x4>

08000f80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f80:	b480      	push	{r7}
 8000f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f84:	e7fe      	b.n	8000f84 <UsageFault_Handler+0x4>

08000f86 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f86:	b480      	push	{r7}
 8000f88:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f8a:	bf00      	nop
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f92:	4770      	bx	lr

08000f94 <EXTI2_TSC_IRQHandler>:

/**
  * @brief This function handles EXTI line2 and Touch Sense controller.
  */
void EXTI2_TSC_IRQHandler(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	af00      	add	r7, sp, #0
//		EXTI->PR |= (1<<2);
//		//xTaskNotifyFromISR(xTaskGetHandle("calibration"), 0, eNoAction, pdFALSE);
//		xSemaphoreGiveFromISR(xSemaphore1, pdTRUE);
//	}
  /* USER CODE END EXTI2_TSC_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8000f98:	2004      	movs	r0, #4
 8000f9a:	f001 fad9 	bl	8002550 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_TSC_IRQn 1 */

  /* USER CODE END EXTI2_TSC_IRQn 1 */
}
 8000f9e:	bf00      	nop
 8000fa0:	bd80      	pop	{r7, pc}
	...

08000fa4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000fa8:	4802      	ldr	r0, [pc, #8]	; (8000fb4 <DMA1_Channel1_IRQHandler+0x10>)
 8000faa:	f001 f86d 	bl	8002088 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000fae:	bf00      	nop
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	20000450 	.word	0x20000450

08000fb8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000fbc:	4802      	ldr	r0, [pc, #8]	; (8000fc8 <TIM2_IRQHandler+0x10>)
 8000fbe:	f002 ffcd 	bl	8003f5c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000fc2:	bf00      	nop
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	20000608 	.word	0x20000608

08000fcc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000fd0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000fd4:	f001 fabc 	bl	8002550 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000fd8:	bf00      	nop
 8000fda:	bd80      	pop	{r7, pc}

08000fdc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b086      	sub	sp, #24
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fe4:	4a14      	ldr	r2, [pc, #80]	; (8001038 <_sbrk+0x5c>)
 8000fe6:	4b15      	ldr	r3, [pc, #84]	; (800103c <_sbrk+0x60>)
 8000fe8:	1ad3      	subs	r3, r2, r3
 8000fea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fec:	697b      	ldr	r3, [r7, #20]
 8000fee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ff0:	4b13      	ldr	r3, [pc, #76]	; (8001040 <_sbrk+0x64>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d102      	bne.n	8000ffe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ff8:	4b11      	ldr	r3, [pc, #68]	; (8001040 <_sbrk+0x64>)
 8000ffa:	4a12      	ldr	r2, [pc, #72]	; (8001044 <_sbrk+0x68>)
 8000ffc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ffe:	4b10      	ldr	r3, [pc, #64]	; (8001040 <_sbrk+0x64>)
 8001000:	681a      	ldr	r2, [r3, #0]
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	4413      	add	r3, r2
 8001006:	693a      	ldr	r2, [r7, #16]
 8001008:	429a      	cmp	r2, r3
 800100a:	d207      	bcs.n	800101c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800100c:	f007 fa5e 	bl	80084cc <__errno>
 8001010:	4603      	mov	r3, r0
 8001012:	220c      	movs	r2, #12
 8001014:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001016:	f04f 33ff 	mov.w	r3, #4294967295
 800101a:	e009      	b.n	8001030 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800101c:	4b08      	ldr	r3, [pc, #32]	; (8001040 <_sbrk+0x64>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001022:	4b07      	ldr	r3, [pc, #28]	; (8001040 <_sbrk+0x64>)
 8001024:	681a      	ldr	r2, [r3, #0]
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	4413      	add	r3, r2
 800102a:	4a05      	ldr	r2, [pc, #20]	; (8001040 <_sbrk+0x64>)
 800102c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800102e:	68fb      	ldr	r3, [r7, #12]
}
 8001030:	4618      	mov	r0, r3
 8001032:	3718      	adds	r7, #24
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}
 8001038:	20004000 	.word	0x20004000
 800103c:	00000400 	.word	0x00000400
 8001040:	20000654 	.word	0x20000654
 8001044:	20002478 	.word	0x20002478

08001048 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001048:	b480      	push	{r7}
 800104a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800104c:	4b06      	ldr	r3, [pc, #24]	; (8001068 <SystemInit+0x20>)
 800104e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001052:	4a05      	ldr	r2, [pc, #20]	; (8001068 <SystemInit+0x20>)
 8001054:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001058:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800105c:	bf00      	nop
 800105e:	46bd      	mov	sp, r7
 8001060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001064:	4770      	bx	lr
 8001066:	bf00      	nop
 8001068:	e000ed00 	.word	0xe000ed00

0800106c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800106c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010a4 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001070:	f7ff ffea 	bl	8001048 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001074:	480c      	ldr	r0, [pc, #48]	; (80010a8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001076:	490d      	ldr	r1, [pc, #52]	; (80010ac <LoopForever+0xa>)
  ldr r2, =_sidata
 8001078:	4a0d      	ldr	r2, [pc, #52]	; (80010b0 <LoopForever+0xe>)
  movs r3, #0
 800107a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800107c:	e002      	b.n	8001084 <LoopCopyDataInit>

0800107e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800107e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001080:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001082:	3304      	adds	r3, #4

08001084 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001084:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001086:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001088:	d3f9      	bcc.n	800107e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800108a:	4a0a      	ldr	r2, [pc, #40]	; (80010b4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800108c:	4c0a      	ldr	r4, [pc, #40]	; (80010b8 <LoopForever+0x16>)
  movs r3, #0
 800108e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001090:	e001      	b.n	8001096 <LoopFillZerobss>

08001092 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001092:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001094:	3204      	adds	r2, #4

08001096 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001096:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001098:	d3fb      	bcc.n	8001092 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800109a:	f007 fa1d 	bl	80084d8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800109e:	f7ff f931 	bl	8000304 <main>

080010a2 <LoopForever>:

LoopForever:
    b LoopForever
 80010a2:	e7fe      	b.n	80010a2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80010a4:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 80010a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010ac:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80010b0:	080090ac 	.word	0x080090ac
  ldr r2, =_sbss
 80010b4:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80010b8:	20002474 	.word	0x20002474

080010bc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80010bc:	e7fe      	b.n	80010bc <ADC1_IRQHandler>
	...

080010c0 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010c4:	4b08      	ldr	r3, [pc, #32]	; (80010e8 <HAL_Init+0x28>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	4a07      	ldr	r2, [pc, #28]	; (80010e8 <HAL_Init+0x28>)
 80010ca:	f043 0310 	orr.w	r3, r3, #16
 80010ce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010d0:	2003      	movs	r0, #3
 80010d2:	f000 fefe 	bl	8001ed2 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010d6:	200f      	movs	r0, #15
 80010d8:	f7ff feee 	bl	8000eb8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010dc:	f7ff fe16 	bl	8000d0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010e0:	2300      	movs	r3, #0
}
 80010e2:	4618      	mov	r0, r3
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	40022000 	.word	0x40022000

080010ec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010ec:	b480      	push	{r7}
 80010ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010f0:	4b06      	ldr	r3, [pc, #24]	; (800110c <HAL_IncTick+0x20>)
 80010f2:	781b      	ldrb	r3, [r3, #0]
 80010f4:	461a      	mov	r2, r3
 80010f6:	4b06      	ldr	r3, [pc, #24]	; (8001110 <HAL_IncTick+0x24>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	4413      	add	r3, r2
 80010fc:	4a04      	ldr	r2, [pc, #16]	; (8001110 <HAL_IncTick+0x24>)
 80010fe:	6013      	str	r3, [r2, #0]
}
 8001100:	bf00      	nop
 8001102:	46bd      	mov	sp, r7
 8001104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001108:	4770      	bx	lr
 800110a:	bf00      	nop
 800110c:	20000008 	.word	0x20000008
 8001110:	20000658 	.word	0x20000658

08001114 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001114:	b480      	push	{r7}
 8001116:	af00      	add	r7, sp, #0
  return uwTick;  
 8001118:	4b03      	ldr	r3, [pc, #12]	; (8001128 <HAL_GetTick+0x14>)
 800111a:	681b      	ldr	r3, [r3, #0]
}
 800111c:	4618      	mov	r0, r3
 800111e:	46bd      	mov	sp, r7
 8001120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001124:	4770      	bx	lr
 8001126:	bf00      	nop
 8001128:	20000658 	.word	0x20000658

0800112c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800112c:	b480      	push	{r7}
 800112e:	b083      	sub	sp, #12
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001134:	bf00      	nop
 8001136:	370c      	adds	r7, #12
 8001138:	46bd      	mov	sp, r7
 800113a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113e:	4770      	bx	lr

08001140 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001140:	b480      	push	{r7}
 8001142:	b083      	sub	sp, #12
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001148:	bf00      	nop
 800114a:	370c      	adds	r7, #12
 800114c:	46bd      	mov	sp, r7
 800114e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001152:	4770      	bx	lr

08001154 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001154:	b480      	push	{r7}
 8001156:	b083      	sub	sp, #12
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800115c:	bf00      	nop
 800115e:	370c      	adds	r7, #12
 8001160:	46bd      	mov	sp, r7
 8001162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001166:	4770      	bx	lr

08001168 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b09a      	sub	sp, #104	; 0x68
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001170:	2300      	movs	r3, #0
 8001172:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8001176:	2300      	movs	r3, #0
 8001178:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 800117a:	2300      	movs	r3, #0
 800117c:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	2b00      	cmp	r3, #0
 8001182:	d101      	bne.n	8001188 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8001184:	2301      	movs	r3, #1
 8001186:	e169      	b.n	800145c <HAL_ADC_Init+0x2f4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	691b      	ldr	r3, [r3, #16]
 800118c:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001192:	f003 0310 	and.w	r3, r3, #16
 8001196:	2b00      	cmp	r3, #0
 8001198:	d176      	bne.n	8001288 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d152      	bne.n	8001248 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	2200      	movs	r2, #0
 80011a6:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	2200      	movs	r2, #0
 80011ac:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	2200      	movs	r2, #0
 80011b2:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	2200      	movs	r2, #0
 80011b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80011bc:	6878      	ldr	r0, [r7, #4]
 80011be:	f7ff fdcd 	bl	8000d5c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	689b      	ldr	r3, [r3, #8]
 80011c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d13b      	bne.n	8001248 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 80011d0:	6878      	ldr	r0, [r7, #4]
 80011d2:	f000 fd6b 	bl	8001cac <ADC_Disable>
 80011d6:	4603      	mov	r3, r0
 80011d8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011e0:	f003 0310 	and.w	r3, r3, #16
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d12f      	bne.n	8001248 <HAL_ADC_Init+0xe0>
 80011e8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d12b      	bne.n	8001248 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011f4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80011f8:	f023 0302 	bic.w	r3, r3, #2
 80011fc:	f043 0202 	orr.w	r2, r3, #2
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	689a      	ldr	r2, [r3, #8]
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001212:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	689a      	ldr	r2, [r3, #8]
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001222:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001224:	4b8f      	ldr	r3, [pc, #572]	; (8001464 <HAL_ADC_Init+0x2fc>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	4a8f      	ldr	r2, [pc, #572]	; (8001468 <HAL_ADC_Init+0x300>)
 800122a:	fba2 2303 	umull	r2, r3, r2, r3
 800122e:	0c9a      	lsrs	r2, r3, #18
 8001230:	4613      	mov	r3, r2
 8001232:	009b      	lsls	r3, r3, #2
 8001234:	4413      	add	r3, r2
 8001236:	005b      	lsls	r3, r3, #1
 8001238:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800123a:	e002      	b.n	8001242 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 800123c:	68bb      	ldr	r3, [r7, #8]
 800123e:	3b01      	subs	r3, #1
 8001240:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001242:	68bb      	ldr	r3, [r7, #8]
 8001244:	2b00      	cmp	r3, #0
 8001246:	d1f9      	bne.n	800123c <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	689b      	ldr	r3, [r3, #8]
 800124e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001252:	2b00      	cmp	r3, #0
 8001254:	d007      	beq.n	8001266 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	689b      	ldr	r3, [r3, #8]
 800125c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001260:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001264:	d110      	bne.n	8001288 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800126a:	f023 0312 	bic.w	r3, r3, #18
 800126e:	f043 0210 	orr.w	r2, r3, #16
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800127a:	f043 0201 	orr.w	r2, r3, #1
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8001282:	2301      	movs	r3, #1
 8001284:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800128c:	f003 0310 	and.w	r3, r3, #16
 8001290:	2b00      	cmp	r3, #0
 8001292:	f040 80d6 	bne.w	8001442 <HAL_ADC_Init+0x2da>
 8001296:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800129a:	2b00      	cmp	r3, #0
 800129c:	f040 80d1 	bne.w	8001442 <HAL_ADC_Init+0x2da>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	689b      	ldr	r3, [r3, #8]
 80012a6:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	f040 80c9 	bne.w	8001442 <HAL_ADC_Init+0x2da>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b4:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80012b8:	f043 0202 	orr.w	r2, r3, #2
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80012c0:	4b6a      	ldr	r3, [pc, #424]	; (800146c <HAL_ADC_Init+0x304>)
 80012c2:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80012c4:	2300      	movs	r3, #0
 80012c6:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	689b      	ldr	r3, [r3, #8]
 80012ce:	f003 0303 	and.w	r3, r3, #3
 80012d2:	2b01      	cmp	r3, #1
 80012d4:	d108      	bne.n	80012e8 <HAL_ADC_Init+0x180>
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	f003 0301 	and.w	r3, r3, #1
 80012e0:	2b01      	cmp	r3, #1
 80012e2:	d101      	bne.n	80012e8 <HAL_ADC_Init+0x180>
 80012e4:	2301      	movs	r3, #1
 80012e6:	e000      	b.n	80012ea <HAL_ADC_Init+0x182>
 80012e8:	2300      	movs	r3, #0
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d11c      	bne.n	8001328 <HAL_ADC_Init+0x1c0>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80012ee:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d010      	beq.n	8001316 <HAL_ADC_Init+0x1ae>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	689b      	ldr	r3, [r3, #8]
 80012f8:	f003 0303 	and.w	r3, r3, #3
 80012fc:	2b01      	cmp	r3, #1
 80012fe:	d107      	bne.n	8001310 <HAL_ADC_Init+0x1a8>
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f003 0301 	and.w	r3, r3, #1
 8001308:	2b01      	cmp	r3, #1
 800130a:	d101      	bne.n	8001310 <HAL_ADC_Init+0x1a8>
 800130c:	2301      	movs	r3, #1
 800130e:	e000      	b.n	8001312 <HAL_ADC_Init+0x1aa>
 8001310:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001312:	2b00      	cmp	r3, #0
 8001314:	d108      	bne.n	8001328 <HAL_ADC_Init+0x1c0>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8001316:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001318:	689b      	ldr	r3, [r3, #8]
 800131a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	685b      	ldr	r3, [r3, #4]
 8001322:	431a      	orrs	r2, r3
 8001324:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001326:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	7e5b      	ldrb	r3, [r3, #25]
 800132c:	035b      	lsls	r3, r3, #13
 800132e:	687a      	ldr	r2, [r7, #4]
 8001330:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001332:	2a01      	cmp	r2, #1
 8001334:	d002      	beq.n	800133c <HAL_ADC_Init+0x1d4>
 8001336:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800133a:	e000      	b.n	800133e <HAL_ADC_Init+0x1d6>
 800133c:	2200      	movs	r2, #0
 800133e:	431a      	orrs	r2, r3
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	68db      	ldr	r3, [r3, #12]
 8001344:	431a      	orrs	r2, r3
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	689b      	ldr	r3, [r3, #8]
 800134a:	4313      	orrs	r3, r2
 800134c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800134e:	4313      	orrs	r3, r2
 8001350:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001358:	2b01      	cmp	r3, #1
 800135a:	d11b      	bne.n	8001394 <HAL_ADC_Init+0x22c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	7e5b      	ldrb	r3, [r3, #25]
 8001360:	2b00      	cmp	r3, #0
 8001362:	d109      	bne.n	8001378 <HAL_ADC_Init+0x210>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001368:	3b01      	subs	r3, #1
 800136a:	045a      	lsls	r2, r3, #17
 800136c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800136e:	4313      	orrs	r3, r2
 8001370:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001374:	663b      	str	r3, [r7, #96]	; 0x60
 8001376:	e00d      	b.n	8001394 <HAL_ADC_Init+0x22c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800137c:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8001380:	f043 0220 	orr.w	r2, r3, #32
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800138c:	f043 0201 	orr.w	r2, r3, #1
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001398:	2b01      	cmp	r3, #1
 800139a:	d007      	beq.n	80013ac <HAL_ADC_Init+0x244>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013a4:	4313      	orrs	r3, r2
 80013a6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80013a8:	4313      	orrs	r3, r2
 80013aa:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	689b      	ldr	r3, [r3, #8]
 80013b2:	f003 030c 	and.w	r3, r3, #12
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d114      	bne.n	80013e4 <HAL_ADC_Init+0x27c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	68db      	ldr	r3, [r3, #12]
 80013c0:	687a      	ldr	r2, [r7, #4]
 80013c2:	6812      	ldr	r2, [r2, #0]
 80013c4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80013c8:	f023 0302 	bic.w	r3, r3, #2
 80013cc:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	7e1b      	ldrb	r3, [r3, #24]
 80013d2:	039a      	lsls	r2, r3, #14
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80013da:	005b      	lsls	r3, r3, #1
 80013dc:	4313      	orrs	r3, r2
 80013de:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80013e0:	4313      	orrs	r3, r2
 80013e2:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	68da      	ldr	r2, [r3, #12]
 80013ea:	4b21      	ldr	r3, [pc, #132]	; (8001470 <HAL_ADC_Init+0x308>)
 80013ec:	4013      	ands	r3, r2
 80013ee:	687a      	ldr	r2, [r7, #4]
 80013f0:	6812      	ldr	r2, [r2, #0]
 80013f2:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80013f4:	430b      	orrs	r3, r1
 80013f6:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	691b      	ldr	r3, [r3, #16]
 80013fc:	2b01      	cmp	r3, #1
 80013fe:	d10c      	bne.n	800141a <HAL_ADC_Init+0x2b2>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001406:	f023 010f 	bic.w	r1, r3, #15
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	69db      	ldr	r3, [r3, #28]
 800140e:	1e5a      	subs	r2, r3, #1
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	430a      	orrs	r2, r1
 8001416:	631a      	str	r2, [r3, #48]	; 0x30
 8001418:	e007      	b.n	800142a <HAL_ADC_Init+0x2c2>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f022 020f 	bic.w	r2, r2, #15
 8001428:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	2200      	movs	r2, #0
 800142e:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001434:	f023 0303 	bic.w	r3, r3, #3
 8001438:	f043 0201 	orr.w	r2, r3, #1
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	641a      	str	r2, [r3, #64]	; 0x40
 8001440:	e00a      	b.n	8001458 <HAL_ADC_Init+0x2f0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001446:	f023 0312 	bic.w	r3, r3, #18
 800144a:	f043 0210 	orr.w	r2, r3, #16
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8001452:	2301      	movs	r3, #1
 8001454:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8001458:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800145c:	4618      	mov	r0, r3
 800145e:	3768      	adds	r7, #104	; 0x68
 8001460:	46bd      	mov	sp, r7
 8001462:	bd80      	pop	{r7, pc}
 8001464:	20000000 	.word	0x20000000
 8001468:	431bde83 	.word	0x431bde83
 800146c:	50000300 	.word	0x50000300
 8001470:	fff0c007 	.word	0xfff0c007

08001474 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b086      	sub	sp, #24
 8001478:	af00      	add	r7, sp, #0
 800147a:	60f8      	str	r0, [r7, #12]
 800147c:	60b9      	str	r1, [r7, #8]
 800147e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001480:	2300      	movs	r3, #0
 8001482:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	689b      	ldr	r3, [r3, #8]
 800148a:	f003 0304 	and.w	r3, r3, #4
 800148e:	2b00      	cmp	r3, #0
 8001490:	d17e      	bne.n	8001590 <HAL_ADC_Start_DMA+0x11c>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001498:	2b01      	cmp	r3, #1
 800149a:	d101      	bne.n	80014a0 <HAL_ADC_Start_DMA+0x2c>
 800149c:	2302      	movs	r3, #2
 800149e:	e07a      	b.n	8001596 <HAL_ADC_Start_DMA+0x122>
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	2201      	movs	r2, #1
 80014a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* If multimode is enabled, dedicated function multimode conversion       */
    /* start DMA must be used.                                                */
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80014a8:	68f8      	ldr	r0, [r7, #12]
 80014aa:	f000 fb9b 	bl	8001be4 <ADC_Enable>
 80014ae:	4603      	mov	r3, r0
 80014b0:	75fb      	strb	r3, [r7, #23]
      
      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80014b2:	7dfb      	ldrb	r3, [r7, #23]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d166      	bne.n	8001586 <HAL_ADC_Start_DMA+0x112>
      {
        /* Set ADC state                                                      */
        /* - Clear state bitfield related to regular group conversion results */
        /* - Set state bitfield related to regular operation                  */
        ADC_STATE_CLR_SET(hadc->State,
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014bc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80014c0:	f023 0301 	bic.w	r3, r3, #1
 80014c4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	641a      	str	r2, [r3, #64]	; 0x40
        /* for all cases of multimode: independent mode, multimode ADC master */
        /* or multimode ADC slave (for devices with several ADCs):            */
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
        {
          /* Set ADC state (ADC independent or master) */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d0:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	68db      	ldr	r3, [r3, #12]
 80014de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d007      	beq.n	80014f6 <HAL_ADC_Start_DMA+0x82>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ea:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80014ee:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	641a      	str	r2, [r3, #64]	; 0x40
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
          }
        }
        
        /* State machine update: Check if an injected conversion is ongoing */
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014fa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80014fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001502:	d106      	bne.n	8001512 <HAL_ADC_Start_DMA+0x9e>
        {
          /* Reset ADC error code fields related to conversions on group regular*/
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001508:	f023 0206 	bic.w	r2, r3, #6
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	645a      	str	r2, [r3, #68]	; 0x44
 8001510:	e002      	b.n	8001518 <HAL_ADC_Start_DMA+0xa4>
        }
        else
        {
          /* Reset ADC all error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	2200      	movs	r2, #0
 8001516:	645a      	str	r2, [r3, #68]	; 0x44
        }
        
        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	2200      	movs	r2, #0
 800151c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        
        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001524:	4a1e      	ldr	r2, [pc, #120]	; (80015a0 <HAL_ADC_Start_DMA+0x12c>)
 8001526:	629a      	str	r2, [r3, #40]	; 0x28

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800152c:	4a1d      	ldr	r2, [pc, #116]	; (80015a4 <HAL_ADC_Start_DMA+0x130>)
 800152e:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001534:	4a1c      	ldr	r2, [pc, #112]	; (80015a8 <HAL_ADC_Start_DMA+0x134>)
 8001536:	631a      	str	r2, [r3, #48]	; 0x30
        /* start (in case of SW start):                                       */
        
        /* Clear regular group conversion flag and overrun flag */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	221c      	movs	r2, #28
 800153e:	601a      	str	r2, [r3, #0]
        
        /* Enable ADC overrun interrupt */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	685a      	ldr	r2, [r3, #4]
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f042 0210 	orr.w	r2, r2, #16
 800154e:	605a      	str	r2, [r3, #4]
        
        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	68da      	ldr	r2, [r3, #12]
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f042 0201 	orr.w	r2, r2, #1
 800155e:	60da      	str	r2, [r3, #12]
        
        /* Start the DMA channel */
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	3340      	adds	r3, #64	; 0x40
 800156a:	4619      	mov	r1, r3
 800156c:	68ba      	ldr	r2, [r7, #8]
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	f000 fd2b 	bl	8001fca <HAL_DMA_Start_IT>
                 
        /* Enable conversion of regular group.                                */
        /* If software start has been selected, conversion starts immediately.*/
        /* If external trigger has been selected, conversion will start at    */
        /* next trigger event.                                                */
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	689a      	ldr	r2, [r3, #8]
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f042 0204 	orr.w	r2, r2, #4
 8001582:	609a      	str	r2, [r3, #8]
 8001584:	e006      	b.n	8001594 <HAL_ADC_Start_DMA+0x120>
        
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	2200      	movs	r2, #0
 800158a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800158e:	e001      	b.n	8001594 <HAL_ADC_Start_DMA+0x120>
      __HAL_UNLOCK(hadc);
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001590:	2302      	movs	r3, #2
 8001592:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001594:	7dfb      	ldrb	r3, [r7, #23]
}
 8001596:	4618      	mov	r0, r3
 8001598:	3718      	adds	r7, #24
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	08001b19 	.word	0x08001b19
 80015a4:	08001b93 	.word	0x08001b93
 80015a8:	08001baf 	.word	0x08001baf

080015ac <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80015ac:	b480      	push	{r7}
 80015ae:	b09b      	sub	sp, #108	; 0x6c
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
 80015b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80015b6:	2300      	movs	r3, #0
 80015b8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 80015bc:	2300      	movs	r3, #0
 80015be:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80015c6:	2b01      	cmp	r3, #1
 80015c8:	d101      	bne.n	80015ce <HAL_ADC_ConfigChannel+0x22>
 80015ca:	2302      	movs	r3, #2
 80015cc:	e299      	b.n	8001b02 <HAL_ADC_ConfigChannel+0x556>
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	2201      	movs	r2, #1
 80015d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	689b      	ldr	r3, [r3, #8]
 80015dc:	f003 0304 	and.w	r3, r3, #4
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	f040 827d 	bne.w	8001ae0 <HAL_ADC_ConfigChannel+0x534>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	685b      	ldr	r3, [r3, #4]
 80015ea:	2b04      	cmp	r3, #4
 80015ec:	d81c      	bhi.n	8001628 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	685a      	ldr	r2, [r3, #4]
 80015f8:	4613      	mov	r3, r2
 80015fa:	005b      	lsls	r3, r3, #1
 80015fc:	4413      	add	r3, r2
 80015fe:	005b      	lsls	r3, r3, #1
 8001600:	461a      	mov	r2, r3
 8001602:	231f      	movs	r3, #31
 8001604:	4093      	lsls	r3, r2
 8001606:	43db      	mvns	r3, r3
 8001608:	4019      	ands	r1, r3
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	6818      	ldr	r0, [r3, #0]
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	685a      	ldr	r2, [r3, #4]
 8001612:	4613      	mov	r3, r2
 8001614:	005b      	lsls	r3, r3, #1
 8001616:	4413      	add	r3, r2
 8001618:	005b      	lsls	r3, r3, #1
 800161a:	fa00 f203 	lsl.w	r2, r0, r3
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	430a      	orrs	r2, r1
 8001624:	631a      	str	r2, [r3, #48]	; 0x30
 8001626:	e063      	b.n	80016f0 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	2b09      	cmp	r3, #9
 800162e:	d81e      	bhi.n	800166e <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	685a      	ldr	r2, [r3, #4]
 800163a:	4613      	mov	r3, r2
 800163c:	005b      	lsls	r3, r3, #1
 800163e:	4413      	add	r3, r2
 8001640:	005b      	lsls	r3, r3, #1
 8001642:	3b1e      	subs	r3, #30
 8001644:	221f      	movs	r2, #31
 8001646:	fa02 f303 	lsl.w	r3, r2, r3
 800164a:	43db      	mvns	r3, r3
 800164c:	4019      	ands	r1, r3
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	6818      	ldr	r0, [r3, #0]
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	685a      	ldr	r2, [r3, #4]
 8001656:	4613      	mov	r3, r2
 8001658:	005b      	lsls	r3, r3, #1
 800165a:	4413      	add	r3, r2
 800165c:	005b      	lsls	r3, r3, #1
 800165e:	3b1e      	subs	r3, #30
 8001660:	fa00 f203 	lsl.w	r2, r0, r3
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	430a      	orrs	r2, r1
 800166a:	635a      	str	r2, [r3, #52]	; 0x34
 800166c:	e040      	b.n	80016f0 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	685b      	ldr	r3, [r3, #4]
 8001672:	2b0e      	cmp	r3, #14
 8001674:	d81e      	bhi.n	80016b4 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	685a      	ldr	r2, [r3, #4]
 8001680:	4613      	mov	r3, r2
 8001682:	005b      	lsls	r3, r3, #1
 8001684:	4413      	add	r3, r2
 8001686:	005b      	lsls	r3, r3, #1
 8001688:	3b3c      	subs	r3, #60	; 0x3c
 800168a:	221f      	movs	r2, #31
 800168c:	fa02 f303 	lsl.w	r3, r2, r3
 8001690:	43db      	mvns	r3, r3
 8001692:	4019      	ands	r1, r3
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	6818      	ldr	r0, [r3, #0]
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	685a      	ldr	r2, [r3, #4]
 800169c:	4613      	mov	r3, r2
 800169e:	005b      	lsls	r3, r3, #1
 80016a0:	4413      	add	r3, r2
 80016a2:	005b      	lsls	r3, r3, #1
 80016a4:	3b3c      	subs	r3, #60	; 0x3c
 80016a6:	fa00 f203 	lsl.w	r2, r0, r3
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	430a      	orrs	r2, r1
 80016b0:	639a      	str	r2, [r3, #56]	; 0x38
 80016b2:	e01d      	b.n	80016f0 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	685a      	ldr	r2, [r3, #4]
 80016be:	4613      	mov	r3, r2
 80016c0:	005b      	lsls	r3, r3, #1
 80016c2:	4413      	add	r3, r2
 80016c4:	005b      	lsls	r3, r3, #1
 80016c6:	3b5a      	subs	r3, #90	; 0x5a
 80016c8:	221f      	movs	r2, #31
 80016ca:	fa02 f303 	lsl.w	r3, r2, r3
 80016ce:	43db      	mvns	r3, r3
 80016d0:	4019      	ands	r1, r3
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	6818      	ldr	r0, [r3, #0]
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	685a      	ldr	r2, [r3, #4]
 80016da:	4613      	mov	r3, r2
 80016dc:	005b      	lsls	r3, r3, #1
 80016de:	4413      	add	r3, r2
 80016e0:	005b      	lsls	r3, r3, #1
 80016e2:	3b5a      	subs	r3, #90	; 0x5a
 80016e4:	fa00 f203 	lsl.w	r2, r0, r3
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	430a      	orrs	r2, r1
 80016ee:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	689b      	ldr	r3, [r3, #8]
 80016f6:	f003 030c 	and.w	r3, r3, #12
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	f040 80e5 	bne.w	80018ca <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	2b09      	cmp	r3, #9
 8001706:	d91c      	bls.n	8001742 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	6999      	ldr	r1, [r3, #24]
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	681a      	ldr	r2, [r3, #0]
 8001712:	4613      	mov	r3, r2
 8001714:	005b      	lsls	r3, r3, #1
 8001716:	4413      	add	r3, r2
 8001718:	3b1e      	subs	r3, #30
 800171a:	2207      	movs	r2, #7
 800171c:	fa02 f303 	lsl.w	r3, r2, r3
 8001720:	43db      	mvns	r3, r3
 8001722:	4019      	ands	r1, r3
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	6898      	ldr	r0, [r3, #8]
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	681a      	ldr	r2, [r3, #0]
 800172c:	4613      	mov	r3, r2
 800172e:	005b      	lsls	r3, r3, #1
 8001730:	4413      	add	r3, r2
 8001732:	3b1e      	subs	r3, #30
 8001734:	fa00 f203 	lsl.w	r2, r0, r3
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	430a      	orrs	r2, r1
 800173e:	619a      	str	r2, [r3, #24]
 8001740:	e019      	b.n	8001776 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	6959      	ldr	r1, [r3, #20]
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	681a      	ldr	r2, [r3, #0]
 800174c:	4613      	mov	r3, r2
 800174e:	005b      	lsls	r3, r3, #1
 8001750:	4413      	add	r3, r2
 8001752:	2207      	movs	r2, #7
 8001754:	fa02 f303 	lsl.w	r3, r2, r3
 8001758:	43db      	mvns	r3, r3
 800175a:	4019      	ands	r1, r3
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	6898      	ldr	r0, [r3, #8]
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	681a      	ldr	r2, [r3, #0]
 8001764:	4613      	mov	r3, r2
 8001766:	005b      	lsls	r3, r3, #1
 8001768:	4413      	add	r3, r2
 800176a:	fa00 f203 	lsl.w	r2, r0, r3
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	430a      	orrs	r2, r1
 8001774:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	695a      	ldr	r2, [r3, #20]
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	68db      	ldr	r3, [r3, #12]
 8001780:	08db      	lsrs	r3, r3, #3
 8001782:	f003 0303 	and.w	r3, r3, #3
 8001786:	005b      	lsls	r3, r3, #1
 8001788:	fa02 f303 	lsl.w	r3, r2, r3
 800178c:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	691b      	ldr	r3, [r3, #16]
 8001792:	3b01      	subs	r3, #1
 8001794:	2b03      	cmp	r3, #3
 8001796:	d84f      	bhi.n	8001838 <HAL_ADC_ConfigChannel+0x28c>
 8001798:	a201      	add	r2, pc, #4	; (adr r2, 80017a0 <HAL_ADC_ConfigChannel+0x1f4>)
 800179a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800179e:	bf00      	nop
 80017a0:	080017b1 	.word	0x080017b1
 80017a4:	080017d3 	.word	0x080017d3
 80017a8:	080017f5 	.word	0x080017f5
 80017ac:	08001817 	.word	0x08001817
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80017b6:	4b99      	ldr	r3, [pc, #612]	; (8001a1c <HAL_ADC_ConfigChannel+0x470>)
 80017b8:	4013      	ands	r3, r2
 80017ba:	683a      	ldr	r2, [r7, #0]
 80017bc:	6812      	ldr	r2, [r2, #0]
 80017be:	0691      	lsls	r1, r2, #26
 80017c0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80017c2:	430a      	orrs	r2, r1
 80017c4:	431a      	orrs	r2, r3
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80017ce:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80017d0:	e07e      	b.n	80018d0 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80017d8:	4b90      	ldr	r3, [pc, #576]	; (8001a1c <HAL_ADC_ConfigChannel+0x470>)
 80017da:	4013      	ands	r3, r2
 80017dc:	683a      	ldr	r2, [r7, #0]
 80017de:	6812      	ldr	r2, [r2, #0]
 80017e0:	0691      	lsls	r1, r2, #26
 80017e2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80017e4:	430a      	orrs	r2, r1
 80017e6:	431a      	orrs	r2, r3
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80017f0:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80017f2:	e06d      	b.n	80018d0 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80017fa:	4b88      	ldr	r3, [pc, #544]	; (8001a1c <HAL_ADC_ConfigChannel+0x470>)
 80017fc:	4013      	ands	r3, r2
 80017fe:	683a      	ldr	r2, [r7, #0]
 8001800:	6812      	ldr	r2, [r2, #0]
 8001802:	0691      	lsls	r1, r2, #26
 8001804:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001806:	430a      	orrs	r2, r1
 8001808:	431a      	orrs	r2, r3
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001812:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001814:	e05c      	b.n	80018d0 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800181c:	4b7f      	ldr	r3, [pc, #508]	; (8001a1c <HAL_ADC_ConfigChannel+0x470>)
 800181e:	4013      	ands	r3, r2
 8001820:	683a      	ldr	r2, [r7, #0]
 8001822:	6812      	ldr	r2, [r2, #0]
 8001824:	0691      	lsls	r1, r2, #26
 8001826:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001828:	430a      	orrs	r2, r1
 800182a:	431a      	orrs	r2, r3
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001834:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001836:	e04b      	b.n	80018d0 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800183e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	069b      	lsls	r3, r3, #26
 8001848:	429a      	cmp	r2, r3
 800184a:	d107      	bne.n	800185c <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800185a:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001862:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	069b      	lsls	r3, r3, #26
 800186c:	429a      	cmp	r2, r3
 800186e:	d107      	bne.n	8001880 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800187e:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001886:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	069b      	lsls	r3, r3, #26
 8001890:	429a      	cmp	r2, r3
 8001892:	d107      	bne.n	80018a4 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80018a2:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80018aa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	069b      	lsls	r3, r3, #26
 80018b4:	429a      	cmp	r2, r3
 80018b6:	d10a      	bne.n	80018ce <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80018c6:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 80018c8:	e001      	b.n	80018ce <HAL_ADC_ConfigChannel+0x322>
    }

  }
 80018ca:	bf00      	nop
 80018cc:	e000      	b.n	80018d0 <HAL_ADC_ConfigChannel+0x324>
      break;
 80018ce:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	689b      	ldr	r3, [r3, #8]
 80018d6:	f003 0303 	and.w	r3, r3, #3
 80018da:	2b01      	cmp	r3, #1
 80018dc:	d108      	bne.n	80018f0 <HAL_ADC_ConfigChannel+0x344>
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f003 0301 	and.w	r3, r3, #1
 80018e8:	2b01      	cmp	r3, #1
 80018ea:	d101      	bne.n	80018f0 <HAL_ADC_ConfigChannel+0x344>
 80018ec:	2301      	movs	r3, #1
 80018ee:	e000      	b.n	80018f2 <HAL_ADC_ConfigChannel+0x346>
 80018f0:	2300      	movs	r3, #0
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	f040 80ff 	bne.w	8001af6 <HAL_ADC_ConfigChannel+0x54a>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	68db      	ldr	r3, [r3, #12]
 80018fc:	2b01      	cmp	r3, #1
 80018fe:	d00f      	beq.n	8001920 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	2201      	movs	r2, #1
 800190e:	fa02 f303 	lsl.w	r3, r2, r3
 8001912:	43da      	mvns	r2, r3
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	400a      	ands	r2, r1
 800191a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 800191e:	e049      	b.n	80019b4 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	2201      	movs	r2, #1
 800192e:	409a      	lsls	r2, r3
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	430a      	orrs	r2, r1
 8001936:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	2b09      	cmp	r3, #9
 8001940:	d91c      	bls.n	800197c <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	6999      	ldr	r1, [r3, #24]
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	681a      	ldr	r2, [r3, #0]
 800194c:	4613      	mov	r3, r2
 800194e:	005b      	lsls	r3, r3, #1
 8001950:	4413      	add	r3, r2
 8001952:	3b1b      	subs	r3, #27
 8001954:	2207      	movs	r2, #7
 8001956:	fa02 f303 	lsl.w	r3, r2, r3
 800195a:	43db      	mvns	r3, r3
 800195c:	4019      	ands	r1, r3
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	6898      	ldr	r0, [r3, #8]
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	681a      	ldr	r2, [r3, #0]
 8001966:	4613      	mov	r3, r2
 8001968:	005b      	lsls	r3, r3, #1
 800196a:	4413      	add	r3, r2
 800196c:	3b1b      	subs	r3, #27
 800196e:	fa00 f203 	lsl.w	r2, r0, r3
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	430a      	orrs	r2, r1
 8001978:	619a      	str	r2, [r3, #24]
 800197a:	e01b      	b.n	80019b4 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	6959      	ldr	r1, [r3, #20]
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	1c5a      	adds	r2, r3, #1
 8001988:	4613      	mov	r3, r2
 800198a:	005b      	lsls	r3, r3, #1
 800198c:	4413      	add	r3, r2
 800198e:	2207      	movs	r2, #7
 8001990:	fa02 f303 	lsl.w	r3, r2, r3
 8001994:	43db      	mvns	r3, r3
 8001996:	4019      	ands	r1, r3
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	6898      	ldr	r0, [r3, #8]
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	1c5a      	adds	r2, r3, #1
 80019a2:	4613      	mov	r3, r2
 80019a4:	005b      	lsls	r3, r3, #1
 80019a6:	4413      	add	r3, r2
 80019a8:	fa00 f203 	lsl.w	r2, r0, r3
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	430a      	orrs	r2, r1
 80019b2:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80019b4:	4b1a      	ldr	r3, [pc, #104]	; (8001a20 <HAL_ADC_ConfigChannel+0x474>)
 80019b6:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	2b10      	cmp	r3, #16
 80019be:	d105      	bne.n	80019cc <HAL_ADC_ConfigChannel+0x420>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80019c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80019c2:	689b      	ldr	r3, [r3, #8]
 80019c4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d014      	beq.n	80019f6 <HAL_ADC_ConfigChannel+0x44a>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80019d0:	2b11      	cmp	r3, #17
 80019d2:	d105      	bne.n	80019e0 <HAL_ADC_ConfigChannel+0x434>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80019d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80019d6:	689b      	ldr	r3, [r3, #8]
 80019d8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d00a      	beq.n	80019f6 <HAL_ADC_ConfigChannel+0x44a>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80019e4:	2b12      	cmp	r3, #18
 80019e6:	f040 8086 	bne.w	8001af6 <HAL_ADC_ConfigChannel+0x54a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 80019ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80019ec:	689b      	ldr	r3, [r3, #8]
 80019ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d17f      	bne.n	8001af6 <HAL_ADC_ConfigChannel+0x54a>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80019f6:	2300      	movs	r3, #0
 80019f8:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	689b      	ldr	r3, [r3, #8]
 8001a00:	f003 0303 	and.w	r3, r3, #3
 8001a04:	2b01      	cmp	r3, #1
 8001a06:	d10d      	bne.n	8001a24 <HAL_ADC_ConfigChannel+0x478>
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f003 0301 	and.w	r3, r3, #1
 8001a12:	2b01      	cmp	r3, #1
 8001a14:	d106      	bne.n	8001a24 <HAL_ADC_ConfigChannel+0x478>
 8001a16:	2301      	movs	r3, #1
 8001a18:	e005      	b.n	8001a26 <HAL_ADC_ConfigChannel+0x47a>
 8001a1a:	bf00      	nop
 8001a1c:	83fff000 	.word	0x83fff000
 8001a20:	50000300 	.word	0x50000300
 8001a24:	2300      	movs	r3, #0
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d150      	bne.n	8001acc <HAL_ADC_ConfigChannel+0x520>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001a2a:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d010      	beq.n	8001a52 <HAL_ADC_ConfigChannel+0x4a6>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	689b      	ldr	r3, [r3, #8]
 8001a34:	f003 0303 	and.w	r3, r3, #3
 8001a38:	2b01      	cmp	r3, #1
 8001a3a:	d107      	bne.n	8001a4c <HAL_ADC_ConfigChannel+0x4a0>
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f003 0301 	and.w	r3, r3, #1
 8001a44:	2b01      	cmp	r3, #1
 8001a46:	d101      	bne.n	8001a4c <HAL_ADC_ConfigChannel+0x4a0>
 8001a48:	2301      	movs	r3, #1
 8001a4a:	e000      	b.n	8001a4e <HAL_ADC_ConfigChannel+0x4a2>
 8001a4c:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d13c      	bne.n	8001acc <HAL_ADC_ConfigChannel+0x520>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	2b10      	cmp	r3, #16
 8001a58:	d11d      	bne.n	8001a96 <HAL_ADC_ConfigChannel+0x4ea>
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001a62:	d118      	bne.n	8001a96 <HAL_ADC_ConfigChannel+0x4ea>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8001a64:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001a66:	689b      	ldr	r3, [r3, #8]
 8001a68:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001a6c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001a6e:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001a70:	4b27      	ldr	r3, [pc, #156]	; (8001b10 <HAL_ADC_ConfigChannel+0x564>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4a27      	ldr	r2, [pc, #156]	; (8001b14 <HAL_ADC_ConfigChannel+0x568>)
 8001a76:	fba2 2303 	umull	r2, r3, r2, r3
 8001a7a:	0c9a      	lsrs	r2, r3, #18
 8001a7c:	4613      	mov	r3, r2
 8001a7e:	009b      	lsls	r3, r3, #2
 8001a80:	4413      	add	r3, r2
 8001a82:	005b      	lsls	r3, r3, #1
 8001a84:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001a86:	e002      	b.n	8001a8e <HAL_ADC_ConfigChannel+0x4e2>
          {
            wait_loop_index--;
 8001a88:	68bb      	ldr	r3, [r7, #8]
 8001a8a:	3b01      	subs	r3, #1
 8001a8c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001a8e:	68bb      	ldr	r3, [r7, #8]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d1f9      	bne.n	8001a88 <HAL_ADC_ConfigChannel+0x4dc>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001a94:	e02e      	b.n	8001af4 <HAL_ADC_ConfigChannel+0x548>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	2b11      	cmp	r3, #17
 8001a9c:	d10b      	bne.n	8001ab6 <HAL_ADC_ConfigChannel+0x50a>
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001aa6:	d106      	bne.n	8001ab6 <HAL_ADC_ConfigChannel+0x50a>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8001aa8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001aaa:	689b      	ldr	r3, [r3, #8]
 8001aac:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8001ab0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ab2:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001ab4:	e01e      	b.n	8001af4 <HAL_ADC_ConfigChannel+0x548>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	2b12      	cmp	r3, #18
 8001abc:	d11a      	bne.n	8001af4 <HAL_ADC_ConfigChannel+0x548>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8001abe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ac0:	689b      	ldr	r3, [r3, #8]
 8001ac2:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001ac6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ac8:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001aca:	e013      	b.n	8001af4 <HAL_ADC_ConfigChannel+0x548>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad0:	f043 0220 	orr.w	r2, r3, #32
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8001ad8:	2301      	movs	r3, #1
 8001ada:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001ade:	e00a      	b.n	8001af6 <HAL_ADC_ConfigChannel+0x54a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ae4:	f043 0220 	orr.w	r2, r3, #32
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001aec:	2301      	movs	r3, #1
 8001aee:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001af2:	e000      	b.n	8001af6 <HAL_ADC_ConfigChannel+0x54a>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001af4:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	2200      	movs	r2, #0
 8001afa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001afe:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001b02:	4618      	mov	r0, r3
 8001b04:	376c      	adds	r7, #108	; 0x6c
 8001b06:	46bd      	mov	sp, r7
 8001b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0c:	4770      	bx	lr
 8001b0e:	bf00      	nop
 8001b10:	20000000 	.word	0x20000000
 8001b14:	431bde83 	.word	0x431bde83

08001b18 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b084      	sub	sp, #16
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b24:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b2a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d126      	bne.n	8001b80 <ADC_DMAConvCplt+0x68>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b36:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	641a      	str	r2, [r3, #64]	; 0x40
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F3 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	68db      	ldr	r3, [r3, #12]
 8001b44:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d115      	bne.n	8001b78 <ADC_DMAConvCplt+0x60>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	7e5b      	ldrb	r3, [r3, #25]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d111      	bne.n	8001b78 <ADC_DMAConvCplt+0x60>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b58:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b64:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d105      	bne.n	8001b78 <ADC_DMAConvCplt+0x60>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b70:	f043 0201 	orr.w	r2, r3, #1
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8001b78:	68f8      	ldr	r0, [r7, #12]
 8001b7a:	f7ff fad7 	bl	800112c <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8001b7e:	e004      	b.n	8001b8a <ADC_DMAConvCplt+0x72>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b86:	6878      	ldr	r0, [r7, #4]
 8001b88:	4798      	blx	r3
}
 8001b8a:	bf00      	nop
 8001b8c:	3710      	adds	r7, #16
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}

08001b92 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001b92:	b580      	push	{r7, lr}
 8001b94:	b084      	sub	sp, #16
 8001b96:	af00      	add	r7, sp, #0
 8001b98:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b9e:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001ba0:	68f8      	ldr	r0, [r7, #12]
 8001ba2:	f7ff facd 	bl	8001140 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */ 
}
 8001ba6:	bf00      	nop
 8001ba8:	3710      	adds	r7, #16
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}

08001bae <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001bae:	b580      	push	{r7, lr}
 8001bb0:	b084      	sub	sp, #16
 8001bb2:	af00      	add	r7, sp, #0
 8001bb4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bba:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bc0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bcc:	f043 0204 	orr.w	r2, r3, #4
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001bd4:	68f8      	ldr	r0, [r7, #12]
 8001bd6:	f7ff fabd 	bl	8001154 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001bda:	bf00      	nop
 8001bdc:	3710      	adds	r7, #16
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}
	...

08001be4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b084      	sub	sp, #16
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001bec:	2300      	movs	r3, #0
 8001bee:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	689b      	ldr	r3, [r3, #8]
 8001bf6:	f003 0303 	and.w	r3, r3, #3
 8001bfa:	2b01      	cmp	r3, #1
 8001bfc:	d108      	bne.n	8001c10 <ADC_Enable+0x2c>
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f003 0301 	and.w	r3, r3, #1
 8001c08:	2b01      	cmp	r3, #1
 8001c0a:	d101      	bne.n	8001c10 <ADC_Enable+0x2c>
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	e000      	b.n	8001c12 <ADC_Enable+0x2e>
 8001c10:	2300      	movs	r3, #0
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d143      	bne.n	8001c9e <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	689a      	ldr	r2, [r3, #8]
 8001c1c:	4b22      	ldr	r3, [pc, #136]	; (8001ca8 <ADC_Enable+0xc4>)
 8001c1e:	4013      	ands	r3, r2
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d00d      	beq.n	8001c40 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c28:	f043 0210 	orr.w	r2, r3, #16
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c34:	f043 0201 	orr.w	r2, r3, #1
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	e02f      	b.n	8001ca0 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	689a      	ldr	r2, [r3, #8]
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f042 0201 	orr.w	r2, r2, #1
 8001c4e:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8001c50:	f7ff fa60 	bl	8001114 <HAL_GetTick>
 8001c54:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001c56:	e01b      	b.n	8001c90 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001c58:	f7ff fa5c 	bl	8001114 <HAL_GetTick>
 8001c5c:	4602      	mov	r2, r0
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	1ad3      	subs	r3, r2, r3
 8001c62:	2b02      	cmp	r3, #2
 8001c64:	d914      	bls.n	8001c90 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f003 0301 	and.w	r3, r3, #1
 8001c70:	2b01      	cmp	r3, #1
 8001c72:	d00d      	beq.n	8001c90 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c78:	f043 0210 	orr.w	r2, r3, #16
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c84:	f043 0201 	orr.w	r2, r3, #1
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	e007      	b.n	8001ca0 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f003 0301 	and.w	r3, r3, #1
 8001c9a:	2b01      	cmp	r3, #1
 8001c9c:	d1dc      	bne.n	8001c58 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001c9e:	2300      	movs	r3, #0
}
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	3710      	adds	r7, #16
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bd80      	pop	{r7, pc}
 8001ca8:	8000003f 	.word	0x8000003f

08001cac <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b084      	sub	sp, #16
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	689b      	ldr	r3, [r3, #8]
 8001cbe:	f003 0303 	and.w	r3, r3, #3
 8001cc2:	2b01      	cmp	r3, #1
 8001cc4:	d108      	bne.n	8001cd8 <ADC_Disable+0x2c>
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f003 0301 	and.w	r3, r3, #1
 8001cd0:	2b01      	cmp	r3, #1
 8001cd2:	d101      	bne.n	8001cd8 <ADC_Disable+0x2c>
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	e000      	b.n	8001cda <ADC_Disable+0x2e>
 8001cd8:	2300      	movs	r3, #0
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d047      	beq.n	8001d6e <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	689b      	ldr	r3, [r3, #8]
 8001ce4:	f003 030d 	and.w	r3, r3, #13
 8001ce8:	2b01      	cmp	r3, #1
 8001cea:	d10f      	bne.n	8001d0c <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	689a      	ldr	r2, [r3, #8]
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f042 0202 	orr.w	r2, r2, #2
 8001cfa:	609a      	str	r2, [r3, #8]
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	2203      	movs	r2, #3
 8001d02:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8001d04:	f7ff fa06 	bl	8001114 <HAL_GetTick>
 8001d08:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001d0a:	e029      	b.n	8001d60 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d10:	f043 0210 	orr.w	r2, r3, #16
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d1c:	f043 0201 	orr.w	r2, r3, #1
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8001d24:	2301      	movs	r3, #1
 8001d26:	e023      	b.n	8001d70 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001d28:	f7ff f9f4 	bl	8001114 <HAL_GetTick>
 8001d2c:	4602      	mov	r2, r0
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	1ad3      	subs	r3, r2, r3
 8001d32:	2b02      	cmp	r3, #2
 8001d34:	d914      	bls.n	8001d60 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	689b      	ldr	r3, [r3, #8]
 8001d3c:	f003 0301 	and.w	r3, r3, #1
 8001d40:	2b01      	cmp	r3, #1
 8001d42:	d10d      	bne.n	8001d60 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d48:	f043 0210 	orr.w	r2, r3, #16
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d54:	f043 0201 	orr.w	r2, r3, #1
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8001d5c:	2301      	movs	r3, #1
 8001d5e:	e007      	b.n	8001d70 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	689b      	ldr	r3, [r3, #8]
 8001d66:	f003 0301 	and.w	r3, r3, #1
 8001d6a:	2b01      	cmp	r3, #1
 8001d6c:	d0dc      	beq.n	8001d28 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001d6e:	2300      	movs	r3, #0
}
 8001d70:	4618      	mov	r0, r3
 8001d72:	3710      	adds	r7, #16
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bd80      	pop	{r7, pc}

08001d78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	b085      	sub	sp, #20
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	f003 0307 	and.w	r3, r3, #7
 8001d86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d88:	4b0c      	ldr	r3, [pc, #48]	; (8001dbc <__NVIC_SetPriorityGrouping+0x44>)
 8001d8a:	68db      	ldr	r3, [r3, #12]
 8001d8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d8e:	68ba      	ldr	r2, [r7, #8]
 8001d90:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d94:	4013      	ands	r3, r2
 8001d96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d9c:	68bb      	ldr	r3, [r7, #8]
 8001d9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001da0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001da4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001da8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001daa:	4a04      	ldr	r2, [pc, #16]	; (8001dbc <__NVIC_SetPriorityGrouping+0x44>)
 8001dac:	68bb      	ldr	r3, [r7, #8]
 8001dae:	60d3      	str	r3, [r2, #12]
}
 8001db0:	bf00      	nop
 8001db2:	3714      	adds	r7, #20
 8001db4:	46bd      	mov	sp, r7
 8001db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dba:	4770      	bx	lr
 8001dbc:	e000ed00 	.word	0xe000ed00

08001dc0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001dc4:	4b04      	ldr	r3, [pc, #16]	; (8001dd8 <__NVIC_GetPriorityGrouping+0x18>)
 8001dc6:	68db      	ldr	r3, [r3, #12]
 8001dc8:	0a1b      	lsrs	r3, r3, #8
 8001dca:	f003 0307 	and.w	r3, r3, #7
}
 8001dce:	4618      	mov	r0, r3
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd6:	4770      	bx	lr
 8001dd8:	e000ed00 	.word	0xe000ed00

08001ddc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	b083      	sub	sp, #12
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	4603      	mov	r3, r0
 8001de4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001de6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	db0b      	blt.n	8001e06 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001dee:	79fb      	ldrb	r3, [r7, #7]
 8001df0:	f003 021f 	and.w	r2, r3, #31
 8001df4:	4907      	ldr	r1, [pc, #28]	; (8001e14 <__NVIC_EnableIRQ+0x38>)
 8001df6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dfa:	095b      	lsrs	r3, r3, #5
 8001dfc:	2001      	movs	r0, #1
 8001dfe:	fa00 f202 	lsl.w	r2, r0, r2
 8001e02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001e06:	bf00      	nop
 8001e08:	370c      	adds	r7, #12
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e10:	4770      	bx	lr
 8001e12:	bf00      	nop
 8001e14:	e000e100 	.word	0xe000e100

08001e18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b083      	sub	sp, #12
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	4603      	mov	r3, r0
 8001e20:	6039      	str	r1, [r7, #0]
 8001e22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	db0a      	blt.n	8001e42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	b2da      	uxtb	r2, r3
 8001e30:	490c      	ldr	r1, [pc, #48]	; (8001e64 <__NVIC_SetPriority+0x4c>)
 8001e32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e36:	0112      	lsls	r2, r2, #4
 8001e38:	b2d2      	uxtb	r2, r2
 8001e3a:	440b      	add	r3, r1
 8001e3c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e40:	e00a      	b.n	8001e58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	b2da      	uxtb	r2, r3
 8001e46:	4908      	ldr	r1, [pc, #32]	; (8001e68 <__NVIC_SetPriority+0x50>)
 8001e48:	79fb      	ldrb	r3, [r7, #7]
 8001e4a:	f003 030f 	and.w	r3, r3, #15
 8001e4e:	3b04      	subs	r3, #4
 8001e50:	0112      	lsls	r2, r2, #4
 8001e52:	b2d2      	uxtb	r2, r2
 8001e54:	440b      	add	r3, r1
 8001e56:	761a      	strb	r2, [r3, #24]
}
 8001e58:	bf00      	nop
 8001e5a:	370c      	adds	r7, #12
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e62:	4770      	bx	lr
 8001e64:	e000e100 	.word	0xe000e100
 8001e68:	e000ed00 	.word	0xe000ed00

08001e6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b089      	sub	sp, #36	; 0x24
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	60f8      	str	r0, [r7, #12]
 8001e74:	60b9      	str	r1, [r7, #8]
 8001e76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	f003 0307 	and.w	r3, r3, #7
 8001e7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e80:	69fb      	ldr	r3, [r7, #28]
 8001e82:	f1c3 0307 	rsb	r3, r3, #7
 8001e86:	2b04      	cmp	r3, #4
 8001e88:	bf28      	it	cs
 8001e8a:	2304      	movcs	r3, #4
 8001e8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e8e:	69fb      	ldr	r3, [r7, #28]
 8001e90:	3304      	adds	r3, #4
 8001e92:	2b06      	cmp	r3, #6
 8001e94:	d902      	bls.n	8001e9c <NVIC_EncodePriority+0x30>
 8001e96:	69fb      	ldr	r3, [r7, #28]
 8001e98:	3b03      	subs	r3, #3
 8001e9a:	e000      	b.n	8001e9e <NVIC_EncodePriority+0x32>
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ea0:	f04f 32ff 	mov.w	r2, #4294967295
 8001ea4:	69bb      	ldr	r3, [r7, #24]
 8001ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eaa:	43da      	mvns	r2, r3
 8001eac:	68bb      	ldr	r3, [r7, #8]
 8001eae:	401a      	ands	r2, r3
 8001eb0:	697b      	ldr	r3, [r7, #20]
 8001eb2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001eb4:	f04f 31ff 	mov.w	r1, #4294967295
 8001eb8:	697b      	ldr	r3, [r7, #20]
 8001eba:	fa01 f303 	lsl.w	r3, r1, r3
 8001ebe:	43d9      	mvns	r1, r3
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ec4:	4313      	orrs	r3, r2
         );
}
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	3724      	adds	r7, #36	; 0x24
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed0:	4770      	bx	lr

08001ed2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ed2:	b580      	push	{r7, lr}
 8001ed4:	b082      	sub	sp, #8
 8001ed6:	af00      	add	r7, sp, #0
 8001ed8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001eda:	6878      	ldr	r0, [r7, #4]
 8001edc:	f7ff ff4c 	bl	8001d78 <__NVIC_SetPriorityGrouping>
}
 8001ee0:	bf00      	nop
 8001ee2:	3708      	adds	r7, #8
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bd80      	pop	{r7, pc}

08001ee8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b086      	sub	sp, #24
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	4603      	mov	r3, r0
 8001ef0:	60b9      	str	r1, [r7, #8]
 8001ef2:	607a      	str	r2, [r7, #4]
 8001ef4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001efa:	f7ff ff61 	bl	8001dc0 <__NVIC_GetPriorityGrouping>
 8001efe:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f00:	687a      	ldr	r2, [r7, #4]
 8001f02:	68b9      	ldr	r1, [r7, #8]
 8001f04:	6978      	ldr	r0, [r7, #20]
 8001f06:	f7ff ffb1 	bl	8001e6c <NVIC_EncodePriority>
 8001f0a:	4602      	mov	r2, r0
 8001f0c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f10:	4611      	mov	r1, r2
 8001f12:	4618      	mov	r0, r3
 8001f14:	f7ff ff80 	bl	8001e18 <__NVIC_SetPriority>
}
 8001f18:	bf00      	nop
 8001f1a:	3718      	adds	r7, #24
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bd80      	pop	{r7, pc}

08001f20 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b082      	sub	sp, #8
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	4603      	mov	r3, r0
 8001f28:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f2e:	4618      	mov	r0, r3
 8001f30:	f7ff ff54 	bl	8001ddc <__NVIC_EnableIRQ>
}
 8001f34:	bf00      	nop
 8001f36:	3708      	adds	r7, #8
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bd80      	pop	{r7, pc}

08001f3c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b084      	sub	sp, #16
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001f44:	2300      	movs	r3, #0
 8001f46:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d101      	bne.n	8001f52 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001f4e:	2301      	movs	r3, #1
 8001f50:	e037      	b.n	8001fc2 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2202      	movs	r2, #2
 8001f56:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001f68:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001f6c:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001f76:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	68db      	ldr	r3, [r3, #12]
 8001f7c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f82:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	695b      	ldr	r3, [r3, #20]
 8001f88:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f8e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	69db      	ldr	r3, [r3, #28]
 8001f94:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001f96:	68fa      	ldr	r2, [r7, #12]
 8001f98:	4313      	orrs	r3, r2
 8001f9a:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	68fa      	ldr	r2, [r7, #12]
 8001fa2:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8001fa4:	6878      	ldr	r0, [r7, #4]
 8001fa6:	f000 f941 	bl	800222c <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	2200      	movs	r2, #0
 8001fae:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2201      	movs	r2, #1
 8001fb4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2200      	movs	r2, #0
 8001fbc:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8001fc0:	2300      	movs	r3, #0
}  
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	3710      	adds	r7, #16
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}

08001fca <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001fca:	b580      	push	{r7, lr}
 8001fcc:	b086      	sub	sp, #24
 8001fce:	af00      	add	r7, sp, #0
 8001fd0:	60f8      	str	r0, [r7, #12]
 8001fd2:	60b9      	str	r1, [r7, #8]
 8001fd4:	607a      	str	r2, [r7, #4]
 8001fd6:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001fe2:	2b01      	cmp	r3, #1
 8001fe4:	d101      	bne.n	8001fea <HAL_DMA_Start_IT+0x20>
 8001fe6:	2302      	movs	r3, #2
 8001fe8:	e04a      	b.n	8002080 <HAL_DMA_Start_IT+0xb6>
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	2201      	movs	r2, #1
 8001fee:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001ff8:	2b01      	cmp	r3, #1
 8001ffa:	d13a      	bne.n	8002072 <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	2202      	movs	r2, #2
 8002000:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	2200      	movs	r2, #0
 8002008:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	681a      	ldr	r2, [r3, #0]
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f022 0201 	bic.w	r2, r2, #1
 8002018:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	687a      	ldr	r2, [r7, #4]
 800201e:	68b9      	ldr	r1, [r7, #8]
 8002020:	68f8      	ldr	r0, [r7, #12]
 8002022:	f000 f8d4 	bl	80021ce <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800202a:	2b00      	cmp	r3, #0
 800202c:	d008      	beq.n	8002040 <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	681a      	ldr	r2, [r3, #0]
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f042 020e 	orr.w	r2, r2, #14
 800203c:	601a      	str	r2, [r3, #0]
 800203e:	e00f      	b.n	8002060 <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	681a      	ldr	r2, [r3, #0]
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f042 020a 	orr.w	r2, r2, #10
 800204e:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	681a      	ldr	r2, [r3, #0]
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f022 0204 	bic.w	r2, r2, #4
 800205e:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	681a      	ldr	r2, [r3, #0]
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f042 0201 	orr.w	r2, r2, #1
 800206e:	601a      	str	r2, [r3, #0]
 8002070:	e005      	b.n	800207e <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	2200      	movs	r2, #0
 8002076:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 800207a:	2302      	movs	r3, #2
 800207c:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 800207e:	7dfb      	ldrb	r3, [r7, #23]
} 
 8002080:	4618      	mov	r0, r3
 8002082:	3718      	adds	r7, #24
 8002084:	46bd      	mov	sp, r7
 8002086:	bd80      	pop	{r7, pc}

08002088 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b084      	sub	sp, #16
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a4:	2204      	movs	r2, #4
 80020a6:	409a      	lsls	r2, r3
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	4013      	ands	r3, r2
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d024      	beq.n	80020fa <HAL_DMA_IRQHandler+0x72>
 80020b0:	68bb      	ldr	r3, [r7, #8]
 80020b2:	f003 0304 	and.w	r3, r3, #4
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d01f      	beq.n	80020fa <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f003 0320 	and.w	r3, r3, #32
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d107      	bne.n	80020d8 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	681a      	ldr	r2, [r3, #0]
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f022 0204 	bic.w	r2, r2, #4
 80020d6:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020e0:	2104      	movs	r1, #4
 80020e2:	fa01 f202 	lsl.w	r2, r1, r2
 80020e6:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d06a      	beq.n	80021c6 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020f4:	6878      	ldr	r0, [r7, #4]
 80020f6:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 80020f8:	e065      	b.n	80021c6 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020fe:	2202      	movs	r2, #2
 8002100:	409a      	lsls	r2, r3
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	4013      	ands	r3, r2
 8002106:	2b00      	cmp	r3, #0
 8002108:	d02c      	beq.n	8002164 <HAL_DMA_IRQHandler+0xdc>
 800210a:	68bb      	ldr	r3, [r7, #8]
 800210c:	f003 0302 	and.w	r3, r3, #2
 8002110:	2b00      	cmp	r3, #0
 8002112:	d027      	beq.n	8002164 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f003 0320 	and.w	r3, r3, #32
 800211e:	2b00      	cmp	r3, #0
 8002120:	d10b      	bne.n	800213a <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	681a      	ldr	r2, [r3, #0]
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f022 020a 	bic.w	r2, r2, #10
 8002130:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2201      	movs	r2, #1
 8002136:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002142:	2102      	movs	r1, #2
 8002144:	fa01 f202 	lsl.w	r2, r1, r2
 8002148:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2200      	movs	r2, #0
 800214e:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002156:	2b00      	cmp	r3, #0
 8002158:	d035      	beq.n	80021c6 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800215e:	6878      	ldr	r0, [r7, #4]
 8002160:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8002162:	e030      	b.n	80021c6 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002168:	2208      	movs	r2, #8
 800216a:	409a      	lsls	r2, r3
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	4013      	ands	r3, r2
 8002170:	2b00      	cmp	r3, #0
 8002172:	d028      	beq.n	80021c6 <HAL_DMA_IRQHandler+0x13e>
 8002174:	68bb      	ldr	r3, [r7, #8]
 8002176:	f003 0308 	and.w	r3, r3, #8
 800217a:	2b00      	cmp	r3, #0
 800217c:	d023      	beq.n	80021c6 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	681a      	ldr	r2, [r3, #0]
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f022 020e 	bic.w	r2, r2, #14
 800218c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002196:	2101      	movs	r1, #1
 8002198:	fa01 f202 	lsl.w	r2, r1, r2
 800219c:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	2201      	movs	r2, #1
 80021a2:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2201      	movs	r2, #1
 80021a8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2200      	movs	r2, #0
 80021b0:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d004      	beq.n	80021c6 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021c0:	6878      	ldr	r0, [r7, #4]
 80021c2:	4798      	blx	r3
    }
  }
}  
 80021c4:	e7ff      	b.n	80021c6 <HAL_DMA_IRQHandler+0x13e>
 80021c6:	bf00      	nop
 80021c8:	3710      	adds	r7, #16
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}

080021ce <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80021ce:	b480      	push	{r7}
 80021d0:	b085      	sub	sp, #20
 80021d2:	af00      	add	r7, sp, #0
 80021d4:	60f8      	str	r0, [r7, #12]
 80021d6:	60b9      	str	r1, [r7, #8]
 80021d8:	607a      	str	r2, [r7, #4]
 80021da:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021e4:	2101      	movs	r1, #1
 80021e6:	fa01 f202 	lsl.w	r2, r1, r2
 80021ea:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	683a      	ldr	r2, [r7, #0]
 80021f2:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	2b10      	cmp	r3, #16
 80021fa:	d108      	bne.n	800220e <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	687a      	ldr	r2, [r7, #4]
 8002202:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	68ba      	ldr	r2, [r7, #8]
 800220a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800220c:	e007      	b.n	800221e <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	68ba      	ldr	r2, [r7, #8]
 8002214:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	687a      	ldr	r2, [r7, #4]
 800221c:	60da      	str	r2, [r3, #12]
}
 800221e:	bf00      	nop
 8002220:	3714      	adds	r7, #20
 8002222:	46bd      	mov	sp, r7
 8002224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002228:	4770      	bx	lr
	...

0800222c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800222c:	b480      	push	{r7}
 800222e:	b083      	sub	sp, #12
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	461a      	mov	r2, r3
 800223a:	4b09      	ldr	r3, [pc, #36]	; (8002260 <DMA_CalcBaseAndBitshift+0x34>)
 800223c:	4413      	add	r3, r2
 800223e:	4a09      	ldr	r2, [pc, #36]	; (8002264 <DMA_CalcBaseAndBitshift+0x38>)
 8002240:	fba2 2303 	umull	r2, r3, r2, r3
 8002244:	091b      	lsrs	r3, r3, #4
 8002246:	009a      	lsls	r2, r3, #2
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	4a06      	ldr	r2, [pc, #24]	; (8002268 <DMA_CalcBaseAndBitshift+0x3c>)
 8002250:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8002252:	bf00      	nop
 8002254:	370c      	adds	r7, #12
 8002256:	46bd      	mov	sp, r7
 8002258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225c:	4770      	bx	lr
 800225e:	bf00      	nop
 8002260:	bffdfff8 	.word	0xbffdfff8
 8002264:	cccccccd 	.word	0xcccccccd
 8002268:	40020000 	.word	0x40020000

0800226c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800226c:	b480      	push	{r7}
 800226e:	b087      	sub	sp, #28
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
 8002274:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002276:	2300      	movs	r3, #0
 8002278:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800227a:	e14e      	b.n	800251a <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	681a      	ldr	r2, [r3, #0]
 8002280:	2101      	movs	r1, #1
 8002282:	697b      	ldr	r3, [r7, #20]
 8002284:	fa01 f303 	lsl.w	r3, r1, r3
 8002288:	4013      	ands	r3, r2
 800228a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	2b00      	cmp	r3, #0
 8002290:	f000 8140 	beq.w	8002514 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	f003 0303 	and.w	r3, r3, #3
 800229c:	2b01      	cmp	r3, #1
 800229e:	d005      	beq.n	80022ac <HAL_GPIO_Init+0x40>
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	f003 0303 	and.w	r3, r3, #3
 80022a8:	2b02      	cmp	r3, #2
 80022aa:	d130      	bne.n	800230e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	689b      	ldr	r3, [r3, #8]
 80022b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80022b2:	697b      	ldr	r3, [r7, #20]
 80022b4:	005b      	lsls	r3, r3, #1
 80022b6:	2203      	movs	r2, #3
 80022b8:	fa02 f303 	lsl.w	r3, r2, r3
 80022bc:	43db      	mvns	r3, r3
 80022be:	693a      	ldr	r2, [r7, #16]
 80022c0:	4013      	ands	r3, r2
 80022c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	68da      	ldr	r2, [r3, #12]
 80022c8:	697b      	ldr	r3, [r7, #20]
 80022ca:	005b      	lsls	r3, r3, #1
 80022cc:	fa02 f303 	lsl.w	r3, r2, r3
 80022d0:	693a      	ldr	r2, [r7, #16]
 80022d2:	4313      	orrs	r3, r2
 80022d4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	693a      	ldr	r2, [r7, #16]
 80022da:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80022e2:	2201      	movs	r2, #1
 80022e4:	697b      	ldr	r3, [r7, #20]
 80022e6:	fa02 f303 	lsl.w	r3, r2, r3
 80022ea:	43db      	mvns	r3, r3
 80022ec:	693a      	ldr	r2, [r7, #16]
 80022ee:	4013      	ands	r3, r2
 80022f0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	091b      	lsrs	r3, r3, #4
 80022f8:	f003 0201 	and.w	r2, r3, #1
 80022fc:	697b      	ldr	r3, [r7, #20]
 80022fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002302:	693a      	ldr	r2, [r7, #16]
 8002304:	4313      	orrs	r3, r2
 8002306:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	693a      	ldr	r2, [r7, #16]
 800230c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	f003 0303 	and.w	r3, r3, #3
 8002316:	2b03      	cmp	r3, #3
 8002318:	d017      	beq.n	800234a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	68db      	ldr	r3, [r3, #12]
 800231e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002320:	697b      	ldr	r3, [r7, #20]
 8002322:	005b      	lsls	r3, r3, #1
 8002324:	2203      	movs	r2, #3
 8002326:	fa02 f303 	lsl.w	r3, r2, r3
 800232a:	43db      	mvns	r3, r3
 800232c:	693a      	ldr	r2, [r7, #16]
 800232e:	4013      	ands	r3, r2
 8002330:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	689a      	ldr	r2, [r3, #8]
 8002336:	697b      	ldr	r3, [r7, #20]
 8002338:	005b      	lsls	r3, r3, #1
 800233a:	fa02 f303 	lsl.w	r3, r2, r3
 800233e:	693a      	ldr	r2, [r7, #16]
 8002340:	4313      	orrs	r3, r2
 8002342:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	693a      	ldr	r2, [r7, #16]
 8002348:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	f003 0303 	and.w	r3, r3, #3
 8002352:	2b02      	cmp	r3, #2
 8002354:	d123      	bne.n	800239e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002356:	697b      	ldr	r3, [r7, #20]
 8002358:	08da      	lsrs	r2, r3, #3
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	3208      	adds	r2, #8
 800235e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002362:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002364:	697b      	ldr	r3, [r7, #20]
 8002366:	f003 0307 	and.w	r3, r3, #7
 800236a:	009b      	lsls	r3, r3, #2
 800236c:	220f      	movs	r2, #15
 800236e:	fa02 f303 	lsl.w	r3, r2, r3
 8002372:	43db      	mvns	r3, r3
 8002374:	693a      	ldr	r2, [r7, #16]
 8002376:	4013      	ands	r3, r2
 8002378:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	691a      	ldr	r2, [r3, #16]
 800237e:	697b      	ldr	r3, [r7, #20]
 8002380:	f003 0307 	and.w	r3, r3, #7
 8002384:	009b      	lsls	r3, r3, #2
 8002386:	fa02 f303 	lsl.w	r3, r2, r3
 800238a:	693a      	ldr	r2, [r7, #16]
 800238c:	4313      	orrs	r3, r2
 800238e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002390:	697b      	ldr	r3, [r7, #20]
 8002392:	08da      	lsrs	r2, r3, #3
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	3208      	adds	r2, #8
 8002398:	6939      	ldr	r1, [r7, #16]
 800239a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80023a4:	697b      	ldr	r3, [r7, #20]
 80023a6:	005b      	lsls	r3, r3, #1
 80023a8:	2203      	movs	r2, #3
 80023aa:	fa02 f303 	lsl.w	r3, r2, r3
 80023ae:	43db      	mvns	r3, r3
 80023b0:	693a      	ldr	r2, [r7, #16]
 80023b2:	4013      	ands	r3, r2
 80023b4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	f003 0203 	and.w	r2, r3, #3
 80023be:	697b      	ldr	r3, [r7, #20]
 80023c0:	005b      	lsls	r3, r3, #1
 80023c2:	fa02 f303 	lsl.w	r3, r2, r3
 80023c6:	693a      	ldr	r2, [r7, #16]
 80023c8:	4313      	orrs	r3, r2
 80023ca:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	693a      	ldr	r2, [r7, #16]
 80023d0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80023da:	2b00      	cmp	r3, #0
 80023dc:	f000 809a 	beq.w	8002514 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023e0:	4b55      	ldr	r3, [pc, #340]	; (8002538 <HAL_GPIO_Init+0x2cc>)
 80023e2:	699b      	ldr	r3, [r3, #24]
 80023e4:	4a54      	ldr	r2, [pc, #336]	; (8002538 <HAL_GPIO_Init+0x2cc>)
 80023e6:	f043 0301 	orr.w	r3, r3, #1
 80023ea:	6193      	str	r3, [r2, #24]
 80023ec:	4b52      	ldr	r3, [pc, #328]	; (8002538 <HAL_GPIO_Init+0x2cc>)
 80023ee:	699b      	ldr	r3, [r3, #24]
 80023f0:	f003 0301 	and.w	r3, r3, #1
 80023f4:	60bb      	str	r3, [r7, #8]
 80023f6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80023f8:	4a50      	ldr	r2, [pc, #320]	; (800253c <HAL_GPIO_Init+0x2d0>)
 80023fa:	697b      	ldr	r3, [r7, #20]
 80023fc:	089b      	lsrs	r3, r3, #2
 80023fe:	3302      	adds	r3, #2
 8002400:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002404:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002406:	697b      	ldr	r3, [r7, #20]
 8002408:	f003 0303 	and.w	r3, r3, #3
 800240c:	009b      	lsls	r3, r3, #2
 800240e:	220f      	movs	r2, #15
 8002410:	fa02 f303 	lsl.w	r3, r2, r3
 8002414:	43db      	mvns	r3, r3
 8002416:	693a      	ldr	r2, [r7, #16]
 8002418:	4013      	ands	r3, r2
 800241a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002422:	d013      	beq.n	800244c <HAL_GPIO_Init+0x1e0>
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	4a46      	ldr	r2, [pc, #280]	; (8002540 <HAL_GPIO_Init+0x2d4>)
 8002428:	4293      	cmp	r3, r2
 800242a:	d00d      	beq.n	8002448 <HAL_GPIO_Init+0x1dc>
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	4a45      	ldr	r2, [pc, #276]	; (8002544 <HAL_GPIO_Init+0x2d8>)
 8002430:	4293      	cmp	r3, r2
 8002432:	d007      	beq.n	8002444 <HAL_GPIO_Init+0x1d8>
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	4a44      	ldr	r2, [pc, #272]	; (8002548 <HAL_GPIO_Init+0x2dc>)
 8002438:	4293      	cmp	r3, r2
 800243a:	d101      	bne.n	8002440 <HAL_GPIO_Init+0x1d4>
 800243c:	2303      	movs	r3, #3
 800243e:	e006      	b.n	800244e <HAL_GPIO_Init+0x1e2>
 8002440:	2305      	movs	r3, #5
 8002442:	e004      	b.n	800244e <HAL_GPIO_Init+0x1e2>
 8002444:	2302      	movs	r3, #2
 8002446:	e002      	b.n	800244e <HAL_GPIO_Init+0x1e2>
 8002448:	2301      	movs	r3, #1
 800244a:	e000      	b.n	800244e <HAL_GPIO_Init+0x1e2>
 800244c:	2300      	movs	r3, #0
 800244e:	697a      	ldr	r2, [r7, #20]
 8002450:	f002 0203 	and.w	r2, r2, #3
 8002454:	0092      	lsls	r2, r2, #2
 8002456:	4093      	lsls	r3, r2
 8002458:	693a      	ldr	r2, [r7, #16]
 800245a:	4313      	orrs	r3, r2
 800245c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800245e:	4937      	ldr	r1, [pc, #220]	; (800253c <HAL_GPIO_Init+0x2d0>)
 8002460:	697b      	ldr	r3, [r7, #20]
 8002462:	089b      	lsrs	r3, r3, #2
 8002464:	3302      	adds	r3, #2
 8002466:	693a      	ldr	r2, [r7, #16]
 8002468:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800246c:	4b37      	ldr	r3, [pc, #220]	; (800254c <HAL_GPIO_Init+0x2e0>)
 800246e:	689b      	ldr	r3, [r3, #8]
 8002470:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	43db      	mvns	r3, r3
 8002476:	693a      	ldr	r2, [r7, #16]
 8002478:	4013      	ands	r3, r2
 800247a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002484:	2b00      	cmp	r3, #0
 8002486:	d003      	beq.n	8002490 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8002488:	693a      	ldr	r2, [r7, #16]
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	4313      	orrs	r3, r2
 800248e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002490:	4a2e      	ldr	r2, [pc, #184]	; (800254c <HAL_GPIO_Init+0x2e0>)
 8002492:	693b      	ldr	r3, [r7, #16]
 8002494:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002496:	4b2d      	ldr	r3, [pc, #180]	; (800254c <HAL_GPIO_Init+0x2e0>)
 8002498:	68db      	ldr	r3, [r3, #12]
 800249a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	43db      	mvns	r3, r3
 80024a0:	693a      	ldr	r2, [r7, #16]
 80024a2:	4013      	ands	r3, r2
 80024a4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d003      	beq.n	80024ba <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 80024b2:	693a      	ldr	r2, [r7, #16]
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	4313      	orrs	r3, r2
 80024b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80024ba:	4a24      	ldr	r2, [pc, #144]	; (800254c <HAL_GPIO_Init+0x2e0>)
 80024bc:	693b      	ldr	r3, [r7, #16]
 80024be:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80024c0:	4b22      	ldr	r3, [pc, #136]	; (800254c <HAL_GPIO_Init+0x2e0>)
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	43db      	mvns	r3, r3
 80024ca:	693a      	ldr	r2, [r7, #16]
 80024cc:	4013      	ands	r3, r2
 80024ce:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d003      	beq.n	80024e4 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 80024dc:	693a      	ldr	r2, [r7, #16]
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	4313      	orrs	r3, r2
 80024e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80024e4:	4a19      	ldr	r2, [pc, #100]	; (800254c <HAL_GPIO_Init+0x2e0>)
 80024e6:	693b      	ldr	r3, [r7, #16]
 80024e8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80024ea:	4b18      	ldr	r3, [pc, #96]	; (800254c <HAL_GPIO_Init+0x2e0>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	43db      	mvns	r3, r3
 80024f4:	693a      	ldr	r2, [r7, #16]
 80024f6:	4013      	ands	r3, r2
 80024f8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002502:	2b00      	cmp	r3, #0
 8002504:	d003      	beq.n	800250e <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8002506:	693a      	ldr	r2, [r7, #16]
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	4313      	orrs	r3, r2
 800250c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800250e:	4a0f      	ldr	r2, [pc, #60]	; (800254c <HAL_GPIO_Init+0x2e0>)
 8002510:	693b      	ldr	r3, [r7, #16]
 8002512:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002514:	697b      	ldr	r3, [r7, #20]
 8002516:	3301      	adds	r3, #1
 8002518:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	681a      	ldr	r2, [r3, #0]
 800251e:	697b      	ldr	r3, [r7, #20]
 8002520:	fa22 f303 	lsr.w	r3, r2, r3
 8002524:	2b00      	cmp	r3, #0
 8002526:	f47f aea9 	bne.w	800227c <HAL_GPIO_Init+0x10>
  }
}
 800252a:	bf00      	nop
 800252c:	bf00      	nop
 800252e:	371c      	adds	r7, #28
 8002530:	46bd      	mov	sp, r7
 8002532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002536:	4770      	bx	lr
 8002538:	40021000 	.word	0x40021000
 800253c:	40010000 	.word	0x40010000
 8002540:	48000400 	.word	0x48000400
 8002544:	48000800 	.word	0x48000800
 8002548:	48000c00 	.word	0x48000c00
 800254c:	40010400 	.word	0x40010400

08002550 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b082      	sub	sp, #8
 8002554:	af00      	add	r7, sp, #0
 8002556:	4603      	mov	r3, r0
 8002558:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800255a:	4b08      	ldr	r3, [pc, #32]	; (800257c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800255c:	695a      	ldr	r2, [r3, #20]
 800255e:	88fb      	ldrh	r3, [r7, #6]
 8002560:	4013      	ands	r3, r2
 8002562:	2b00      	cmp	r3, #0
 8002564:	d006      	beq.n	8002574 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002566:	4a05      	ldr	r2, [pc, #20]	; (800257c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002568:	88fb      	ldrh	r3, [r7, #6]
 800256a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800256c:	88fb      	ldrh	r3, [r7, #6]
 800256e:	4618      	mov	r0, r3
 8002570:	f7fe fb8e 	bl	8000c90 <HAL_GPIO_EXTI_Callback>
  }
}
 8002574:	bf00      	nop
 8002576:	3708      	adds	r7, #8
 8002578:	46bd      	mov	sp, r7
 800257a:	bd80      	pop	{r7, pc}
 800257c:	40010400 	.word	0x40010400

08002580 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8002586:	af00      	add	r7, sp, #0
 8002588:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800258c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002590:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002592:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002596:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d102      	bne.n	80025a6 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80025a0:	2301      	movs	r3, #1
 80025a2:	f001 b823 	b.w	80035ec <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025aa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f003 0301 	and.w	r3, r3, #1
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	f000 817d 	beq.w	80028b6 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80025bc:	4bbc      	ldr	r3, [pc, #752]	; (80028b0 <HAL_RCC_OscConfig+0x330>)
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	f003 030c 	and.w	r3, r3, #12
 80025c4:	2b04      	cmp	r3, #4
 80025c6:	d00c      	beq.n	80025e2 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80025c8:	4bb9      	ldr	r3, [pc, #740]	; (80028b0 <HAL_RCC_OscConfig+0x330>)
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	f003 030c 	and.w	r3, r3, #12
 80025d0:	2b08      	cmp	r3, #8
 80025d2:	d15c      	bne.n	800268e <HAL_RCC_OscConfig+0x10e>
 80025d4:	4bb6      	ldr	r3, [pc, #728]	; (80028b0 <HAL_RCC_OscConfig+0x330>)
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025e0:	d155      	bne.n	800268e <HAL_RCC_OscConfig+0x10e>
 80025e2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80025e6:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025ea:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80025ee:	fa93 f3a3 	rbit	r3, r3
 80025f2:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80025f6:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025fa:	fab3 f383 	clz	r3, r3
 80025fe:	b2db      	uxtb	r3, r3
 8002600:	095b      	lsrs	r3, r3, #5
 8002602:	b2db      	uxtb	r3, r3
 8002604:	f043 0301 	orr.w	r3, r3, #1
 8002608:	b2db      	uxtb	r3, r3
 800260a:	2b01      	cmp	r3, #1
 800260c:	d102      	bne.n	8002614 <HAL_RCC_OscConfig+0x94>
 800260e:	4ba8      	ldr	r3, [pc, #672]	; (80028b0 <HAL_RCC_OscConfig+0x330>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	e015      	b.n	8002640 <HAL_RCC_OscConfig+0xc0>
 8002614:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002618:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800261c:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8002620:	fa93 f3a3 	rbit	r3, r3
 8002624:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8002628:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800262c:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002630:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8002634:	fa93 f3a3 	rbit	r3, r3
 8002638:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 800263c:	4b9c      	ldr	r3, [pc, #624]	; (80028b0 <HAL_RCC_OscConfig+0x330>)
 800263e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002640:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002644:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8002648:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 800264c:	fa92 f2a2 	rbit	r2, r2
 8002650:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8002654:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8002658:	fab2 f282 	clz	r2, r2
 800265c:	b2d2      	uxtb	r2, r2
 800265e:	f042 0220 	orr.w	r2, r2, #32
 8002662:	b2d2      	uxtb	r2, r2
 8002664:	f002 021f 	and.w	r2, r2, #31
 8002668:	2101      	movs	r1, #1
 800266a:	fa01 f202 	lsl.w	r2, r1, r2
 800266e:	4013      	ands	r3, r2
 8002670:	2b00      	cmp	r3, #0
 8002672:	f000 811f 	beq.w	80028b4 <HAL_RCC_OscConfig+0x334>
 8002676:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800267a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	685b      	ldr	r3, [r3, #4]
 8002682:	2b00      	cmp	r3, #0
 8002684:	f040 8116 	bne.w	80028b4 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8002688:	2301      	movs	r3, #1
 800268a:	f000 bfaf 	b.w	80035ec <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800268e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002692:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800269e:	d106      	bne.n	80026ae <HAL_RCC_OscConfig+0x12e>
 80026a0:	4b83      	ldr	r3, [pc, #524]	; (80028b0 <HAL_RCC_OscConfig+0x330>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4a82      	ldr	r2, [pc, #520]	; (80028b0 <HAL_RCC_OscConfig+0x330>)
 80026a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026aa:	6013      	str	r3, [r2, #0]
 80026ac:	e036      	b.n	800271c <HAL_RCC_OscConfig+0x19c>
 80026ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026b2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d10c      	bne.n	80026d8 <HAL_RCC_OscConfig+0x158>
 80026be:	4b7c      	ldr	r3, [pc, #496]	; (80028b0 <HAL_RCC_OscConfig+0x330>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4a7b      	ldr	r2, [pc, #492]	; (80028b0 <HAL_RCC_OscConfig+0x330>)
 80026c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026c8:	6013      	str	r3, [r2, #0]
 80026ca:	4b79      	ldr	r3, [pc, #484]	; (80028b0 <HAL_RCC_OscConfig+0x330>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4a78      	ldr	r2, [pc, #480]	; (80028b0 <HAL_RCC_OscConfig+0x330>)
 80026d0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026d4:	6013      	str	r3, [r2, #0]
 80026d6:	e021      	b.n	800271c <HAL_RCC_OscConfig+0x19c>
 80026d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026dc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80026e8:	d10c      	bne.n	8002704 <HAL_RCC_OscConfig+0x184>
 80026ea:	4b71      	ldr	r3, [pc, #452]	; (80028b0 <HAL_RCC_OscConfig+0x330>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4a70      	ldr	r2, [pc, #448]	; (80028b0 <HAL_RCC_OscConfig+0x330>)
 80026f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80026f4:	6013      	str	r3, [r2, #0]
 80026f6:	4b6e      	ldr	r3, [pc, #440]	; (80028b0 <HAL_RCC_OscConfig+0x330>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4a6d      	ldr	r2, [pc, #436]	; (80028b0 <HAL_RCC_OscConfig+0x330>)
 80026fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002700:	6013      	str	r3, [r2, #0]
 8002702:	e00b      	b.n	800271c <HAL_RCC_OscConfig+0x19c>
 8002704:	4b6a      	ldr	r3, [pc, #424]	; (80028b0 <HAL_RCC_OscConfig+0x330>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4a69      	ldr	r2, [pc, #420]	; (80028b0 <HAL_RCC_OscConfig+0x330>)
 800270a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800270e:	6013      	str	r3, [r2, #0]
 8002710:	4b67      	ldr	r3, [pc, #412]	; (80028b0 <HAL_RCC_OscConfig+0x330>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4a66      	ldr	r2, [pc, #408]	; (80028b0 <HAL_RCC_OscConfig+0x330>)
 8002716:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800271a:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800271c:	4b64      	ldr	r3, [pc, #400]	; (80028b0 <HAL_RCC_OscConfig+0x330>)
 800271e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002720:	f023 020f 	bic.w	r2, r3, #15
 8002724:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002728:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	689b      	ldr	r3, [r3, #8]
 8002730:	495f      	ldr	r1, [pc, #380]	; (80028b0 <HAL_RCC_OscConfig+0x330>)
 8002732:	4313      	orrs	r3, r2
 8002734:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002736:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800273a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d059      	beq.n	80027fa <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002746:	f7fe fce5 	bl	8001114 <HAL_GetTick>
 800274a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800274e:	e00a      	b.n	8002766 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002750:	f7fe fce0 	bl	8001114 <HAL_GetTick>
 8002754:	4602      	mov	r2, r0
 8002756:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800275a:	1ad3      	subs	r3, r2, r3
 800275c:	2b64      	cmp	r3, #100	; 0x64
 800275e:	d902      	bls.n	8002766 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8002760:	2303      	movs	r3, #3
 8002762:	f000 bf43 	b.w	80035ec <HAL_RCC_OscConfig+0x106c>
 8002766:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800276a:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800276e:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8002772:	fa93 f3a3 	rbit	r3, r3
 8002776:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 800277a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800277e:	fab3 f383 	clz	r3, r3
 8002782:	b2db      	uxtb	r3, r3
 8002784:	095b      	lsrs	r3, r3, #5
 8002786:	b2db      	uxtb	r3, r3
 8002788:	f043 0301 	orr.w	r3, r3, #1
 800278c:	b2db      	uxtb	r3, r3
 800278e:	2b01      	cmp	r3, #1
 8002790:	d102      	bne.n	8002798 <HAL_RCC_OscConfig+0x218>
 8002792:	4b47      	ldr	r3, [pc, #284]	; (80028b0 <HAL_RCC_OscConfig+0x330>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	e015      	b.n	80027c4 <HAL_RCC_OscConfig+0x244>
 8002798:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800279c:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027a0:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80027a4:	fa93 f3a3 	rbit	r3, r3
 80027a8:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80027ac:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80027b0:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80027b4:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80027b8:	fa93 f3a3 	rbit	r3, r3
 80027bc:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80027c0:	4b3b      	ldr	r3, [pc, #236]	; (80028b0 <HAL_RCC_OscConfig+0x330>)
 80027c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027c4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80027c8:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80027cc:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80027d0:	fa92 f2a2 	rbit	r2, r2
 80027d4:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 80027d8:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80027dc:	fab2 f282 	clz	r2, r2
 80027e0:	b2d2      	uxtb	r2, r2
 80027e2:	f042 0220 	orr.w	r2, r2, #32
 80027e6:	b2d2      	uxtb	r2, r2
 80027e8:	f002 021f 	and.w	r2, r2, #31
 80027ec:	2101      	movs	r1, #1
 80027ee:	fa01 f202 	lsl.w	r2, r1, r2
 80027f2:	4013      	ands	r3, r2
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d0ab      	beq.n	8002750 <HAL_RCC_OscConfig+0x1d0>
 80027f8:	e05d      	b.n	80028b6 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027fa:	f7fe fc8b 	bl	8001114 <HAL_GetTick>
 80027fe:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002802:	e00a      	b.n	800281a <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002804:	f7fe fc86 	bl	8001114 <HAL_GetTick>
 8002808:	4602      	mov	r2, r0
 800280a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800280e:	1ad3      	subs	r3, r2, r3
 8002810:	2b64      	cmp	r3, #100	; 0x64
 8002812:	d902      	bls.n	800281a <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8002814:	2303      	movs	r3, #3
 8002816:	f000 bee9 	b.w	80035ec <HAL_RCC_OscConfig+0x106c>
 800281a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800281e:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002822:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8002826:	fa93 f3a3 	rbit	r3, r3
 800282a:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 800282e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002832:	fab3 f383 	clz	r3, r3
 8002836:	b2db      	uxtb	r3, r3
 8002838:	095b      	lsrs	r3, r3, #5
 800283a:	b2db      	uxtb	r3, r3
 800283c:	f043 0301 	orr.w	r3, r3, #1
 8002840:	b2db      	uxtb	r3, r3
 8002842:	2b01      	cmp	r3, #1
 8002844:	d102      	bne.n	800284c <HAL_RCC_OscConfig+0x2cc>
 8002846:	4b1a      	ldr	r3, [pc, #104]	; (80028b0 <HAL_RCC_OscConfig+0x330>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	e015      	b.n	8002878 <HAL_RCC_OscConfig+0x2f8>
 800284c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002850:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002854:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002858:	fa93 f3a3 	rbit	r3, r3
 800285c:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002860:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002864:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002868:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800286c:	fa93 f3a3 	rbit	r3, r3
 8002870:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8002874:	4b0e      	ldr	r3, [pc, #56]	; (80028b0 <HAL_RCC_OscConfig+0x330>)
 8002876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002878:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800287c:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8002880:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002884:	fa92 f2a2 	rbit	r2, r2
 8002888:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 800288c:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8002890:	fab2 f282 	clz	r2, r2
 8002894:	b2d2      	uxtb	r2, r2
 8002896:	f042 0220 	orr.w	r2, r2, #32
 800289a:	b2d2      	uxtb	r2, r2
 800289c:	f002 021f 	and.w	r2, r2, #31
 80028a0:	2101      	movs	r1, #1
 80028a2:	fa01 f202 	lsl.w	r2, r1, r2
 80028a6:	4013      	ands	r3, r2
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d1ab      	bne.n	8002804 <HAL_RCC_OscConfig+0x284>
 80028ac:	e003      	b.n	80028b6 <HAL_RCC_OscConfig+0x336>
 80028ae:	bf00      	nop
 80028b0:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028ba:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f003 0302 	and.w	r3, r3, #2
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	f000 817d 	beq.w	8002bc6 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80028cc:	4ba6      	ldr	r3, [pc, #664]	; (8002b68 <HAL_RCC_OscConfig+0x5e8>)
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	f003 030c 	and.w	r3, r3, #12
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d00b      	beq.n	80028f0 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80028d8:	4ba3      	ldr	r3, [pc, #652]	; (8002b68 <HAL_RCC_OscConfig+0x5e8>)
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	f003 030c 	and.w	r3, r3, #12
 80028e0:	2b08      	cmp	r3, #8
 80028e2:	d172      	bne.n	80029ca <HAL_RCC_OscConfig+0x44a>
 80028e4:	4ba0      	ldr	r3, [pc, #640]	; (8002b68 <HAL_RCC_OscConfig+0x5e8>)
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d16c      	bne.n	80029ca <HAL_RCC_OscConfig+0x44a>
 80028f0:	2302      	movs	r3, #2
 80028f2:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028f6:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80028fa:	fa93 f3a3 	rbit	r3, r3
 80028fe:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8002902:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002906:	fab3 f383 	clz	r3, r3
 800290a:	b2db      	uxtb	r3, r3
 800290c:	095b      	lsrs	r3, r3, #5
 800290e:	b2db      	uxtb	r3, r3
 8002910:	f043 0301 	orr.w	r3, r3, #1
 8002914:	b2db      	uxtb	r3, r3
 8002916:	2b01      	cmp	r3, #1
 8002918:	d102      	bne.n	8002920 <HAL_RCC_OscConfig+0x3a0>
 800291a:	4b93      	ldr	r3, [pc, #588]	; (8002b68 <HAL_RCC_OscConfig+0x5e8>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	e013      	b.n	8002948 <HAL_RCC_OscConfig+0x3c8>
 8002920:	2302      	movs	r3, #2
 8002922:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002926:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800292a:	fa93 f3a3 	rbit	r3, r3
 800292e:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002932:	2302      	movs	r3, #2
 8002934:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002938:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800293c:	fa93 f3a3 	rbit	r3, r3
 8002940:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002944:	4b88      	ldr	r3, [pc, #544]	; (8002b68 <HAL_RCC_OscConfig+0x5e8>)
 8002946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002948:	2202      	movs	r2, #2
 800294a:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 800294e:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002952:	fa92 f2a2 	rbit	r2, r2
 8002956:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 800295a:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 800295e:	fab2 f282 	clz	r2, r2
 8002962:	b2d2      	uxtb	r2, r2
 8002964:	f042 0220 	orr.w	r2, r2, #32
 8002968:	b2d2      	uxtb	r2, r2
 800296a:	f002 021f 	and.w	r2, r2, #31
 800296e:	2101      	movs	r1, #1
 8002970:	fa01 f202 	lsl.w	r2, r1, r2
 8002974:	4013      	ands	r3, r2
 8002976:	2b00      	cmp	r3, #0
 8002978:	d00a      	beq.n	8002990 <HAL_RCC_OscConfig+0x410>
 800297a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800297e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	691b      	ldr	r3, [r3, #16]
 8002986:	2b01      	cmp	r3, #1
 8002988:	d002      	beq.n	8002990 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 800298a:	2301      	movs	r3, #1
 800298c:	f000 be2e 	b.w	80035ec <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002990:	4b75      	ldr	r3, [pc, #468]	; (8002b68 <HAL_RCC_OscConfig+0x5e8>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002998:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800299c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	695b      	ldr	r3, [r3, #20]
 80029a4:	21f8      	movs	r1, #248	; 0xf8
 80029a6:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029aa:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80029ae:	fa91 f1a1 	rbit	r1, r1
 80029b2:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80029b6:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80029ba:	fab1 f181 	clz	r1, r1
 80029be:	b2c9      	uxtb	r1, r1
 80029c0:	408b      	lsls	r3, r1
 80029c2:	4969      	ldr	r1, [pc, #420]	; (8002b68 <HAL_RCC_OscConfig+0x5e8>)
 80029c4:	4313      	orrs	r3, r2
 80029c6:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029c8:	e0fd      	b.n	8002bc6 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80029ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029ce:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	691b      	ldr	r3, [r3, #16]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	f000 8088 	beq.w	8002aec <HAL_RCC_OscConfig+0x56c>
 80029dc:	2301      	movs	r3, #1
 80029de:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029e2:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80029e6:	fa93 f3a3 	rbit	r3, r3
 80029ea:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80029ee:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80029f2:	fab3 f383 	clz	r3, r3
 80029f6:	b2db      	uxtb	r3, r3
 80029f8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80029fc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002a00:	009b      	lsls	r3, r3, #2
 8002a02:	461a      	mov	r2, r3
 8002a04:	2301      	movs	r3, #1
 8002a06:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a08:	f7fe fb84 	bl	8001114 <HAL_GetTick>
 8002a0c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a10:	e00a      	b.n	8002a28 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a12:	f7fe fb7f 	bl	8001114 <HAL_GetTick>
 8002a16:	4602      	mov	r2, r0
 8002a18:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002a1c:	1ad3      	subs	r3, r2, r3
 8002a1e:	2b02      	cmp	r3, #2
 8002a20:	d902      	bls.n	8002a28 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8002a22:	2303      	movs	r3, #3
 8002a24:	f000 bde2 	b.w	80035ec <HAL_RCC_OscConfig+0x106c>
 8002a28:	2302      	movs	r3, #2
 8002a2a:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a2e:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8002a32:	fa93 f3a3 	rbit	r3, r3
 8002a36:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8002a3a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a3e:	fab3 f383 	clz	r3, r3
 8002a42:	b2db      	uxtb	r3, r3
 8002a44:	095b      	lsrs	r3, r3, #5
 8002a46:	b2db      	uxtb	r3, r3
 8002a48:	f043 0301 	orr.w	r3, r3, #1
 8002a4c:	b2db      	uxtb	r3, r3
 8002a4e:	2b01      	cmp	r3, #1
 8002a50:	d102      	bne.n	8002a58 <HAL_RCC_OscConfig+0x4d8>
 8002a52:	4b45      	ldr	r3, [pc, #276]	; (8002b68 <HAL_RCC_OscConfig+0x5e8>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	e013      	b.n	8002a80 <HAL_RCC_OscConfig+0x500>
 8002a58:	2302      	movs	r3, #2
 8002a5a:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a5e:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002a62:	fa93 f3a3 	rbit	r3, r3
 8002a66:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002a6a:	2302      	movs	r3, #2
 8002a6c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002a70:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002a74:	fa93 f3a3 	rbit	r3, r3
 8002a78:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8002a7c:	4b3a      	ldr	r3, [pc, #232]	; (8002b68 <HAL_RCC_OscConfig+0x5e8>)
 8002a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a80:	2202      	movs	r2, #2
 8002a82:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8002a86:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002a8a:	fa92 f2a2 	rbit	r2, r2
 8002a8e:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8002a92:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8002a96:	fab2 f282 	clz	r2, r2
 8002a9a:	b2d2      	uxtb	r2, r2
 8002a9c:	f042 0220 	orr.w	r2, r2, #32
 8002aa0:	b2d2      	uxtb	r2, r2
 8002aa2:	f002 021f 	and.w	r2, r2, #31
 8002aa6:	2101      	movs	r1, #1
 8002aa8:	fa01 f202 	lsl.w	r2, r1, r2
 8002aac:	4013      	ands	r3, r2
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d0af      	beq.n	8002a12 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ab2:	4b2d      	ldr	r3, [pc, #180]	; (8002b68 <HAL_RCC_OscConfig+0x5e8>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002aba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002abe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	695b      	ldr	r3, [r3, #20]
 8002ac6:	21f8      	movs	r1, #248	; 0xf8
 8002ac8:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002acc:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002ad0:	fa91 f1a1 	rbit	r1, r1
 8002ad4:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8002ad8:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8002adc:	fab1 f181 	clz	r1, r1
 8002ae0:	b2c9      	uxtb	r1, r1
 8002ae2:	408b      	lsls	r3, r1
 8002ae4:	4920      	ldr	r1, [pc, #128]	; (8002b68 <HAL_RCC_OscConfig+0x5e8>)
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	600b      	str	r3, [r1, #0]
 8002aea:	e06c      	b.n	8002bc6 <HAL_RCC_OscConfig+0x646>
 8002aec:	2301      	movs	r3, #1
 8002aee:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002af2:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002af6:	fa93 f3a3 	rbit	r3, r3
 8002afa:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8002afe:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b02:	fab3 f383 	clz	r3, r3
 8002b06:	b2db      	uxtb	r3, r3
 8002b08:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002b0c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002b10:	009b      	lsls	r3, r3, #2
 8002b12:	461a      	mov	r2, r3
 8002b14:	2300      	movs	r3, #0
 8002b16:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b18:	f7fe fafc 	bl	8001114 <HAL_GetTick>
 8002b1c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b20:	e00a      	b.n	8002b38 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b22:	f7fe faf7 	bl	8001114 <HAL_GetTick>
 8002b26:	4602      	mov	r2, r0
 8002b28:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002b2c:	1ad3      	subs	r3, r2, r3
 8002b2e:	2b02      	cmp	r3, #2
 8002b30:	d902      	bls.n	8002b38 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8002b32:	2303      	movs	r3, #3
 8002b34:	f000 bd5a 	b.w	80035ec <HAL_RCC_OscConfig+0x106c>
 8002b38:	2302      	movs	r3, #2
 8002b3a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b3e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002b42:	fa93 f3a3 	rbit	r3, r3
 8002b46:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8002b4a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b4e:	fab3 f383 	clz	r3, r3
 8002b52:	b2db      	uxtb	r3, r3
 8002b54:	095b      	lsrs	r3, r3, #5
 8002b56:	b2db      	uxtb	r3, r3
 8002b58:	f043 0301 	orr.w	r3, r3, #1
 8002b5c:	b2db      	uxtb	r3, r3
 8002b5e:	2b01      	cmp	r3, #1
 8002b60:	d104      	bne.n	8002b6c <HAL_RCC_OscConfig+0x5ec>
 8002b62:	4b01      	ldr	r3, [pc, #4]	; (8002b68 <HAL_RCC_OscConfig+0x5e8>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	e015      	b.n	8002b94 <HAL_RCC_OscConfig+0x614>
 8002b68:	40021000 	.word	0x40021000
 8002b6c:	2302      	movs	r3, #2
 8002b6e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b72:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002b76:	fa93 f3a3 	rbit	r3, r3
 8002b7a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002b7e:	2302      	movs	r3, #2
 8002b80:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002b84:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002b88:	fa93 f3a3 	rbit	r3, r3
 8002b8c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8002b90:	4bc8      	ldr	r3, [pc, #800]	; (8002eb4 <HAL_RCC_OscConfig+0x934>)
 8002b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b94:	2202      	movs	r2, #2
 8002b96:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8002b9a:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002b9e:	fa92 f2a2 	rbit	r2, r2
 8002ba2:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8002ba6:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8002baa:	fab2 f282 	clz	r2, r2
 8002bae:	b2d2      	uxtb	r2, r2
 8002bb0:	f042 0220 	orr.w	r2, r2, #32
 8002bb4:	b2d2      	uxtb	r2, r2
 8002bb6:	f002 021f 	and.w	r2, r2, #31
 8002bba:	2101      	movs	r1, #1
 8002bbc:	fa01 f202 	lsl.w	r2, r1, r2
 8002bc0:	4013      	ands	r3, r2
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d1ad      	bne.n	8002b22 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002bc6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bca:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f003 0308 	and.w	r3, r3, #8
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	f000 8110 	beq.w	8002dfc <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002bdc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002be0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	699b      	ldr	r3, [r3, #24]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d079      	beq.n	8002ce0 <HAL_RCC_OscConfig+0x760>
 8002bec:	2301      	movs	r3, #1
 8002bee:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bf2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002bf6:	fa93 f3a3 	rbit	r3, r3
 8002bfa:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8002bfe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c02:	fab3 f383 	clz	r3, r3
 8002c06:	b2db      	uxtb	r3, r3
 8002c08:	461a      	mov	r2, r3
 8002c0a:	4bab      	ldr	r3, [pc, #684]	; (8002eb8 <HAL_RCC_OscConfig+0x938>)
 8002c0c:	4413      	add	r3, r2
 8002c0e:	009b      	lsls	r3, r3, #2
 8002c10:	461a      	mov	r2, r3
 8002c12:	2301      	movs	r3, #1
 8002c14:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c16:	f7fe fa7d 	bl	8001114 <HAL_GetTick>
 8002c1a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c1e:	e00a      	b.n	8002c36 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c20:	f7fe fa78 	bl	8001114 <HAL_GetTick>
 8002c24:	4602      	mov	r2, r0
 8002c26:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002c2a:	1ad3      	subs	r3, r2, r3
 8002c2c:	2b02      	cmp	r3, #2
 8002c2e:	d902      	bls.n	8002c36 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8002c30:	2303      	movs	r3, #3
 8002c32:	f000 bcdb 	b.w	80035ec <HAL_RCC_OscConfig+0x106c>
 8002c36:	2302      	movs	r3, #2
 8002c38:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c3c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002c40:	fa93 f3a3 	rbit	r3, r3
 8002c44:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002c48:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c4c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002c50:	2202      	movs	r2, #2
 8002c52:	601a      	str	r2, [r3, #0]
 8002c54:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c58:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	fa93 f2a3 	rbit	r2, r3
 8002c62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c66:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002c6a:	601a      	str	r2, [r3, #0]
 8002c6c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c70:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002c74:	2202      	movs	r2, #2
 8002c76:	601a      	str	r2, [r3, #0]
 8002c78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c7c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	fa93 f2a3 	rbit	r2, r3
 8002c86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c8a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002c8e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c90:	4b88      	ldr	r3, [pc, #544]	; (8002eb4 <HAL_RCC_OscConfig+0x934>)
 8002c92:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002c94:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c98:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002c9c:	2102      	movs	r1, #2
 8002c9e:	6019      	str	r1, [r3, #0]
 8002ca0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ca4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	fa93 f1a3 	rbit	r1, r3
 8002cae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cb2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002cb6:	6019      	str	r1, [r3, #0]
  return result;
 8002cb8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cbc:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	fab3 f383 	clz	r3, r3
 8002cc6:	b2db      	uxtb	r3, r3
 8002cc8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002ccc:	b2db      	uxtb	r3, r3
 8002cce:	f003 031f 	and.w	r3, r3, #31
 8002cd2:	2101      	movs	r1, #1
 8002cd4:	fa01 f303 	lsl.w	r3, r1, r3
 8002cd8:	4013      	ands	r3, r2
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d0a0      	beq.n	8002c20 <HAL_RCC_OscConfig+0x6a0>
 8002cde:	e08d      	b.n	8002dfc <HAL_RCC_OscConfig+0x87c>
 8002ce0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ce4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002ce8:	2201      	movs	r2, #1
 8002cea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cf0:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	fa93 f2a3 	rbit	r2, r3
 8002cfa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cfe:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002d02:	601a      	str	r2, [r3, #0]
  return result;
 8002d04:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d08:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002d0c:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d0e:	fab3 f383 	clz	r3, r3
 8002d12:	b2db      	uxtb	r3, r3
 8002d14:	461a      	mov	r2, r3
 8002d16:	4b68      	ldr	r3, [pc, #416]	; (8002eb8 <HAL_RCC_OscConfig+0x938>)
 8002d18:	4413      	add	r3, r2
 8002d1a:	009b      	lsls	r3, r3, #2
 8002d1c:	461a      	mov	r2, r3
 8002d1e:	2300      	movs	r3, #0
 8002d20:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d22:	f7fe f9f7 	bl	8001114 <HAL_GetTick>
 8002d26:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d2a:	e00a      	b.n	8002d42 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d2c:	f7fe f9f2 	bl	8001114 <HAL_GetTick>
 8002d30:	4602      	mov	r2, r0
 8002d32:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002d36:	1ad3      	subs	r3, r2, r3
 8002d38:	2b02      	cmp	r3, #2
 8002d3a:	d902      	bls.n	8002d42 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8002d3c:	2303      	movs	r3, #3
 8002d3e:	f000 bc55 	b.w	80035ec <HAL_RCC_OscConfig+0x106c>
 8002d42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d46:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002d4a:	2202      	movs	r2, #2
 8002d4c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d52:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	fa93 f2a3 	rbit	r2, r3
 8002d5c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d60:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002d64:	601a      	str	r2, [r3, #0]
 8002d66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d6a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002d6e:	2202      	movs	r2, #2
 8002d70:	601a      	str	r2, [r3, #0]
 8002d72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d76:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	fa93 f2a3 	rbit	r2, r3
 8002d80:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d84:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002d88:	601a      	str	r2, [r3, #0]
 8002d8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d8e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002d92:	2202      	movs	r2, #2
 8002d94:	601a      	str	r2, [r3, #0]
 8002d96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d9a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	fa93 f2a3 	rbit	r2, r3
 8002da4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002da8:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002dac:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002dae:	4b41      	ldr	r3, [pc, #260]	; (8002eb4 <HAL_RCC_OscConfig+0x934>)
 8002db0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002db2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002db6:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002dba:	2102      	movs	r1, #2
 8002dbc:	6019      	str	r1, [r3, #0]
 8002dbe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dc2:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	fa93 f1a3 	rbit	r1, r3
 8002dcc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dd0:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002dd4:	6019      	str	r1, [r3, #0]
  return result;
 8002dd6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dda:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	fab3 f383 	clz	r3, r3
 8002de4:	b2db      	uxtb	r3, r3
 8002de6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002dea:	b2db      	uxtb	r3, r3
 8002dec:	f003 031f 	and.w	r3, r3, #31
 8002df0:	2101      	movs	r1, #1
 8002df2:	fa01 f303 	lsl.w	r3, r1, r3
 8002df6:	4013      	ands	r3, r2
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d197      	bne.n	8002d2c <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002dfc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e00:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f003 0304 	and.w	r3, r3, #4
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	f000 81a1 	beq.w	8003154 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e12:	2300      	movs	r3, #0
 8002e14:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e18:	4b26      	ldr	r3, [pc, #152]	; (8002eb4 <HAL_RCC_OscConfig+0x934>)
 8002e1a:	69db      	ldr	r3, [r3, #28]
 8002e1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d116      	bne.n	8002e52 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e24:	4b23      	ldr	r3, [pc, #140]	; (8002eb4 <HAL_RCC_OscConfig+0x934>)
 8002e26:	69db      	ldr	r3, [r3, #28]
 8002e28:	4a22      	ldr	r2, [pc, #136]	; (8002eb4 <HAL_RCC_OscConfig+0x934>)
 8002e2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e2e:	61d3      	str	r3, [r2, #28]
 8002e30:	4b20      	ldr	r3, [pc, #128]	; (8002eb4 <HAL_RCC_OscConfig+0x934>)
 8002e32:	69db      	ldr	r3, [r3, #28]
 8002e34:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002e38:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e3c:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002e40:	601a      	str	r2, [r3, #0]
 8002e42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e46:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002e4a:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e52:	4b1a      	ldr	r3, [pc, #104]	; (8002ebc <HAL_RCC_OscConfig+0x93c>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d11a      	bne.n	8002e94 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e5e:	4b17      	ldr	r3, [pc, #92]	; (8002ebc <HAL_RCC_OscConfig+0x93c>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4a16      	ldr	r2, [pc, #88]	; (8002ebc <HAL_RCC_OscConfig+0x93c>)
 8002e64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e68:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e6a:	f7fe f953 	bl	8001114 <HAL_GetTick>
 8002e6e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e72:	e009      	b.n	8002e88 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e74:	f7fe f94e 	bl	8001114 <HAL_GetTick>
 8002e78:	4602      	mov	r2, r0
 8002e7a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002e7e:	1ad3      	subs	r3, r2, r3
 8002e80:	2b64      	cmp	r3, #100	; 0x64
 8002e82:	d901      	bls.n	8002e88 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8002e84:	2303      	movs	r3, #3
 8002e86:	e3b1      	b.n	80035ec <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e88:	4b0c      	ldr	r3, [pc, #48]	; (8002ebc <HAL_RCC_OscConfig+0x93c>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d0ef      	beq.n	8002e74 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e94:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e98:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	68db      	ldr	r3, [r3, #12]
 8002ea0:	2b01      	cmp	r3, #1
 8002ea2:	d10d      	bne.n	8002ec0 <HAL_RCC_OscConfig+0x940>
 8002ea4:	4b03      	ldr	r3, [pc, #12]	; (8002eb4 <HAL_RCC_OscConfig+0x934>)
 8002ea6:	6a1b      	ldr	r3, [r3, #32]
 8002ea8:	4a02      	ldr	r2, [pc, #8]	; (8002eb4 <HAL_RCC_OscConfig+0x934>)
 8002eaa:	f043 0301 	orr.w	r3, r3, #1
 8002eae:	6213      	str	r3, [r2, #32]
 8002eb0:	e03c      	b.n	8002f2c <HAL_RCC_OscConfig+0x9ac>
 8002eb2:	bf00      	nop
 8002eb4:	40021000 	.word	0x40021000
 8002eb8:	10908120 	.word	0x10908120
 8002ebc:	40007000 	.word	0x40007000
 8002ec0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ec4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	68db      	ldr	r3, [r3, #12]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d10c      	bne.n	8002eea <HAL_RCC_OscConfig+0x96a>
 8002ed0:	4bc1      	ldr	r3, [pc, #772]	; (80031d8 <HAL_RCC_OscConfig+0xc58>)
 8002ed2:	6a1b      	ldr	r3, [r3, #32]
 8002ed4:	4ac0      	ldr	r2, [pc, #768]	; (80031d8 <HAL_RCC_OscConfig+0xc58>)
 8002ed6:	f023 0301 	bic.w	r3, r3, #1
 8002eda:	6213      	str	r3, [r2, #32]
 8002edc:	4bbe      	ldr	r3, [pc, #760]	; (80031d8 <HAL_RCC_OscConfig+0xc58>)
 8002ede:	6a1b      	ldr	r3, [r3, #32]
 8002ee0:	4abd      	ldr	r2, [pc, #756]	; (80031d8 <HAL_RCC_OscConfig+0xc58>)
 8002ee2:	f023 0304 	bic.w	r3, r3, #4
 8002ee6:	6213      	str	r3, [r2, #32]
 8002ee8:	e020      	b.n	8002f2c <HAL_RCC_OscConfig+0x9ac>
 8002eea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002eee:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	68db      	ldr	r3, [r3, #12]
 8002ef6:	2b05      	cmp	r3, #5
 8002ef8:	d10c      	bne.n	8002f14 <HAL_RCC_OscConfig+0x994>
 8002efa:	4bb7      	ldr	r3, [pc, #732]	; (80031d8 <HAL_RCC_OscConfig+0xc58>)
 8002efc:	6a1b      	ldr	r3, [r3, #32]
 8002efe:	4ab6      	ldr	r2, [pc, #728]	; (80031d8 <HAL_RCC_OscConfig+0xc58>)
 8002f00:	f043 0304 	orr.w	r3, r3, #4
 8002f04:	6213      	str	r3, [r2, #32]
 8002f06:	4bb4      	ldr	r3, [pc, #720]	; (80031d8 <HAL_RCC_OscConfig+0xc58>)
 8002f08:	6a1b      	ldr	r3, [r3, #32]
 8002f0a:	4ab3      	ldr	r2, [pc, #716]	; (80031d8 <HAL_RCC_OscConfig+0xc58>)
 8002f0c:	f043 0301 	orr.w	r3, r3, #1
 8002f10:	6213      	str	r3, [r2, #32]
 8002f12:	e00b      	b.n	8002f2c <HAL_RCC_OscConfig+0x9ac>
 8002f14:	4bb0      	ldr	r3, [pc, #704]	; (80031d8 <HAL_RCC_OscConfig+0xc58>)
 8002f16:	6a1b      	ldr	r3, [r3, #32]
 8002f18:	4aaf      	ldr	r2, [pc, #700]	; (80031d8 <HAL_RCC_OscConfig+0xc58>)
 8002f1a:	f023 0301 	bic.w	r3, r3, #1
 8002f1e:	6213      	str	r3, [r2, #32]
 8002f20:	4bad      	ldr	r3, [pc, #692]	; (80031d8 <HAL_RCC_OscConfig+0xc58>)
 8002f22:	6a1b      	ldr	r3, [r3, #32]
 8002f24:	4aac      	ldr	r2, [pc, #688]	; (80031d8 <HAL_RCC_OscConfig+0xc58>)
 8002f26:	f023 0304 	bic.w	r3, r3, #4
 8002f2a:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002f2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f30:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	68db      	ldr	r3, [r3, #12]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	f000 8081 	beq.w	8003040 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f3e:	f7fe f8e9 	bl	8001114 <HAL_GetTick>
 8002f42:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f46:	e00b      	b.n	8002f60 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f48:	f7fe f8e4 	bl	8001114 <HAL_GetTick>
 8002f4c:	4602      	mov	r2, r0
 8002f4e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002f52:	1ad3      	subs	r3, r2, r3
 8002f54:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	d901      	bls.n	8002f60 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8002f5c:	2303      	movs	r3, #3
 8002f5e:	e345      	b.n	80035ec <HAL_RCC_OscConfig+0x106c>
 8002f60:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f64:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002f68:	2202      	movs	r2, #2
 8002f6a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f6c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f70:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	fa93 f2a3 	rbit	r2, r3
 8002f7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f7e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002f82:	601a      	str	r2, [r3, #0]
 8002f84:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f88:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002f8c:	2202      	movs	r2, #2
 8002f8e:	601a      	str	r2, [r3, #0]
 8002f90:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f94:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	fa93 f2a3 	rbit	r2, r3
 8002f9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fa2:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002fa6:	601a      	str	r2, [r3, #0]
  return result;
 8002fa8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fac:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002fb0:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fb2:	fab3 f383 	clz	r3, r3
 8002fb6:	b2db      	uxtb	r3, r3
 8002fb8:	095b      	lsrs	r3, r3, #5
 8002fba:	b2db      	uxtb	r3, r3
 8002fbc:	f043 0302 	orr.w	r3, r3, #2
 8002fc0:	b2db      	uxtb	r3, r3
 8002fc2:	2b02      	cmp	r3, #2
 8002fc4:	d102      	bne.n	8002fcc <HAL_RCC_OscConfig+0xa4c>
 8002fc6:	4b84      	ldr	r3, [pc, #528]	; (80031d8 <HAL_RCC_OscConfig+0xc58>)
 8002fc8:	6a1b      	ldr	r3, [r3, #32]
 8002fca:	e013      	b.n	8002ff4 <HAL_RCC_OscConfig+0xa74>
 8002fcc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fd0:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002fd4:	2202      	movs	r2, #2
 8002fd6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fd8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fdc:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	fa93 f2a3 	rbit	r2, r3
 8002fe6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fea:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8002fee:	601a      	str	r2, [r3, #0]
 8002ff0:	4b79      	ldr	r3, [pc, #484]	; (80031d8 <HAL_RCC_OscConfig+0xc58>)
 8002ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ff4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002ff8:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002ffc:	2102      	movs	r1, #2
 8002ffe:	6011      	str	r1, [r2, #0]
 8003000:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003004:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8003008:	6812      	ldr	r2, [r2, #0]
 800300a:	fa92 f1a2 	rbit	r1, r2
 800300e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003012:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003016:	6011      	str	r1, [r2, #0]
  return result;
 8003018:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800301c:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003020:	6812      	ldr	r2, [r2, #0]
 8003022:	fab2 f282 	clz	r2, r2
 8003026:	b2d2      	uxtb	r2, r2
 8003028:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800302c:	b2d2      	uxtb	r2, r2
 800302e:	f002 021f 	and.w	r2, r2, #31
 8003032:	2101      	movs	r1, #1
 8003034:	fa01 f202 	lsl.w	r2, r1, r2
 8003038:	4013      	ands	r3, r2
 800303a:	2b00      	cmp	r3, #0
 800303c:	d084      	beq.n	8002f48 <HAL_RCC_OscConfig+0x9c8>
 800303e:	e07f      	b.n	8003140 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003040:	f7fe f868 	bl	8001114 <HAL_GetTick>
 8003044:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003048:	e00b      	b.n	8003062 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800304a:	f7fe f863 	bl	8001114 <HAL_GetTick>
 800304e:	4602      	mov	r2, r0
 8003050:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003054:	1ad3      	subs	r3, r2, r3
 8003056:	f241 3288 	movw	r2, #5000	; 0x1388
 800305a:	4293      	cmp	r3, r2
 800305c:	d901      	bls.n	8003062 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 800305e:	2303      	movs	r3, #3
 8003060:	e2c4      	b.n	80035ec <HAL_RCC_OscConfig+0x106c>
 8003062:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003066:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800306a:	2202      	movs	r2, #2
 800306c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800306e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003072:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	fa93 f2a3 	rbit	r2, r3
 800307c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003080:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8003084:	601a      	str	r2, [r3, #0]
 8003086:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800308a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800308e:	2202      	movs	r2, #2
 8003090:	601a      	str	r2, [r3, #0]
 8003092:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003096:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	fa93 f2a3 	rbit	r2, r3
 80030a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030a4:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80030a8:	601a      	str	r2, [r3, #0]
  return result;
 80030aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030ae:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80030b2:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030b4:	fab3 f383 	clz	r3, r3
 80030b8:	b2db      	uxtb	r3, r3
 80030ba:	095b      	lsrs	r3, r3, #5
 80030bc:	b2db      	uxtb	r3, r3
 80030be:	f043 0302 	orr.w	r3, r3, #2
 80030c2:	b2db      	uxtb	r3, r3
 80030c4:	2b02      	cmp	r3, #2
 80030c6:	d102      	bne.n	80030ce <HAL_RCC_OscConfig+0xb4e>
 80030c8:	4b43      	ldr	r3, [pc, #268]	; (80031d8 <HAL_RCC_OscConfig+0xc58>)
 80030ca:	6a1b      	ldr	r3, [r3, #32]
 80030cc:	e013      	b.n	80030f6 <HAL_RCC_OscConfig+0xb76>
 80030ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030d2:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80030d6:	2202      	movs	r2, #2
 80030d8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030de:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	fa93 f2a3 	rbit	r2, r3
 80030e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030ec:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80030f0:	601a      	str	r2, [r3, #0]
 80030f2:	4b39      	ldr	r3, [pc, #228]	; (80031d8 <HAL_RCC_OscConfig+0xc58>)
 80030f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030f6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80030fa:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80030fe:	2102      	movs	r1, #2
 8003100:	6011      	str	r1, [r2, #0]
 8003102:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003106:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800310a:	6812      	ldr	r2, [r2, #0]
 800310c:	fa92 f1a2 	rbit	r1, r2
 8003110:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003114:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003118:	6011      	str	r1, [r2, #0]
  return result;
 800311a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800311e:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003122:	6812      	ldr	r2, [r2, #0]
 8003124:	fab2 f282 	clz	r2, r2
 8003128:	b2d2      	uxtb	r2, r2
 800312a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800312e:	b2d2      	uxtb	r2, r2
 8003130:	f002 021f 	and.w	r2, r2, #31
 8003134:	2101      	movs	r1, #1
 8003136:	fa01 f202 	lsl.w	r2, r1, r2
 800313a:	4013      	ands	r3, r2
 800313c:	2b00      	cmp	r3, #0
 800313e:	d184      	bne.n	800304a <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003140:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8003144:	2b01      	cmp	r3, #1
 8003146:	d105      	bne.n	8003154 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003148:	4b23      	ldr	r3, [pc, #140]	; (80031d8 <HAL_RCC_OscConfig+0xc58>)
 800314a:	69db      	ldr	r3, [r3, #28]
 800314c:	4a22      	ldr	r2, [pc, #136]	; (80031d8 <HAL_RCC_OscConfig+0xc58>)
 800314e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003152:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003154:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003158:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	69db      	ldr	r3, [r3, #28]
 8003160:	2b00      	cmp	r3, #0
 8003162:	f000 8242 	beq.w	80035ea <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003166:	4b1c      	ldr	r3, [pc, #112]	; (80031d8 <HAL_RCC_OscConfig+0xc58>)
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	f003 030c 	and.w	r3, r3, #12
 800316e:	2b08      	cmp	r3, #8
 8003170:	f000 8213 	beq.w	800359a <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003174:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003178:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	69db      	ldr	r3, [r3, #28]
 8003180:	2b02      	cmp	r3, #2
 8003182:	f040 8162 	bne.w	800344a <HAL_RCC_OscConfig+0xeca>
 8003186:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800318a:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800318e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003192:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003194:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003198:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	fa93 f2a3 	rbit	r2, r3
 80031a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031a6:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80031aa:	601a      	str	r2, [r3, #0]
  return result;
 80031ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031b0:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80031b4:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031b6:	fab3 f383 	clz	r3, r3
 80031ba:	b2db      	uxtb	r3, r3
 80031bc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80031c0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80031c4:	009b      	lsls	r3, r3, #2
 80031c6:	461a      	mov	r2, r3
 80031c8:	2300      	movs	r3, #0
 80031ca:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031cc:	f7fd ffa2 	bl	8001114 <HAL_GetTick>
 80031d0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80031d4:	e00c      	b.n	80031f0 <HAL_RCC_OscConfig+0xc70>
 80031d6:	bf00      	nop
 80031d8:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031dc:	f7fd ff9a 	bl	8001114 <HAL_GetTick>
 80031e0:	4602      	mov	r2, r0
 80031e2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80031e6:	1ad3      	subs	r3, r2, r3
 80031e8:	2b02      	cmp	r3, #2
 80031ea:	d901      	bls.n	80031f0 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 80031ec:	2303      	movs	r3, #3
 80031ee:	e1fd      	b.n	80035ec <HAL_RCC_OscConfig+0x106c>
 80031f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031f4:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80031f8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80031fc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003202:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	fa93 f2a3 	rbit	r2, r3
 800320c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003210:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003214:	601a      	str	r2, [r3, #0]
  return result;
 8003216:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800321a:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800321e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003220:	fab3 f383 	clz	r3, r3
 8003224:	b2db      	uxtb	r3, r3
 8003226:	095b      	lsrs	r3, r3, #5
 8003228:	b2db      	uxtb	r3, r3
 800322a:	f043 0301 	orr.w	r3, r3, #1
 800322e:	b2db      	uxtb	r3, r3
 8003230:	2b01      	cmp	r3, #1
 8003232:	d102      	bne.n	800323a <HAL_RCC_OscConfig+0xcba>
 8003234:	4bb0      	ldr	r3, [pc, #704]	; (80034f8 <HAL_RCC_OscConfig+0xf78>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	e027      	b.n	800328a <HAL_RCC_OscConfig+0xd0a>
 800323a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800323e:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003242:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003246:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003248:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800324c:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	fa93 f2a3 	rbit	r2, r3
 8003256:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800325a:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800325e:	601a      	str	r2, [r3, #0]
 8003260:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003264:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8003268:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800326c:	601a      	str	r2, [r3, #0]
 800326e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003272:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	fa93 f2a3 	rbit	r2, r3
 800327c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003280:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8003284:	601a      	str	r2, [r3, #0]
 8003286:	4b9c      	ldr	r3, [pc, #624]	; (80034f8 <HAL_RCC_OscConfig+0xf78>)
 8003288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800328a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800328e:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8003292:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003296:	6011      	str	r1, [r2, #0]
 8003298:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800329c:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80032a0:	6812      	ldr	r2, [r2, #0]
 80032a2:	fa92 f1a2 	rbit	r1, r2
 80032a6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80032aa:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80032ae:	6011      	str	r1, [r2, #0]
  return result;
 80032b0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80032b4:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80032b8:	6812      	ldr	r2, [r2, #0]
 80032ba:	fab2 f282 	clz	r2, r2
 80032be:	b2d2      	uxtb	r2, r2
 80032c0:	f042 0220 	orr.w	r2, r2, #32
 80032c4:	b2d2      	uxtb	r2, r2
 80032c6:	f002 021f 	and.w	r2, r2, #31
 80032ca:	2101      	movs	r1, #1
 80032cc:	fa01 f202 	lsl.w	r2, r1, r2
 80032d0:	4013      	ands	r3, r2
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d182      	bne.n	80031dc <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80032d6:	4b88      	ldr	r3, [pc, #544]	; (80034f8 <HAL_RCC_OscConfig+0xf78>)
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80032de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032e2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80032ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032ee:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	6a1b      	ldr	r3, [r3, #32]
 80032f6:	430b      	orrs	r3, r1
 80032f8:	497f      	ldr	r1, [pc, #508]	; (80034f8 <HAL_RCC_OscConfig+0xf78>)
 80032fa:	4313      	orrs	r3, r2
 80032fc:	604b      	str	r3, [r1, #4]
 80032fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003302:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8003306:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800330a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800330c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003310:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	fa93 f2a3 	rbit	r2, r3
 800331a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800331e:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003322:	601a      	str	r2, [r3, #0]
  return result;
 8003324:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003328:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800332c:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800332e:	fab3 f383 	clz	r3, r3
 8003332:	b2db      	uxtb	r3, r3
 8003334:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003338:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800333c:	009b      	lsls	r3, r3, #2
 800333e:	461a      	mov	r2, r3
 8003340:	2301      	movs	r3, #1
 8003342:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003344:	f7fd fee6 	bl	8001114 <HAL_GetTick>
 8003348:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800334c:	e009      	b.n	8003362 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800334e:	f7fd fee1 	bl	8001114 <HAL_GetTick>
 8003352:	4602      	mov	r2, r0
 8003354:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003358:	1ad3      	subs	r3, r2, r3
 800335a:	2b02      	cmp	r3, #2
 800335c:	d901      	bls.n	8003362 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 800335e:	2303      	movs	r3, #3
 8003360:	e144      	b.n	80035ec <HAL_RCC_OscConfig+0x106c>
 8003362:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003366:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800336a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800336e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003370:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003374:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	fa93 f2a3 	rbit	r2, r3
 800337e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003382:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003386:	601a      	str	r2, [r3, #0]
  return result;
 8003388:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800338c:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003390:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003392:	fab3 f383 	clz	r3, r3
 8003396:	b2db      	uxtb	r3, r3
 8003398:	095b      	lsrs	r3, r3, #5
 800339a:	b2db      	uxtb	r3, r3
 800339c:	f043 0301 	orr.w	r3, r3, #1
 80033a0:	b2db      	uxtb	r3, r3
 80033a2:	2b01      	cmp	r3, #1
 80033a4:	d102      	bne.n	80033ac <HAL_RCC_OscConfig+0xe2c>
 80033a6:	4b54      	ldr	r3, [pc, #336]	; (80034f8 <HAL_RCC_OscConfig+0xf78>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	e027      	b.n	80033fc <HAL_RCC_OscConfig+0xe7c>
 80033ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033b0:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80033b4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80033b8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033be:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	fa93 f2a3 	rbit	r2, r3
 80033c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033cc:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80033d0:	601a      	str	r2, [r3, #0]
 80033d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033d6:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80033da:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80033de:	601a      	str	r2, [r3, #0]
 80033e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033e4:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	fa93 f2a3 	rbit	r2, r3
 80033ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033f2:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80033f6:	601a      	str	r2, [r3, #0]
 80033f8:	4b3f      	ldr	r3, [pc, #252]	; (80034f8 <HAL_RCC_OscConfig+0xf78>)
 80033fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033fc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003400:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8003404:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003408:	6011      	str	r1, [r2, #0]
 800340a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800340e:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8003412:	6812      	ldr	r2, [r2, #0]
 8003414:	fa92 f1a2 	rbit	r1, r2
 8003418:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800341c:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003420:	6011      	str	r1, [r2, #0]
  return result;
 8003422:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003426:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800342a:	6812      	ldr	r2, [r2, #0]
 800342c:	fab2 f282 	clz	r2, r2
 8003430:	b2d2      	uxtb	r2, r2
 8003432:	f042 0220 	orr.w	r2, r2, #32
 8003436:	b2d2      	uxtb	r2, r2
 8003438:	f002 021f 	and.w	r2, r2, #31
 800343c:	2101      	movs	r1, #1
 800343e:	fa01 f202 	lsl.w	r2, r1, r2
 8003442:	4013      	ands	r3, r2
 8003444:	2b00      	cmp	r3, #0
 8003446:	d082      	beq.n	800334e <HAL_RCC_OscConfig+0xdce>
 8003448:	e0cf      	b.n	80035ea <HAL_RCC_OscConfig+0x106a>
 800344a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800344e:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8003452:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003456:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003458:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800345c:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	fa93 f2a3 	rbit	r2, r3
 8003466:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800346a:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800346e:	601a      	str	r2, [r3, #0]
  return result;
 8003470:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003474:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003478:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800347a:	fab3 f383 	clz	r3, r3
 800347e:	b2db      	uxtb	r3, r3
 8003480:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003484:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003488:	009b      	lsls	r3, r3, #2
 800348a:	461a      	mov	r2, r3
 800348c:	2300      	movs	r3, #0
 800348e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003490:	f7fd fe40 	bl	8001114 <HAL_GetTick>
 8003494:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003498:	e009      	b.n	80034ae <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800349a:	f7fd fe3b 	bl	8001114 <HAL_GetTick>
 800349e:	4602      	mov	r2, r0
 80034a0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80034a4:	1ad3      	subs	r3, r2, r3
 80034a6:	2b02      	cmp	r3, #2
 80034a8:	d901      	bls.n	80034ae <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 80034aa:	2303      	movs	r3, #3
 80034ac:	e09e      	b.n	80035ec <HAL_RCC_OscConfig+0x106c>
 80034ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034b2:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80034b6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80034ba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034c0:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	fa93 f2a3 	rbit	r2, r3
 80034ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034ce:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80034d2:	601a      	str	r2, [r3, #0]
  return result;
 80034d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034d8:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80034dc:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80034de:	fab3 f383 	clz	r3, r3
 80034e2:	b2db      	uxtb	r3, r3
 80034e4:	095b      	lsrs	r3, r3, #5
 80034e6:	b2db      	uxtb	r3, r3
 80034e8:	f043 0301 	orr.w	r3, r3, #1
 80034ec:	b2db      	uxtb	r3, r3
 80034ee:	2b01      	cmp	r3, #1
 80034f0:	d104      	bne.n	80034fc <HAL_RCC_OscConfig+0xf7c>
 80034f2:	4b01      	ldr	r3, [pc, #4]	; (80034f8 <HAL_RCC_OscConfig+0xf78>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	e029      	b.n	800354c <HAL_RCC_OscConfig+0xfcc>
 80034f8:	40021000 	.word	0x40021000
 80034fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003500:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003504:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003508:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800350a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800350e:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	fa93 f2a3 	rbit	r2, r3
 8003518:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800351c:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8003520:	601a      	str	r2, [r3, #0]
 8003522:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003526:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800352a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800352e:	601a      	str	r2, [r3, #0]
 8003530:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003534:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	fa93 f2a3 	rbit	r2, r3
 800353e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003542:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8003546:	601a      	str	r2, [r3, #0]
 8003548:	4b2b      	ldr	r3, [pc, #172]	; (80035f8 <HAL_RCC_OscConfig+0x1078>)
 800354a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800354c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003550:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8003554:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003558:	6011      	str	r1, [r2, #0]
 800355a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800355e:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8003562:	6812      	ldr	r2, [r2, #0]
 8003564:	fa92 f1a2 	rbit	r1, r2
 8003568:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800356c:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8003570:	6011      	str	r1, [r2, #0]
  return result;
 8003572:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003576:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800357a:	6812      	ldr	r2, [r2, #0]
 800357c:	fab2 f282 	clz	r2, r2
 8003580:	b2d2      	uxtb	r2, r2
 8003582:	f042 0220 	orr.w	r2, r2, #32
 8003586:	b2d2      	uxtb	r2, r2
 8003588:	f002 021f 	and.w	r2, r2, #31
 800358c:	2101      	movs	r1, #1
 800358e:	fa01 f202 	lsl.w	r2, r1, r2
 8003592:	4013      	ands	r3, r2
 8003594:	2b00      	cmp	r3, #0
 8003596:	d180      	bne.n	800349a <HAL_RCC_OscConfig+0xf1a>
 8003598:	e027      	b.n	80035ea <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800359a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800359e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	69db      	ldr	r3, [r3, #28]
 80035a6:	2b01      	cmp	r3, #1
 80035a8:	d101      	bne.n	80035ae <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 80035aa:	2301      	movs	r3, #1
 80035ac:	e01e      	b.n	80035ec <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80035ae:	4b12      	ldr	r3, [pc, #72]	; (80035f8 <HAL_RCC_OscConfig+0x1078>)
 80035b0:	685b      	ldr	r3, [r3, #4]
 80035b2:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80035b6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80035ba:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80035be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035c2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	6a1b      	ldr	r3, [r3, #32]
 80035ca:	429a      	cmp	r2, r3
 80035cc:	d10b      	bne.n	80035e6 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80035ce:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80035d2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80035d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035da:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80035e2:	429a      	cmp	r2, r3
 80035e4:	d001      	beq.n	80035ea <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 80035e6:	2301      	movs	r3, #1
 80035e8:	e000      	b.n	80035ec <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 80035ea:	2300      	movs	r3, #0
}
 80035ec:	4618      	mov	r0, r3
 80035ee:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80035f2:	46bd      	mov	sp, r7
 80035f4:	bd80      	pop	{r7, pc}
 80035f6:	bf00      	nop
 80035f8:	40021000 	.word	0x40021000

080035fc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b09e      	sub	sp, #120	; 0x78
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
 8003604:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003606:	2300      	movs	r3, #0
 8003608:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	2b00      	cmp	r3, #0
 800360e:	d101      	bne.n	8003614 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003610:	2301      	movs	r3, #1
 8003612:	e162      	b.n	80038da <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003614:	4b90      	ldr	r3, [pc, #576]	; (8003858 <HAL_RCC_ClockConfig+0x25c>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f003 0307 	and.w	r3, r3, #7
 800361c:	683a      	ldr	r2, [r7, #0]
 800361e:	429a      	cmp	r2, r3
 8003620:	d910      	bls.n	8003644 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003622:	4b8d      	ldr	r3, [pc, #564]	; (8003858 <HAL_RCC_ClockConfig+0x25c>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f023 0207 	bic.w	r2, r3, #7
 800362a:	498b      	ldr	r1, [pc, #556]	; (8003858 <HAL_RCC_ClockConfig+0x25c>)
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	4313      	orrs	r3, r2
 8003630:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003632:	4b89      	ldr	r3, [pc, #548]	; (8003858 <HAL_RCC_ClockConfig+0x25c>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f003 0307 	and.w	r3, r3, #7
 800363a:	683a      	ldr	r2, [r7, #0]
 800363c:	429a      	cmp	r2, r3
 800363e:	d001      	beq.n	8003644 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003640:	2301      	movs	r3, #1
 8003642:	e14a      	b.n	80038da <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f003 0302 	and.w	r3, r3, #2
 800364c:	2b00      	cmp	r3, #0
 800364e:	d008      	beq.n	8003662 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003650:	4b82      	ldr	r3, [pc, #520]	; (800385c <HAL_RCC_ClockConfig+0x260>)
 8003652:	685b      	ldr	r3, [r3, #4]
 8003654:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	689b      	ldr	r3, [r3, #8]
 800365c:	497f      	ldr	r1, [pc, #508]	; (800385c <HAL_RCC_ClockConfig+0x260>)
 800365e:	4313      	orrs	r3, r2
 8003660:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f003 0301 	and.w	r3, r3, #1
 800366a:	2b00      	cmp	r3, #0
 800366c:	f000 80dc 	beq.w	8003828 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	685b      	ldr	r3, [r3, #4]
 8003674:	2b01      	cmp	r3, #1
 8003676:	d13c      	bne.n	80036f2 <HAL_RCC_ClockConfig+0xf6>
 8003678:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800367c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800367e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003680:	fa93 f3a3 	rbit	r3, r3
 8003684:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003686:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003688:	fab3 f383 	clz	r3, r3
 800368c:	b2db      	uxtb	r3, r3
 800368e:	095b      	lsrs	r3, r3, #5
 8003690:	b2db      	uxtb	r3, r3
 8003692:	f043 0301 	orr.w	r3, r3, #1
 8003696:	b2db      	uxtb	r3, r3
 8003698:	2b01      	cmp	r3, #1
 800369a:	d102      	bne.n	80036a2 <HAL_RCC_ClockConfig+0xa6>
 800369c:	4b6f      	ldr	r3, [pc, #444]	; (800385c <HAL_RCC_ClockConfig+0x260>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	e00f      	b.n	80036c2 <HAL_RCC_ClockConfig+0xc6>
 80036a2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80036a6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036a8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80036aa:	fa93 f3a3 	rbit	r3, r3
 80036ae:	667b      	str	r3, [r7, #100]	; 0x64
 80036b0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80036b4:	663b      	str	r3, [r7, #96]	; 0x60
 80036b6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80036b8:	fa93 f3a3 	rbit	r3, r3
 80036bc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80036be:	4b67      	ldr	r3, [pc, #412]	; (800385c <HAL_RCC_ClockConfig+0x260>)
 80036c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036c2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80036c6:	65ba      	str	r2, [r7, #88]	; 0x58
 80036c8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80036ca:	fa92 f2a2 	rbit	r2, r2
 80036ce:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80036d0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80036d2:	fab2 f282 	clz	r2, r2
 80036d6:	b2d2      	uxtb	r2, r2
 80036d8:	f042 0220 	orr.w	r2, r2, #32
 80036dc:	b2d2      	uxtb	r2, r2
 80036de:	f002 021f 	and.w	r2, r2, #31
 80036e2:	2101      	movs	r1, #1
 80036e4:	fa01 f202 	lsl.w	r2, r1, r2
 80036e8:	4013      	ands	r3, r2
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d17b      	bne.n	80037e6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80036ee:	2301      	movs	r3, #1
 80036f0:	e0f3      	b.n	80038da <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	685b      	ldr	r3, [r3, #4]
 80036f6:	2b02      	cmp	r3, #2
 80036f8:	d13c      	bne.n	8003774 <HAL_RCC_ClockConfig+0x178>
 80036fa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80036fe:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003700:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003702:	fa93 f3a3 	rbit	r3, r3
 8003706:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003708:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800370a:	fab3 f383 	clz	r3, r3
 800370e:	b2db      	uxtb	r3, r3
 8003710:	095b      	lsrs	r3, r3, #5
 8003712:	b2db      	uxtb	r3, r3
 8003714:	f043 0301 	orr.w	r3, r3, #1
 8003718:	b2db      	uxtb	r3, r3
 800371a:	2b01      	cmp	r3, #1
 800371c:	d102      	bne.n	8003724 <HAL_RCC_ClockConfig+0x128>
 800371e:	4b4f      	ldr	r3, [pc, #316]	; (800385c <HAL_RCC_ClockConfig+0x260>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	e00f      	b.n	8003744 <HAL_RCC_ClockConfig+0x148>
 8003724:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003728:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800372a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800372c:	fa93 f3a3 	rbit	r3, r3
 8003730:	647b      	str	r3, [r7, #68]	; 0x44
 8003732:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003736:	643b      	str	r3, [r7, #64]	; 0x40
 8003738:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800373a:	fa93 f3a3 	rbit	r3, r3
 800373e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003740:	4b46      	ldr	r3, [pc, #280]	; (800385c <HAL_RCC_ClockConfig+0x260>)
 8003742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003744:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003748:	63ba      	str	r2, [r7, #56]	; 0x38
 800374a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800374c:	fa92 f2a2 	rbit	r2, r2
 8003750:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8003752:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003754:	fab2 f282 	clz	r2, r2
 8003758:	b2d2      	uxtb	r2, r2
 800375a:	f042 0220 	orr.w	r2, r2, #32
 800375e:	b2d2      	uxtb	r2, r2
 8003760:	f002 021f 	and.w	r2, r2, #31
 8003764:	2101      	movs	r1, #1
 8003766:	fa01 f202 	lsl.w	r2, r1, r2
 800376a:	4013      	ands	r3, r2
 800376c:	2b00      	cmp	r3, #0
 800376e:	d13a      	bne.n	80037e6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003770:	2301      	movs	r3, #1
 8003772:	e0b2      	b.n	80038da <HAL_RCC_ClockConfig+0x2de>
 8003774:	2302      	movs	r3, #2
 8003776:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003778:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800377a:	fa93 f3a3 	rbit	r3, r3
 800377e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003780:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003782:	fab3 f383 	clz	r3, r3
 8003786:	b2db      	uxtb	r3, r3
 8003788:	095b      	lsrs	r3, r3, #5
 800378a:	b2db      	uxtb	r3, r3
 800378c:	f043 0301 	orr.w	r3, r3, #1
 8003790:	b2db      	uxtb	r3, r3
 8003792:	2b01      	cmp	r3, #1
 8003794:	d102      	bne.n	800379c <HAL_RCC_ClockConfig+0x1a0>
 8003796:	4b31      	ldr	r3, [pc, #196]	; (800385c <HAL_RCC_ClockConfig+0x260>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	e00d      	b.n	80037b8 <HAL_RCC_ClockConfig+0x1bc>
 800379c:	2302      	movs	r3, #2
 800379e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037a2:	fa93 f3a3 	rbit	r3, r3
 80037a6:	627b      	str	r3, [r7, #36]	; 0x24
 80037a8:	2302      	movs	r3, #2
 80037aa:	623b      	str	r3, [r7, #32]
 80037ac:	6a3b      	ldr	r3, [r7, #32]
 80037ae:	fa93 f3a3 	rbit	r3, r3
 80037b2:	61fb      	str	r3, [r7, #28]
 80037b4:	4b29      	ldr	r3, [pc, #164]	; (800385c <HAL_RCC_ClockConfig+0x260>)
 80037b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037b8:	2202      	movs	r2, #2
 80037ba:	61ba      	str	r2, [r7, #24]
 80037bc:	69ba      	ldr	r2, [r7, #24]
 80037be:	fa92 f2a2 	rbit	r2, r2
 80037c2:	617a      	str	r2, [r7, #20]
  return result;
 80037c4:	697a      	ldr	r2, [r7, #20]
 80037c6:	fab2 f282 	clz	r2, r2
 80037ca:	b2d2      	uxtb	r2, r2
 80037cc:	f042 0220 	orr.w	r2, r2, #32
 80037d0:	b2d2      	uxtb	r2, r2
 80037d2:	f002 021f 	and.w	r2, r2, #31
 80037d6:	2101      	movs	r1, #1
 80037d8:	fa01 f202 	lsl.w	r2, r1, r2
 80037dc:	4013      	ands	r3, r2
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d101      	bne.n	80037e6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80037e2:	2301      	movs	r3, #1
 80037e4:	e079      	b.n	80038da <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80037e6:	4b1d      	ldr	r3, [pc, #116]	; (800385c <HAL_RCC_ClockConfig+0x260>)
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	f023 0203 	bic.w	r2, r3, #3
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	685b      	ldr	r3, [r3, #4]
 80037f2:	491a      	ldr	r1, [pc, #104]	; (800385c <HAL_RCC_ClockConfig+0x260>)
 80037f4:	4313      	orrs	r3, r2
 80037f6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80037f8:	f7fd fc8c 	bl	8001114 <HAL_GetTick>
 80037fc:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037fe:	e00a      	b.n	8003816 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003800:	f7fd fc88 	bl	8001114 <HAL_GetTick>
 8003804:	4602      	mov	r2, r0
 8003806:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003808:	1ad3      	subs	r3, r2, r3
 800380a:	f241 3288 	movw	r2, #5000	; 0x1388
 800380e:	4293      	cmp	r3, r2
 8003810:	d901      	bls.n	8003816 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003812:	2303      	movs	r3, #3
 8003814:	e061      	b.n	80038da <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003816:	4b11      	ldr	r3, [pc, #68]	; (800385c <HAL_RCC_ClockConfig+0x260>)
 8003818:	685b      	ldr	r3, [r3, #4]
 800381a:	f003 020c 	and.w	r2, r3, #12
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	685b      	ldr	r3, [r3, #4]
 8003822:	009b      	lsls	r3, r3, #2
 8003824:	429a      	cmp	r2, r3
 8003826:	d1eb      	bne.n	8003800 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003828:	4b0b      	ldr	r3, [pc, #44]	; (8003858 <HAL_RCC_ClockConfig+0x25c>)
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f003 0307 	and.w	r3, r3, #7
 8003830:	683a      	ldr	r2, [r7, #0]
 8003832:	429a      	cmp	r2, r3
 8003834:	d214      	bcs.n	8003860 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003836:	4b08      	ldr	r3, [pc, #32]	; (8003858 <HAL_RCC_ClockConfig+0x25c>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f023 0207 	bic.w	r2, r3, #7
 800383e:	4906      	ldr	r1, [pc, #24]	; (8003858 <HAL_RCC_ClockConfig+0x25c>)
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	4313      	orrs	r3, r2
 8003844:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003846:	4b04      	ldr	r3, [pc, #16]	; (8003858 <HAL_RCC_ClockConfig+0x25c>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f003 0307 	and.w	r3, r3, #7
 800384e:	683a      	ldr	r2, [r7, #0]
 8003850:	429a      	cmp	r2, r3
 8003852:	d005      	beq.n	8003860 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003854:	2301      	movs	r3, #1
 8003856:	e040      	b.n	80038da <HAL_RCC_ClockConfig+0x2de>
 8003858:	40022000 	.word	0x40022000
 800385c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f003 0304 	and.w	r3, r3, #4
 8003868:	2b00      	cmp	r3, #0
 800386a:	d008      	beq.n	800387e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800386c:	4b1d      	ldr	r3, [pc, #116]	; (80038e4 <HAL_RCC_ClockConfig+0x2e8>)
 800386e:	685b      	ldr	r3, [r3, #4]
 8003870:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	68db      	ldr	r3, [r3, #12]
 8003878:	491a      	ldr	r1, [pc, #104]	; (80038e4 <HAL_RCC_ClockConfig+0x2e8>)
 800387a:	4313      	orrs	r3, r2
 800387c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f003 0308 	and.w	r3, r3, #8
 8003886:	2b00      	cmp	r3, #0
 8003888:	d009      	beq.n	800389e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800388a:	4b16      	ldr	r3, [pc, #88]	; (80038e4 <HAL_RCC_ClockConfig+0x2e8>)
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	691b      	ldr	r3, [r3, #16]
 8003896:	00db      	lsls	r3, r3, #3
 8003898:	4912      	ldr	r1, [pc, #72]	; (80038e4 <HAL_RCC_ClockConfig+0x2e8>)
 800389a:	4313      	orrs	r3, r2
 800389c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800389e:	f000 f829 	bl	80038f4 <HAL_RCC_GetSysClockFreq>
 80038a2:	4601      	mov	r1, r0
 80038a4:	4b0f      	ldr	r3, [pc, #60]	; (80038e4 <HAL_RCC_ClockConfig+0x2e8>)
 80038a6:	685b      	ldr	r3, [r3, #4]
 80038a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80038ac:	22f0      	movs	r2, #240	; 0xf0
 80038ae:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038b0:	693a      	ldr	r2, [r7, #16]
 80038b2:	fa92 f2a2 	rbit	r2, r2
 80038b6:	60fa      	str	r2, [r7, #12]
  return result;
 80038b8:	68fa      	ldr	r2, [r7, #12]
 80038ba:	fab2 f282 	clz	r2, r2
 80038be:	b2d2      	uxtb	r2, r2
 80038c0:	40d3      	lsrs	r3, r2
 80038c2:	4a09      	ldr	r2, [pc, #36]	; (80038e8 <HAL_RCC_ClockConfig+0x2ec>)
 80038c4:	5cd3      	ldrb	r3, [r2, r3]
 80038c6:	fa21 f303 	lsr.w	r3, r1, r3
 80038ca:	4a08      	ldr	r2, [pc, #32]	; (80038ec <HAL_RCC_ClockConfig+0x2f0>)
 80038cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80038ce:	4b08      	ldr	r3, [pc, #32]	; (80038f0 <HAL_RCC_ClockConfig+0x2f4>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4618      	mov	r0, r3
 80038d4:	f7fd faf0 	bl	8000eb8 <HAL_InitTick>
  
  return HAL_OK;
 80038d8:	2300      	movs	r3, #0
}
 80038da:	4618      	mov	r0, r3
 80038dc:	3778      	adds	r7, #120	; 0x78
 80038de:	46bd      	mov	sp, r7
 80038e0:	bd80      	pop	{r7, pc}
 80038e2:	bf00      	nop
 80038e4:	40021000 	.word	0x40021000
 80038e8:	08008fd8 	.word	0x08008fd8
 80038ec:	20000000 	.word	0x20000000
 80038f0:	20000004 	.word	0x20000004

080038f4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80038f4:	b480      	push	{r7}
 80038f6:	b08b      	sub	sp, #44	; 0x2c
 80038f8:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80038fa:	2300      	movs	r3, #0
 80038fc:	61fb      	str	r3, [r7, #28]
 80038fe:	2300      	movs	r3, #0
 8003900:	61bb      	str	r3, [r7, #24]
 8003902:	2300      	movs	r3, #0
 8003904:	627b      	str	r3, [r7, #36]	; 0x24
 8003906:	2300      	movs	r3, #0
 8003908:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800390a:	2300      	movs	r3, #0
 800390c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800390e:	4b29      	ldr	r3, [pc, #164]	; (80039b4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003910:	685b      	ldr	r3, [r3, #4]
 8003912:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003914:	69fb      	ldr	r3, [r7, #28]
 8003916:	f003 030c 	and.w	r3, r3, #12
 800391a:	2b04      	cmp	r3, #4
 800391c:	d002      	beq.n	8003924 <HAL_RCC_GetSysClockFreq+0x30>
 800391e:	2b08      	cmp	r3, #8
 8003920:	d003      	beq.n	800392a <HAL_RCC_GetSysClockFreq+0x36>
 8003922:	e03c      	b.n	800399e <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003924:	4b24      	ldr	r3, [pc, #144]	; (80039b8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003926:	623b      	str	r3, [r7, #32]
      break;
 8003928:	e03c      	b.n	80039a4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800392a:	69fb      	ldr	r3, [r7, #28]
 800392c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003930:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003934:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003936:	68ba      	ldr	r2, [r7, #8]
 8003938:	fa92 f2a2 	rbit	r2, r2
 800393c:	607a      	str	r2, [r7, #4]
  return result;
 800393e:	687a      	ldr	r2, [r7, #4]
 8003940:	fab2 f282 	clz	r2, r2
 8003944:	b2d2      	uxtb	r2, r2
 8003946:	40d3      	lsrs	r3, r2
 8003948:	4a1c      	ldr	r2, [pc, #112]	; (80039bc <HAL_RCC_GetSysClockFreq+0xc8>)
 800394a:	5cd3      	ldrb	r3, [r2, r3]
 800394c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800394e:	4b19      	ldr	r3, [pc, #100]	; (80039b4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003950:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003952:	f003 030f 	and.w	r3, r3, #15
 8003956:	220f      	movs	r2, #15
 8003958:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800395a:	693a      	ldr	r2, [r7, #16]
 800395c:	fa92 f2a2 	rbit	r2, r2
 8003960:	60fa      	str	r2, [r7, #12]
  return result;
 8003962:	68fa      	ldr	r2, [r7, #12]
 8003964:	fab2 f282 	clz	r2, r2
 8003968:	b2d2      	uxtb	r2, r2
 800396a:	40d3      	lsrs	r3, r2
 800396c:	4a14      	ldr	r2, [pc, #80]	; (80039c0 <HAL_RCC_GetSysClockFreq+0xcc>)
 800396e:	5cd3      	ldrb	r3, [r2, r3]
 8003970:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003972:	69fb      	ldr	r3, [r7, #28]
 8003974:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003978:	2b00      	cmp	r3, #0
 800397a:	d008      	beq.n	800398e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800397c:	4a0e      	ldr	r2, [pc, #56]	; (80039b8 <HAL_RCC_GetSysClockFreq+0xc4>)
 800397e:	69bb      	ldr	r3, [r7, #24]
 8003980:	fbb2 f2f3 	udiv	r2, r2, r3
 8003984:	697b      	ldr	r3, [r7, #20]
 8003986:	fb02 f303 	mul.w	r3, r2, r3
 800398a:	627b      	str	r3, [r7, #36]	; 0x24
 800398c:	e004      	b.n	8003998 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800398e:	697b      	ldr	r3, [r7, #20]
 8003990:	4a0c      	ldr	r2, [pc, #48]	; (80039c4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003992:	fb02 f303 	mul.w	r3, r2, r3
 8003996:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800399a:	623b      	str	r3, [r7, #32]
      break;
 800399c:	e002      	b.n	80039a4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800399e:	4b06      	ldr	r3, [pc, #24]	; (80039b8 <HAL_RCC_GetSysClockFreq+0xc4>)
 80039a0:	623b      	str	r3, [r7, #32]
      break;
 80039a2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80039a4:	6a3b      	ldr	r3, [r7, #32]
}
 80039a6:	4618      	mov	r0, r3
 80039a8:	372c      	adds	r7, #44	; 0x2c
 80039aa:	46bd      	mov	sp, r7
 80039ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b0:	4770      	bx	lr
 80039b2:	bf00      	nop
 80039b4:	40021000 	.word	0x40021000
 80039b8:	007a1200 	.word	0x007a1200
 80039bc:	08008ff0 	.word	0x08008ff0
 80039c0:	08009000 	.word	0x08009000
 80039c4:	003d0900 	.word	0x003d0900

080039c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80039c8:	b480      	push	{r7}
 80039ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80039cc:	4b03      	ldr	r3, [pc, #12]	; (80039dc <HAL_RCC_GetHCLKFreq+0x14>)
 80039ce:	681b      	ldr	r3, [r3, #0]
}
 80039d0:	4618      	mov	r0, r3
 80039d2:	46bd      	mov	sp, r7
 80039d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d8:	4770      	bx	lr
 80039da:	bf00      	nop
 80039dc:	20000000 	.word	0x20000000

080039e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b082      	sub	sp, #8
 80039e4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80039e6:	f7ff ffef 	bl	80039c8 <HAL_RCC_GetHCLKFreq>
 80039ea:	4601      	mov	r1, r0
 80039ec:	4b0b      	ldr	r3, [pc, #44]	; (8003a1c <HAL_RCC_GetPCLK1Freq+0x3c>)
 80039ee:	685b      	ldr	r3, [r3, #4]
 80039f0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80039f4:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80039f8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039fa:	687a      	ldr	r2, [r7, #4]
 80039fc:	fa92 f2a2 	rbit	r2, r2
 8003a00:	603a      	str	r2, [r7, #0]
  return result;
 8003a02:	683a      	ldr	r2, [r7, #0]
 8003a04:	fab2 f282 	clz	r2, r2
 8003a08:	b2d2      	uxtb	r2, r2
 8003a0a:	40d3      	lsrs	r3, r2
 8003a0c:	4a04      	ldr	r2, [pc, #16]	; (8003a20 <HAL_RCC_GetPCLK1Freq+0x40>)
 8003a0e:	5cd3      	ldrb	r3, [r2, r3]
 8003a10:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003a14:	4618      	mov	r0, r3
 8003a16:	3708      	adds	r7, #8
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	bd80      	pop	{r7, pc}
 8003a1c:	40021000 	.word	0x40021000
 8003a20:	08008fe8 	.word	0x08008fe8

08003a24 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b082      	sub	sp, #8
 8003a28:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003a2a:	f7ff ffcd 	bl	80039c8 <HAL_RCC_GetHCLKFreq>
 8003a2e:	4601      	mov	r1, r0
 8003a30:	4b0b      	ldr	r3, [pc, #44]	; (8003a60 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003a32:	685b      	ldr	r3, [r3, #4]
 8003a34:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8003a38:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003a3c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a3e:	687a      	ldr	r2, [r7, #4]
 8003a40:	fa92 f2a2 	rbit	r2, r2
 8003a44:	603a      	str	r2, [r7, #0]
  return result;
 8003a46:	683a      	ldr	r2, [r7, #0]
 8003a48:	fab2 f282 	clz	r2, r2
 8003a4c:	b2d2      	uxtb	r2, r2
 8003a4e:	40d3      	lsrs	r3, r2
 8003a50:	4a04      	ldr	r2, [pc, #16]	; (8003a64 <HAL_RCC_GetPCLK2Freq+0x40>)
 8003a52:	5cd3      	ldrb	r3, [r2, r3]
 8003a54:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003a58:	4618      	mov	r0, r3
 8003a5a:	3708      	adds	r7, #8
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	bd80      	pop	{r7, pc}
 8003a60:	40021000 	.word	0x40021000
 8003a64:	08008fe8 	.word	0x08008fe8

08003a68 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003a68:	b480      	push	{r7}
 8003a6a:	b083      	sub	sp, #12
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
 8003a70:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	220f      	movs	r2, #15
 8003a76:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003a78:	4b12      	ldr	r3, [pc, #72]	; (8003ac4 <HAL_RCC_GetClockConfig+0x5c>)
 8003a7a:	685b      	ldr	r3, [r3, #4]
 8003a7c:	f003 0203 	and.w	r2, r3, #3
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8003a84:	4b0f      	ldr	r3, [pc, #60]	; (8003ac4 <HAL_RCC_GetClockConfig+0x5c>)
 8003a86:	685b      	ldr	r3, [r3, #4]
 8003a88:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 8003a90:	4b0c      	ldr	r3, [pc, #48]	; (8003ac4 <HAL_RCC_GetClockConfig+0x5c>)
 8003a92:	685b      	ldr	r3, [r3, #4]
 8003a94:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003a9c:	4b09      	ldr	r3, [pc, #36]	; (8003ac4 <HAL_RCC_GetClockConfig+0x5c>)
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	08db      	lsrs	r3, r3, #3
 8003aa2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 8003aaa:	4b07      	ldr	r3, [pc, #28]	; (8003ac8 <HAL_RCC_GetClockConfig+0x60>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f003 0207 	and.w	r2, r3, #7
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	601a      	str	r2, [r3, #0]
}
 8003ab6:	bf00      	nop
 8003ab8:	370c      	adds	r7, #12
 8003aba:	46bd      	mov	sp, r7
 8003abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac0:	4770      	bx	lr
 8003ac2:	bf00      	nop
 8003ac4:	40021000 	.word	0x40021000
 8003ac8:	40022000 	.word	0x40022000

08003acc <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b092      	sub	sp, #72	; 0x48
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003ad8:	2300      	movs	r3, #0
 8003ada:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003adc:	2300      	movs	r3, #0
 8003ade:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	f000 80d4 	beq.w	8003c98 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003af0:	4b4e      	ldr	r3, [pc, #312]	; (8003c2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003af2:	69db      	ldr	r3, [r3, #28]
 8003af4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d10e      	bne.n	8003b1a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003afc:	4b4b      	ldr	r3, [pc, #300]	; (8003c2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003afe:	69db      	ldr	r3, [r3, #28]
 8003b00:	4a4a      	ldr	r2, [pc, #296]	; (8003c2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b06:	61d3      	str	r3, [r2, #28]
 8003b08:	4b48      	ldr	r3, [pc, #288]	; (8003c2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b0a:	69db      	ldr	r3, [r3, #28]
 8003b0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b10:	60bb      	str	r3, [r7, #8]
 8003b12:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b14:	2301      	movs	r3, #1
 8003b16:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b1a:	4b45      	ldr	r3, [pc, #276]	; (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d118      	bne.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b26:	4b42      	ldr	r3, [pc, #264]	; (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	4a41      	ldr	r2, [pc, #260]	; (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003b2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b30:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b32:	f7fd faef 	bl	8001114 <HAL_GetTick>
 8003b36:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b38:	e008      	b.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b3a:	f7fd faeb 	bl	8001114 <HAL_GetTick>
 8003b3e:	4602      	mov	r2, r0
 8003b40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b42:	1ad3      	subs	r3, r2, r3
 8003b44:	2b64      	cmp	r3, #100	; 0x64
 8003b46:	d901      	bls.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003b48:	2303      	movs	r3, #3
 8003b4a:	e14b      	b.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0x318>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b4c:	4b38      	ldr	r3, [pc, #224]	; (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d0f0      	beq.n	8003b3a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003b58:	4b34      	ldr	r3, [pc, #208]	; (8003c2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b5a:	6a1b      	ldr	r3, [r3, #32]
 8003b5c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b60:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003b62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	f000 8084 	beq.w	8003c72 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	685b      	ldr	r3, [r3, #4]
 8003b6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b72:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003b74:	429a      	cmp	r2, r3
 8003b76:	d07c      	beq.n	8003c72 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003b78:	4b2c      	ldr	r3, [pc, #176]	; (8003c2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b7a:	6a1b      	ldr	r3, [r3, #32]
 8003b7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b80:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003b82:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003b86:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b8a:	fa93 f3a3 	rbit	r3, r3
 8003b8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003b90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003b92:	fab3 f383 	clz	r3, r3
 8003b96:	b2db      	uxtb	r3, r3
 8003b98:	461a      	mov	r2, r3
 8003b9a:	4b26      	ldr	r3, [pc, #152]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003b9c:	4413      	add	r3, r2
 8003b9e:	009b      	lsls	r3, r3, #2
 8003ba0:	461a      	mov	r2, r3
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	6013      	str	r3, [r2, #0]
 8003ba6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003baa:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bae:	fa93 f3a3 	rbit	r3, r3
 8003bb2:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003bb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003bb6:	fab3 f383 	clz	r3, r3
 8003bba:	b2db      	uxtb	r3, r3
 8003bbc:	461a      	mov	r2, r3
 8003bbe:	4b1d      	ldr	r3, [pc, #116]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003bc0:	4413      	add	r3, r2
 8003bc2:	009b      	lsls	r3, r3, #2
 8003bc4:	461a      	mov	r2, r3
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003bca:	4a18      	ldr	r2, [pc, #96]	; (8003c2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bcc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003bce:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003bd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003bd2:	f003 0301 	and.w	r3, r3, #1
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d04b      	beq.n	8003c72 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bda:	f7fd fa9b 	bl	8001114 <HAL_GetTick>
 8003bde:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003be0:	e00a      	b.n	8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003be2:	f7fd fa97 	bl	8001114 <HAL_GetTick>
 8003be6:	4602      	mov	r2, r0
 8003be8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003bea:	1ad3      	subs	r3, r2, r3
 8003bec:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d901      	bls.n	8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003bf4:	2303      	movs	r3, #3
 8003bf6:	e0f5      	b.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0x318>
 8003bf8:	2302      	movs	r3, #2
 8003bfa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bfe:	fa93 f3a3 	rbit	r3, r3
 8003c02:	627b      	str	r3, [r7, #36]	; 0x24
 8003c04:	2302      	movs	r3, #2
 8003c06:	623b      	str	r3, [r7, #32]
 8003c08:	6a3b      	ldr	r3, [r7, #32]
 8003c0a:	fa93 f3a3 	rbit	r3, r3
 8003c0e:	61fb      	str	r3, [r7, #28]
  return result;
 8003c10:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c12:	fab3 f383 	clz	r3, r3
 8003c16:	b2db      	uxtb	r3, r3
 8003c18:	095b      	lsrs	r3, r3, #5
 8003c1a:	b2db      	uxtb	r3, r3
 8003c1c:	f043 0302 	orr.w	r3, r3, #2
 8003c20:	b2db      	uxtb	r3, r3
 8003c22:	2b02      	cmp	r3, #2
 8003c24:	d108      	bne.n	8003c38 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8003c26:	4b01      	ldr	r3, [pc, #4]	; (8003c2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c28:	6a1b      	ldr	r3, [r3, #32]
 8003c2a:	e00d      	b.n	8003c48 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8003c2c:	40021000 	.word	0x40021000
 8003c30:	40007000 	.word	0x40007000
 8003c34:	10908100 	.word	0x10908100
 8003c38:	2302      	movs	r3, #2
 8003c3a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c3c:	69bb      	ldr	r3, [r7, #24]
 8003c3e:	fa93 f3a3 	rbit	r3, r3
 8003c42:	617b      	str	r3, [r7, #20]
 8003c44:	4b69      	ldr	r3, [pc, #420]	; (8003dec <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c48:	2202      	movs	r2, #2
 8003c4a:	613a      	str	r2, [r7, #16]
 8003c4c:	693a      	ldr	r2, [r7, #16]
 8003c4e:	fa92 f2a2 	rbit	r2, r2
 8003c52:	60fa      	str	r2, [r7, #12]
  return result;
 8003c54:	68fa      	ldr	r2, [r7, #12]
 8003c56:	fab2 f282 	clz	r2, r2
 8003c5a:	b2d2      	uxtb	r2, r2
 8003c5c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003c60:	b2d2      	uxtb	r2, r2
 8003c62:	f002 021f 	and.w	r2, r2, #31
 8003c66:	2101      	movs	r1, #1
 8003c68:	fa01 f202 	lsl.w	r2, r1, r2
 8003c6c:	4013      	ands	r3, r2
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d0b7      	beq.n	8003be2 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003c72:	4b5e      	ldr	r3, [pc, #376]	; (8003dec <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003c74:	6a1b      	ldr	r3, [r3, #32]
 8003c76:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	685b      	ldr	r3, [r3, #4]
 8003c7e:	495b      	ldr	r1, [pc, #364]	; (8003dec <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003c80:	4313      	orrs	r3, r2
 8003c82:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003c84:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003c88:	2b01      	cmp	r3, #1
 8003c8a:	d105      	bne.n	8003c98 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c8c:	4b57      	ldr	r3, [pc, #348]	; (8003dec <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003c8e:	69db      	ldr	r3, [r3, #28]
 8003c90:	4a56      	ldr	r2, [pc, #344]	; (8003dec <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003c92:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c96:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f003 0301 	and.w	r3, r3, #1
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d008      	beq.n	8003cb6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003ca4:	4b51      	ldr	r3, [pc, #324]	; (8003dec <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003ca6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ca8:	f023 0203 	bic.w	r2, r3, #3
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	689b      	ldr	r3, [r3, #8]
 8003cb0:	494e      	ldr	r1, [pc, #312]	; (8003dec <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003cb2:	4313      	orrs	r3, r2
 8003cb4:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f003 0320 	and.w	r3, r3, #32
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d008      	beq.n	8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003cc2:	4b4a      	ldr	r3, [pc, #296]	; (8003dec <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cc6:	f023 0210 	bic.w	r2, r3, #16
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	68db      	ldr	r3, [r3, #12]
 8003cce:	4947      	ldr	r1, [pc, #284]	; (8003dec <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003cd0:	4313      	orrs	r3, r2
 8003cd2:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d008      	beq.n	8003cf2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003ce0:	4b42      	ldr	r3, [pc, #264]	; (8003dec <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003ce2:	685b      	ldr	r3, [r3, #4]
 8003ce4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cec:	493f      	ldr	r1, [pc, #252]	; (8003dec <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003cee:	4313      	orrs	r3, r2
 8003cf0:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d008      	beq.n	8003d10 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003cfe:	4b3b      	ldr	r3, [pc, #236]	; (8003dec <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d02:	f023 0220 	bic.w	r2, r3, #32
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	691b      	ldr	r3, [r3, #16]
 8003d0a:	4938      	ldr	r1, [pc, #224]	; (8003dec <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003d0c:	4313      	orrs	r3, r2
 8003d0e:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d008      	beq.n	8003d2e <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003d1c:	4b33      	ldr	r3, [pc, #204]	; (8003dec <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003d1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d20:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	695b      	ldr	r3, [r3, #20]
 8003d28:	4930      	ldr	r1, [pc, #192]	; (8003dec <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003d2a:	4313      	orrs	r3, r2
 8003d2c:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d008      	beq.n	8003d4c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003d3a:	4b2c      	ldr	r3, [pc, #176]	; (8003dec <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003d3c:	685b      	ldr	r3, [r3, #4]
 8003d3e:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	69db      	ldr	r3, [r3, #28]
 8003d46:	4929      	ldr	r1, [pc, #164]	; (8003dec <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003d48:	4313      	orrs	r3, r2
 8003d4a:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d008      	beq.n	8003d6a <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 8003d58:	4b24      	ldr	r3, [pc, #144]	; (8003dec <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003d5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d5c:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	699b      	ldr	r3, [r3, #24]
 8003d64:	4921      	ldr	r1, [pc, #132]	; (8003dec <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003d66:	4313      	orrs	r3, r2
 8003d68:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d008      	beq.n	8003d88 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003d76:	4b1d      	ldr	r3, [pc, #116]	; (8003dec <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d7a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6a1b      	ldr	r3, [r3, #32]
 8003d82:	491a      	ldr	r1, [pc, #104]	; (8003dec <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003d84:	4313      	orrs	r3, r2
 8003d86:	630b      	str	r3, [r1, #48]	; 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d008      	beq.n	8003da6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8003d94:	4b15      	ldr	r3, [pc, #84]	; (8003dec <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003d96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d98:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003da0:	4912      	ldr	r1, [pc, #72]	; (8003dec <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003da2:	4313      	orrs	r3, r2
 8003da4:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d008      	beq.n	8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8003db2:	4b0e      	ldr	r3, [pc, #56]	; (8003dec <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003db6:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dbe:	490b      	ldr	r1, [pc, #44]	; (8003dec <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003dc0:	4313      	orrs	r3, r2
 8003dc2:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d008      	beq.n	8003de2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8003dd0:	4b06      	ldr	r3, [pc, #24]	; (8003dec <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003dd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dd4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ddc:	4903      	ldr	r1, [pc, #12]	; (8003dec <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003dde:	4313      	orrs	r3, r2
 8003de0:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003de2:	2300      	movs	r3, #0
}
 8003de4:	4618      	mov	r0, r3
 8003de6:	3748      	adds	r7, #72	; 0x48
 8003de8:	46bd      	mov	sp, r7
 8003dea:	bd80      	pop	{r7, pc}
 8003dec:	40021000 	.word	0x40021000

08003df0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b082      	sub	sp, #8
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d101      	bne.n	8003e02 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003dfe:	2301      	movs	r3, #1
 8003e00:	e049      	b.n	8003e96 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e08:	b2db      	uxtb	r3, r3
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d106      	bne.n	8003e1c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	2200      	movs	r2, #0
 8003e12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003e16:	6878      	ldr	r0, [r7, #4]
 8003e18:	f000 f841 	bl	8003e9e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2202      	movs	r2, #2
 8003e20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681a      	ldr	r2, [r3, #0]
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	3304      	adds	r3, #4
 8003e2c:	4619      	mov	r1, r3
 8003e2e:	4610      	mov	r0, r2
 8003e30:	f000 f9dc 	bl	80041ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2201      	movs	r2, #1
 8003e38:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2201      	movs	r2, #1
 8003e40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2201      	movs	r2, #1
 8003e48:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2201      	movs	r2, #1
 8003e50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2201      	movs	r2, #1
 8003e58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2201      	movs	r2, #1
 8003e60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2201      	movs	r2, #1
 8003e68:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2201      	movs	r2, #1
 8003e70:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2201      	movs	r2, #1
 8003e78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2201      	movs	r2, #1
 8003e80:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2201      	movs	r2, #1
 8003e88:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2201      	movs	r2, #1
 8003e90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003e94:	2300      	movs	r3, #0
}
 8003e96:	4618      	mov	r0, r3
 8003e98:	3708      	adds	r7, #8
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	bd80      	pop	{r7, pc}

08003e9e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003e9e:	b480      	push	{r7}
 8003ea0:	b083      	sub	sp, #12
 8003ea2:	af00      	add	r7, sp, #0
 8003ea4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003ea6:	bf00      	nop
 8003ea8:	370c      	adds	r7, #12
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb0:	4770      	bx	lr
	...

08003eb4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003eb4:	b480      	push	{r7}
 8003eb6:	b085      	sub	sp, #20
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ec2:	b2db      	uxtb	r3, r3
 8003ec4:	2b01      	cmp	r3, #1
 8003ec6:	d001      	beq.n	8003ecc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003ec8:	2301      	movs	r3, #1
 8003eca:	e03b      	b.n	8003f44 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2202      	movs	r2, #2
 8003ed0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	68da      	ldr	r2, [r3, #12]
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f042 0201 	orr.w	r2, r2, #1
 8003ee2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	4a19      	ldr	r2, [pc, #100]	; (8003f50 <HAL_TIM_Base_Start_IT+0x9c>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d009      	beq.n	8003f02 <HAL_TIM_Base_Start_IT+0x4e>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ef6:	d004      	beq.n	8003f02 <HAL_TIM_Base_Start_IT+0x4e>
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	4a15      	ldr	r2, [pc, #84]	; (8003f54 <HAL_TIM_Base_Start_IT+0xa0>)
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d115      	bne.n	8003f2e <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	689a      	ldr	r2, [r3, #8]
 8003f08:	4b13      	ldr	r3, [pc, #76]	; (8003f58 <HAL_TIM_Base_Start_IT+0xa4>)
 8003f0a:	4013      	ands	r3, r2
 8003f0c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	2b06      	cmp	r3, #6
 8003f12:	d015      	beq.n	8003f40 <HAL_TIM_Base_Start_IT+0x8c>
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f1a:	d011      	beq.n	8003f40 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	681a      	ldr	r2, [r3, #0]
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f042 0201 	orr.w	r2, r2, #1
 8003f2a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f2c:	e008      	b.n	8003f40 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	681a      	ldr	r2, [r3, #0]
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f042 0201 	orr.w	r2, r2, #1
 8003f3c:	601a      	str	r2, [r3, #0]
 8003f3e:	e000      	b.n	8003f42 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f40:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003f42:	2300      	movs	r3, #0
}
 8003f44:	4618      	mov	r0, r3
 8003f46:	3714      	adds	r7, #20
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4e:	4770      	bx	lr
 8003f50:	40012c00 	.word	0x40012c00
 8003f54:	40014000 	.word	0x40014000
 8003f58:	00010007 	.word	0x00010007

08003f5c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b082      	sub	sp, #8
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	691b      	ldr	r3, [r3, #16]
 8003f6a:	f003 0302 	and.w	r3, r3, #2
 8003f6e:	2b02      	cmp	r3, #2
 8003f70:	d122      	bne.n	8003fb8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	68db      	ldr	r3, [r3, #12]
 8003f78:	f003 0302 	and.w	r3, r3, #2
 8003f7c:	2b02      	cmp	r3, #2
 8003f7e:	d11b      	bne.n	8003fb8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f06f 0202 	mvn.w	r2, #2
 8003f88:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	2201      	movs	r2, #1
 8003f8e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	699b      	ldr	r3, [r3, #24]
 8003f96:	f003 0303 	and.w	r3, r3, #3
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d003      	beq.n	8003fa6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003f9e:	6878      	ldr	r0, [r7, #4]
 8003fa0:	f000 f905 	bl	80041ae <HAL_TIM_IC_CaptureCallback>
 8003fa4:	e005      	b.n	8003fb2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fa6:	6878      	ldr	r0, [r7, #4]
 8003fa8:	f000 f8f7 	bl	800419a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fac:	6878      	ldr	r0, [r7, #4]
 8003fae:	f000 f908 	bl	80041c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	691b      	ldr	r3, [r3, #16]
 8003fbe:	f003 0304 	and.w	r3, r3, #4
 8003fc2:	2b04      	cmp	r3, #4
 8003fc4:	d122      	bne.n	800400c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	68db      	ldr	r3, [r3, #12]
 8003fcc:	f003 0304 	and.w	r3, r3, #4
 8003fd0:	2b04      	cmp	r3, #4
 8003fd2:	d11b      	bne.n	800400c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f06f 0204 	mvn.w	r2, #4
 8003fdc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2202      	movs	r2, #2
 8003fe2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	699b      	ldr	r3, [r3, #24]
 8003fea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d003      	beq.n	8003ffa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ff2:	6878      	ldr	r0, [r7, #4]
 8003ff4:	f000 f8db 	bl	80041ae <HAL_TIM_IC_CaptureCallback>
 8003ff8:	e005      	b.n	8004006 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ffa:	6878      	ldr	r0, [r7, #4]
 8003ffc:	f000 f8cd 	bl	800419a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004000:	6878      	ldr	r0, [r7, #4]
 8004002:	f000 f8de 	bl	80041c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2200      	movs	r2, #0
 800400a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	691b      	ldr	r3, [r3, #16]
 8004012:	f003 0308 	and.w	r3, r3, #8
 8004016:	2b08      	cmp	r3, #8
 8004018:	d122      	bne.n	8004060 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	68db      	ldr	r3, [r3, #12]
 8004020:	f003 0308 	and.w	r3, r3, #8
 8004024:	2b08      	cmp	r3, #8
 8004026:	d11b      	bne.n	8004060 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f06f 0208 	mvn.w	r2, #8
 8004030:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2204      	movs	r2, #4
 8004036:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	69db      	ldr	r3, [r3, #28]
 800403e:	f003 0303 	and.w	r3, r3, #3
 8004042:	2b00      	cmp	r3, #0
 8004044:	d003      	beq.n	800404e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004046:	6878      	ldr	r0, [r7, #4]
 8004048:	f000 f8b1 	bl	80041ae <HAL_TIM_IC_CaptureCallback>
 800404c:	e005      	b.n	800405a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800404e:	6878      	ldr	r0, [r7, #4]
 8004050:	f000 f8a3 	bl	800419a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004054:	6878      	ldr	r0, [r7, #4]
 8004056:	f000 f8b4 	bl	80041c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	2200      	movs	r2, #0
 800405e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	691b      	ldr	r3, [r3, #16]
 8004066:	f003 0310 	and.w	r3, r3, #16
 800406a:	2b10      	cmp	r3, #16
 800406c:	d122      	bne.n	80040b4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	68db      	ldr	r3, [r3, #12]
 8004074:	f003 0310 	and.w	r3, r3, #16
 8004078:	2b10      	cmp	r3, #16
 800407a:	d11b      	bne.n	80040b4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f06f 0210 	mvn.w	r2, #16
 8004084:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	2208      	movs	r2, #8
 800408a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	69db      	ldr	r3, [r3, #28]
 8004092:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004096:	2b00      	cmp	r3, #0
 8004098:	d003      	beq.n	80040a2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800409a:	6878      	ldr	r0, [r7, #4]
 800409c:	f000 f887 	bl	80041ae <HAL_TIM_IC_CaptureCallback>
 80040a0:	e005      	b.n	80040ae <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80040a2:	6878      	ldr	r0, [r7, #4]
 80040a4:	f000 f879 	bl	800419a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040a8:	6878      	ldr	r0, [r7, #4]
 80040aa:	f000 f88a 	bl	80041c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2200      	movs	r2, #0
 80040b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	691b      	ldr	r3, [r3, #16]
 80040ba:	f003 0301 	and.w	r3, r3, #1
 80040be:	2b01      	cmp	r3, #1
 80040c0:	d10e      	bne.n	80040e0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	68db      	ldr	r3, [r3, #12]
 80040c8:	f003 0301 	and.w	r3, r3, #1
 80040cc:	2b01      	cmp	r3, #1
 80040ce:	d107      	bne.n	80040e0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f06f 0201 	mvn.w	r2, #1
 80040d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80040da:	6878      	ldr	r0, [r7, #4]
 80040dc:	f7fc fe01 	bl	8000ce2 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	691b      	ldr	r3, [r3, #16]
 80040e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040ea:	2b80      	cmp	r3, #128	; 0x80
 80040ec:	d10e      	bne.n	800410c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	68db      	ldr	r3, [r3, #12]
 80040f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040f8:	2b80      	cmp	r3, #128	; 0x80
 80040fa:	d107      	bne.n	800410c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004104:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004106:	6878      	ldr	r0, [r7, #4]
 8004108:	f000 f8e8 	bl	80042dc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	691b      	ldr	r3, [r3, #16]
 8004112:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004116:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800411a:	d10e      	bne.n	800413a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	68db      	ldr	r3, [r3, #12]
 8004122:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004126:	2b80      	cmp	r3, #128	; 0x80
 8004128:	d107      	bne.n	800413a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004132:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004134:	6878      	ldr	r0, [r7, #4]
 8004136:	f000 f8db 	bl	80042f0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	691b      	ldr	r3, [r3, #16]
 8004140:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004144:	2b40      	cmp	r3, #64	; 0x40
 8004146:	d10e      	bne.n	8004166 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	68db      	ldr	r3, [r3, #12]
 800414e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004152:	2b40      	cmp	r3, #64	; 0x40
 8004154:	d107      	bne.n	8004166 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800415e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004160:	6878      	ldr	r0, [r7, #4]
 8004162:	f000 f838 	bl	80041d6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	691b      	ldr	r3, [r3, #16]
 800416c:	f003 0320 	and.w	r3, r3, #32
 8004170:	2b20      	cmp	r3, #32
 8004172:	d10e      	bne.n	8004192 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	68db      	ldr	r3, [r3, #12]
 800417a:	f003 0320 	and.w	r3, r3, #32
 800417e:	2b20      	cmp	r3, #32
 8004180:	d107      	bne.n	8004192 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f06f 0220 	mvn.w	r2, #32
 800418a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800418c:	6878      	ldr	r0, [r7, #4]
 800418e:	f000 f89b 	bl	80042c8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004192:	bf00      	nop
 8004194:	3708      	adds	r7, #8
 8004196:	46bd      	mov	sp, r7
 8004198:	bd80      	pop	{r7, pc}

0800419a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800419a:	b480      	push	{r7}
 800419c:	b083      	sub	sp, #12
 800419e:	af00      	add	r7, sp, #0
 80041a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80041a2:	bf00      	nop
 80041a4:	370c      	adds	r7, #12
 80041a6:	46bd      	mov	sp, r7
 80041a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ac:	4770      	bx	lr

080041ae <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80041ae:	b480      	push	{r7}
 80041b0:	b083      	sub	sp, #12
 80041b2:	af00      	add	r7, sp, #0
 80041b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80041b6:	bf00      	nop
 80041b8:	370c      	adds	r7, #12
 80041ba:	46bd      	mov	sp, r7
 80041bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c0:	4770      	bx	lr

080041c2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80041c2:	b480      	push	{r7}
 80041c4:	b083      	sub	sp, #12
 80041c6:	af00      	add	r7, sp, #0
 80041c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80041ca:	bf00      	nop
 80041cc:	370c      	adds	r7, #12
 80041ce:	46bd      	mov	sp, r7
 80041d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d4:	4770      	bx	lr

080041d6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80041d6:	b480      	push	{r7}
 80041d8:	b083      	sub	sp, #12
 80041da:	af00      	add	r7, sp, #0
 80041dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80041de:	bf00      	nop
 80041e0:	370c      	adds	r7, #12
 80041e2:	46bd      	mov	sp, r7
 80041e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e8:	4770      	bx	lr
	...

080041ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80041ec:	b480      	push	{r7}
 80041ee:	b085      	sub	sp, #20
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
 80041f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	4a2e      	ldr	r2, [pc, #184]	; (80042b8 <TIM_Base_SetConfig+0xcc>)
 8004200:	4293      	cmp	r3, r2
 8004202:	d003      	beq.n	800420c <TIM_Base_SetConfig+0x20>
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800420a:	d108      	bne.n	800421e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004212:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	685b      	ldr	r3, [r3, #4]
 8004218:	68fa      	ldr	r2, [r7, #12]
 800421a:	4313      	orrs	r3, r2
 800421c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	4a25      	ldr	r2, [pc, #148]	; (80042b8 <TIM_Base_SetConfig+0xcc>)
 8004222:	4293      	cmp	r3, r2
 8004224:	d00f      	beq.n	8004246 <TIM_Base_SetConfig+0x5a>
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800422c:	d00b      	beq.n	8004246 <TIM_Base_SetConfig+0x5a>
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	4a22      	ldr	r2, [pc, #136]	; (80042bc <TIM_Base_SetConfig+0xd0>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d007      	beq.n	8004246 <TIM_Base_SetConfig+0x5a>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	4a21      	ldr	r2, [pc, #132]	; (80042c0 <TIM_Base_SetConfig+0xd4>)
 800423a:	4293      	cmp	r3, r2
 800423c:	d003      	beq.n	8004246 <TIM_Base_SetConfig+0x5a>
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	4a20      	ldr	r2, [pc, #128]	; (80042c4 <TIM_Base_SetConfig+0xd8>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d108      	bne.n	8004258 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800424c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	68db      	ldr	r3, [r3, #12]
 8004252:	68fa      	ldr	r2, [r7, #12]
 8004254:	4313      	orrs	r3, r2
 8004256:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	695b      	ldr	r3, [r3, #20]
 8004262:	4313      	orrs	r3, r2
 8004264:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	68fa      	ldr	r2, [r7, #12]
 800426a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	689a      	ldr	r2, [r3, #8]
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	681a      	ldr	r2, [r3, #0]
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	4a0e      	ldr	r2, [pc, #56]	; (80042b8 <TIM_Base_SetConfig+0xcc>)
 8004280:	4293      	cmp	r3, r2
 8004282:	d00b      	beq.n	800429c <TIM_Base_SetConfig+0xb0>
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	4a0d      	ldr	r2, [pc, #52]	; (80042bc <TIM_Base_SetConfig+0xd0>)
 8004288:	4293      	cmp	r3, r2
 800428a:	d007      	beq.n	800429c <TIM_Base_SetConfig+0xb0>
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	4a0c      	ldr	r2, [pc, #48]	; (80042c0 <TIM_Base_SetConfig+0xd4>)
 8004290:	4293      	cmp	r3, r2
 8004292:	d003      	beq.n	800429c <TIM_Base_SetConfig+0xb0>
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	4a0b      	ldr	r2, [pc, #44]	; (80042c4 <TIM_Base_SetConfig+0xd8>)
 8004298:	4293      	cmp	r3, r2
 800429a:	d103      	bne.n	80042a4 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	691a      	ldr	r2, [r3, #16]
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2201      	movs	r2, #1
 80042a8:	615a      	str	r2, [r3, #20]
}
 80042aa:	bf00      	nop
 80042ac:	3714      	adds	r7, #20
 80042ae:	46bd      	mov	sp, r7
 80042b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b4:	4770      	bx	lr
 80042b6:	bf00      	nop
 80042b8:	40012c00 	.word	0x40012c00
 80042bc:	40014000 	.word	0x40014000
 80042c0:	40014400 	.word	0x40014400
 80042c4:	40014800 	.word	0x40014800

080042c8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80042c8:	b480      	push	{r7}
 80042ca:	b083      	sub	sp, #12
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80042d0:	bf00      	nop
 80042d2:	370c      	adds	r7, #12
 80042d4:	46bd      	mov	sp, r7
 80042d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042da:	4770      	bx	lr

080042dc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80042dc:	b480      	push	{r7}
 80042de:	b083      	sub	sp, #12
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80042e4:	bf00      	nop
 80042e6:	370c      	adds	r7, #12
 80042e8:	46bd      	mov	sp, r7
 80042ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ee:	4770      	bx	lr

080042f0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80042f0:	b480      	push	{r7}
 80042f2:	b083      	sub	sp, #12
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80042f8:	bf00      	nop
 80042fa:	370c      	adds	r7, #12
 80042fc:	46bd      	mov	sp, r7
 80042fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004302:	4770      	bx	lr

08004304 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004304:	b580      	push	{r7, lr}
 8004306:	b082      	sub	sp, #8
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d101      	bne.n	8004316 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004312:	2301      	movs	r3, #1
 8004314:	e040      	b.n	8004398 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800431a:	2b00      	cmp	r3, #0
 800431c:	d106      	bne.n	800432c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	2200      	movs	r2, #0
 8004322:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004326:	6878      	ldr	r0, [r7, #4]
 8004328:	f7fc fd82 	bl	8000e30 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2224      	movs	r2, #36	; 0x24
 8004330:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	681a      	ldr	r2, [r3, #0]
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f022 0201 	bic.w	r2, r2, #1
 8004340:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004342:	6878      	ldr	r0, [r7, #4]
 8004344:	f000 f8b6 	bl	80044b4 <UART_SetConfig>
 8004348:	4603      	mov	r3, r0
 800434a:	2b01      	cmp	r3, #1
 800434c:	d101      	bne.n	8004352 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800434e:	2301      	movs	r3, #1
 8004350:	e022      	b.n	8004398 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004356:	2b00      	cmp	r3, #0
 8004358:	d002      	beq.n	8004360 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800435a:	6878      	ldr	r0, [r7, #4]
 800435c:	f000 f9e0 	bl	8004720 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	685a      	ldr	r2, [r3, #4]
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800436e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	689a      	ldr	r2, [r3, #8]
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800437e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	681a      	ldr	r2, [r3, #0]
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f042 0201 	orr.w	r2, r2, #1
 800438e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004390:	6878      	ldr	r0, [r7, #4]
 8004392:	f000 fa67 	bl	8004864 <UART_CheckIdleState>
 8004396:	4603      	mov	r3, r0
}
 8004398:	4618      	mov	r0, r3
 800439a:	3708      	adds	r7, #8
 800439c:	46bd      	mov	sp, r7
 800439e:	bd80      	pop	{r7, pc}

080043a0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b08a      	sub	sp, #40	; 0x28
 80043a4:	af02      	add	r7, sp, #8
 80043a6:	60f8      	str	r0, [r7, #12]
 80043a8:	60b9      	str	r1, [r7, #8]
 80043aa:	603b      	str	r3, [r7, #0]
 80043ac:	4613      	mov	r3, r2
 80043ae:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80043b4:	2b20      	cmp	r3, #32
 80043b6:	d178      	bne.n	80044aa <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 80043b8:	68bb      	ldr	r3, [r7, #8]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d002      	beq.n	80043c4 <HAL_UART_Transmit+0x24>
 80043be:	88fb      	ldrh	r3, [r7, #6]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d101      	bne.n	80043c8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80043c4:	2301      	movs	r3, #1
 80043c6:	e071      	b.n	80044ac <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	2200      	movs	r2, #0
 80043cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	2221      	movs	r2, #33	; 0x21
 80043d4:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80043d6:	f7fc fe9d 	bl	8001114 <HAL_GetTick>
 80043da:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	88fa      	ldrh	r2, [r7, #6]
 80043e0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	88fa      	ldrh	r2, [r7, #6]
 80043e8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	689b      	ldr	r3, [r3, #8]
 80043f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043f4:	d108      	bne.n	8004408 <HAL_UART_Transmit+0x68>
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	691b      	ldr	r3, [r3, #16]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d104      	bne.n	8004408 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80043fe:	2300      	movs	r3, #0
 8004400:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004402:	68bb      	ldr	r3, [r7, #8]
 8004404:	61bb      	str	r3, [r7, #24]
 8004406:	e003      	b.n	8004410 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004408:	68bb      	ldr	r3, [r7, #8]
 800440a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800440c:	2300      	movs	r3, #0
 800440e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004410:	e030      	b.n	8004474 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	9300      	str	r3, [sp, #0]
 8004416:	697b      	ldr	r3, [r7, #20]
 8004418:	2200      	movs	r2, #0
 800441a:	2180      	movs	r1, #128	; 0x80
 800441c:	68f8      	ldr	r0, [r7, #12]
 800441e:	f000 fac9 	bl	80049b4 <UART_WaitOnFlagUntilTimeout>
 8004422:	4603      	mov	r3, r0
 8004424:	2b00      	cmp	r3, #0
 8004426:	d004      	beq.n	8004432 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	2220      	movs	r2, #32
 800442c:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800442e:	2303      	movs	r3, #3
 8004430:	e03c      	b.n	80044ac <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8004432:	69fb      	ldr	r3, [r7, #28]
 8004434:	2b00      	cmp	r3, #0
 8004436:	d10b      	bne.n	8004450 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004438:	69bb      	ldr	r3, [r7, #24]
 800443a:	881a      	ldrh	r2, [r3, #0]
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004444:	b292      	uxth	r2, r2
 8004446:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004448:	69bb      	ldr	r3, [r7, #24]
 800444a:	3302      	adds	r3, #2
 800444c:	61bb      	str	r3, [r7, #24]
 800444e:	e008      	b.n	8004462 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004450:	69fb      	ldr	r3, [r7, #28]
 8004452:	781a      	ldrb	r2, [r3, #0]
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	b292      	uxth	r2, r2
 800445a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800445c:	69fb      	ldr	r3, [r7, #28]
 800445e:	3301      	adds	r3, #1
 8004460:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004468:	b29b      	uxth	r3, r3
 800446a:	3b01      	subs	r3, #1
 800446c:	b29a      	uxth	r2, r3
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800447a:	b29b      	uxth	r3, r3
 800447c:	2b00      	cmp	r3, #0
 800447e:	d1c8      	bne.n	8004412 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	9300      	str	r3, [sp, #0]
 8004484:	697b      	ldr	r3, [r7, #20]
 8004486:	2200      	movs	r2, #0
 8004488:	2140      	movs	r1, #64	; 0x40
 800448a:	68f8      	ldr	r0, [r7, #12]
 800448c:	f000 fa92 	bl	80049b4 <UART_WaitOnFlagUntilTimeout>
 8004490:	4603      	mov	r3, r0
 8004492:	2b00      	cmp	r3, #0
 8004494:	d004      	beq.n	80044a0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	2220      	movs	r2, #32
 800449a:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 800449c:	2303      	movs	r3, #3
 800449e:	e005      	b.n	80044ac <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	2220      	movs	r2, #32
 80044a4:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80044a6:	2300      	movs	r3, #0
 80044a8:	e000      	b.n	80044ac <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 80044aa:	2302      	movs	r3, #2
  }
}
 80044ac:	4618      	mov	r0, r3
 80044ae:	3720      	adds	r7, #32
 80044b0:	46bd      	mov	sp, r7
 80044b2:	bd80      	pop	{r7, pc}

080044b4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b088      	sub	sp, #32
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80044bc:	2300      	movs	r3, #0
 80044be:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	689a      	ldr	r2, [r3, #8]
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	691b      	ldr	r3, [r3, #16]
 80044c8:	431a      	orrs	r2, r3
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	695b      	ldr	r3, [r3, #20]
 80044ce:	431a      	orrs	r2, r3
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	69db      	ldr	r3, [r3, #28]
 80044d4:	4313      	orrs	r3, r2
 80044d6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	681a      	ldr	r2, [r3, #0]
 80044de:	4b8a      	ldr	r3, [pc, #552]	; (8004708 <UART_SetConfig+0x254>)
 80044e0:	4013      	ands	r3, r2
 80044e2:	687a      	ldr	r2, [r7, #4]
 80044e4:	6812      	ldr	r2, [r2, #0]
 80044e6:	6979      	ldr	r1, [r7, #20]
 80044e8:	430b      	orrs	r3, r1
 80044ea:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	685b      	ldr	r3, [r3, #4]
 80044f2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	68da      	ldr	r2, [r3, #12]
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	430a      	orrs	r2, r1
 8004500:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	699b      	ldr	r3, [r3, #24]
 8004506:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6a1b      	ldr	r3, [r3, #32]
 800450c:	697a      	ldr	r2, [r7, #20]
 800450e:	4313      	orrs	r3, r2
 8004510:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	689b      	ldr	r3, [r3, #8]
 8004518:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	697a      	ldr	r2, [r7, #20]
 8004522:	430a      	orrs	r2, r1
 8004524:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	4a78      	ldr	r2, [pc, #480]	; (800470c <UART_SetConfig+0x258>)
 800452c:	4293      	cmp	r3, r2
 800452e:	d120      	bne.n	8004572 <UART_SetConfig+0xbe>
 8004530:	4b77      	ldr	r3, [pc, #476]	; (8004710 <UART_SetConfig+0x25c>)
 8004532:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004534:	f003 0303 	and.w	r3, r3, #3
 8004538:	2b03      	cmp	r3, #3
 800453a:	d817      	bhi.n	800456c <UART_SetConfig+0xb8>
 800453c:	a201      	add	r2, pc, #4	; (adr r2, 8004544 <UART_SetConfig+0x90>)
 800453e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004542:	bf00      	nop
 8004544:	08004555 	.word	0x08004555
 8004548:	08004561 	.word	0x08004561
 800454c:	08004567 	.word	0x08004567
 8004550:	0800455b 	.word	0x0800455b
 8004554:	2300      	movs	r3, #0
 8004556:	77fb      	strb	r3, [r7, #31]
 8004558:	e01d      	b.n	8004596 <UART_SetConfig+0xe2>
 800455a:	2302      	movs	r3, #2
 800455c:	77fb      	strb	r3, [r7, #31]
 800455e:	e01a      	b.n	8004596 <UART_SetConfig+0xe2>
 8004560:	2304      	movs	r3, #4
 8004562:	77fb      	strb	r3, [r7, #31]
 8004564:	e017      	b.n	8004596 <UART_SetConfig+0xe2>
 8004566:	2308      	movs	r3, #8
 8004568:	77fb      	strb	r3, [r7, #31]
 800456a:	e014      	b.n	8004596 <UART_SetConfig+0xe2>
 800456c:	2310      	movs	r3, #16
 800456e:	77fb      	strb	r3, [r7, #31]
 8004570:	e011      	b.n	8004596 <UART_SetConfig+0xe2>
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	4a67      	ldr	r2, [pc, #412]	; (8004714 <UART_SetConfig+0x260>)
 8004578:	4293      	cmp	r3, r2
 800457a:	d102      	bne.n	8004582 <UART_SetConfig+0xce>
 800457c:	2300      	movs	r3, #0
 800457e:	77fb      	strb	r3, [r7, #31]
 8004580:	e009      	b.n	8004596 <UART_SetConfig+0xe2>
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	4a64      	ldr	r2, [pc, #400]	; (8004718 <UART_SetConfig+0x264>)
 8004588:	4293      	cmp	r3, r2
 800458a:	d102      	bne.n	8004592 <UART_SetConfig+0xde>
 800458c:	2300      	movs	r3, #0
 800458e:	77fb      	strb	r3, [r7, #31]
 8004590:	e001      	b.n	8004596 <UART_SetConfig+0xe2>
 8004592:	2310      	movs	r3, #16
 8004594:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	69db      	ldr	r3, [r3, #28]
 800459a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800459e:	d15a      	bne.n	8004656 <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 80045a0:	7ffb      	ldrb	r3, [r7, #31]
 80045a2:	2b08      	cmp	r3, #8
 80045a4:	d827      	bhi.n	80045f6 <UART_SetConfig+0x142>
 80045a6:	a201      	add	r2, pc, #4	; (adr r2, 80045ac <UART_SetConfig+0xf8>)
 80045a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045ac:	080045d1 	.word	0x080045d1
 80045b0:	080045d9 	.word	0x080045d9
 80045b4:	080045e1 	.word	0x080045e1
 80045b8:	080045f7 	.word	0x080045f7
 80045bc:	080045e7 	.word	0x080045e7
 80045c0:	080045f7 	.word	0x080045f7
 80045c4:	080045f7 	.word	0x080045f7
 80045c8:	080045f7 	.word	0x080045f7
 80045cc:	080045ef 	.word	0x080045ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80045d0:	f7ff fa06 	bl	80039e0 <HAL_RCC_GetPCLK1Freq>
 80045d4:	61b8      	str	r0, [r7, #24]
        break;
 80045d6:	e013      	b.n	8004600 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80045d8:	f7ff fa24 	bl	8003a24 <HAL_RCC_GetPCLK2Freq>
 80045dc:	61b8      	str	r0, [r7, #24]
        break;
 80045de:	e00f      	b.n	8004600 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80045e0:	4b4e      	ldr	r3, [pc, #312]	; (800471c <UART_SetConfig+0x268>)
 80045e2:	61bb      	str	r3, [r7, #24]
        break;
 80045e4:	e00c      	b.n	8004600 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80045e6:	f7ff f985 	bl	80038f4 <HAL_RCC_GetSysClockFreq>
 80045ea:	61b8      	str	r0, [r7, #24]
        break;
 80045ec:	e008      	b.n	8004600 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80045ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80045f2:	61bb      	str	r3, [r7, #24]
        break;
 80045f4:	e004      	b.n	8004600 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 80045f6:	2300      	movs	r3, #0
 80045f8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80045fa:	2301      	movs	r3, #1
 80045fc:	77bb      	strb	r3, [r7, #30]
        break;
 80045fe:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004600:	69bb      	ldr	r3, [r7, #24]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d074      	beq.n	80046f0 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004606:	69bb      	ldr	r3, [r7, #24]
 8004608:	005a      	lsls	r2, r3, #1
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	685b      	ldr	r3, [r3, #4]
 800460e:	085b      	lsrs	r3, r3, #1
 8004610:	441a      	add	r2, r3
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	685b      	ldr	r3, [r3, #4]
 8004616:	fbb2 f3f3 	udiv	r3, r2, r3
 800461a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800461c:	693b      	ldr	r3, [r7, #16]
 800461e:	2b0f      	cmp	r3, #15
 8004620:	d916      	bls.n	8004650 <UART_SetConfig+0x19c>
 8004622:	693b      	ldr	r3, [r7, #16]
 8004624:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004628:	d212      	bcs.n	8004650 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800462a:	693b      	ldr	r3, [r7, #16]
 800462c:	b29b      	uxth	r3, r3
 800462e:	f023 030f 	bic.w	r3, r3, #15
 8004632:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004634:	693b      	ldr	r3, [r7, #16]
 8004636:	085b      	lsrs	r3, r3, #1
 8004638:	b29b      	uxth	r3, r3
 800463a:	f003 0307 	and.w	r3, r3, #7
 800463e:	b29a      	uxth	r2, r3
 8004640:	89fb      	ldrh	r3, [r7, #14]
 8004642:	4313      	orrs	r3, r2
 8004644:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	89fa      	ldrh	r2, [r7, #14]
 800464c:	60da      	str	r2, [r3, #12]
 800464e:	e04f      	b.n	80046f0 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8004650:	2301      	movs	r3, #1
 8004652:	77bb      	strb	r3, [r7, #30]
 8004654:	e04c      	b.n	80046f0 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004656:	7ffb      	ldrb	r3, [r7, #31]
 8004658:	2b08      	cmp	r3, #8
 800465a:	d828      	bhi.n	80046ae <UART_SetConfig+0x1fa>
 800465c:	a201      	add	r2, pc, #4	; (adr r2, 8004664 <UART_SetConfig+0x1b0>)
 800465e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004662:	bf00      	nop
 8004664:	08004689 	.word	0x08004689
 8004668:	08004691 	.word	0x08004691
 800466c:	08004699 	.word	0x08004699
 8004670:	080046af 	.word	0x080046af
 8004674:	0800469f 	.word	0x0800469f
 8004678:	080046af 	.word	0x080046af
 800467c:	080046af 	.word	0x080046af
 8004680:	080046af 	.word	0x080046af
 8004684:	080046a7 	.word	0x080046a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004688:	f7ff f9aa 	bl	80039e0 <HAL_RCC_GetPCLK1Freq>
 800468c:	61b8      	str	r0, [r7, #24]
        break;
 800468e:	e013      	b.n	80046b8 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004690:	f7ff f9c8 	bl	8003a24 <HAL_RCC_GetPCLK2Freq>
 8004694:	61b8      	str	r0, [r7, #24]
        break;
 8004696:	e00f      	b.n	80046b8 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004698:	4b20      	ldr	r3, [pc, #128]	; (800471c <UART_SetConfig+0x268>)
 800469a:	61bb      	str	r3, [r7, #24]
        break;
 800469c:	e00c      	b.n	80046b8 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800469e:	f7ff f929 	bl	80038f4 <HAL_RCC_GetSysClockFreq>
 80046a2:	61b8      	str	r0, [r7, #24]
        break;
 80046a4:	e008      	b.n	80046b8 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80046a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80046aa:	61bb      	str	r3, [r7, #24]
        break;
 80046ac:	e004      	b.n	80046b8 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 80046ae:	2300      	movs	r3, #0
 80046b0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80046b2:	2301      	movs	r3, #1
 80046b4:	77bb      	strb	r3, [r7, #30]
        break;
 80046b6:	bf00      	nop
    }

    if (pclk != 0U)
 80046b8:	69bb      	ldr	r3, [r7, #24]
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d018      	beq.n	80046f0 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	685b      	ldr	r3, [r3, #4]
 80046c2:	085a      	lsrs	r2, r3, #1
 80046c4:	69bb      	ldr	r3, [r7, #24]
 80046c6:	441a      	add	r2, r3
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	685b      	ldr	r3, [r3, #4]
 80046cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80046d0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80046d2:	693b      	ldr	r3, [r7, #16]
 80046d4:	2b0f      	cmp	r3, #15
 80046d6:	d909      	bls.n	80046ec <UART_SetConfig+0x238>
 80046d8:	693b      	ldr	r3, [r7, #16]
 80046da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046de:	d205      	bcs.n	80046ec <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80046e0:	693b      	ldr	r3, [r7, #16]
 80046e2:	b29a      	uxth	r2, r3
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	60da      	str	r2, [r3, #12]
 80046ea:	e001      	b.n	80046f0 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80046ec:	2301      	movs	r3, #1
 80046ee:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2200      	movs	r2, #0
 80046f4:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2200      	movs	r2, #0
 80046fa:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80046fc:	7fbb      	ldrb	r3, [r7, #30]
}
 80046fe:	4618      	mov	r0, r3
 8004700:	3720      	adds	r7, #32
 8004702:	46bd      	mov	sp, r7
 8004704:	bd80      	pop	{r7, pc}
 8004706:	bf00      	nop
 8004708:	efff69f3 	.word	0xefff69f3
 800470c:	40013800 	.word	0x40013800
 8004710:	40021000 	.word	0x40021000
 8004714:	40004400 	.word	0x40004400
 8004718:	40004800 	.word	0x40004800
 800471c:	007a1200 	.word	0x007a1200

08004720 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004720:	b480      	push	{r7}
 8004722:	b083      	sub	sp, #12
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800472c:	f003 0301 	and.w	r3, r3, #1
 8004730:	2b00      	cmp	r3, #0
 8004732:	d00a      	beq.n	800474a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	685b      	ldr	r3, [r3, #4]
 800473a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	430a      	orrs	r2, r1
 8004748:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800474e:	f003 0302 	and.w	r3, r3, #2
 8004752:	2b00      	cmp	r3, #0
 8004754:	d00a      	beq.n	800476c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	685b      	ldr	r3, [r3, #4]
 800475c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	430a      	orrs	r2, r1
 800476a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004770:	f003 0304 	and.w	r3, r3, #4
 8004774:	2b00      	cmp	r3, #0
 8004776:	d00a      	beq.n	800478e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	685b      	ldr	r3, [r3, #4]
 800477e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	430a      	orrs	r2, r1
 800478c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004792:	f003 0308 	and.w	r3, r3, #8
 8004796:	2b00      	cmp	r3, #0
 8004798:	d00a      	beq.n	80047b0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	685b      	ldr	r3, [r3, #4]
 80047a0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	430a      	orrs	r2, r1
 80047ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047b4:	f003 0310 	and.w	r3, r3, #16
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d00a      	beq.n	80047d2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	689b      	ldr	r3, [r3, #8]
 80047c2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	430a      	orrs	r2, r1
 80047d0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047d6:	f003 0320 	and.w	r3, r3, #32
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d00a      	beq.n	80047f4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	689b      	ldr	r3, [r3, #8]
 80047e4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	430a      	orrs	r2, r1
 80047f2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d01a      	beq.n	8004836 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	685b      	ldr	r3, [r3, #4]
 8004806:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	430a      	orrs	r2, r1
 8004814:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800481a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800481e:	d10a      	bne.n	8004836 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	685b      	ldr	r3, [r3, #4]
 8004826:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	430a      	orrs	r2, r1
 8004834:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800483a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800483e:	2b00      	cmp	r3, #0
 8004840:	d00a      	beq.n	8004858 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	685b      	ldr	r3, [r3, #4]
 8004848:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	430a      	orrs	r2, r1
 8004856:	605a      	str	r2, [r3, #4]
  }
}
 8004858:	bf00      	nop
 800485a:	370c      	adds	r7, #12
 800485c:	46bd      	mov	sp, r7
 800485e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004862:	4770      	bx	lr

08004864 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004864:	b580      	push	{r7, lr}
 8004866:	b098      	sub	sp, #96	; 0x60
 8004868:	af02      	add	r7, sp, #8
 800486a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2200      	movs	r2, #0
 8004870:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004874:	f7fc fc4e 	bl	8001114 <HAL_GetTick>
 8004878:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f003 0308 	and.w	r3, r3, #8
 8004884:	2b08      	cmp	r3, #8
 8004886:	d12e      	bne.n	80048e6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004888:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800488c:	9300      	str	r3, [sp, #0]
 800488e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004890:	2200      	movs	r2, #0
 8004892:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004896:	6878      	ldr	r0, [r7, #4]
 8004898:	f000 f88c 	bl	80049b4 <UART_WaitOnFlagUntilTimeout>
 800489c:	4603      	mov	r3, r0
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d021      	beq.n	80048e6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048aa:	e853 3f00 	ldrex	r3, [r3]
 80048ae:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80048b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80048b6:	653b      	str	r3, [r7, #80]	; 0x50
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	461a      	mov	r2, r3
 80048be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80048c0:	647b      	str	r3, [r7, #68]	; 0x44
 80048c2:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048c4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80048c6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80048c8:	e841 2300 	strex	r3, r2, [r1]
 80048cc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80048ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d1e6      	bne.n	80048a2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2220      	movs	r2, #32
 80048d8:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2200      	movs	r2, #0
 80048de:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80048e2:	2303      	movs	r3, #3
 80048e4:	e062      	b.n	80049ac <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f003 0304 	and.w	r3, r3, #4
 80048f0:	2b04      	cmp	r3, #4
 80048f2:	d149      	bne.n	8004988 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80048f4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80048f8:	9300      	str	r3, [sp, #0]
 80048fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80048fc:	2200      	movs	r2, #0
 80048fe:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004902:	6878      	ldr	r0, [r7, #4]
 8004904:	f000 f856 	bl	80049b4 <UART_WaitOnFlagUntilTimeout>
 8004908:	4603      	mov	r3, r0
 800490a:	2b00      	cmp	r3, #0
 800490c:	d03c      	beq.n	8004988 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004916:	e853 3f00 	ldrex	r3, [r3]
 800491a:	623b      	str	r3, [r7, #32]
   return(result);
 800491c:	6a3b      	ldr	r3, [r7, #32]
 800491e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004922:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	461a      	mov	r2, r3
 800492a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800492c:	633b      	str	r3, [r7, #48]	; 0x30
 800492e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004930:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004932:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004934:	e841 2300 	strex	r3, r2, [r1]
 8004938:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800493a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800493c:	2b00      	cmp	r3, #0
 800493e:	d1e6      	bne.n	800490e <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	3308      	adds	r3, #8
 8004946:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004948:	693b      	ldr	r3, [r7, #16]
 800494a:	e853 3f00 	ldrex	r3, [r3]
 800494e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	f023 0301 	bic.w	r3, r3, #1
 8004956:	64bb      	str	r3, [r7, #72]	; 0x48
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	3308      	adds	r3, #8
 800495e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004960:	61fa      	str	r2, [r7, #28]
 8004962:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004964:	69b9      	ldr	r1, [r7, #24]
 8004966:	69fa      	ldr	r2, [r7, #28]
 8004968:	e841 2300 	strex	r3, r2, [r1]
 800496c:	617b      	str	r3, [r7, #20]
   return(result);
 800496e:	697b      	ldr	r3, [r7, #20]
 8004970:	2b00      	cmp	r3, #0
 8004972:	d1e5      	bne.n	8004940 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2220      	movs	r2, #32
 8004978:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2200      	movs	r2, #0
 8004980:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004984:	2303      	movs	r3, #3
 8004986:	e011      	b.n	80049ac <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2220      	movs	r2, #32
 800498c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2220      	movs	r2, #32
 8004992:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2200      	movs	r2, #0
 800499a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2200      	movs	r2, #0
 80049a0:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2200      	movs	r2, #0
 80049a6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80049aa:	2300      	movs	r3, #0
}
 80049ac:	4618      	mov	r0, r3
 80049ae:	3758      	adds	r7, #88	; 0x58
 80049b0:	46bd      	mov	sp, r7
 80049b2:	bd80      	pop	{r7, pc}

080049b4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80049b4:	b580      	push	{r7, lr}
 80049b6:	b084      	sub	sp, #16
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	60f8      	str	r0, [r7, #12]
 80049bc:	60b9      	str	r1, [r7, #8]
 80049be:	603b      	str	r3, [r7, #0]
 80049c0:	4613      	mov	r3, r2
 80049c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80049c4:	e049      	b.n	8004a5a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049c6:	69bb      	ldr	r3, [r7, #24]
 80049c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049cc:	d045      	beq.n	8004a5a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049ce:	f7fc fba1 	bl	8001114 <HAL_GetTick>
 80049d2:	4602      	mov	r2, r0
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	1ad3      	subs	r3, r2, r3
 80049d8:	69ba      	ldr	r2, [r7, #24]
 80049da:	429a      	cmp	r2, r3
 80049dc:	d302      	bcc.n	80049e4 <UART_WaitOnFlagUntilTimeout+0x30>
 80049de:	69bb      	ldr	r3, [r7, #24]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d101      	bne.n	80049e8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80049e4:	2303      	movs	r3, #3
 80049e6:	e048      	b.n	8004a7a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f003 0304 	and.w	r3, r3, #4
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d031      	beq.n	8004a5a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	69db      	ldr	r3, [r3, #28]
 80049fc:	f003 0308 	and.w	r3, r3, #8
 8004a00:	2b08      	cmp	r3, #8
 8004a02:	d110      	bne.n	8004a26 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	2208      	movs	r2, #8
 8004a0a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8004a0c:	68f8      	ldr	r0, [r7, #12]
 8004a0e:	f000 f838 	bl	8004a82 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	2208      	movs	r2, #8
 8004a16:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8004a22:	2301      	movs	r3, #1
 8004a24:	e029      	b.n	8004a7a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	69db      	ldr	r3, [r3, #28]
 8004a2c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a30:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a34:	d111      	bne.n	8004a5a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004a3e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004a40:	68f8      	ldr	r0, [r7, #12]
 8004a42:	f000 f81e 	bl	8004a82 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	2220      	movs	r2, #32
 8004a4a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	2200      	movs	r2, #0
 8004a52:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004a56:	2303      	movs	r3, #3
 8004a58:	e00f      	b.n	8004a7a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	69da      	ldr	r2, [r3, #28]
 8004a60:	68bb      	ldr	r3, [r7, #8]
 8004a62:	4013      	ands	r3, r2
 8004a64:	68ba      	ldr	r2, [r7, #8]
 8004a66:	429a      	cmp	r2, r3
 8004a68:	bf0c      	ite	eq
 8004a6a:	2301      	moveq	r3, #1
 8004a6c:	2300      	movne	r3, #0
 8004a6e:	b2db      	uxtb	r3, r3
 8004a70:	461a      	mov	r2, r3
 8004a72:	79fb      	ldrb	r3, [r7, #7]
 8004a74:	429a      	cmp	r2, r3
 8004a76:	d0a6      	beq.n	80049c6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004a78:	2300      	movs	r3, #0
}
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	3710      	adds	r7, #16
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	bd80      	pop	{r7, pc}

08004a82 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004a82:	b480      	push	{r7}
 8004a84:	b095      	sub	sp, #84	; 0x54
 8004a86:	af00      	add	r7, sp, #0
 8004a88:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a92:	e853 3f00 	ldrex	r3, [r3]
 8004a96:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004a98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a9a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004a9e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	461a      	mov	r2, r3
 8004aa6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004aa8:	643b      	str	r3, [r7, #64]	; 0x40
 8004aaa:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004aac:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004aae:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004ab0:	e841 2300 	strex	r3, r2, [r1]
 8004ab4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004ab6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d1e6      	bne.n	8004a8a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	3308      	adds	r3, #8
 8004ac2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ac4:	6a3b      	ldr	r3, [r7, #32]
 8004ac6:	e853 3f00 	ldrex	r3, [r3]
 8004aca:	61fb      	str	r3, [r7, #28]
   return(result);
 8004acc:	69fb      	ldr	r3, [r7, #28]
 8004ace:	f023 0301 	bic.w	r3, r3, #1
 8004ad2:	64bb      	str	r3, [r7, #72]	; 0x48
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	3308      	adds	r3, #8
 8004ada:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004adc:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004ade:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ae0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004ae2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004ae4:	e841 2300 	strex	r3, r2, [r1]
 8004ae8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d1e5      	bne.n	8004abc <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004af4:	2b01      	cmp	r3, #1
 8004af6:	d118      	bne.n	8004b2a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	e853 3f00 	ldrex	r3, [r3]
 8004b04:	60bb      	str	r3, [r7, #8]
   return(result);
 8004b06:	68bb      	ldr	r3, [r7, #8]
 8004b08:	f023 0310 	bic.w	r3, r3, #16
 8004b0c:	647b      	str	r3, [r7, #68]	; 0x44
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	461a      	mov	r2, r3
 8004b14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b16:	61bb      	str	r3, [r7, #24]
 8004b18:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b1a:	6979      	ldr	r1, [r7, #20]
 8004b1c:	69ba      	ldr	r2, [r7, #24]
 8004b1e:	e841 2300 	strex	r3, r2, [r1]
 8004b22:	613b      	str	r3, [r7, #16]
   return(result);
 8004b24:	693b      	ldr	r3, [r7, #16]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d1e6      	bne.n	8004af8 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	2220      	movs	r2, #32
 8004b2e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	2200      	movs	r2, #0
 8004b36:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004b3e:	bf00      	nop
 8004b40:	3754      	adds	r7, #84	; 0x54
 8004b42:	46bd      	mov	sp, r7
 8004b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b48:	4770      	bx	lr

08004b4a <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8004b4a:	b480      	push	{r7}
 8004b4c:	b085      	sub	sp, #20
 8004b4e:	af00      	add	r7, sp, #0
 8004b50:	4603      	mov	r3, r0
 8004b52:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8004b54:	2300      	movs	r3, #0
 8004b56:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8004b58:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004b5c:	2b84      	cmp	r3, #132	; 0x84
 8004b5e:	d005      	beq.n	8004b6c <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8004b60:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	4413      	add	r3, r2
 8004b68:	3303      	adds	r3, #3
 8004b6a:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
}
 8004b6e:	4618      	mov	r0, r3
 8004b70:	3714      	adds	r7, #20
 8004b72:	46bd      	mov	sp, r7
 8004b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b78:	4770      	bx	lr

08004b7a <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004b7a:	b580      	push	{r7, lr}
 8004b7c:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8004b7e:	f001 fbdd 	bl	800633c <vTaskStartScheduler>
  
  return osOK;
 8004b82:	2300      	movs	r3, #0
}
 8004b84:	4618      	mov	r0, r3
 8004b86:	bd80      	pop	{r7, pc}

08004b88 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8004b88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004b8a:	b089      	sub	sp, #36	; 0x24
 8004b8c:	af04      	add	r7, sp, #16
 8004b8e:	6078      	str	r0, [r7, #4]
 8004b90:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	695b      	ldr	r3, [r3, #20]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d020      	beq.n	8004bdc <osThreadCreate+0x54>
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	699b      	ldr	r3, [r3, #24]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d01c      	beq.n	8004bdc <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	685c      	ldr	r4, [r3, #4]
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681d      	ldr	r5, [r3, #0]
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	691e      	ldr	r6, [r3, #16]
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	f7ff ffc8 	bl	8004b4a <makeFreeRtosPriority>
 8004bba:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	695b      	ldr	r3, [r3, #20]
 8004bc0:	687a      	ldr	r2, [r7, #4]
 8004bc2:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004bc4:	9202      	str	r2, [sp, #8]
 8004bc6:	9301      	str	r3, [sp, #4]
 8004bc8:	9100      	str	r1, [sp, #0]
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	4632      	mov	r2, r6
 8004bce:	4629      	mov	r1, r5
 8004bd0:	4620      	mov	r0, r4
 8004bd2:	f001 f94d 	bl	8005e70 <xTaskCreateStatic>
 8004bd6:	4603      	mov	r3, r0
 8004bd8:	60fb      	str	r3, [r7, #12]
 8004bda:	e01c      	b.n	8004c16 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	685c      	ldr	r4, [r3, #4]
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004be8:	b29e      	uxth	r6, r3
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	f7ff ffaa 	bl	8004b4a <makeFreeRtosPriority>
 8004bf6:	4602      	mov	r2, r0
 8004bf8:	f107 030c 	add.w	r3, r7, #12
 8004bfc:	9301      	str	r3, [sp, #4]
 8004bfe:	9200      	str	r2, [sp, #0]
 8004c00:	683b      	ldr	r3, [r7, #0]
 8004c02:	4632      	mov	r2, r6
 8004c04:	4629      	mov	r1, r5
 8004c06:	4620      	mov	r0, r4
 8004c08:	f001 f98e 	bl	8005f28 <xTaskCreate>
 8004c0c:	4603      	mov	r3, r0
 8004c0e:	2b01      	cmp	r3, #1
 8004c10:	d001      	beq.n	8004c16 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8004c12:	2300      	movs	r3, #0
 8004c14:	e000      	b.n	8004c18 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8004c16:	68fb      	ldr	r3, [r7, #12]
}
 8004c18:	4618      	mov	r0, r3
 8004c1a:	3714      	adds	r7, #20
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004c20 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 8004c20:	b580      	push	{r7, lr}
 8004c22:	b082      	sub	sp, #8
 8004c24:	af00      	add	r7, sp, #0
	EventGroup_t *pxEventBits;

		/* Allocate the event group. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) );
 8004c26:	201c      	movs	r0, #28
 8004c28:	f003 fa46 	bl	80080b8 <pvPortMalloc>
 8004c2c:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d00a      	beq.n	8004c4a <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2200      	movs	r2, #0
 8004c38:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	3304      	adds	r3, #4
 8004c3e:	4618      	mov	r0, r3
 8004c40:	f000 f990 	bl	8004f64 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2200      	movs	r2, #0
 8004c48:	761a      	strb	r2, [r3, #24]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return ( EventGroupHandle_t ) pxEventBits;
 8004c4a:	687b      	ldr	r3, [r7, #4]
	}
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	3708      	adds	r7, #8
 8004c50:	46bd      	mov	sp, r7
 8004c52:	bd80      	pop	{r7, pc}

08004c54 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 8004c54:	b580      	push	{r7, lr}
 8004c56:	b090      	sub	sp, #64	; 0x40
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	60f8      	str	r0, [r7, #12]
 8004c5c:	60b9      	str	r1, [r7, #8]
 8004c5e:	607a      	str	r2, [r7, #4]
 8004c60:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 8004c66:	2300      	movs	r3, #0
 8004c68:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 8004c6a:	2300      	movs	r3, #0
 8004c6c:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d10a      	bne.n	8004c8a <xEventGroupWaitBits+0x36>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004c74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c78:	f383 8811 	msr	BASEPRI, r3
 8004c7c:	f3bf 8f6f 	isb	sy
 8004c80:	f3bf 8f4f 	dsb	sy
 8004c84:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004c86:	bf00      	nop
 8004c88:	e7fe      	b.n	8004c88 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8004c8a:	68bb      	ldr	r3, [r7, #8]
 8004c8c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d00a      	beq.n	8004caa <xEventGroupWaitBits+0x56>
	__asm volatile
 8004c94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c98:	f383 8811 	msr	BASEPRI, r3
 8004c9c:	f3bf 8f6f 	isb	sy
 8004ca0:	f3bf 8f4f 	dsb	sy
 8004ca4:	61fb      	str	r3, [r7, #28]
}
 8004ca6:	bf00      	nop
 8004ca8:	e7fe      	b.n	8004ca8 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 8004caa:	68bb      	ldr	r3, [r7, #8]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d10a      	bne.n	8004cc6 <xEventGroupWaitBits+0x72>
	__asm volatile
 8004cb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cb4:	f383 8811 	msr	BASEPRI, r3
 8004cb8:	f3bf 8f6f 	isb	sy
 8004cbc:	f3bf 8f4f 	dsb	sy
 8004cc0:	61bb      	str	r3, [r7, #24]
}
 8004cc2:	bf00      	nop
 8004cc4:	e7fe      	b.n	8004cc4 <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004cc6:	f002 f90d 	bl	8006ee4 <xTaskGetSchedulerState>
 8004cca:	4603      	mov	r3, r0
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d102      	bne.n	8004cd6 <xEventGroupWaitBits+0x82>
 8004cd0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d101      	bne.n	8004cda <xEventGroupWaitBits+0x86>
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	e000      	b.n	8004cdc <xEventGroupWaitBits+0x88>
 8004cda:	2300      	movs	r3, #0
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d10a      	bne.n	8004cf6 <xEventGroupWaitBits+0xa2>
	__asm volatile
 8004ce0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ce4:	f383 8811 	msr	BASEPRI, r3
 8004ce8:	f3bf 8f6f 	isb	sy
 8004cec:	f3bf 8f4f 	dsb	sy
 8004cf0:	617b      	str	r3, [r7, #20]
}
 8004cf2:	bf00      	nop
 8004cf4:	e7fe      	b.n	8004cf4 <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 8004cf6:	f001 fb91 	bl	800641c <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 8004cfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 8004d00:	683a      	ldr	r2, [r7, #0]
 8004d02:	68b9      	ldr	r1, [r7, #8]
 8004d04:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004d06:	f000 f90b 	bl	8004f20 <prvTestWaitCondition>
 8004d0a:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 8004d0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d00e      	beq.n	8004d30 <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 8004d12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d14:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 8004d16:	2300      	movs	r3, #0
 8004d18:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d028      	beq.n	8004d72 <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8004d20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d22:	681a      	ldr	r2, [r3, #0]
 8004d24:	68bb      	ldr	r3, [r7, #8]
 8004d26:	43db      	mvns	r3, r3
 8004d28:	401a      	ands	r2, r3
 8004d2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d2c:	601a      	str	r2, [r3, #0]
 8004d2e:	e020      	b.n	8004d72 <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 8004d30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d104      	bne.n	8004d40 <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 8004d36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d38:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 8004d3a:	2301      	movs	r3, #1
 8004d3c:	633b      	str	r3, [r7, #48]	; 0x30
 8004d3e:	e018      	b.n	8004d72 <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d003      	beq.n	8004d4e <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 8004d46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d48:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004d4c:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d003      	beq.n	8004d5c <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8004d54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d56:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004d5a:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8004d5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d5e:	1d18      	adds	r0, r3, #4
 8004d60:	68ba      	ldr	r2, [r7, #8]
 8004d62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d64:	4313      	orrs	r3, r2
 8004d66:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004d68:	4619      	mov	r1, r3
 8004d6a:	f001 fe29 	bl	80069c0 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 8004d6e:	2300      	movs	r3, #0
 8004d70:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 8004d72:	f001 fb61 	bl	8006438 <xTaskResumeAll>
 8004d76:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 8004d78:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d031      	beq.n	8004de2 <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 8004d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d107      	bne.n	8004d94 <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 8004d84:	4b19      	ldr	r3, [pc, #100]	; (8004dec <xEventGroupWaitBits+0x198>)
 8004d86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d8a:	601a      	str	r2, [r3, #0]
 8004d8c:	f3bf 8f4f 	dsb	sy
 8004d90:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 8004d94:	f002 fa70 	bl	8007278 <uxTaskResetEventItemValue>
 8004d98:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8004d9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d11a      	bne.n	8004dda <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 8004da4:	f003 f866 	bl	8007e74 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 8004da8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 8004dae:	683a      	ldr	r2, [r7, #0]
 8004db0:	68b9      	ldr	r1, [r7, #8]
 8004db2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8004db4:	f000 f8b4 	bl	8004f20 <prvTestWaitCondition>
 8004db8:	4603      	mov	r3, r0
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d009      	beq.n	8004dd2 <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d006      	beq.n	8004dd2 <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8004dc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004dc6:	681a      	ldr	r2, [r3, #0]
 8004dc8:	68bb      	ldr	r3, [r7, #8]
 8004dca:	43db      	mvns	r3, r3
 8004dcc:	401a      	ands	r2, r3
 8004dce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004dd0:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 8004dd2:	2301      	movs	r3, #1
 8004dd4:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 8004dd6:	f003 f87d 	bl	8007ed4 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 8004dda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ddc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004de0:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 8004de2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8004de4:	4618      	mov	r0, r3
 8004de6:	3740      	adds	r7, #64	; 0x40
 8004de8:	46bd      	mov	sp, r7
 8004dea:	bd80      	pop	{r7, pc}
 8004dec:	e000ed04 	.word	0xe000ed04

08004df0 <xEventGroupSetBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 8004df0:	b580      	push	{r7, lr}
 8004df2:	b08e      	sub	sp, #56	; 0x38
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
 8004df8:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t *pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 8004e02:	2300      	movs	r3, #0
 8004e04:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d10a      	bne.n	8004e22 <xEventGroupSetBits+0x32>
	__asm volatile
 8004e0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e10:	f383 8811 	msr	BASEPRI, r3
 8004e14:	f3bf 8f6f 	isb	sy
 8004e18:	f3bf 8f4f 	dsb	sy
 8004e1c:	613b      	str	r3, [r7, #16]
}
 8004e1e:	bf00      	nop
 8004e20:	e7fe      	b.n	8004e20 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d00a      	beq.n	8004e42 <xEventGroupSetBits+0x52>
	__asm volatile
 8004e2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e30:	f383 8811 	msr	BASEPRI, r3
 8004e34:	f3bf 8f6f 	isb	sy
 8004e38:	f3bf 8f4f 	dsb	sy
 8004e3c:	60fb      	str	r3, [r7, #12]
}
 8004e3e:	bf00      	nop
 8004e40:	e7fe      	b.n	8004e40 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 8004e42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e44:	3304      	adds	r3, #4
 8004e46:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e4a:	3308      	adds	r3, #8
 8004e4c:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 8004e4e:	f001 fae5 	bl	800641c <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 8004e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e54:	68db      	ldr	r3, [r3, #12]
 8004e56:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 8004e58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e5a:	681a      	ldr	r2, [r3, #0]
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	431a      	orrs	r2, r3
 8004e60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e62:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 8004e64:	e03c      	b.n	8004ee0 <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 8004e66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e68:	685b      	ldr	r3, [r3, #4]
 8004e6a:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8004e6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 8004e72:	2300      	movs	r3, #0
 8004e74:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 8004e76:	69bb      	ldr	r3, [r7, #24]
 8004e78:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8004e7c:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8004e7e:	69bb      	ldr	r3, [r7, #24]
 8004e80:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004e84:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8004e86:	697b      	ldr	r3, [r7, #20]
 8004e88:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d108      	bne.n	8004ea2 <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8004e90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e92:	681a      	ldr	r2, [r3, #0]
 8004e94:	69bb      	ldr	r3, [r7, #24]
 8004e96:	4013      	ands	r3, r2
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d00b      	beq.n	8004eb4 <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 8004e9c:	2301      	movs	r3, #1
 8004e9e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004ea0:	e008      	b.n	8004eb4 <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8004ea2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ea4:	681a      	ldr	r2, [r3, #0]
 8004ea6:	69bb      	ldr	r3, [r7, #24]
 8004ea8:	4013      	ands	r3, r2
 8004eaa:	69ba      	ldr	r2, [r7, #24]
 8004eac:	429a      	cmp	r2, r3
 8004eae:	d101      	bne.n	8004eb4 <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 8004eb0:	2301      	movs	r3, #1
 8004eb2:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 8004eb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d010      	beq.n	8004edc <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8004eba:	697b      	ldr	r3, [r7, #20]
 8004ebc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d003      	beq.n	8004ecc <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 8004ec4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ec6:	69bb      	ldr	r3, [r7, #24]
 8004ec8:	4313      	orrs	r3, r2
 8004eca:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8004ecc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004ed4:	4619      	mov	r1, r3
 8004ed6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004ed8:	f001 fe3c 	bl	8006b54 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 8004edc:	69fb      	ldr	r3, [r7, #28]
 8004ede:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 8004ee0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004ee2:	6a3b      	ldr	r3, [r7, #32]
 8004ee4:	429a      	cmp	r2, r3
 8004ee6:	d1be      	bne.n	8004e66 <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8004ee8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eea:	681a      	ldr	r2, [r3, #0]
 8004eec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eee:	43db      	mvns	r3, r3
 8004ef0:	401a      	ands	r2, r3
 8004ef2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ef4:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 8004ef6:	f001 fa9f 	bl	8006438 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 8004efa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004efc:	681b      	ldr	r3, [r3, #0]
}
 8004efe:	4618      	mov	r0, r3
 8004f00:	3738      	adds	r7, #56	; 0x38
 8004f02:	46bd      	mov	sp, r7
 8004f04:	bd80      	pop	{r7, pc}

08004f06 <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 8004f06:	b580      	push	{r7, lr}
 8004f08:	b082      	sub	sp, #8
 8004f0a:	af00      	add	r7, sp, #0
 8004f0c:	6078      	str	r0, [r7, #4]
 8004f0e:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet );
 8004f10:	6839      	ldr	r1, [r7, #0]
 8004f12:	6878      	ldr	r0, [r7, #4]
 8004f14:	f7ff ff6c 	bl	8004df0 <xEventGroupSetBits>
}
 8004f18:	bf00      	nop
 8004f1a:	3708      	adds	r7, #8
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	bd80      	pop	{r7, pc}

08004f20 <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear );
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 8004f20:	b480      	push	{r7}
 8004f22:	b087      	sub	sp, #28
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	60f8      	str	r0, [r7, #12]
 8004f28:	60b9      	str	r1, [r7, #8]
 8004f2a:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 8004f2c:	2300      	movs	r3, #0
 8004f2e:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d107      	bne.n	8004f46 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8004f36:	68fa      	ldr	r2, [r7, #12]
 8004f38:	68bb      	ldr	r3, [r7, #8]
 8004f3a:	4013      	ands	r3, r2
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d00a      	beq.n	8004f56 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8004f40:	2301      	movs	r3, #1
 8004f42:	617b      	str	r3, [r7, #20]
 8004f44:	e007      	b.n	8004f56 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8004f46:	68fa      	ldr	r2, [r7, #12]
 8004f48:	68bb      	ldr	r3, [r7, #8]
 8004f4a:	4013      	ands	r3, r2
 8004f4c:	68ba      	ldr	r2, [r7, #8]
 8004f4e:	429a      	cmp	r2, r3
 8004f50:	d101      	bne.n	8004f56 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8004f52:	2301      	movs	r3, #1
 8004f54:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 8004f56:	697b      	ldr	r3, [r7, #20]
}
 8004f58:	4618      	mov	r0, r3
 8004f5a:	371c      	adds	r7, #28
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f62:	4770      	bx	lr

08004f64 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004f64:	b480      	push	{r7}
 8004f66:	b083      	sub	sp, #12
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	f103 0208 	add.w	r2, r3, #8
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	f04f 32ff 	mov.w	r2, #4294967295
 8004f7c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	f103 0208 	add.w	r2, r3, #8
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	f103 0208 	add.w	r2, r3, #8
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	2200      	movs	r2, #0
 8004f96:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004f98:	bf00      	nop
 8004f9a:	370c      	adds	r7, #12
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa2:	4770      	bx	lr

08004fa4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004fa4:	b480      	push	{r7}
 8004fa6:	b083      	sub	sp, #12
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2200      	movs	r2, #0
 8004fb0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004fb2:	bf00      	nop
 8004fb4:	370c      	adds	r7, #12
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fbc:	4770      	bx	lr

08004fbe <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004fbe:	b480      	push	{r7}
 8004fc0:	b085      	sub	sp, #20
 8004fc2:	af00      	add	r7, sp, #0
 8004fc4:	6078      	str	r0, [r7, #4]
 8004fc6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	685b      	ldr	r3, [r3, #4]
 8004fcc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	68fa      	ldr	r2, [r7, #12]
 8004fd2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	689a      	ldr	r2, [r3, #8]
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	689b      	ldr	r3, [r3, #8]
 8004fe0:	683a      	ldr	r2, [r7, #0]
 8004fe2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	683a      	ldr	r2, [r7, #0]
 8004fe8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	687a      	ldr	r2, [r7, #4]
 8004fee:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	1c5a      	adds	r2, r3, #1
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	601a      	str	r2, [r3, #0]
}
 8004ffa:	bf00      	nop
 8004ffc:	3714      	adds	r7, #20
 8004ffe:	46bd      	mov	sp, r7
 8005000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005004:	4770      	bx	lr

08005006 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005006:	b480      	push	{r7}
 8005008:	b085      	sub	sp, #20
 800500a:	af00      	add	r7, sp, #0
 800500c:	6078      	str	r0, [r7, #4]
 800500e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005010:	683b      	ldr	r3, [r7, #0]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005016:	68bb      	ldr	r3, [r7, #8]
 8005018:	f1b3 3fff 	cmp.w	r3, #4294967295
 800501c:	d103      	bne.n	8005026 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	691b      	ldr	r3, [r3, #16]
 8005022:	60fb      	str	r3, [r7, #12]
 8005024:	e00c      	b.n	8005040 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	3308      	adds	r3, #8
 800502a:	60fb      	str	r3, [r7, #12]
 800502c:	e002      	b.n	8005034 <vListInsert+0x2e>
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	685b      	ldr	r3, [r3, #4]
 8005032:	60fb      	str	r3, [r7, #12]
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	685b      	ldr	r3, [r3, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	68ba      	ldr	r2, [r7, #8]
 800503c:	429a      	cmp	r2, r3
 800503e:	d2f6      	bcs.n	800502e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	685a      	ldr	r2, [r3, #4]
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	685b      	ldr	r3, [r3, #4]
 800504c:	683a      	ldr	r2, [r7, #0]
 800504e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	68fa      	ldr	r2, [r7, #12]
 8005054:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	683a      	ldr	r2, [r7, #0]
 800505a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800505c:	683b      	ldr	r3, [r7, #0]
 800505e:	687a      	ldr	r2, [r7, #4]
 8005060:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	1c5a      	adds	r2, r3, #1
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	601a      	str	r2, [r3, #0]
}
 800506c:	bf00      	nop
 800506e:	3714      	adds	r7, #20
 8005070:	46bd      	mov	sp, r7
 8005072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005076:	4770      	bx	lr

08005078 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005078:	b480      	push	{r7}
 800507a:	b085      	sub	sp, #20
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	691b      	ldr	r3, [r3, #16]
 8005084:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	685b      	ldr	r3, [r3, #4]
 800508a:	687a      	ldr	r2, [r7, #4]
 800508c:	6892      	ldr	r2, [r2, #8]
 800508e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	689b      	ldr	r3, [r3, #8]
 8005094:	687a      	ldr	r2, [r7, #4]
 8005096:	6852      	ldr	r2, [r2, #4]
 8005098:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	685b      	ldr	r3, [r3, #4]
 800509e:	687a      	ldr	r2, [r7, #4]
 80050a0:	429a      	cmp	r2, r3
 80050a2:	d103      	bne.n	80050ac <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	689a      	ldr	r2, [r3, #8]
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2200      	movs	r2, #0
 80050b0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	1e5a      	subs	r2, r3, #1
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	681b      	ldr	r3, [r3, #0]
}
 80050c0:	4618      	mov	r0, r3
 80050c2:	3714      	adds	r7, #20
 80050c4:	46bd      	mov	sp, r7
 80050c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ca:	4770      	bx	lr

080050cc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b084      	sub	sp, #16
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
 80050d4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d10a      	bne.n	80050f6 <xQueueGenericReset+0x2a>
	__asm volatile
 80050e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050e4:	f383 8811 	msr	BASEPRI, r3
 80050e8:	f3bf 8f6f 	isb	sy
 80050ec:	f3bf 8f4f 	dsb	sy
 80050f0:	60bb      	str	r3, [r7, #8]
}
 80050f2:	bf00      	nop
 80050f4:	e7fe      	b.n	80050f4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80050f6:	f002 febd 	bl	8007e74 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	681a      	ldr	r2, [r3, #0]
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005102:	68f9      	ldr	r1, [r7, #12]
 8005104:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005106:	fb01 f303 	mul.w	r3, r1, r3
 800510a:	441a      	add	r2, r3
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	2200      	movs	r2, #0
 8005114:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	681a      	ldr	r2, [r3, #0]
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	681a      	ldr	r2, [r3, #0]
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005126:	3b01      	subs	r3, #1
 8005128:	68f9      	ldr	r1, [r7, #12]
 800512a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800512c:	fb01 f303 	mul.w	r3, r1, r3
 8005130:	441a      	add	r2, r3
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	22ff      	movs	r2, #255	; 0xff
 800513a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	22ff      	movs	r2, #255	; 0xff
 8005142:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	2b00      	cmp	r3, #0
 800514a:	d114      	bne.n	8005176 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	691b      	ldr	r3, [r3, #16]
 8005150:	2b00      	cmp	r3, #0
 8005152:	d01a      	beq.n	800518a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	3310      	adds	r3, #16
 8005158:	4618      	mov	r0, r3
 800515a:	f001 fc99 	bl	8006a90 <xTaskRemoveFromEventList>
 800515e:	4603      	mov	r3, r0
 8005160:	2b00      	cmp	r3, #0
 8005162:	d012      	beq.n	800518a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005164:	4b0c      	ldr	r3, [pc, #48]	; (8005198 <xQueueGenericReset+0xcc>)
 8005166:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800516a:	601a      	str	r2, [r3, #0]
 800516c:	f3bf 8f4f 	dsb	sy
 8005170:	f3bf 8f6f 	isb	sy
 8005174:	e009      	b.n	800518a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	3310      	adds	r3, #16
 800517a:	4618      	mov	r0, r3
 800517c:	f7ff fef2 	bl	8004f64 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	3324      	adds	r3, #36	; 0x24
 8005184:	4618      	mov	r0, r3
 8005186:	f7ff feed 	bl	8004f64 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800518a:	f002 fea3 	bl	8007ed4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800518e:	2301      	movs	r3, #1
}
 8005190:	4618      	mov	r0, r3
 8005192:	3710      	adds	r7, #16
 8005194:	46bd      	mov	sp, r7
 8005196:	bd80      	pop	{r7, pc}
 8005198:	e000ed04 	.word	0xe000ed04

0800519c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800519c:	b580      	push	{r7, lr}
 800519e:	b08e      	sub	sp, #56	; 0x38
 80051a0:	af02      	add	r7, sp, #8
 80051a2:	60f8      	str	r0, [r7, #12]
 80051a4:	60b9      	str	r1, [r7, #8]
 80051a6:	607a      	str	r2, [r7, #4]
 80051a8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d10a      	bne.n	80051c6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80051b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051b4:	f383 8811 	msr	BASEPRI, r3
 80051b8:	f3bf 8f6f 	isb	sy
 80051bc:	f3bf 8f4f 	dsb	sy
 80051c0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80051c2:	bf00      	nop
 80051c4:	e7fe      	b.n	80051c4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d10a      	bne.n	80051e2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80051cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051d0:	f383 8811 	msr	BASEPRI, r3
 80051d4:	f3bf 8f6f 	isb	sy
 80051d8:	f3bf 8f4f 	dsb	sy
 80051dc:	627b      	str	r3, [r7, #36]	; 0x24
}
 80051de:	bf00      	nop
 80051e0:	e7fe      	b.n	80051e0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d002      	beq.n	80051ee <xQueueGenericCreateStatic+0x52>
 80051e8:	68bb      	ldr	r3, [r7, #8]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d001      	beq.n	80051f2 <xQueueGenericCreateStatic+0x56>
 80051ee:	2301      	movs	r3, #1
 80051f0:	e000      	b.n	80051f4 <xQueueGenericCreateStatic+0x58>
 80051f2:	2300      	movs	r3, #0
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d10a      	bne.n	800520e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80051f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051fc:	f383 8811 	msr	BASEPRI, r3
 8005200:	f3bf 8f6f 	isb	sy
 8005204:	f3bf 8f4f 	dsb	sy
 8005208:	623b      	str	r3, [r7, #32]
}
 800520a:	bf00      	nop
 800520c:	e7fe      	b.n	800520c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2b00      	cmp	r3, #0
 8005212:	d102      	bne.n	800521a <xQueueGenericCreateStatic+0x7e>
 8005214:	68bb      	ldr	r3, [r7, #8]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d101      	bne.n	800521e <xQueueGenericCreateStatic+0x82>
 800521a:	2301      	movs	r3, #1
 800521c:	e000      	b.n	8005220 <xQueueGenericCreateStatic+0x84>
 800521e:	2300      	movs	r3, #0
 8005220:	2b00      	cmp	r3, #0
 8005222:	d10a      	bne.n	800523a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8005224:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005228:	f383 8811 	msr	BASEPRI, r3
 800522c:	f3bf 8f6f 	isb	sy
 8005230:	f3bf 8f4f 	dsb	sy
 8005234:	61fb      	str	r3, [r7, #28]
}
 8005236:	bf00      	nop
 8005238:	e7fe      	b.n	8005238 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800523a:	2348      	movs	r3, #72	; 0x48
 800523c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800523e:	697b      	ldr	r3, [r7, #20]
 8005240:	2b48      	cmp	r3, #72	; 0x48
 8005242:	d00a      	beq.n	800525a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8005244:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005248:	f383 8811 	msr	BASEPRI, r3
 800524c:	f3bf 8f6f 	isb	sy
 8005250:	f3bf 8f4f 	dsb	sy
 8005254:	61bb      	str	r3, [r7, #24]
}
 8005256:	bf00      	nop
 8005258:	e7fe      	b.n	8005258 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800525a:	683b      	ldr	r3, [r7, #0]
 800525c:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800525e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005260:	2b00      	cmp	r3, #0
 8005262:	d00d      	beq.n	8005280 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005264:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005266:	2201      	movs	r2, #1
 8005268:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800526c:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005270:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005272:	9300      	str	r3, [sp, #0]
 8005274:	4613      	mov	r3, r2
 8005276:	687a      	ldr	r2, [r7, #4]
 8005278:	68b9      	ldr	r1, [r7, #8]
 800527a:	68f8      	ldr	r0, [r7, #12]
 800527c:	f000 f843 	bl	8005306 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8005280:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005282:	4618      	mov	r0, r3
 8005284:	3730      	adds	r7, #48	; 0x30
 8005286:	46bd      	mov	sp, r7
 8005288:	bd80      	pop	{r7, pc}

0800528a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800528a:	b580      	push	{r7, lr}
 800528c:	b08a      	sub	sp, #40	; 0x28
 800528e:	af02      	add	r7, sp, #8
 8005290:	60f8      	str	r0, [r7, #12]
 8005292:	60b9      	str	r1, [r7, #8]
 8005294:	4613      	mov	r3, r2
 8005296:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	2b00      	cmp	r3, #0
 800529c:	d10a      	bne.n	80052b4 <xQueueGenericCreate+0x2a>
	__asm volatile
 800529e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052a2:	f383 8811 	msr	BASEPRI, r3
 80052a6:	f3bf 8f6f 	isb	sy
 80052aa:	f3bf 8f4f 	dsb	sy
 80052ae:	613b      	str	r3, [r7, #16]
}
 80052b0:	bf00      	nop
 80052b2:	e7fe      	b.n	80052b2 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80052b4:	68bb      	ldr	r3, [r7, #8]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d102      	bne.n	80052c0 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80052ba:	2300      	movs	r3, #0
 80052bc:	61fb      	str	r3, [r7, #28]
 80052be:	e004      	b.n	80052ca <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	68ba      	ldr	r2, [r7, #8]
 80052c4:	fb02 f303 	mul.w	r3, r2, r3
 80052c8:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 80052ca:	69fb      	ldr	r3, [r7, #28]
 80052cc:	3348      	adds	r3, #72	; 0x48
 80052ce:	4618      	mov	r0, r3
 80052d0:	f002 fef2 	bl	80080b8 <pvPortMalloc>
 80052d4:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80052d6:	69bb      	ldr	r3, [r7, #24]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d00f      	beq.n	80052fc <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 80052dc:	69bb      	ldr	r3, [r7, #24]
 80052de:	3348      	adds	r3, #72	; 0x48
 80052e0:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80052e2:	69bb      	ldr	r3, [r7, #24]
 80052e4:	2200      	movs	r2, #0
 80052e6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80052ea:	79fa      	ldrb	r2, [r7, #7]
 80052ec:	69bb      	ldr	r3, [r7, #24]
 80052ee:	9300      	str	r3, [sp, #0]
 80052f0:	4613      	mov	r3, r2
 80052f2:	697a      	ldr	r2, [r7, #20]
 80052f4:	68b9      	ldr	r1, [r7, #8]
 80052f6:	68f8      	ldr	r0, [r7, #12]
 80052f8:	f000 f805 	bl	8005306 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80052fc:	69bb      	ldr	r3, [r7, #24]
	}
 80052fe:	4618      	mov	r0, r3
 8005300:	3720      	adds	r7, #32
 8005302:	46bd      	mov	sp, r7
 8005304:	bd80      	pop	{r7, pc}

08005306 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005306:	b580      	push	{r7, lr}
 8005308:	b084      	sub	sp, #16
 800530a:	af00      	add	r7, sp, #0
 800530c:	60f8      	str	r0, [r7, #12]
 800530e:	60b9      	str	r1, [r7, #8]
 8005310:	607a      	str	r2, [r7, #4]
 8005312:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005314:	68bb      	ldr	r3, [r7, #8]
 8005316:	2b00      	cmp	r3, #0
 8005318:	d103      	bne.n	8005322 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800531a:	69bb      	ldr	r3, [r7, #24]
 800531c:	69ba      	ldr	r2, [r7, #24]
 800531e:	601a      	str	r2, [r3, #0]
 8005320:	e002      	b.n	8005328 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005322:	69bb      	ldr	r3, [r7, #24]
 8005324:	687a      	ldr	r2, [r7, #4]
 8005326:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005328:	69bb      	ldr	r3, [r7, #24]
 800532a:	68fa      	ldr	r2, [r7, #12]
 800532c:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800532e:	69bb      	ldr	r3, [r7, #24]
 8005330:	68ba      	ldr	r2, [r7, #8]
 8005332:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005334:	2101      	movs	r1, #1
 8005336:	69b8      	ldr	r0, [r7, #24]
 8005338:	f7ff fec8 	bl	80050cc <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800533c:	bf00      	nop
 800533e:	3710      	adds	r7, #16
 8005340:	46bd      	mov	sp, r7
 8005342:	bd80      	pop	{r7, pc}

08005344 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005344:	b580      	push	{r7, lr}
 8005346:	b08e      	sub	sp, #56	; 0x38
 8005348:	af00      	add	r7, sp, #0
 800534a:	60f8      	str	r0, [r7, #12]
 800534c:	60b9      	str	r1, [r7, #8]
 800534e:	607a      	str	r2, [r7, #4]
 8005350:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005352:	2300      	movs	r3, #0
 8005354:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800535a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800535c:	2b00      	cmp	r3, #0
 800535e:	d10a      	bne.n	8005376 <xQueueGenericSend+0x32>
	__asm volatile
 8005360:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005364:	f383 8811 	msr	BASEPRI, r3
 8005368:	f3bf 8f6f 	isb	sy
 800536c:	f3bf 8f4f 	dsb	sy
 8005370:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005372:	bf00      	nop
 8005374:	e7fe      	b.n	8005374 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005376:	68bb      	ldr	r3, [r7, #8]
 8005378:	2b00      	cmp	r3, #0
 800537a:	d103      	bne.n	8005384 <xQueueGenericSend+0x40>
 800537c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800537e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005380:	2b00      	cmp	r3, #0
 8005382:	d101      	bne.n	8005388 <xQueueGenericSend+0x44>
 8005384:	2301      	movs	r3, #1
 8005386:	e000      	b.n	800538a <xQueueGenericSend+0x46>
 8005388:	2300      	movs	r3, #0
 800538a:	2b00      	cmp	r3, #0
 800538c:	d10a      	bne.n	80053a4 <xQueueGenericSend+0x60>
	__asm volatile
 800538e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005392:	f383 8811 	msr	BASEPRI, r3
 8005396:	f3bf 8f6f 	isb	sy
 800539a:	f3bf 8f4f 	dsb	sy
 800539e:	627b      	str	r3, [r7, #36]	; 0x24
}
 80053a0:	bf00      	nop
 80053a2:	e7fe      	b.n	80053a2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	2b02      	cmp	r3, #2
 80053a8:	d103      	bne.n	80053b2 <xQueueGenericSend+0x6e>
 80053aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053ae:	2b01      	cmp	r3, #1
 80053b0:	d101      	bne.n	80053b6 <xQueueGenericSend+0x72>
 80053b2:	2301      	movs	r3, #1
 80053b4:	e000      	b.n	80053b8 <xQueueGenericSend+0x74>
 80053b6:	2300      	movs	r3, #0
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d10a      	bne.n	80053d2 <xQueueGenericSend+0x8e>
	__asm volatile
 80053bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053c0:	f383 8811 	msr	BASEPRI, r3
 80053c4:	f3bf 8f6f 	isb	sy
 80053c8:	f3bf 8f4f 	dsb	sy
 80053cc:	623b      	str	r3, [r7, #32]
}
 80053ce:	bf00      	nop
 80053d0:	e7fe      	b.n	80053d0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80053d2:	f001 fd87 	bl	8006ee4 <xTaskGetSchedulerState>
 80053d6:	4603      	mov	r3, r0
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d102      	bne.n	80053e2 <xQueueGenericSend+0x9e>
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d101      	bne.n	80053e6 <xQueueGenericSend+0xa2>
 80053e2:	2301      	movs	r3, #1
 80053e4:	e000      	b.n	80053e8 <xQueueGenericSend+0xa4>
 80053e6:	2300      	movs	r3, #0
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d10a      	bne.n	8005402 <xQueueGenericSend+0xbe>
	__asm volatile
 80053ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053f0:	f383 8811 	msr	BASEPRI, r3
 80053f4:	f3bf 8f6f 	isb	sy
 80053f8:	f3bf 8f4f 	dsb	sy
 80053fc:	61fb      	str	r3, [r7, #28]
}
 80053fe:	bf00      	nop
 8005400:	e7fe      	b.n	8005400 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005402:	f002 fd37 	bl	8007e74 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005406:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005408:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800540a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800540c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800540e:	429a      	cmp	r2, r3
 8005410:	d302      	bcc.n	8005418 <xQueueGenericSend+0xd4>
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	2b02      	cmp	r3, #2
 8005416:	d129      	bne.n	800546c <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005418:	683a      	ldr	r2, [r7, #0]
 800541a:	68b9      	ldr	r1, [r7, #8]
 800541c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800541e:	f000 fbb9 	bl	8005b94 <prvCopyDataToQueue>
 8005422:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005424:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005428:	2b00      	cmp	r3, #0
 800542a:	d010      	beq.n	800544e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800542c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800542e:	3324      	adds	r3, #36	; 0x24
 8005430:	4618      	mov	r0, r3
 8005432:	f001 fb2d 	bl	8006a90 <xTaskRemoveFromEventList>
 8005436:	4603      	mov	r3, r0
 8005438:	2b00      	cmp	r3, #0
 800543a:	d013      	beq.n	8005464 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800543c:	4b3f      	ldr	r3, [pc, #252]	; (800553c <xQueueGenericSend+0x1f8>)
 800543e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005442:	601a      	str	r2, [r3, #0]
 8005444:	f3bf 8f4f 	dsb	sy
 8005448:	f3bf 8f6f 	isb	sy
 800544c:	e00a      	b.n	8005464 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800544e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005450:	2b00      	cmp	r3, #0
 8005452:	d007      	beq.n	8005464 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005454:	4b39      	ldr	r3, [pc, #228]	; (800553c <xQueueGenericSend+0x1f8>)
 8005456:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800545a:	601a      	str	r2, [r3, #0]
 800545c:	f3bf 8f4f 	dsb	sy
 8005460:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005464:	f002 fd36 	bl	8007ed4 <vPortExitCritical>
				return pdPASS;
 8005468:	2301      	movs	r3, #1
 800546a:	e063      	b.n	8005534 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2b00      	cmp	r3, #0
 8005470:	d103      	bne.n	800547a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005472:	f002 fd2f 	bl	8007ed4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005476:	2300      	movs	r3, #0
 8005478:	e05c      	b.n	8005534 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800547a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800547c:	2b00      	cmp	r3, #0
 800547e:	d106      	bne.n	800548e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005480:	f107 0314 	add.w	r3, r7, #20
 8005484:	4618      	mov	r0, r3
 8005486:	f001 fbc7 	bl	8006c18 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800548a:	2301      	movs	r3, #1
 800548c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800548e:	f002 fd21 	bl	8007ed4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005492:	f000 ffc3 	bl	800641c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005496:	f002 fced 	bl	8007e74 <vPortEnterCritical>
 800549a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800549c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80054a0:	b25b      	sxtb	r3, r3
 80054a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054a6:	d103      	bne.n	80054b0 <xQueueGenericSend+0x16c>
 80054a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054aa:	2200      	movs	r2, #0
 80054ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80054b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054b2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80054b6:	b25b      	sxtb	r3, r3
 80054b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054bc:	d103      	bne.n	80054c6 <xQueueGenericSend+0x182>
 80054be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054c0:	2200      	movs	r2, #0
 80054c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80054c6:	f002 fd05 	bl	8007ed4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80054ca:	1d3a      	adds	r2, r7, #4
 80054cc:	f107 0314 	add.w	r3, r7, #20
 80054d0:	4611      	mov	r1, r2
 80054d2:	4618      	mov	r0, r3
 80054d4:	f001 fbb6 	bl	8006c44 <xTaskCheckForTimeOut>
 80054d8:	4603      	mov	r3, r0
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d124      	bne.n	8005528 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80054de:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80054e0:	f000 fc50 	bl	8005d84 <prvIsQueueFull>
 80054e4:	4603      	mov	r3, r0
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d018      	beq.n	800551c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80054ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054ec:	3310      	adds	r3, #16
 80054ee:	687a      	ldr	r2, [r7, #4]
 80054f0:	4611      	mov	r1, r2
 80054f2:	4618      	mov	r0, r3
 80054f4:	f001 fa40 	bl	8006978 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80054f8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80054fa:	f000 fbdb 	bl	8005cb4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80054fe:	f000 ff9b 	bl	8006438 <xTaskResumeAll>
 8005502:	4603      	mov	r3, r0
 8005504:	2b00      	cmp	r3, #0
 8005506:	f47f af7c 	bne.w	8005402 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800550a:	4b0c      	ldr	r3, [pc, #48]	; (800553c <xQueueGenericSend+0x1f8>)
 800550c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005510:	601a      	str	r2, [r3, #0]
 8005512:	f3bf 8f4f 	dsb	sy
 8005516:	f3bf 8f6f 	isb	sy
 800551a:	e772      	b.n	8005402 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800551c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800551e:	f000 fbc9 	bl	8005cb4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005522:	f000 ff89 	bl	8006438 <xTaskResumeAll>
 8005526:	e76c      	b.n	8005402 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005528:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800552a:	f000 fbc3 	bl	8005cb4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800552e:	f000 ff83 	bl	8006438 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005532:	2300      	movs	r3, #0
		}
	}
}
 8005534:	4618      	mov	r0, r3
 8005536:	3738      	adds	r7, #56	; 0x38
 8005538:	46bd      	mov	sp, r7
 800553a:	bd80      	pop	{r7, pc}
 800553c:	e000ed04 	.word	0xe000ed04

08005540 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005540:	b580      	push	{r7, lr}
 8005542:	b08e      	sub	sp, #56	; 0x38
 8005544:	af00      	add	r7, sp, #0
 8005546:	60f8      	str	r0, [r7, #12]
 8005548:	60b9      	str	r1, [r7, #8]
 800554a:	607a      	str	r2, [r7, #4]
 800554c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005552:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005554:	2b00      	cmp	r3, #0
 8005556:	d10a      	bne.n	800556e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8005558:	f04f 0350 	mov.w	r3, #80	; 0x50
 800555c:	f383 8811 	msr	BASEPRI, r3
 8005560:	f3bf 8f6f 	isb	sy
 8005564:	f3bf 8f4f 	dsb	sy
 8005568:	627b      	str	r3, [r7, #36]	; 0x24
}
 800556a:	bf00      	nop
 800556c:	e7fe      	b.n	800556c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800556e:	68bb      	ldr	r3, [r7, #8]
 8005570:	2b00      	cmp	r3, #0
 8005572:	d103      	bne.n	800557c <xQueueGenericSendFromISR+0x3c>
 8005574:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005578:	2b00      	cmp	r3, #0
 800557a:	d101      	bne.n	8005580 <xQueueGenericSendFromISR+0x40>
 800557c:	2301      	movs	r3, #1
 800557e:	e000      	b.n	8005582 <xQueueGenericSendFromISR+0x42>
 8005580:	2300      	movs	r3, #0
 8005582:	2b00      	cmp	r3, #0
 8005584:	d10a      	bne.n	800559c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8005586:	f04f 0350 	mov.w	r3, #80	; 0x50
 800558a:	f383 8811 	msr	BASEPRI, r3
 800558e:	f3bf 8f6f 	isb	sy
 8005592:	f3bf 8f4f 	dsb	sy
 8005596:	623b      	str	r3, [r7, #32]
}
 8005598:	bf00      	nop
 800559a:	e7fe      	b.n	800559a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	2b02      	cmp	r3, #2
 80055a0:	d103      	bne.n	80055aa <xQueueGenericSendFromISR+0x6a>
 80055a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055a6:	2b01      	cmp	r3, #1
 80055a8:	d101      	bne.n	80055ae <xQueueGenericSendFromISR+0x6e>
 80055aa:	2301      	movs	r3, #1
 80055ac:	e000      	b.n	80055b0 <xQueueGenericSendFromISR+0x70>
 80055ae:	2300      	movs	r3, #0
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d10a      	bne.n	80055ca <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80055b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055b8:	f383 8811 	msr	BASEPRI, r3
 80055bc:	f3bf 8f6f 	isb	sy
 80055c0:	f3bf 8f4f 	dsb	sy
 80055c4:	61fb      	str	r3, [r7, #28]
}
 80055c6:	bf00      	nop
 80055c8:	e7fe      	b.n	80055c8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80055ca:	f002 fd35 	bl	8008038 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80055ce:	f3ef 8211 	mrs	r2, BASEPRI
 80055d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055d6:	f383 8811 	msr	BASEPRI, r3
 80055da:	f3bf 8f6f 	isb	sy
 80055de:	f3bf 8f4f 	dsb	sy
 80055e2:	61ba      	str	r2, [r7, #24]
 80055e4:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80055e6:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80055e8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80055ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80055ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055f2:	429a      	cmp	r2, r3
 80055f4:	d302      	bcc.n	80055fc <xQueueGenericSendFromISR+0xbc>
 80055f6:	683b      	ldr	r3, [r7, #0]
 80055f8:	2b02      	cmp	r3, #2
 80055fa:	d12c      	bne.n	8005656 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80055fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055fe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005602:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005606:	683a      	ldr	r2, [r7, #0]
 8005608:	68b9      	ldr	r1, [r7, #8]
 800560a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800560c:	f000 fac2 	bl	8005b94 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005610:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8005614:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005618:	d112      	bne.n	8005640 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800561a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800561c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800561e:	2b00      	cmp	r3, #0
 8005620:	d016      	beq.n	8005650 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005622:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005624:	3324      	adds	r3, #36	; 0x24
 8005626:	4618      	mov	r0, r3
 8005628:	f001 fa32 	bl	8006a90 <xTaskRemoveFromEventList>
 800562c:	4603      	mov	r3, r0
 800562e:	2b00      	cmp	r3, #0
 8005630:	d00e      	beq.n	8005650 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	2b00      	cmp	r3, #0
 8005636:	d00b      	beq.n	8005650 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2201      	movs	r2, #1
 800563c:	601a      	str	r2, [r3, #0]
 800563e:	e007      	b.n	8005650 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005640:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005644:	3301      	adds	r3, #1
 8005646:	b2db      	uxtb	r3, r3
 8005648:	b25a      	sxtb	r2, r3
 800564a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800564c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005650:	2301      	movs	r3, #1
 8005652:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8005654:	e001      	b.n	800565a <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005656:	2300      	movs	r3, #0
 8005658:	637b      	str	r3, [r7, #52]	; 0x34
 800565a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800565c:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800565e:	693b      	ldr	r3, [r7, #16]
 8005660:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005664:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005666:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005668:	4618      	mov	r0, r3
 800566a:	3738      	adds	r7, #56	; 0x38
 800566c:	46bd      	mov	sp, r7
 800566e:	bd80      	pop	{r7, pc}

08005670 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005670:	b580      	push	{r7, lr}
 8005672:	b08e      	sub	sp, #56	; 0x38
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
 8005678:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800567e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005680:	2b00      	cmp	r3, #0
 8005682:	d10a      	bne.n	800569a <xQueueGiveFromISR+0x2a>
	__asm volatile
 8005684:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005688:	f383 8811 	msr	BASEPRI, r3
 800568c:	f3bf 8f6f 	isb	sy
 8005690:	f3bf 8f4f 	dsb	sy
 8005694:	623b      	str	r3, [r7, #32]
}
 8005696:	bf00      	nop
 8005698:	e7fe      	b.n	8005698 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800569a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800569c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d00a      	beq.n	80056b8 <xQueueGiveFromISR+0x48>
	__asm volatile
 80056a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056a6:	f383 8811 	msr	BASEPRI, r3
 80056aa:	f3bf 8f6f 	isb	sy
 80056ae:	f3bf 8f4f 	dsb	sy
 80056b2:	61fb      	str	r3, [r7, #28]
}
 80056b4:	bf00      	nop
 80056b6:	e7fe      	b.n	80056b6 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 80056b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d103      	bne.n	80056c8 <xQueueGiveFromISR+0x58>
 80056c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056c2:	685b      	ldr	r3, [r3, #4]
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d101      	bne.n	80056cc <xQueueGiveFromISR+0x5c>
 80056c8:	2301      	movs	r3, #1
 80056ca:	e000      	b.n	80056ce <xQueueGiveFromISR+0x5e>
 80056cc:	2300      	movs	r3, #0
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d10a      	bne.n	80056e8 <xQueueGiveFromISR+0x78>
	__asm volatile
 80056d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056d6:	f383 8811 	msr	BASEPRI, r3
 80056da:	f3bf 8f6f 	isb	sy
 80056de:	f3bf 8f4f 	dsb	sy
 80056e2:	61bb      	str	r3, [r7, #24]
}
 80056e4:	bf00      	nop
 80056e6:	e7fe      	b.n	80056e6 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80056e8:	f002 fca6 	bl	8008038 <vPortValidateInterruptPriority>
	__asm volatile
 80056ec:	f3ef 8211 	mrs	r2, BASEPRI
 80056f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056f4:	f383 8811 	msr	BASEPRI, r3
 80056f8:	f3bf 8f6f 	isb	sy
 80056fc:	f3bf 8f4f 	dsb	sy
 8005700:	617a      	str	r2, [r7, #20]
 8005702:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8005704:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005706:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005708:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800570a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800570c:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800570e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005710:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005712:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005714:	429a      	cmp	r2, r3
 8005716:	d22b      	bcs.n	8005770 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005718:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800571a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800571e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005722:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005724:	1c5a      	adds	r2, r3, #1
 8005726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005728:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800572a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800572e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005732:	d112      	bne.n	800575a <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005734:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005738:	2b00      	cmp	r3, #0
 800573a:	d016      	beq.n	800576a <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800573c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800573e:	3324      	adds	r3, #36	; 0x24
 8005740:	4618      	mov	r0, r3
 8005742:	f001 f9a5 	bl	8006a90 <xTaskRemoveFromEventList>
 8005746:	4603      	mov	r3, r0
 8005748:	2b00      	cmp	r3, #0
 800574a:	d00e      	beq.n	800576a <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800574c:	683b      	ldr	r3, [r7, #0]
 800574e:	2b00      	cmp	r3, #0
 8005750:	d00b      	beq.n	800576a <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005752:	683b      	ldr	r3, [r7, #0]
 8005754:	2201      	movs	r2, #1
 8005756:	601a      	str	r2, [r3, #0]
 8005758:	e007      	b.n	800576a <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800575a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800575e:	3301      	adds	r3, #1
 8005760:	b2db      	uxtb	r3, r3
 8005762:	b25a      	sxtb	r2, r3
 8005764:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005766:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800576a:	2301      	movs	r3, #1
 800576c:	637b      	str	r3, [r7, #52]	; 0x34
 800576e:	e001      	b.n	8005774 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005770:	2300      	movs	r3, #0
 8005772:	637b      	str	r3, [r7, #52]	; 0x34
 8005774:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005776:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	f383 8811 	msr	BASEPRI, r3
}
 800577e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005780:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005782:	4618      	mov	r0, r3
 8005784:	3738      	adds	r7, #56	; 0x38
 8005786:	46bd      	mov	sp, r7
 8005788:	bd80      	pop	{r7, pc}
	...

0800578c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800578c:	b580      	push	{r7, lr}
 800578e:	b08c      	sub	sp, #48	; 0x30
 8005790:	af00      	add	r7, sp, #0
 8005792:	60f8      	str	r0, [r7, #12]
 8005794:	60b9      	str	r1, [r7, #8]
 8005796:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005798:	2300      	movs	r3, #0
 800579a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80057a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d10a      	bne.n	80057bc <xQueueReceive+0x30>
	__asm volatile
 80057a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057aa:	f383 8811 	msr	BASEPRI, r3
 80057ae:	f3bf 8f6f 	isb	sy
 80057b2:	f3bf 8f4f 	dsb	sy
 80057b6:	623b      	str	r3, [r7, #32]
}
 80057b8:	bf00      	nop
 80057ba:	e7fe      	b.n	80057ba <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80057bc:	68bb      	ldr	r3, [r7, #8]
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d103      	bne.n	80057ca <xQueueReceive+0x3e>
 80057c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d101      	bne.n	80057ce <xQueueReceive+0x42>
 80057ca:	2301      	movs	r3, #1
 80057cc:	e000      	b.n	80057d0 <xQueueReceive+0x44>
 80057ce:	2300      	movs	r3, #0
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d10a      	bne.n	80057ea <xQueueReceive+0x5e>
	__asm volatile
 80057d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057d8:	f383 8811 	msr	BASEPRI, r3
 80057dc:	f3bf 8f6f 	isb	sy
 80057e0:	f3bf 8f4f 	dsb	sy
 80057e4:	61fb      	str	r3, [r7, #28]
}
 80057e6:	bf00      	nop
 80057e8:	e7fe      	b.n	80057e8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80057ea:	f001 fb7b 	bl	8006ee4 <xTaskGetSchedulerState>
 80057ee:	4603      	mov	r3, r0
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d102      	bne.n	80057fa <xQueueReceive+0x6e>
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d101      	bne.n	80057fe <xQueueReceive+0x72>
 80057fa:	2301      	movs	r3, #1
 80057fc:	e000      	b.n	8005800 <xQueueReceive+0x74>
 80057fe:	2300      	movs	r3, #0
 8005800:	2b00      	cmp	r3, #0
 8005802:	d10a      	bne.n	800581a <xQueueReceive+0x8e>
	__asm volatile
 8005804:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005808:	f383 8811 	msr	BASEPRI, r3
 800580c:	f3bf 8f6f 	isb	sy
 8005810:	f3bf 8f4f 	dsb	sy
 8005814:	61bb      	str	r3, [r7, #24]
}
 8005816:	bf00      	nop
 8005818:	e7fe      	b.n	8005818 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800581a:	f002 fb2b 	bl	8007e74 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800581e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005820:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005822:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005826:	2b00      	cmp	r3, #0
 8005828:	d01f      	beq.n	800586a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800582a:	68b9      	ldr	r1, [r7, #8]
 800582c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800582e:	f000 fa1b 	bl	8005c68 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005834:	1e5a      	subs	r2, r3, #1
 8005836:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005838:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800583a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800583c:	691b      	ldr	r3, [r3, #16]
 800583e:	2b00      	cmp	r3, #0
 8005840:	d00f      	beq.n	8005862 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005842:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005844:	3310      	adds	r3, #16
 8005846:	4618      	mov	r0, r3
 8005848:	f001 f922 	bl	8006a90 <xTaskRemoveFromEventList>
 800584c:	4603      	mov	r3, r0
 800584e:	2b00      	cmp	r3, #0
 8005850:	d007      	beq.n	8005862 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005852:	4b3d      	ldr	r3, [pc, #244]	; (8005948 <xQueueReceive+0x1bc>)
 8005854:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005858:	601a      	str	r2, [r3, #0]
 800585a:	f3bf 8f4f 	dsb	sy
 800585e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005862:	f002 fb37 	bl	8007ed4 <vPortExitCritical>
				return pdPASS;
 8005866:	2301      	movs	r3, #1
 8005868:	e069      	b.n	800593e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	2b00      	cmp	r3, #0
 800586e:	d103      	bne.n	8005878 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005870:	f002 fb30 	bl	8007ed4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005874:	2300      	movs	r3, #0
 8005876:	e062      	b.n	800593e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005878:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800587a:	2b00      	cmp	r3, #0
 800587c:	d106      	bne.n	800588c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800587e:	f107 0310 	add.w	r3, r7, #16
 8005882:	4618      	mov	r0, r3
 8005884:	f001 f9c8 	bl	8006c18 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005888:	2301      	movs	r3, #1
 800588a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800588c:	f002 fb22 	bl	8007ed4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005890:	f000 fdc4 	bl	800641c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005894:	f002 faee 	bl	8007e74 <vPortEnterCritical>
 8005898:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800589a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800589e:	b25b      	sxtb	r3, r3
 80058a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058a4:	d103      	bne.n	80058ae <xQueueReceive+0x122>
 80058a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058a8:	2200      	movs	r2, #0
 80058aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80058ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058b0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80058b4:	b25b      	sxtb	r3, r3
 80058b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058ba:	d103      	bne.n	80058c4 <xQueueReceive+0x138>
 80058bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058be:	2200      	movs	r2, #0
 80058c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80058c4:	f002 fb06 	bl	8007ed4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80058c8:	1d3a      	adds	r2, r7, #4
 80058ca:	f107 0310 	add.w	r3, r7, #16
 80058ce:	4611      	mov	r1, r2
 80058d0:	4618      	mov	r0, r3
 80058d2:	f001 f9b7 	bl	8006c44 <xTaskCheckForTimeOut>
 80058d6:	4603      	mov	r3, r0
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d123      	bne.n	8005924 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80058dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80058de:	f000 fa3b 	bl	8005d58 <prvIsQueueEmpty>
 80058e2:	4603      	mov	r3, r0
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d017      	beq.n	8005918 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80058e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058ea:	3324      	adds	r3, #36	; 0x24
 80058ec:	687a      	ldr	r2, [r7, #4]
 80058ee:	4611      	mov	r1, r2
 80058f0:	4618      	mov	r0, r3
 80058f2:	f001 f841 	bl	8006978 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80058f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80058f8:	f000 f9dc 	bl	8005cb4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80058fc:	f000 fd9c 	bl	8006438 <xTaskResumeAll>
 8005900:	4603      	mov	r3, r0
 8005902:	2b00      	cmp	r3, #0
 8005904:	d189      	bne.n	800581a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8005906:	4b10      	ldr	r3, [pc, #64]	; (8005948 <xQueueReceive+0x1bc>)
 8005908:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800590c:	601a      	str	r2, [r3, #0]
 800590e:	f3bf 8f4f 	dsb	sy
 8005912:	f3bf 8f6f 	isb	sy
 8005916:	e780      	b.n	800581a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005918:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800591a:	f000 f9cb 	bl	8005cb4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800591e:	f000 fd8b 	bl	8006438 <xTaskResumeAll>
 8005922:	e77a      	b.n	800581a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005924:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005926:	f000 f9c5 	bl	8005cb4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800592a:	f000 fd85 	bl	8006438 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800592e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005930:	f000 fa12 	bl	8005d58 <prvIsQueueEmpty>
 8005934:	4603      	mov	r3, r0
 8005936:	2b00      	cmp	r3, #0
 8005938:	f43f af6f 	beq.w	800581a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800593c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800593e:	4618      	mov	r0, r3
 8005940:	3730      	adds	r7, #48	; 0x30
 8005942:	46bd      	mov	sp, r7
 8005944:	bd80      	pop	{r7, pc}
 8005946:	bf00      	nop
 8005948:	e000ed04 	.word	0xe000ed04

0800594c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800594c:	b580      	push	{r7, lr}
 800594e:	b08e      	sub	sp, #56	; 0x38
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
 8005954:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8005956:	2300      	movs	r3, #0
 8005958:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800595e:	2300      	movs	r3, #0
 8005960:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005962:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005964:	2b00      	cmp	r3, #0
 8005966:	d10a      	bne.n	800597e <xQueueSemaphoreTake+0x32>
	__asm volatile
 8005968:	f04f 0350 	mov.w	r3, #80	; 0x50
 800596c:	f383 8811 	msr	BASEPRI, r3
 8005970:	f3bf 8f6f 	isb	sy
 8005974:	f3bf 8f4f 	dsb	sy
 8005978:	623b      	str	r3, [r7, #32]
}
 800597a:	bf00      	nop
 800597c:	e7fe      	b.n	800597c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800597e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005982:	2b00      	cmp	r3, #0
 8005984:	d00a      	beq.n	800599c <xQueueSemaphoreTake+0x50>
	__asm volatile
 8005986:	f04f 0350 	mov.w	r3, #80	; 0x50
 800598a:	f383 8811 	msr	BASEPRI, r3
 800598e:	f3bf 8f6f 	isb	sy
 8005992:	f3bf 8f4f 	dsb	sy
 8005996:	61fb      	str	r3, [r7, #28]
}
 8005998:	bf00      	nop
 800599a:	e7fe      	b.n	800599a <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800599c:	f001 faa2 	bl	8006ee4 <xTaskGetSchedulerState>
 80059a0:	4603      	mov	r3, r0
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d102      	bne.n	80059ac <xQueueSemaphoreTake+0x60>
 80059a6:	683b      	ldr	r3, [r7, #0]
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d101      	bne.n	80059b0 <xQueueSemaphoreTake+0x64>
 80059ac:	2301      	movs	r3, #1
 80059ae:	e000      	b.n	80059b2 <xQueueSemaphoreTake+0x66>
 80059b0:	2300      	movs	r3, #0
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d10a      	bne.n	80059cc <xQueueSemaphoreTake+0x80>
	__asm volatile
 80059b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059ba:	f383 8811 	msr	BASEPRI, r3
 80059be:	f3bf 8f6f 	isb	sy
 80059c2:	f3bf 8f4f 	dsb	sy
 80059c6:	61bb      	str	r3, [r7, #24]
}
 80059c8:	bf00      	nop
 80059ca:	e7fe      	b.n	80059ca <xQueueSemaphoreTake+0x7e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80059cc:	f002 fa52 	bl	8007e74 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80059d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059d4:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80059d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d024      	beq.n	8005a26 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80059dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059de:	1e5a      	subs	r2, r3, #1
 80059e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059e2:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80059e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d104      	bne.n	80059f6 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 80059ec:	f001 fc5c 	bl	80072a8 <pvTaskIncrementMutexHeldCount>
 80059f0:	4602      	mov	r2, r0
 80059f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059f4:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80059f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059f8:	691b      	ldr	r3, [r3, #16]
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d00f      	beq.n	8005a1e <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80059fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a00:	3310      	adds	r3, #16
 8005a02:	4618      	mov	r0, r3
 8005a04:	f001 f844 	bl	8006a90 <xTaskRemoveFromEventList>
 8005a08:	4603      	mov	r3, r0
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d007      	beq.n	8005a1e <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005a0e:	4b54      	ldr	r3, [pc, #336]	; (8005b60 <xQueueSemaphoreTake+0x214>)
 8005a10:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a14:	601a      	str	r2, [r3, #0]
 8005a16:	f3bf 8f4f 	dsb	sy
 8005a1a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005a1e:	f002 fa59 	bl	8007ed4 <vPortExitCritical>
				return pdPASS;
 8005a22:	2301      	movs	r3, #1
 8005a24:	e097      	b.n	8005b56 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005a26:	683b      	ldr	r3, [r7, #0]
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d111      	bne.n	8005a50 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8005a2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d00a      	beq.n	8005a48 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8005a32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a36:	f383 8811 	msr	BASEPRI, r3
 8005a3a:	f3bf 8f6f 	isb	sy
 8005a3e:	f3bf 8f4f 	dsb	sy
 8005a42:	617b      	str	r3, [r7, #20]
}
 8005a44:	bf00      	nop
 8005a46:	e7fe      	b.n	8005a46 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8005a48:	f002 fa44 	bl	8007ed4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005a4c:	2300      	movs	r3, #0
 8005a4e:	e082      	b.n	8005b56 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005a50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d106      	bne.n	8005a64 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005a56:	f107 030c 	add.w	r3, r7, #12
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	f001 f8dc 	bl	8006c18 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005a60:	2301      	movs	r3, #1
 8005a62:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005a64:	f002 fa36 	bl	8007ed4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005a68:	f000 fcd8 	bl	800641c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005a6c:	f002 fa02 	bl	8007e74 <vPortEnterCritical>
 8005a70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a72:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005a76:	b25b      	sxtb	r3, r3
 8005a78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a7c:	d103      	bne.n	8005a86 <xQueueSemaphoreTake+0x13a>
 8005a7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a80:	2200      	movs	r2, #0
 8005a82:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005a86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a88:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005a8c:	b25b      	sxtb	r3, r3
 8005a8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a92:	d103      	bne.n	8005a9c <xQueueSemaphoreTake+0x150>
 8005a94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a96:	2200      	movs	r2, #0
 8005a98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005a9c:	f002 fa1a 	bl	8007ed4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005aa0:	463a      	mov	r2, r7
 8005aa2:	f107 030c 	add.w	r3, r7, #12
 8005aa6:	4611      	mov	r1, r2
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	f001 f8cb 	bl	8006c44 <xTaskCheckForTimeOut>
 8005aae:	4603      	mov	r3, r0
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d132      	bne.n	8005b1a <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005ab4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005ab6:	f000 f94f 	bl	8005d58 <prvIsQueueEmpty>
 8005aba:	4603      	mov	r3, r0
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d026      	beq.n	8005b0e <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005ac0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d109      	bne.n	8005adc <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8005ac8:	f002 f9d4 	bl	8007e74 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8005acc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ace:	685b      	ldr	r3, [r3, #4]
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	f001 fa25 	bl	8006f20 <xTaskPriorityInherit>
 8005ad6:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8005ad8:	f002 f9fc 	bl	8007ed4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005adc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ade:	3324      	adds	r3, #36	; 0x24
 8005ae0:	683a      	ldr	r2, [r7, #0]
 8005ae2:	4611      	mov	r1, r2
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	f000 ff47 	bl	8006978 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005aea:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005aec:	f000 f8e2 	bl	8005cb4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005af0:	f000 fca2 	bl	8006438 <xTaskResumeAll>
 8005af4:	4603      	mov	r3, r0
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	f47f af68 	bne.w	80059cc <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8005afc:	4b18      	ldr	r3, [pc, #96]	; (8005b60 <xQueueSemaphoreTake+0x214>)
 8005afe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b02:	601a      	str	r2, [r3, #0]
 8005b04:	f3bf 8f4f 	dsb	sy
 8005b08:	f3bf 8f6f 	isb	sy
 8005b0c:	e75e      	b.n	80059cc <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8005b0e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005b10:	f000 f8d0 	bl	8005cb4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005b14:	f000 fc90 	bl	8006438 <xTaskResumeAll>
 8005b18:	e758      	b.n	80059cc <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8005b1a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005b1c:	f000 f8ca 	bl	8005cb4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005b20:	f000 fc8a 	bl	8006438 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005b24:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005b26:	f000 f917 	bl	8005d58 <prvIsQueueEmpty>
 8005b2a:	4603      	mov	r3, r0
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	f43f af4d 	beq.w	80059cc <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8005b32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d00d      	beq.n	8005b54 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8005b38:	f002 f99c 	bl	8007e74 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8005b3c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005b3e:	f000 f811 	bl	8005b64 <prvGetDisinheritPriorityAfterTimeout>
 8005b42:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8005b44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b46:	685b      	ldr	r3, [r3, #4]
 8005b48:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	f001 faf4 	bl	8007138 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8005b50:	f002 f9c0 	bl	8007ed4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005b54:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8005b56:	4618      	mov	r0, r3
 8005b58:	3738      	adds	r7, #56	; 0x38
 8005b5a:	46bd      	mov	sp, r7
 8005b5c:	bd80      	pop	{r7, pc}
 8005b5e:	bf00      	nop
 8005b60:	e000ed04 	.word	0xe000ed04

08005b64 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8005b64:	b480      	push	{r7}
 8005b66:	b085      	sub	sp, #20
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d006      	beq.n	8005b82 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	f1c3 0307 	rsb	r3, r3, #7
 8005b7e:	60fb      	str	r3, [r7, #12]
 8005b80:	e001      	b.n	8005b86 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8005b82:	2300      	movs	r3, #0
 8005b84:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8005b86:	68fb      	ldr	r3, [r7, #12]
	}
 8005b88:	4618      	mov	r0, r3
 8005b8a:	3714      	adds	r7, #20
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b92:	4770      	bx	lr

08005b94 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005b94:	b580      	push	{r7, lr}
 8005b96:	b086      	sub	sp, #24
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	60f8      	str	r0, [r7, #12]
 8005b9c:	60b9      	str	r1, [r7, #8]
 8005b9e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005ba0:	2300      	movs	r3, #0
 8005ba2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ba8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d10d      	bne.n	8005bce <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d14d      	bne.n	8005c56 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	685b      	ldr	r3, [r3, #4]
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	f001 fa34 	bl	800702c <xTaskPriorityDisinherit>
 8005bc4:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	2200      	movs	r2, #0
 8005bca:	605a      	str	r2, [r3, #4]
 8005bcc:	e043      	b.n	8005c56 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d119      	bne.n	8005c08 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	6898      	ldr	r0, [r3, #8]
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bdc:	461a      	mov	r2, r3
 8005bde:	68b9      	ldr	r1, [r7, #8]
 8005be0:	f002 fca0 	bl	8008524 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	689a      	ldr	r2, [r3, #8]
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bec:	441a      	add	r2, r3
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	689a      	ldr	r2, [r3, #8]
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	685b      	ldr	r3, [r3, #4]
 8005bfa:	429a      	cmp	r2, r3
 8005bfc:	d32b      	bcc.n	8005c56 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	681a      	ldr	r2, [r3, #0]
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	609a      	str	r2, [r3, #8]
 8005c06:	e026      	b.n	8005c56 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	68d8      	ldr	r0, [r3, #12]
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c10:	461a      	mov	r2, r3
 8005c12:	68b9      	ldr	r1, [r7, #8]
 8005c14:	f002 fc86 	bl	8008524 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	68da      	ldr	r2, [r3, #12]
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c20:	425b      	negs	r3, r3
 8005c22:	441a      	add	r2, r3
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	68da      	ldr	r2, [r3, #12]
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	429a      	cmp	r2, r3
 8005c32:	d207      	bcs.n	8005c44 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	685a      	ldr	r2, [r3, #4]
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c3c:	425b      	negs	r3, r3
 8005c3e:	441a      	add	r2, r3
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2b02      	cmp	r3, #2
 8005c48:	d105      	bne.n	8005c56 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005c4a:	693b      	ldr	r3, [r7, #16]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d002      	beq.n	8005c56 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005c50:	693b      	ldr	r3, [r7, #16]
 8005c52:	3b01      	subs	r3, #1
 8005c54:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005c56:	693b      	ldr	r3, [r7, #16]
 8005c58:	1c5a      	adds	r2, r3, #1
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005c5e:	697b      	ldr	r3, [r7, #20]
}
 8005c60:	4618      	mov	r0, r3
 8005c62:	3718      	adds	r7, #24
 8005c64:	46bd      	mov	sp, r7
 8005c66:	bd80      	pop	{r7, pc}

08005c68 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	b082      	sub	sp, #8
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	6078      	str	r0, [r7, #4]
 8005c70:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d018      	beq.n	8005cac <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	68da      	ldr	r2, [r3, #12]
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c82:	441a      	add	r2, r3
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	68da      	ldr	r2, [r3, #12]
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	685b      	ldr	r3, [r3, #4]
 8005c90:	429a      	cmp	r2, r3
 8005c92:	d303      	bcc.n	8005c9c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681a      	ldr	r2, [r3, #0]
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	68d9      	ldr	r1, [r3, #12]
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ca4:	461a      	mov	r2, r3
 8005ca6:	6838      	ldr	r0, [r7, #0]
 8005ca8:	f002 fc3c 	bl	8008524 <memcpy>
	}
}
 8005cac:	bf00      	nop
 8005cae:	3708      	adds	r7, #8
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	bd80      	pop	{r7, pc}

08005cb4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005cb4:	b580      	push	{r7, lr}
 8005cb6:	b084      	sub	sp, #16
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005cbc:	f002 f8da 	bl	8007e74 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005cc6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005cc8:	e011      	b.n	8005cee <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d012      	beq.n	8005cf8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	3324      	adds	r3, #36	; 0x24
 8005cd6:	4618      	mov	r0, r3
 8005cd8:	f000 feda 	bl	8006a90 <xTaskRemoveFromEventList>
 8005cdc:	4603      	mov	r3, r0
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d001      	beq.n	8005ce6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005ce2:	f001 f811 	bl	8006d08 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005ce6:	7bfb      	ldrb	r3, [r7, #15]
 8005ce8:	3b01      	subs	r3, #1
 8005cea:	b2db      	uxtb	r3, r3
 8005cec:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005cee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	dce9      	bgt.n	8005cca <prvUnlockQueue+0x16>
 8005cf6:	e000      	b.n	8005cfa <prvUnlockQueue+0x46>
					break;
 8005cf8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	22ff      	movs	r2, #255	; 0xff
 8005cfe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005d02:	f002 f8e7 	bl	8007ed4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005d06:	f002 f8b5 	bl	8007e74 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005d10:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005d12:	e011      	b.n	8005d38 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	691b      	ldr	r3, [r3, #16]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d012      	beq.n	8005d42 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	3310      	adds	r3, #16
 8005d20:	4618      	mov	r0, r3
 8005d22:	f000 feb5 	bl	8006a90 <xTaskRemoveFromEventList>
 8005d26:	4603      	mov	r3, r0
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d001      	beq.n	8005d30 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005d2c:	f000 ffec 	bl	8006d08 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005d30:	7bbb      	ldrb	r3, [r7, #14]
 8005d32:	3b01      	subs	r3, #1
 8005d34:	b2db      	uxtb	r3, r3
 8005d36:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005d38:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	dce9      	bgt.n	8005d14 <prvUnlockQueue+0x60>
 8005d40:	e000      	b.n	8005d44 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005d42:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	22ff      	movs	r2, #255	; 0xff
 8005d48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005d4c:	f002 f8c2 	bl	8007ed4 <vPortExitCritical>
}
 8005d50:	bf00      	nop
 8005d52:	3710      	adds	r7, #16
 8005d54:	46bd      	mov	sp, r7
 8005d56:	bd80      	pop	{r7, pc}

08005d58 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005d58:	b580      	push	{r7, lr}
 8005d5a:	b084      	sub	sp, #16
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005d60:	f002 f888 	bl	8007e74 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d102      	bne.n	8005d72 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005d6c:	2301      	movs	r3, #1
 8005d6e:	60fb      	str	r3, [r7, #12]
 8005d70:	e001      	b.n	8005d76 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005d72:	2300      	movs	r3, #0
 8005d74:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005d76:	f002 f8ad 	bl	8007ed4 <vPortExitCritical>

	return xReturn;
 8005d7a:	68fb      	ldr	r3, [r7, #12]
}
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	3710      	adds	r7, #16
 8005d80:	46bd      	mov	sp, r7
 8005d82:	bd80      	pop	{r7, pc}

08005d84 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005d84:	b580      	push	{r7, lr}
 8005d86:	b084      	sub	sp, #16
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005d8c:	f002 f872 	bl	8007e74 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d98:	429a      	cmp	r2, r3
 8005d9a:	d102      	bne.n	8005da2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005d9c:	2301      	movs	r3, #1
 8005d9e:	60fb      	str	r3, [r7, #12]
 8005da0:	e001      	b.n	8005da6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005da2:	2300      	movs	r3, #0
 8005da4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005da6:	f002 f895 	bl	8007ed4 <vPortExitCritical>

	return xReturn;
 8005daa:	68fb      	ldr	r3, [r7, #12]
}
 8005dac:	4618      	mov	r0, r3
 8005dae:	3710      	adds	r7, #16
 8005db0:	46bd      	mov	sp, r7
 8005db2:	bd80      	pop	{r7, pc}

08005db4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005db4:	b480      	push	{r7}
 8005db6:	b085      	sub	sp, #20
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
 8005dbc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005dbe:	2300      	movs	r3, #0
 8005dc0:	60fb      	str	r3, [r7, #12]
 8005dc2:	e014      	b.n	8005dee <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005dc4:	4a0f      	ldr	r2, [pc, #60]	; (8005e04 <vQueueAddToRegistry+0x50>)
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d10b      	bne.n	8005de8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005dd0:	490c      	ldr	r1, [pc, #48]	; (8005e04 <vQueueAddToRegistry+0x50>)
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	683a      	ldr	r2, [r7, #0]
 8005dd6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005dda:	4a0a      	ldr	r2, [pc, #40]	; (8005e04 <vQueueAddToRegistry+0x50>)
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	00db      	lsls	r3, r3, #3
 8005de0:	4413      	add	r3, r2
 8005de2:	687a      	ldr	r2, [r7, #4]
 8005de4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005de6:	e006      	b.n	8005df6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	3301      	adds	r3, #1
 8005dec:	60fb      	str	r3, [r7, #12]
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	2b07      	cmp	r3, #7
 8005df2:	d9e7      	bls.n	8005dc4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005df4:	bf00      	nop
 8005df6:	bf00      	nop
 8005df8:	3714      	adds	r7, #20
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e00:	4770      	bx	lr
 8005e02:	bf00      	nop
 8005e04:	2000065c 	.word	0x2000065c

08005e08 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	b086      	sub	sp, #24
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	60f8      	str	r0, [r7, #12]
 8005e10:	60b9      	str	r1, [r7, #8]
 8005e12:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005e18:	f002 f82c 	bl	8007e74 <vPortEnterCritical>
 8005e1c:	697b      	ldr	r3, [r7, #20]
 8005e1e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005e22:	b25b      	sxtb	r3, r3
 8005e24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e28:	d103      	bne.n	8005e32 <vQueueWaitForMessageRestricted+0x2a>
 8005e2a:	697b      	ldr	r3, [r7, #20]
 8005e2c:	2200      	movs	r2, #0
 8005e2e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005e32:	697b      	ldr	r3, [r7, #20]
 8005e34:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005e38:	b25b      	sxtb	r3, r3
 8005e3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e3e:	d103      	bne.n	8005e48 <vQueueWaitForMessageRestricted+0x40>
 8005e40:	697b      	ldr	r3, [r7, #20]
 8005e42:	2200      	movs	r2, #0
 8005e44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005e48:	f002 f844 	bl	8007ed4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005e4c:	697b      	ldr	r3, [r7, #20]
 8005e4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d106      	bne.n	8005e62 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005e54:	697b      	ldr	r3, [r7, #20]
 8005e56:	3324      	adds	r3, #36	; 0x24
 8005e58:	687a      	ldr	r2, [r7, #4]
 8005e5a:	68b9      	ldr	r1, [r7, #8]
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	f000 fdeb 	bl	8006a38 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005e62:	6978      	ldr	r0, [r7, #20]
 8005e64:	f7ff ff26 	bl	8005cb4 <prvUnlockQueue>
	}
 8005e68:	bf00      	nop
 8005e6a:	3718      	adds	r7, #24
 8005e6c:	46bd      	mov	sp, r7
 8005e6e:	bd80      	pop	{r7, pc}

08005e70 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005e70:	b580      	push	{r7, lr}
 8005e72:	b08e      	sub	sp, #56	; 0x38
 8005e74:	af04      	add	r7, sp, #16
 8005e76:	60f8      	str	r0, [r7, #12]
 8005e78:	60b9      	str	r1, [r7, #8]
 8005e7a:	607a      	str	r2, [r7, #4]
 8005e7c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005e7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d10a      	bne.n	8005e9a <xTaskCreateStatic+0x2a>
	__asm volatile
 8005e84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e88:	f383 8811 	msr	BASEPRI, r3
 8005e8c:	f3bf 8f6f 	isb	sy
 8005e90:	f3bf 8f4f 	dsb	sy
 8005e94:	623b      	str	r3, [r7, #32]
}
 8005e96:	bf00      	nop
 8005e98:	e7fe      	b.n	8005e98 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005e9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d10a      	bne.n	8005eb6 <xTaskCreateStatic+0x46>
	__asm volatile
 8005ea0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ea4:	f383 8811 	msr	BASEPRI, r3
 8005ea8:	f3bf 8f6f 	isb	sy
 8005eac:	f3bf 8f4f 	dsb	sy
 8005eb0:	61fb      	str	r3, [r7, #28]
}
 8005eb2:	bf00      	nop
 8005eb4:	e7fe      	b.n	8005eb4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005eb6:	23b8      	movs	r3, #184	; 0xb8
 8005eb8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005eba:	693b      	ldr	r3, [r7, #16]
 8005ebc:	2bb8      	cmp	r3, #184	; 0xb8
 8005ebe:	d00a      	beq.n	8005ed6 <xTaskCreateStatic+0x66>
	__asm volatile
 8005ec0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ec4:	f383 8811 	msr	BASEPRI, r3
 8005ec8:	f3bf 8f6f 	isb	sy
 8005ecc:	f3bf 8f4f 	dsb	sy
 8005ed0:	61bb      	str	r3, [r7, #24]
}
 8005ed2:	bf00      	nop
 8005ed4:	e7fe      	b.n	8005ed4 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005ed6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d01e      	beq.n	8005f1a <xTaskCreateStatic+0xaa>
 8005edc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d01b      	beq.n	8005f1a <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005ee2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ee4:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ee8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005eea:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eee:	2202      	movs	r2, #2
 8005ef0:	f883 20b5 	strb.w	r2, [r3, #181]	; 0xb5
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005ef4:	2300      	movs	r3, #0
 8005ef6:	9303      	str	r3, [sp, #12]
 8005ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005efa:	9302      	str	r3, [sp, #8]
 8005efc:	f107 0314 	add.w	r3, r7, #20
 8005f00:	9301      	str	r3, [sp, #4]
 8005f02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f04:	9300      	str	r3, [sp, #0]
 8005f06:	683b      	ldr	r3, [r7, #0]
 8005f08:	687a      	ldr	r2, [r7, #4]
 8005f0a:	68b9      	ldr	r1, [r7, #8]
 8005f0c:	68f8      	ldr	r0, [r7, #12]
 8005f0e:	f000 f851 	bl	8005fb4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005f12:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005f14:	f000 f8e4 	bl	80060e0 <prvAddNewTaskToReadyList>
 8005f18:	e001      	b.n	8005f1e <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8005f1a:	2300      	movs	r3, #0
 8005f1c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005f1e:	697b      	ldr	r3, [r7, #20]
	}
 8005f20:	4618      	mov	r0, r3
 8005f22:	3728      	adds	r7, #40	; 0x28
 8005f24:	46bd      	mov	sp, r7
 8005f26:	bd80      	pop	{r7, pc}

08005f28 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005f28:	b580      	push	{r7, lr}
 8005f2a:	b08c      	sub	sp, #48	; 0x30
 8005f2c:	af04      	add	r7, sp, #16
 8005f2e:	60f8      	str	r0, [r7, #12]
 8005f30:	60b9      	str	r1, [r7, #8]
 8005f32:	603b      	str	r3, [r7, #0]
 8005f34:	4613      	mov	r3, r2
 8005f36:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005f38:	88fb      	ldrh	r3, [r7, #6]
 8005f3a:	009b      	lsls	r3, r3, #2
 8005f3c:	4618      	mov	r0, r3
 8005f3e:	f002 f8bb 	bl	80080b8 <pvPortMalloc>
 8005f42:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005f44:	697b      	ldr	r3, [r7, #20]
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d00e      	beq.n	8005f68 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8005f4a:	20b8      	movs	r0, #184	; 0xb8
 8005f4c:	f002 f8b4 	bl	80080b8 <pvPortMalloc>
 8005f50:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005f52:	69fb      	ldr	r3, [r7, #28]
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d003      	beq.n	8005f60 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005f58:	69fb      	ldr	r3, [r7, #28]
 8005f5a:	697a      	ldr	r2, [r7, #20]
 8005f5c:	631a      	str	r2, [r3, #48]	; 0x30
 8005f5e:	e005      	b.n	8005f6c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005f60:	6978      	ldr	r0, [r7, #20]
 8005f62:	f002 f96d 	bl	8008240 <vPortFree>
 8005f66:	e001      	b.n	8005f6c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005f68:	2300      	movs	r3, #0
 8005f6a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005f6c:	69fb      	ldr	r3, [r7, #28]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d017      	beq.n	8005fa2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005f72:	69fb      	ldr	r3, [r7, #28]
 8005f74:	2200      	movs	r2, #0
 8005f76:	f883 20b5 	strb.w	r2, [r3, #181]	; 0xb5
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005f7a:	88fa      	ldrh	r2, [r7, #6]
 8005f7c:	2300      	movs	r3, #0
 8005f7e:	9303      	str	r3, [sp, #12]
 8005f80:	69fb      	ldr	r3, [r7, #28]
 8005f82:	9302      	str	r3, [sp, #8]
 8005f84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f86:	9301      	str	r3, [sp, #4]
 8005f88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f8a:	9300      	str	r3, [sp, #0]
 8005f8c:	683b      	ldr	r3, [r7, #0]
 8005f8e:	68b9      	ldr	r1, [r7, #8]
 8005f90:	68f8      	ldr	r0, [r7, #12]
 8005f92:	f000 f80f 	bl	8005fb4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005f96:	69f8      	ldr	r0, [r7, #28]
 8005f98:	f000 f8a2 	bl	80060e0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005f9c:	2301      	movs	r3, #1
 8005f9e:	61bb      	str	r3, [r7, #24]
 8005fa0:	e002      	b.n	8005fa8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005fa2:	f04f 33ff 	mov.w	r3, #4294967295
 8005fa6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005fa8:	69bb      	ldr	r3, [r7, #24]
	}
 8005faa:	4618      	mov	r0, r3
 8005fac:	3720      	adds	r7, #32
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	bd80      	pop	{r7, pc}
	...

08005fb4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005fb4:	b580      	push	{r7, lr}
 8005fb6:	b088      	sub	sp, #32
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	60f8      	str	r0, [r7, #12]
 8005fbc:	60b9      	str	r1, [r7, #8]
 8005fbe:	607a      	str	r2, [r7, #4]
 8005fc0:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8005fc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fc4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005fcc:	3b01      	subs	r3, #1
 8005fce:	009b      	lsls	r3, r3, #2
 8005fd0:	4413      	add	r3, r2
 8005fd2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8005fd4:	69bb      	ldr	r3, [r7, #24]
 8005fd6:	f023 0307 	bic.w	r3, r3, #7
 8005fda:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005fdc:	69bb      	ldr	r3, [r7, #24]
 8005fde:	f003 0307 	and.w	r3, r3, #7
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d00a      	beq.n	8005ffc <prvInitialiseNewTask+0x48>
	__asm volatile
 8005fe6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fea:	f383 8811 	msr	BASEPRI, r3
 8005fee:	f3bf 8f6f 	isb	sy
 8005ff2:	f3bf 8f4f 	dsb	sy
 8005ff6:	617b      	str	r3, [r7, #20]
}
 8005ff8:	bf00      	nop
 8005ffa:	e7fe      	b.n	8005ffa <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005ffc:	2300      	movs	r3, #0
 8005ffe:	61fb      	str	r3, [r7, #28]
 8006000:	e012      	b.n	8006028 <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006002:	68ba      	ldr	r2, [r7, #8]
 8006004:	69fb      	ldr	r3, [r7, #28]
 8006006:	4413      	add	r3, r2
 8006008:	7819      	ldrb	r1, [r3, #0]
 800600a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800600c:	69fb      	ldr	r3, [r7, #28]
 800600e:	4413      	add	r3, r2
 8006010:	3334      	adds	r3, #52	; 0x34
 8006012:	460a      	mov	r2, r1
 8006014:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8006016:	68ba      	ldr	r2, [r7, #8]
 8006018:	69fb      	ldr	r3, [r7, #28]
 800601a:	4413      	add	r3, r2
 800601c:	781b      	ldrb	r3, [r3, #0]
 800601e:	2b00      	cmp	r3, #0
 8006020:	d006      	beq.n	8006030 <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006022:	69fb      	ldr	r3, [r7, #28]
 8006024:	3301      	adds	r3, #1
 8006026:	61fb      	str	r3, [r7, #28]
 8006028:	69fb      	ldr	r3, [r7, #28]
 800602a:	2b11      	cmp	r3, #17
 800602c:	d9e9      	bls.n	8006002 <prvInitialiseNewTask+0x4e>
 800602e:	e000      	b.n	8006032 <prvInitialiseNewTask+0x7e>
		{
			break;
 8006030:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006032:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006034:	2200      	movs	r2, #0
 8006036:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800603a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800603c:	2b06      	cmp	r3, #6
 800603e:	d901      	bls.n	8006044 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006040:	2306      	movs	r3, #6
 8006042:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006044:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006046:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006048:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800604a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800604c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800604e:	649a      	str	r2, [r3, #72]	; 0x48
		pxNewTCB->uxMutexesHeld = 0;
 8006050:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006052:	2200      	movs	r2, #0
 8006054:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006058:	3304      	adds	r3, #4
 800605a:	4618      	mov	r0, r3
 800605c:	f7fe ffa2 	bl	8004fa4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006060:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006062:	3318      	adds	r3, #24
 8006064:	4618      	mov	r0, r3
 8006066:	f7fe ff9d 	bl	8004fa4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800606a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800606c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800606e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006070:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006072:	f1c3 0207 	rsb	r2, r3, #7
 8006076:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006078:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800607a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800607c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800607e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006080:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006082:	2200      	movs	r2, #0
 8006084:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006088:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800608a:	2200      	movs	r2, #0
 800608c:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006090:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006092:	3350      	adds	r3, #80	; 0x50
 8006094:	2260      	movs	r2, #96	; 0x60
 8006096:	2100      	movs	r1, #0
 8006098:	4618      	mov	r0, r3
 800609a:	f002 fa51 	bl	8008540 <memset>
 800609e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060a0:	4a0c      	ldr	r2, [pc, #48]	; (80060d4 <prvInitialiseNewTask+0x120>)
 80060a2:	655a      	str	r2, [r3, #84]	; 0x54
 80060a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060a6:	4a0c      	ldr	r2, [pc, #48]	; (80060d8 <prvInitialiseNewTask+0x124>)
 80060a8:	659a      	str	r2, [r3, #88]	; 0x58
 80060aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060ac:	4a0b      	ldr	r2, [pc, #44]	; (80060dc <prvInitialiseNewTask+0x128>)
 80060ae:	65da      	str	r2, [r3, #92]	; 0x5c
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80060b0:	683a      	ldr	r2, [r7, #0]
 80060b2:	68f9      	ldr	r1, [r7, #12]
 80060b4:	69b8      	ldr	r0, [r7, #24]
 80060b6:	f001 fdad 	bl	8007c14 <pxPortInitialiseStack>
 80060ba:	4602      	mov	r2, r0
 80060bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060be:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80060c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d002      	beq.n	80060cc <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80060c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80060ca:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80060cc:	bf00      	nop
 80060ce:	3720      	adds	r7, #32
 80060d0:	46bd      	mov	sp, r7
 80060d2:	bd80      	pop	{r7, pc}
 80060d4:	08009030 	.word	0x08009030
 80060d8:	08009050 	.word	0x08009050
 80060dc:	08009010 	.word	0x08009010

080060e0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80060e0:	b580      	push	{r7, lr}
 80060e2:	b082      	sub	sp, #8
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80060e8:	f001 fec4 	bl	8007e74 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80060ec:	4b2a      	ldr	r3, [pc, #168]	; (8006198 <prvAddNewTaskToReadyList+0xb8>)
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	3301      	adds	r3, #1
 80060f2:	4a29      	ldr	r2, [pc, #164]	; (8006198 <prvAddNewTaskToReadyList+0xb8>)
 80060f4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80060f6:	4b29      	ldr	r3, [pc, #164]	; (800619c <prvAddNewTaskToReadyList+0xbc>)
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d109      	bne.n	8006112 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80060fe:	4a27      	ldr	r2, [pc, #156]	; (800619c <prvAddNewTaskToReadyList+0xbc>)
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006104:	4b24      	ldr	r3, [pc, #144]	; (8006198 <prvAddNewTaskToReadyList+0xb8>)
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	2b01      	cmp	r3, #1
 800610a:	d110      	bne.n	800612e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800610c:	f000 fe22 	bl	8006d54 <prvInitialiseTaskLists>
 8006110:	e00d      	b.n	800612e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006112:	4b23      	ldr	r3, [pc, #140]	; (80061a0 <prvAddNewTaskToReadyList+0xc0>)
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	2b00      	cmp	r3, #0
 8006118:	d109      	bne.n	800612e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800611a:	4b20      	ldr	r3, [pc, #128]	; (800619c <prvAddNewTaskToReadyList+0xbc>)
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006124:	429a      	cmp	r2, r3
 8006126:	d802      	bhi.n	800612e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006128:	4a1c      	ldr	r2, [pc, #112]	; (800619c <prvAddNewTaskToReadyList+0xbc>)
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800612e:	4b1d      	ldr	r3, [pc, #116]	; (80061a4 <prvAddNewTaskToReadyList+0xc4>)
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	3301      	adds	r3, #1
 8006134:	4a1b      	ldr	r2, [pc, #108]	; (80061a4 <prvAddNewTaskToReadyList+0xc4>)
 8006136:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800613c:	2201      	movs	r2, #1
 800613e:	409a      	lsls	r2, r3
 8006140:	4b19      	ldr	r3, [pc, #100]	; (80061a8 <prvAddNewTaskToReadyList+0xc8>)
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	4313      	orrs	r3, r2
 8006146:	4a18      	ldr	r2, [pc, #96]	; (80061a8 <prvAddNewTaskToReadyList+0xc8>)
 8006148:	6013      	str	r3, [r2, #0]
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800614e:	4613      	mov	r3, r2
 8006150:	009b      	lsls	r3, r3, #2
 8006152:	4413      	add	r3, r2
 8006154:	009b      	lsls	r3, r3, #2
 8006156:	4a15      	ldr	r2, [pc, #84]	; (80061ac <prvAddNewTaskToReadyList+0xcc>)
 8006158:	441a      	add	r2, r3
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	3304      	adds	r3, #4
 800615e:	4619      	mov	r1, r3
 8006160:	4610      	mov	r0, r2
 8006162:	f7fe ff2c 	bl	8004fbe <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006166:	f001 feb5 	bl	8007ed4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800616a:	4b0d      	ldr	r3, [pc, #52]	; (80061a0 <prvAddNewTaskToReadyList+0xc0>)
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	2b00      	cmp	r3, #0
 8006170:	d00e      	beq.n	8006190 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006172:	4b0a      	ldr	r3, [pc, #40]	; (800619c <prvAddNewTaskToReadyList+0xbc>)
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800617c:	429a      	cmp	r2, r3
 800617e:	d207      	bcs.n	8006190 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006180:	4b0b      	ldr	r3, [pc, #44]	; (80061b0 <prvAddNewTaskToReadyList+0xd0>)
 8006182:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006186:	601a      	str	r2, [r3, #0]
 8006188:	f3bf 8f4f 	dsb	sy
 800618c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006190:	bf00      	nop
 8006192:	3708      	adds	r7, #8
 8006194:	46bd      	mov	sp, r7
 8006196:	bd80      	pop	{r7, pc}
 8006198:	2000079c 	.word	0x2000079c
 800619c:	2000069c 	.word	0x2000069c
 80061a0:	200007a8 	.word	0x200007a8
 80061a4:	200007b8 	.word	0x200007b8
 80061a8:	200007a4 	.word	0x200007a4
 80061ac:	200006a0 	.word	0x200006a0
 80061b0:	e000ed04 	.word	0xe000ed04

080061b4 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 80061b4:	b580      	push	{r7, lr}
 80061b6:	b084      	sub	sp, #16
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 80061bc:	f001 fe5a 	bl	8007e74 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d102      	bne.n	80061cc <vTaskDelete+0x18>
 80061c6:	4b39      	ldr	r3, [pc, #228]	; (80062ac <vTaskDelete+0xf8>)
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	e000      	b.n	80061ce <vTaskDelete+0x1a>
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	3304      	adds	r3, #4
 80061d4:	4618      	mov	r0, r3
 80061d6:	f7fe ff4f 	bl	8005078 <uxListRemove>
 80061da:	4603      	mov	r3, r0
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d115      	bne.n	800620c <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061e4:	4932      	ldr	r1, [pc, #200]	; (80062b0 <vTaskDelete+0xfc>)
 80061e6:	4613      	mov	r3, r2
 80061e8:	009b      	lsls	r3, r3, #2
 80061ea:	4413      	add	r3, r2
 80061ec:	009b      	lsls	r3, r3, #2
 80061ee:	440b      	add	r3, r1
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d10a      	bne.n	800620c <vTaskDelete+0x58>
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061fa:	2201      	movs	r2, #1
 80061fc:	fa02 f303 	lsl.w	r3, r2, r3
 8006200:	43da      	mvns	r2, r3
 8006202:	4b2c      	ldr	r3, [pc, #176]	; (80062b4 <vTaskDelete+0x100>)
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	4013      	ands	r3, r2
 8006208:	4a2a      	ldr	r2, [pc, #168]	; (80062b4 <vTaskDelete+0x100>)
 800620a:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006210:	2b00      	cmp	r3, #0
 8006212:	d004      	beq.n	800621e <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	3318      	adds	r3, #24
 8006218:	4618      	mov	r0, r3
 800621a:	f7fe ff2d 	bl	8005078 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 800621e:	4b26      	ldr	r3, [pc, #152]	; (80062b8 <vTaskDelete+0x104>)
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	3301      	adds	r3, #1
 8006224:	4a24      	ldr	r2, [pc, #144]	; (80062b8 <vTaskDelete+0x104>)
 8006226:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8006228:	4b20      	ldr	r3, [pc, #128]	; (80062ac <vTaskDelete+0xf8>)
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	68fa      	ldr	r2, [r7, #12]
 800622e:	429a      	cmp	r2, r3
 8006230:	d10b      	bne.n	800624a <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	3304      	adds	r3, #4
 8006236:	4619      	mov	r1, r3
 8006238:	4820      	ldr	r0, [pc, #128]	; (80062bc <vTaskDelete+0x108>)
 800623a:	f7fe fec0 	bl	8004fbe <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 800623e:	4b20      	ldr	r3, [pc, #128]	; (80062c0 <vTaskDelete+0x10c>)
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	3301      	adds	r3, #1
 8006244:	4a1e      	ldr	r2, [pc, #120]	; (80062c0 <vTaskDelete+0x10c>)
 8006246:	6013      	str	r3, [r2, #0]
 8006248:	e009      	b.n	800625e <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 800624a:	4b1e      	ldr	r3, [pc, #120]	; (80062c4 <vTaskDelete+0x110>)
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	3b01      	subs	r3, #1
 8006250:	4a1c      	ldr	r2, [pc, #112]	; (80062c4 <vTaskDelete+0x110>)
 8006252:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 8006254:	68f8      	ldr	r0, [r7, #12]
 8006256:	f000 fdeb 	bl	8006e30 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 800625a:	f000 fe1d 	bl	8006e98 <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 800625e:	f001 fe39 	bl	8007ed4 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8006262:	4b19      	ldr	r3, [pc, #100]	; (80062c8 <vTaskDelete+0x114>)
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	2b00      	cmp	r3, #0
 8006268:	d01b      	beq.n	80062a2 <vTaskDelete+0xee>
		{
			if( pxTCB == pxCurrentTCB )
 800626a:	4b10      	ldr	r3, [pc, #64]	; (80062ac <vTaskDelete+0xf8>)
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	68fa      	ldr	r2, [r7, #12]
 8006270:	429a      	cmp	r2, r3
 8006272:	d116      	bne.n	80062a2 <vTaskDelete+0xee>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8006274:	4b15      	ldr	r3, [pc, #84]	; (80062cc <vTaskDelete+0x118>)
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	2b00      	cmp	r3, #0
 800627a:	d00a      	beq.n	8006292 <vTaskDelete+0xde>
	__asm volatile
 800627c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006280:	f383 8811 	msr	BASEPRI, r3
 8006284:	f3bf 8f6f 	isb	sy
 8006288:	f3bf 8f4f 	dsb	sy
 800628c:	60bb      	str	r3, [r7, #8]
}
 800628e:	bf00      	nop
 8006290:	e7fe      	b.n	8006290 <vTaskDelete+0xdc>
				portYIELD_WITHIN_API();
 8006292:	4b0f      	ldr	r3, [pc, #60]	; (80062d0 <vTaskDelete+0x11c>)
 8006294:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006298:	601a      	str	r2, [r3, #0]
 800629a:	f3bf 8f4f 	dsb	sy
 800629e:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80062a2:	bf00      	nop
 80062a4:	3710      	adds	r7, #16
 80062a6:	46bd      	mov	sp, r7
 80062a8:	bd80      	pop	{r7, pc}
 80062aa:	bf00      	nop
 80062ac:	2000069c 	.word	0x2000069c
 80062b0:	200006a0 	.word	0x200006a0
 80062b4:	200007a4 	.word	0x200007a4
 80062b8:	200007b8 	.word	0x200007b8
 80062bc:	20000770 	.word	0x20000770
 80062c0:	20000784 	.word	0x20000784
 80062c4:	2000079c 	.word	0x2000079c
 80062c8:	200007a8 	.word	0x200007a8
 80062cc:	200007c4 	.word	0x200007c4
 80062d0:	e000ed04 	.word	0xe000ed04

080062d4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80062d4:	b580      	push	{r7, lr}
 80062d6:	b084      	sub	sp, #16
 80062d8:	af00      	add	r7, sp, #0
 80062da:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80062dc:	2300      	movs	r3, #0
 80062de:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d017      	beq.n	8006316 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80062e6:	4b13      	ldr	r3, [pc, #76]	; (8006334 <vTaskDelay+0x60>)
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d00a      	beq.n	8006304 <vTaskDelay+0x30>
	__asm volatile
 80062ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062f2:	f383 8811 	msr	BASEPRI, r3
 80062f6:	f3bf 8f6f 	isb	sy
 80062fa:	f3bf 8f4f 	dsb	sy
 80062fe:	60bb      	str	r3, [r7, #8]
}
 8006300:	bf00      	nop
 8006302:	e7fe      	b.n	8006302 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006304:	f000 f88a 	bl	800641c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006308:	2100      	movs	r1, #0
 800630a:	6878      	ldr	r0, [r7, #4]
 800630c:	f001 f8ea 	bl	80074e4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006310:	f000 f892 	bl	8006438 <xTaskResumeAll>
 8006314:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	2b00      	cmp	r3, #0
 800631a:	d107      	bne.n	800632c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800631c:	4b06      	ldr	r3, [pc, #24]	; (8006338 <vTaskDelay+0x64>)
 800631e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006322:	601a      	str	r2, [r3, #0]
 8006324:	f3bf 8f4f 	dsb	sy
 8006328:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800632c:	bf00      	nop
 800632e:	3710      	adds	r7, #16
 8006330:	46bd      	mov	sp, r7
 8006332:	bd80      	pop	{r7, pc}
 8006334:	200007c4 	.word	0x200007c4
 8006338:	e000ed04 	.word	0xe000ed04

0800633c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800633c:	b580      	push	{r7, lr}
 800633e:	b08a      	sub	sp, #40	; 0x28
 8006340:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006342:	2300      	movs	r3, #0
 8006344:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006346:	2300      	movs	r3, #0
 8006348:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800634a:	463a      	mov	r2, r7
 800634c:	1d39      	adds	r1, r7, #4
 800634e:	f107 0308 	add.w	r3, r7, #8
 8006352:	4618      	mov	r0, r3
 8006354:	f7f9 ffa2 	bl	800029c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006358:	6839      	ldr	r1, [r7, #0]
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	68ba      	ldr	r2, [r7, #8]
 800635e:	9202      	str	r2, [sp, #8]
 8006360:	9301      	str	r3, [sp, #4]
 8006362:	2300      	movs	r3, #0
 8006364:	9300      	str	r3, [sp, #0]
 8006366:	2300      	movs	r3, #0
 8006368:	460a      	mov	r2, r1
 800636a:	4924      	ldr	r1, [pc, #144]	; (80063fc <vTaskStartScheduler+0xc0>)
 800636c:	4824      	ldr	r0, [pc, #144]	; (8006400 <vTaskStartScheduler+0xc4>)
 800636e:	f7ff fd7f 	bl	8005e70 <xTaskCreateStatic>
 8006372:	4603      	mov	r3, r0
 8006374:	4a23      	ldr	r2, [pc, #140]	; (8006404 <vTaskStartScheduler+0xc8>)
 8006376:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006378:	4b22      	ldr	r3, [pc, #136]	; (8006404 <vTaskStartScheduler+0xc8>)
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	2b00      	cmp	r3, #0
 800637e:	d002      	beq.n	8006386 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006380:	2301      	movs	r3, #1
 8006382:	617b      	str	r3, [r7, #20]
 8006384:	e001      	b.n	800638a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006386:	2300      	movs	r3, #0
 8006388:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800638a:	697b      	ldr	r3, [r7, #20]
 800638c:	2b01      	cmp	r3, #1
 800638e:	d102      	bne.n	8006396 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006390:	f001 f90e 	bl	80075b0 <xTimerCreateTimerTask>
 8006394:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006396:	697b      	ldr	r3, [r7, #20]
 8006398:	2b01      	cmp	r3, #1
 800639a:	d11b      	bne.n	80063d4 <vTaskStartScheduler+0x98>
	__asm volatile
 800639c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063a0:	f383 8811 	msr	BASEPRI, r3
 80063a4:	f3bf 8f6f 	isb	sy
 80063a8:	f3bf 8f4f 	dsb	sy
 80063ac:	613b      	str	r3, [r7, #16]
}
 80063ae:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80063b0:	4b15      	ldr	r3, [pc, #84]	; (8006408 <vTaskStartScheduler+0xcc>)
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	3350      	adds	r3, #80	; 0x50
 80063b6:	4a15      	ldr	r2, [pc, #84]	; (800640c <vTaskStartScheduler+0xd0>)
 80063b8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80063ba:	4b15      	ldr	r3, [pc, #84]	; (8006410 <vTaskStartScheduler+0xd4>)
 80063bc:	f04f 32ff 	mov.w	r2, #4294967295
 80063c0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80063c2:	4b14      	ldr	r3, [pc, #80]	; (8006414 <vTaskStartScheduler+0xd8>)
 80063c4:	2201      	movs	r2, #1
 80063c6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80063c8:	4b13      	ldr	r3, [pc, #76]	; (8006418 <vTaskStartScheduler+0xdc>)
 80063ca:	2200      	movs	r2, #0
 80063cc:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80063ce:	f001 fcaf 	bl	8007d30 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80063d2:	e00e      	b.n	80063f2 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80063d4:	697b      	ldr	r3, [r7, #20]
 80063d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063da:	d10a      	bne.n	80063f2 <vTaskStartScheduler+0xb6>
	__asm volatile
 80063dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063e0:	f383 8811 	msr	BASEPRI, r3
 80063e4:	f3bf 8f6f 	isb	sy
 80063e8:	f3bf 8f4f 	dsb	sy
 80063ec:	60fb      	str	r3, [r7, #12]
}
 80063ee:	bf00      	nop
 80063f0:	e7fe      	b.n	80063f0 <vTaskStartScheduler+0xb4>
}
 80063f2:	bf00      	nop
 80063f4:	3718      	adds	r7, #24
 80063f6:	46bd      	mov	sp, r7
 80063f8:	bd80      	pop	{r7, pc}
 80063fa:	bf00      	nop
 80063fc:	08008fc0 	.word	0x08008fc0
 8006400:	08006d21 	.word	0x08006d21
 8006404:	200007c0 	.word	0x200007c0
 8006408:	2000069c 	.word	0x2000069c
 800640c:	20000010 	.word	0x20000010
 8006410:	200007bc 	.word	0x200007bc
 8006414:	200007a8 	.word	0x200007a8
 8006418:	200007a0 	.word	0x200007a0

0800641c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800641c:	b480      	push	{r7}
 800641e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8006420:	4b04      	ldr	r3, [pc, #16]	; (8006434 <vTaskSuspendAll+0x18>)
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	3301      	adds	r3, #1
 8006426:	4a03      	ldr	r2, [pc, #12]	; (8006434 <vTaskSuspendAll+0x18>)
 8006428:	6013      	str	r3, [r2, #0]
}
 800642a:	bf00      	nop
 800642c:	46bd      	mov	sp, r7
 800642e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006432:	4770      	bx	lr
 8006434:	200007c4 	.word	0x200007c4

08006438 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006438:	b580      	push	{r7, lr}
 800643a:	b084      	sub	sp, #16
 800643c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800643e:	2300      	movs	r3, #0
 8006440:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006442:	2300      	movs	r3, #0
 8006444:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006446:	4b41      	ldr	r3, [pc, #260]	; (800654c <xTaskResumeAll+0x114>)
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	2b00      	cmp	r3, #0
 800644c:	d10a      	bne.n	8006464 <xTaskResumeAll+0x2c>
	__asm volatile
 800644e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006452:	f383 8811 	msr	BASEPRI, r3
 8006456:	f3bf 8f6f 	isb	sy
 800645a:	f3bf 8f4f 	dsb	sy
 800645e:	603b      	str	r3, [r7, #0]
}
 8006460:	bf00      	nop
 8006462:	e7fe      	b.n	8006462 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006464:	f001 fd06 	bl	8007e74 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006468:	4b38      	ldr	r3, [pc, #224]	; (800654c <xTaskResumeAll+0x114>)
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	3b01      	subs	r3, #1
 800646e:	4a37      	ldr	r2, [pc, #220]	; (800654c <xTaskResumeAll+0x114>)
 8006470:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006472:	4b36      	ldr	r3, [pc, #216]	; (800654c <xTaskResumeAll+0x114>)
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	2b00      	cmp	r3, #0
 8006478:	d161      	bne.n	800653e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800647a:	4b35      	ldr	r3, [pc, #212]	; (8006550 <xTaskResumeAll+0x118>)
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	2b00      	cmp	r3, #0
 8006480:	d05d      	beq.n	800653e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006482:	e02e      	b.n	80064e2 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8006484:	4b33      	ldr	r3, [pc, #204]	; (8006554 <xTaskResumeAll+0x11c>)
 8006486:	68db      	ldr	r3, [r3, #12]
 8006488:	68db      	ldr	r3, [r3, #12]
 800648a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	3318      	adds	r3, #24
 8006490:	4618      	mov	r0, r3
 8006492:	f7fe fdf1 	bl	8005078 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	3304      	adds	r3, #4
 800649a:	4618      	mov	r0, r3
 800649c:	f7fe fdec 	bl	8005078 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064a4:	2201      	movs	r2, #1
 80064a6:	409a      	lsls	r2, r3
 80064a8:	4b2b      	ldr	r3, [pc, #172]	; (8006558 <xTaskResumeAll+0x120>)
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	4313      	orrs	r3, r2
 80064ae:	4a2a      	ldr	r2, [pc, #168]	; (8006558 <xTaskResumeAll+0x120>)
 80064b0:	6013      	str	r3, [r2, #0]
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064b6:	4613      	mov	r3, r2
 80064b8:	009b      	lsls	r3, r3, #2
 80064ba:	4413      	add	r3, r2
 80064bc:	009b      	lsls	r3, r3, #2
 80064be:	4a27      	ldr	r2, [pc, #156]	; (800655c <xTaskResumeAll+0x124>)
 80064c0:	441a      	add	r2, r3
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	3304      	adds	r3, #4
 80064c6:	4619      	mov	r1, r3
 80064c8:	4610      	mov	r0, r2
 80064ca:	f7fe fd78 	bl	8004fbe <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064d2:	4b23      	ldr	r3, [pc, #140]	; (8006560 <xTaskResumeAll+0x128>)
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064d8:	429a      	cmp	r2, r3
 80064da:	d302      	bcc.n	80064e2 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80064dc:	4b21      	ldr	r3, [pc, #132]	; (8006564 <xTaskResumeAll+0x12c>)
 80064de:	2201      	movs	r2, #1
 80064e0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80064e2:	4b1c      	ldr	r3, [pc, #112]	; (8006554 <xTaskResumeAll+0x11c>)
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d1cc      	bne.n	8006484 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d001      	beq.n	80064f4 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80064f0:	f000 fcd2 	bl	8006e98 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80064f4:	4b1c      	ldr	r3, [pc, #112]	; (8006568 <xTaskResumeAll+0x130>)
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d010      	beq.n	8006522 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006500:	f000 f912 	bl	8006728 <xTaskIncrementTick>
 8006504:	4603      	mov	r3, r0
 8006506:	2b00      	cmp	r3, #0
 8006508:	d002      	beq.n	8006510 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800650a:	4b16      	ldr	r3, [pc, #88]	; (8006564 <xTaskResumeAll+0x12c>)
 800650c:	2201      	movs	r2, #1
 800650e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	3b01      	subs	r3, #1
 8006514:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	2b00      	cmp	r3, #0
 800651a:	d1f1      	bne.n	8006500 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 800651c:	4b12      	ldr	r3, [pc, #72]	; (8006568 <xTaskResumeAll+0x130>)
 800651e:	2200      	movs	r2, #0
 8006520:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006522:	4b10      	ldr	r3, [pc, #64]	; (8006564 <xTaskResumeAll+0x12c>)
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	2b00      	cmp	r3, #0
 8006528:	d009      	beq.n	800653e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800652a:	2301      	movs	r3, #1
 800652c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800652e:	4b0f      	ldr	r3, [pc, #60]	; (800656c <xTaskResumeAll+0x134>)
 8006530:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006534:	601a      	str	r2, [r3, #0]
 8006536:	f3bf 8f4f 	dsb	sy
 800653a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800653e:	f001 fcc9 	bl	8007ed4 <vPortExitCritical>

	return xAlreadyYielded;
 8006542:	68bb      	ldr	r3, [r7, #8]
}
 8006544:	4618      	mov	r0, r3
 8006546:	3710      	adds	r7, #16
 8006548:	46bd      	mov	sp, r7
 800654a:	bd80      	pop	{r7, pc}
 800654c:	200007c4 	.word	0x200007c4
 8006550:	2000079c 	.word	0x2000079c
 8006554:	2000075c 	.word	0x2000075c
 8006558:	200007a4 	.word	0x200007a4
 800655c:	200006a0 	.word	0x200006a0
 8006560:	2000069c 	.word	0x2000069c
 8006564:	200007b0 	.word	0x200007b0
 8006568:	200007ac 	.word	0x200007ac
 800656c:	e000ed04 	.word	0xe000ed04

08006570 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006570:	b480      	push	{r7}
 8006572:	b083      	sub	sp, #12
 8006574:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006576:	4b05      	ldr	r3, [pc, #20]	; (800658c <xTaskGetTickCount+0x1c>)
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800657c:	687b      	ldr	r3, [r7, #4]
}
 800657e:	4618      	mov	r0, r3
 8006580:	370c      	adds	r7, #12
 8006582:	46bd      	mov	sp, r7
 8006584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006588:	4770      	bx	lr
 800658a:	bf00      	nop
 800658c:	200007a0 	.word	0x200007a0

08006590 <prvSearchForNameWithinSingleList>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_xTaskGetHandle == 1 )

	static TCB_t *prvSearchForNameWithinSingleList( List_t *pxList, const char pcNameToQuery[] )
	{
 8006590:	b480      	push	{r7}
 8006592:	b08b      	sub	sp, #44	; 0x2c
 8006594:	af00      	add	r7, sp, #0
 8006596:	6078      	str	r0, [r7, #4]
 8006598:	6039      	str	r1, [r7, #0]
	TCB_t *pxNextTCB, *pxFirstTCB, *pxReturn = NULL;
 800659a:	2300      	movs	r3, #0
 800659c:	627b      	str	r3, [r7, #36]	; 0x24
	UBaseType_t x;
	char cNextChar;

		/* This function is called with the scheduler suspended. */

		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d052      	beq.n	800664c <prvSearchForNameWithinSingleList+0xbc>
		{
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	61fb      	str	r3, [r7, #28]
 80065aa:	69fb      	ldr	r3, [r7, #28]
 80065ac:	685b      	ldr	r3, [r3, #4]
 80065ae:	685a      	ldr	r2, [r3, #4]
 80065b0:	69fb      	ldr	r3, [r7, #28]
 80065b2:	605a      	str	r2, [r3, #4]
 80065b4:	69fb      	ldr	r3, [r7, #28]
 80065b6:	685a      	ldr	r2, [r3, #4]
 80065b8:	69fb      	ldr	r3, [r7, #28]
 80065ba:	3308      	adds	r3, #8
 80065bc:	429a      	cmp	r2, r3
 80065be:	d104      	bne.n	80065ca <prvSearchForNameWithinSingleList+0x3a>
 80065c0:	69fb      	ldr	r3, [r7, #28]
 80065c2:	685b      	ldr	r3, [r3, #4]
 80065c4:	685a      	ldr	r2, [r3, #4]
 80065c6:	69fb      	ldr	r3, [r7, #28]
 80065c8:	605a      	str	r2, [r3, #4]
 80065ca:	69fb      	ldr	r3, [r7, #28]
 80065cc:	685b      	ldr	r3, [r3, #4]
 80065ce:	68db      	ldr	r3, [r3, #12]
 80065d0:	61bb      	str	r3, [r7, #24]

			do
			{
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	617b      	str	r3, [r7, #20]
 80065d6:	697b      	ldr	r3, [r7, #20]
 80065d8:	685b      	ldr	r3, [r3, #4]
 80065da:	685a      	ldr	r2, [r3, #4]
 80065dc:	697b      	ldr	r3, [r7, #20]
 80065de:	605a      	str	r2, [r3, #4]
 80065e0:	697b      	ldr	r3, [r7, #20]
 80065e2:	685a      	ldr	r2, [r3, #4]
 80065e4:	697b      	ldr	r3, [r7, #20]
 80065e6:	3308      	adds	r3, #8
 80065e8:	429a      	cmp	r2, r3
 80065ea:	d104      	bne.n	80065f6 <prvSearchForNameWithinSingleList+0x66>
 80065ec:	697b      	ldr	r3, [r7, #20]
 80065ee:	685b      	ldr	r3, [r3, #4]
 80065f0:	685a      	ldr	r2, [r3, #4]
 80065f2:	697b      	ldr	r3, [r7, #20]
 80065f4:	605a      	str	r2, [r3, #4]
 80065f6:	697b      	ldr	r3, [r7, #20]
 80065f8:	685b      	ldr	r3, [r3, #4]
 80065fa:	68db      	ldr	r3, [r3, #12]
 80065fc:	613b      	str	r3, [r7, #16]

				/* Check each character in the name looking for a match or
				mismatch. */
				for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80065fe:	2300      	movs	r3, #0
 8006600:	623b      	str	r3, [r7, #32]
 8006602:	e015      	b.n	8006630 <prvSearchForNameWithinSingleList+0xa0>
				{
					cNextChar = pxNextTCB->pcTaskName[ x ];
 8006604:	693a      	ldr	r2, [r7, #16]
 8006606:	6a3b      	ldr	r3, [r7, #32]
 8006608:	4413      	add	r3, r2
 800660a:	3334      	adds	r3, #52	; 0x34
 800660c:	781b      	ldrb	r3, [r3, #0]
 800660e:	73fb      	strb	r3, [r7, #15]

					if( cNextChar != pcNameToQuery[ x ] )
 8006610:	683a      	ldr	r2, [r7, #0]
 8006612:	6a3b      	ldr	r3, [r7, #32]
 8006614:	4413      	add	r3, r2
 8006616:	781b      	ldrb	r3, [r3, #0]
 8006618:	7bfa      	ldrb	r2, [r7, #15]
 800661a:	429a      	cmp	r2, r3
 800661c:	d10c      	bne.n	8006638 <prvSearchForNameWithinSingleList+0xa8>
					{
						/* Characters didn't match. */
						break;
					}
					else if( cNextChar == 0x00 )
 800661e:	7bfb      	ldrb	r3, [r7, #15]
 8006620:	2b00      	cmp	r3, #0
 8006622:	d102      	bne.n	800662a <prvSearchForNameWithinSingleList+0x9a>
					{
						/* Both strings terminated, a match must have been
						found. */
						pxReturn = pxNextTCB;
 8006624:	693b      	ldr	r3, [r7, #16]
 8006626:	627b      	str	r3, [r7, #36]	; 0x24
						break;
 8006628:	e007      	b.n	800663a <prvSearchForNameWithinSingleList+0xaa>
				for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800662a:	6a3b      	ldr	r3, [r7, #32]
 800662c:	3301      	adds	r3, #1
 800662e:	623b      	str	r3, [r7, #32]
 8006630:	6a3b      	ldr	r3, [r7, #32]
 8006632:	2b11      	cmp	r3, #17
 8006634:	d9e6      	bls.n	8006604 <prvSearchForNameWithinSingleList+0x74>
 8006636:	e000      	b.n	800663a <prvSearchForNameWithinSingleList+0xaa>
						break;
 8006638:	bf00      	nop
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxReturn != NULL )
 800663a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800663c:	2b00      	cmp	r3, #0
 800663e:	d104      	bne.n	800664a <prvSearchForNameWithinSingleList+0xba>
				{
					/* The handle has been found. */
					break;
				}

			} while( pxNextTCB != pxFirstTCB );
 8006640:	693a      	ldr	r2, [r7, #16]
 8006642:	69bb      	ldr	r3, [r7, #24]
 8006644:	429a      	cmp	r2, r3
 8006646:	d1c4      	bne.n	80065d2 <prvSearchForNameWithinSingleList+0x42>
 8006648:	e000      	b.n	800664c <prvSearchForNameWithinSingleList+0xbc>
					break;
 800664a:	bf00      	nop
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return pxReturn;
 800664c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800664e:	4618      	mov	r0, r3
 8006650:	372c      	adds	r7, #44	; 0x2c
 8006652:	46bd      	mov	sp, r7
 8006654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006658:	4770      	bx	lr
	...

0800665c <xTaskGetHandle>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_xTaskGetHandle == 1 )

	TaskHandle_t xTaskGetHandle( const char *pcNameToQuery ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800665c:	b580      	push	{r7, lr}
 800665e:	b086      	sub	sp, #24
 8006660:	af00      	add	r7, sp, #0
 8006662:	6078      	str	r0, [r7, #4]
	UBaseType_t uxQueue = configMAX_PRIORITIES;
 8006664:	2307      	movs	r3, #7
 8006666:	617b      	str	r3, [r7, #20]
	TCB_t* pxTCB;

		/* Task names will be truncated to configMAX_TASK_NAME_LEN - 1 bytes. */
		configASSERT( strlen( pcNameToQuery ) < configMAX_TASK_NAME_LEN );
 8006668:	6878      	ldr	r0, [r7, #4]
 800666a:	f7f9 fdb1 	bl	80001d0 <strlen>
 800666e:	4603      	mov	r3, r0
 8006670:	2b11      	cmp	r3, #17
 8006672:	d90a      	bls.n	800668a <xTaskGetHandle+0x2e>
	__asm volatile
 8006674:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006678:	f383 8811 	msr	BASEPRI, r3
 800667c:	f3bf 8f6f 	isb	sy
 8006680:	f3bf 8f4f 	dsb	sy
 8006684:	60fb      	str	r3, [r7, #12]
}
 8006686:	bf00      	nop
 8006688:	e7fe      	b.n	8006688 <xTaskGetHandle+0x2c>

		vTaskSuspendAll();
 800668a:	f7ff fec7 	bl	800641c <vTaskSuspendAll>
		{
			/* Search the ready lists. */
			do
			{
				uxQueue--;
 800668e:	697b      	ldr	r3, [r7, #20]
 8006690:	3b01      	subs	r3, #1
 8006692:	617b      	str	r3, [r7, #20]
				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) &( pxReadyTasksLists[ uxQueue ] ), pcNameToQuery );
 8006694:	697a      	ldr	r2, [r7, #20]
 8006696:	4613      	mov	r3, r2
 8006698:	009b      	lsls	r3, r3, #2
 800669a:	4413      	add	r3, r2
 800669c:	009b      	lsls	r3, r3, #2
 800669e:	4a1d      	ldr	r2, [pc, #116]	; (8006714 <xTaskGetHandle+0xb8>)
 80066a0:	4413      	add	r3, r2
 80066a2:	6879      	ldr	r1, [r7, #4]
 80066a4:	4618      	mov	r0, r3
 80066a6:	f7ff ff73 	bl	8006590 <prvSearchForNameWithinSingleList>
 80066aa:	6138      	str	r0, [r7, #16]

				if( pxTCB != NULL )
 80066ac:	693b      	ldr	r3, [r7, #16]
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d103      	bne.n	80066ba <xTaskGetHandle+0x5e>
				{
					/* Found the handle. */
					break;
				}

			} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80066b2:	697b      	ldr	r3, [r7, #20]
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d1ea      	bne.n	800668e <xTaskGetHandle+0x32>
 80066b8:	e000      	b.n	80066bc <xTaskGetHandle+0x60>
					break;
 80066ba:	bf00      	nop

			/* Search the delayed lists. */
			if( pxTCB == NULL )
 80066bc:	693b      	ldr	r3, [r7, #16]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d106      	bne.n	80066d0 <xTaskGetHandle+0x74>
			{
				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxDelayedTaskList, pcNameToQuery );
 80066c2:	4b15      	ldr	r3, [pc, #84]	; (8006718 <xTaskGetHandle+0xbc>)
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	6879      	ldr	r1, [r7, #4]
 80066c8:	4618      	mov	r0, r3
 80066ca:	f7ff ff61 	bl	8006590 <prvSearchForNameWithinSingleList>
 80066ce:	6138      	str	r0, [r7, #16]
			}

			if( pxTCB == NULL )
 80066d0:	693b      	ldr	r3, [r7, #16]
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d106      	bne.n	80066e4 <xTaskGetHandle+0x88>
			{
				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxOverflowDelayedTaskList, pcNameToQuery );
 80066d6:	4b11      	ldr	r3, [pc, #68]	; (800671c <xTaskGetHandle+0xc0>)
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	6879      	ldr	r1, [r7, #4]
 80066dc:	4618      	mov	r0, r3
 80066de:	f7ff ff57 	bl	8006590 <prvSearchForNameWithinSingleList>
 80066e2:	6138      	str	r0, [r7, #16]
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
			{
				if( pxTCB == NULL )
 80066e4:	693b      	ldr	r3, [r7, #16]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d104      	bne.n	80066f4 <xTaskGetHandle+0x98>
				{
					/* Search the suspended list. */
					pxTCB = prvSearchForNameWithinSingleList( &xSuspendedTaskList, pcNameToQuery );
 80066ea:	6879      	ldr	r1, [r7, #4]
 80066ec:	480c      	ldr	r0, [pc, #48]	; (8006720 <xTaskGetHandle+0xc4>)
 80066ee:	f7ff ff4f 	bl	8006590 <prvSearchForNameWithinSingleList>
 80066f2:	6138      	str	r0, [r7, #16]
			}
			#endif

			#if( INCLUDE_vTaskDelete == 1 )
			{
				if( pxTCB == NULL )
 80066f4:	693b      	ldr	r3, [r7, #16]
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d104      	bne.n	8006704 <xTaskGetHandle+0xa8>
				{
					/* Search the deleted list. */
					pxTCB = prvSearchForNameWithinSingleList( &xTasksWaitingTermination, pcNameToQuery );
 80066fa:	6879      	ldr	r1, [r7, #4]
 80066fc:	4809      	ldr	r0, [pc, #36]	; (8006724 <xTaskGetHandle+0xc8>)
 80066fe:	f7ff ff47 	bl	8006590 <prvSearchForNameWithinSingleList>
 8006702:	6138      	str	r0, [r7, #16]
				}
			}
			#endif
		}
		( void ) xTaskResumeAll();
 8006704:	f7ff fe98 	bl	8006438 <xTaskResumeAll>

		return ( TaskHandle_t ) pxTCB;
 8006708:	693b      	ldr	r3, [r7, #16]
	}
 800670a:	4618      	mov	r0, r3
 800670c:	3718      	adds	r7, #24
 800670e:	46bd      	mov	sp, r7
 8006710:	bd80      	pop	{r7, pc}
 8006712:	bf00      	nop
 8006714:	200006a0 	.word	0x200006a0
 8006718:	20000754 	.word	0x20000754
 800671c:	20000758 	.word	0x20000758
 8006720:	20000788 	.word	0x20000788
 8006724:	20000770 	.word	0x20000770

08006728 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006728:	b580      	push	{r7, lr}
 800672a:	b086      	sub	sp, #24
 800672c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800672e:	2300      	movs	r3, #0
 8006730:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006732:	4b55      	ldr	r3, [pc, #340]	; (8006888 <xTaskIncrementTick+0x160>)
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	2b00      	cmp	r3, #0
 8006738:	f040 8093 	bne.w	8006862 <xTaskIncrementTick+0x13a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800673c:	4b53      	ldr	r3, [pc, #332]	; (800688c <xTaskIncrementTick+0x164>)
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	3301      	adds	r3, #1
 8006742:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006744:	4a51      	ldr	r2, [pc, #324]	; (800688c <xTaskIncrementTick+0x164>)
 8006746:	693b      	ldr	r3, [r7, #16]
 8006748:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800674a:	693b      	ldr	r3, [r7, #16]
 800674c:	2b00      	cmp	r3, #0
 800674e:	d120      	bne.n	8006792 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006750:	4b4f      	ldr	r3, [pc, #316]	; (8006890 <xTaskIncrementTick+0x168>)
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	2b00      	cmp	r3, #0
 8006758:	d00a      	beq.n	8006770 <xTaskIncrementTick+0x48>
	__asm volatile
 800675a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800675e:	f383 8811 	msr	BASEPRI, r3
 8006762:	f3bf 8f6f 	isb	sy
 8006766:	f3bf 8f4f 	dsb	sy
 800676a:	603b      	str	r3, [r7, #0]
}
 800676c:	bf00      	nop
 800676e:	e7fe      	b.n	800676e <xTaskIncrementTick+0x46>
 8006770:	4b47      	ldr	r3, [pc, #284]	; (8006890 <xTaskIncrementTick+0x168>)
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	60fb      	str	r3, [r7, #12]
 8006776:	4b47      	ldr	r3, [pc, #284]	; (8006894 <xTaskIncrementTick+0x16c>)
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	4a45      	ldr	r2, [pc, #276]	; (8006890 <xTaskIncrementTick+0x168>)
 800677c:	6013      	str	r3, [r2, #0]
 800677e:	4a45      	ldr	r2, [pc, #276]	; (8006894 <xTaskIncrementTick+0x16c>)
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	6013      	str	r3, [r2, #0]
 8006784:	4b44      	ldr	r3, [pc, #272]	; (8006898 <xTaskIncrementTick+0x170>)
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	3301      	adds	r3, #1
 800678a:	4a43      	ldr	r2, [pc, #268]	; (8006898 <xTaskIncrementTick+0x170>)
 800678c:	6013      	str	r3, [r2, #0]
 800678e:	f000 fb83 	bl	8006e98 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006792:	4b42      	ldr	r3, [pc, #264]	; (800689c <xTaskIncrementTick+0x174>)
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	693a      	ldr	r2, [r7, #16]
 8006798:	429a      	cmp	r2, r3
 800679a:	d34d      	bcc.n	8006838 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800679c:	4b3c      	ldr	r3, [pc, #240]	; (8006890 <xTaskIncrementTick+0x168>)
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d101      	bne.n	80067aa <xTaskIncrementTick+0x82>
 80067a6:	2301      	movs	r3, #1
 80067a8:	e000      	b.n	80067ac <xTaskIncrementTick+0x84>
 80067aa:	2300      	movs	r3, #0
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d004      	beq.n	80067ba <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80067b0:	4b3a      	ldr	r3, [pc, #232]	; (800689c <xTaskIncrementTick+0x174>)
 80067b2:	f04f 32ff 	mov.w	r2, #4294967295
 80067b6:	601a      	str	r2, [r3, #0]
					break;
 80067b8:	e03e      	b.n	8006838 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80067ba:	4b35      	ldr	r3, [pc, #212]	; (8006890 <xTaskIncrementTick+0x168>)
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	68db      	ldr	r3, [r3, #12]
 80067c0:	68db      	ldr	r3, [r3, #12]
 80067c2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80067c4:	68bb      	ldr	r3, [r7, #8]
 80067c6:	685b      	ldr	r3, [r3, #4]
 80067c8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80067ca:	693a      	ldr	r2, [r7, #16]
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	429a      	cmp	r2, r3
 80067d0:	d203      	bcs.n	80067da <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80067d2:	4a32      	ldr	r2, [pc, #200]	; (800689c <xTaskIncrementTick+0x174>)
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	6013      	str	r3, [r2, #0]
						break;
 80067d8:	e02e      	b.n	8006838 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80067da:	68bb      	ldr	r3, [r7, #8]
 80067dc:	3304      	adds	r3, #4
 80067de:	4618      	mov	r0, r3
 80067e0:	f7fe fc4a 	bl	8005078 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80067e4:	68bb      	ldr	r3, [r7, #8]
 80067e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d004      	beq.n	80067f6 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80067ec:	68bb      	ldr	r3, [r7, #8]
 80067ee:	3318      	adds	r3, #24
 80067f0:	4618      	mov	r0, r3
 80067f2:	f7fe fc41 	bl	8005078 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80067f6:	68bb      	ldr	r3, [r7, #8]
 80067f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067fa:	2201      	movs	r2, #1
 80067fc:	409a      	lsls	r2, r3
 80067fe:	4b28      	ldr	r3, [pc, #160]	; (80068a0 <xTaskIncrementTick+0x178>)
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	4313      	orrs	r3, r2
 8006804:	4a26      	ldr	r2, [pc, #152]	; (80068a0 <xTaskIncrementTick+0x178>)
 8006806:	6013      	str	r3, [r2, #0]
 8006808:	68bb      	ldr	r3, [r7, #8]
 800680a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800680c:	4613      	mov	r3, r2
 800680e:	009b      	lsls	r3, r3, #2
 8006810:	4413      	add	r3, r2
 8006812:	009b      	lsls	r3, r3, #2
 8006814:	4a23      	ldr	r2, [pc, #140]	; (80068a4 <xTaskIncrementTick+0x17c>)
 8006816:	441a      	add	r2, r3
 8006818:	68bb      	ldr	r3, [r7, #8]
 800681a:	3304      	adds	r3, #4
 800681c:	4619      	mov	r1, r3
 800681e:	4610      	mov	r0, r2
 8006820:	f7fe fbcd 	bl	8004fbe <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006824:	68bb      	ldr	r3, [r7, #8]
 8006826:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006828:	4b1f      	ldr	r3, [pc, #124]	; (80068a8 <xTaskIncrementTick+0x180>)
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800682e:	429a      	cmp	r2, r3
 8006830:	d3b4      	bcc.n	800679c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006832:	2301      	movs	r3, #1
 8006834:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006836:	e7b1      	b.n	800679c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006838:	4b1b      	ldr	r3, [pc, #108]	; (80068a8 <xTaskIncrementTick+0x180>)
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800683e:	4919      	ldr	r1, [pc, #100]	; (80068a4 <xTaskIncrementTick+0x17c>)
 8006840:	4613      	mov	r3, r2
 8006842:	009b      	lsls	r3, r3, #2
 8006844:	4413      	add	r3, r2
 8006846:	009b      	lsls	r3, r3, #2
 8006848:	440b      	add	r3, r1
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	2b01      	cmp	r3, #1
 800684e:	d901      	bls.n	8006854 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 8006850:	2301      	movs	r3, #1
 8006852:	617b      	str	r3, [r7, #20]

		#if ( configUSE_TICK_HOOK == 1 )
		{
			/* Guard against the tick hook being called when the pended tick
			count is being unwound (when the scheduler is being unlocked). */
			if( uxPendedTicks == ( UBaseType_t ) 0U )
 8006854:	4b15      	ldr	r3, [pc, #84]	; (80068ac <xTaskIncrementTick+0x184>)
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	2b00      	cmp	r3, #0
 800685a:	d109      	bne.n	8006870 <xTaskIncrementTick+0x148>
			{
				vApplicationTickHook();
 800685c:	f7f9 fd17 	bl	800028e <vApplicationTickHook>
 8006860:	e006      	b.n	8006870 <xTaskIncrementTick+0x148>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8006862:	4b12      	ldr	r3, [pc, #72]	; (80068ac <xTaskIncrementTick+0x184>)
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	3301      	adds	r3, #1
 8006868:	4a10      	ldr	r2, [pc, #64]	; (80068ac <xTaskIncrementTick+0x184>)
 800686a:	6013      	str	r3, [r2, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
 800686c:	f7f9 fd0f 	bl	800028e <vApplicationTickHook>
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8006870:	4b0f      	ldr	r3, [pc, #60]	; (80068b0 <xTaskIncrementTick+0x188>)
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	2b00      	cmp	r3, #0
 8006876:	d001      	beq.n	800687c <xTaskIncrementTick+0x154>
		{
			xSwitchRequired = pdTRUE;
 8006878:	2301      	movs	r3, #1
 800687a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800687c:	697b      	ldr	r3, [r7, #20]
}
 800687e:	4618      	mov	r0, r3
 8006880:	3718      	adds	r7, #24
 8006882:	46bd      	mov	sp, r7
 8006884:	bd80      	pop	{r7, pc}
 8006886:	bf00      	nop
 8006888:	200007c4 	.word	0x200007c4
 800688c:	200007a0 	.word	0x200007a0
 8006890:	20000754 	.word	0x20000754
 8006894:	20000758 	.word	0x20000758
 8006898:	200007b4 	.word	0x200007b4
 800689c:	200007bc 	.word	0x200007bc
 80068a0:	200007a4 	.word	0x200007a4
 80068a4:	200006a0 	.word	0x200006a0
 80068a8:	2000069c 	.word	0x2000069c
 80068ac:	200007ac 	.word	0x200007ac
 80068b0:	200007b0 	.word	0x200007b0

080068b4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80068b4:	b480      	push	{r7}
 80068b6:	b087      	sub	sp, #28
 80068b8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80068ba:	4b29      	ldr	r3, [pc, #164]	; (8006960 <vTaskSwitchContext+0xac>)
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d003      	beq.n	80068ca <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80068c2:	4b28      	ldr	r3, [pc, #160]	; (8006964 <vTaskSwitchContext+0xb0>)
 80068c4:	2201      	movs	r2, #1
 80068c6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80068c8:	e044      	b.n	8006954 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 80068ca:	4b26      	ldr	r3, [pc, #152]	; (8006964 <vTaskSwitchContext+0xb0>)
 80068cc:	2200      	movs	r2, #0
 80068ce:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80068d0:	4b25      	ldr	r3, [pc, #148]	; (8006968 <vTaskSwitchContext+0xb4>)
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	fab3 f383 	clz	r3, r3
 80068dc:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80068de:	7afb      	ldrb	r3, [r7, #11]
 80068e0:	f1c3 031f 	rsb	r3, r3, #31
 80068e4:	617b      	str	r3, [r7, #20]
 80068e6:	4921      	ldr	r1, [pc, #132]	; (800696c <vTaskSwitchContext+0xb8>)
 80068e8:	697a      	ldr	r2, [r7, #20]
 80068ea:	4613      	mov	r3, r2
 80068ec:	009b      	lsls	r3, r3, #2
 80068ee:	4413      	add	r3, r2
 80068f0:	009b      	lsls	r3, r3, #2
 80068f2:	440b      	add	r3, r1
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d10a      	bne.n	8006910 <vTaskSwitchContext+0x5c>
	__asm volatile
 80068fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068fe:	f383 8811 	msr	BASEPRI, r3
 8006902:	f3bf 8f6f 	isb	sy
 8006906:	f3bf 8f4f 	dsb	sy
 800690a:	607b      	str	r3, [r7, #4]
}
 800690c:	bf00      	nop
 800690e:	e7fe      	b.n	800690e <vTaskSwitchContext+0x5a>
 8006910:	697a      	ldr	r2, [r7, #20]
 8006912:	4613      	mov	r3, r2
 8006914:	009b      	lsls	r3, r3, #2
 8006916:	4413      	add	r3, r2
 8006918:	009b      	lsls	r3, r3, #2
 800691a:	4a14      	ldr	r2, [pc, #80]	; (800696c <vTaskSwitchContext+0xb8>)
 800691c:	4413      	add	r3, r2
 800691e:	613b      	str	r3, [r7, #16]
 8006920:	693b      	ldr	r3, [r7, #16]
 8006922:	685b      	ldr	r3, [r3, #4]
 8006924:	685a      	ldr	r2, [r3, #4]
 8006926:	693b      	ldr	r3, [r7, #16]
 8006928:	605a      	str	r2, [r3, #4]
 800692a:	693b      	ldr	r3, [r7, #16]
 800692c:	685a      	ldr	r2, [r3, #4]
 800692e:	693b      	ldr	r3, [r7, #16]
 8006930:	3308      	adds	r3, #8
 8006932:	429a      	cmp	r2, r3
 8006934:	d104      	bne.n	8006940 <vTaskSwitchContext+0x8c>
 8006936:	693b      	ldr	r3, [r7, #16]
 8006938:	685b      	ldr	r3, [r3, #4]
 800693a:	685a      	ldr	r2, [r3, #4]
 800693c:	693b      	ldr	r3, [r7, #16]
 800693e:	605a      	str	r2, [r3, #4]
 8006940:	693b      	ldr	r3, [r7, #16]
 8006942:	685b      	ldr	r3, [r3, #4]
 8006944:	68db      	ldr	r3, [r3, #12]
 8006946:	4a0a      	ldr	r2, [pc, #40]	; (8006970 <vTaskSwitchContext+0xbc>)
 8006948:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800694a:	4b09      	ldr	r3, [pc, #36]	; (8006970 <vTaskSwitchContext+0xbc>)
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	3350      	adds	r3, #80	; 0x50
 8006950:	4a08      	ldr	r2, [pc, #32]	; (8006974 <vTaskSwitchContext+0xc0>)
 8006952:	6013      	str	r3, [r2, #0]
}
 8006954:	bf00      	nop
 8006956:	371c      	adds	r7, #28
 8006958:	46bd      	mov	sp, r7
 800695a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695e:	4770      	bx	lr
 8006960:	200007c4 	.word	0x200007c4
 8006964:	200007b0 	.word	0x200007b0
 8006968:	200007a4 	.word	0x200007a4
 800696c:	200006a0 	.word	0x200006a0
 8006970:	2000069c 	.word	0x2000069c
 8006974:	20000010 	.word	0x20000010

08006978 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006978:	b580      	push	{r7, lr}
 800697a:	b084      	sub	sp, #16
 800697c:	af00      	add	r7, sp, #0
 800697e:	6078      	str	r0, [r7, #4]
 8006980:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	2b00      	cmp	r3, #0
 8006986:	d10a      	bne.n	800699e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8006988:	f04f 0350 	mov.w	r3, #80	; 0x50
 800698c:	f383 8811 	msr	BASEPRI, r3
 8006990:	f3bf 8f6f 	isb	sy
 8006994:	f3bf 8f4f 	dsb	sy
 8006998:	60fb      	str	r3, [r7, #12]
}
 800699a:	bf00      	nop
 800699c:	e7fe      	b.n	800699c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800699e:	4b07      	ldr	r3, [pc, #28]	; (80069bc <vTaskPlaceOnEventList+0x44>)
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	3318      	adds	r3, #24
 80069a4:	4619      	mov	r1, r3
 80069a6:	6878      	ldr	r0, [r7, #4]
 80069a8:	f7fe fb2d 	bl	8005006 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80069ac:	2101      	movs	r1, #1
 80069ae:	6838      	ldr	r0, [r7, #0]
 80069b0:	f000 fd98 	bl	80074e4 <prvAddCurrentTaskToDelayedList>
}
 80069b4:	bf00      	nop
 80069b6:	3710      	adds	r7, #16
 80069b8:	46bd      	mov	sp, r7
 80069ba:	bd80      	pop	{r7, pc}
 80069bc:	2000069c 	.word	0x2000069c

080069c0 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 80069c0:	b580      	push	{r7, lr}
 80069c2:	b086      	sub	sp, #24
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	60f8      	str	r0, [r7, #12]
 80069c8:	60b9      	str	r1, [r7, #8]
 80069ca:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d10a      	bne.n	80069e8 <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 80069d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069d6:	f383 8811 	msr	BASEPRI, r3
 80069da:	f3bf 8f6f 	isb	sy
 80069de:	f3bf 8f4f 	dsb	sy
 80069e2:	617b      	str	r3, [r7, #20]
}
 80069e4:	bf00      	nop
 80069e6:	e7fe      	b.n	80069e6 <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 80069e8:	4b11      	ldr	r3, [pc, #68]	; (8006a30 <vTaskPlaceOnUnorderedEventList+0x70>)
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d10a      	bne.n	8006a06 <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 80069f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069f4:	f383 8811 	msr	BASEPRI, r3
 80069f8:	f3bf 8f6f 	isb	sy
 80069fc:	f3bf 8f4f 	dsb	sy
 8006a00:	613b      	str	r3, [r7, #16]
}
 8006a02:	bf00      	nop
 8006a04:	e7fe      	b.n	8006a04 <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8006a06:	4b0b      	ldr	r3, [pc, #44]	; (8006a34 <vTaskPlaceOnUnorderedEventList+0x74>)
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	68ba      	ldr	r2, [r7, #8]
 8006a0c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8006a10:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006a12:	4b08      	ldr	r3, [pc, #32]	; (8006a34 <vTaskPlaceOnUnorderedEventList+0x74>)
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	3318      	adds	r3, #24
 8006a18:	4619      	mov	r1, r3
 8006a1a:	68f8      	ldr	r0, [r7, #12]
 8006a1c:	f7fe facf 	bl	8004fbe <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006a20:	2101      	movs	r1, #1
 8006a22:	6878      	ldr	r0, [r7, #4]
 8006a24:	f000 fd5e 	bl	80074e4 <prvAddCurrentTaskToDelayedList>
}
 8006a28:	bf00      	nop
 8006a2a:	3718      	adds	r7, #24
 8006a2c:	46bd      	mov	sp, r7
 8006a2e:	bd80      	pop	{r7, pc}
 8006a30:	200007c4 	.word	0x200007c4
 8006a34:	2000069c 	.word	0x2000069c

08006a38 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006a38:	b580      	push	{r7, lr}
 8006a3a:	b086      	sub	sp, #24
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	60f8      	str	r0, [r7, #12]
 8006a40:	60b9      	str	r1, [r7, #8]
 8006a42:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d10a      	bne.n	8006a60 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8006a4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a4e:	f383 8811 	msr	BASEPRI, r3
 8006a52:	f3bf 8f6f 	isb	sy
 8006a56:	f3bf 8f4f 	dsb	sy
 8006a5a:	617b      	str	r3, [r7, #20]
}
 8006a5c:	bf00      	nop
 8006a5e:	e7fe      	b.n	8006a5e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006a60:	4b0a      	ldr	r3, [pc, #40]	; (8006a8c <vTaskPlaceOnEventListRestricted+0x54>)
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	3318      	adds	r3, #24
 8006a66:	4619      	mov	r1, r3
 8006a68:	68f8      	ldr	r0, [r7, #12]
 8006a6a:	f7fe faa8 	bl	8004fbe <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d002      	beq.n	8006a7a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8006a74:	f04f 33ff 	mov.w	r3, #4294967295
 8006a78:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006a7a:	6879      	ldr	r1, [r7, #4]
 8006a7c:	68b8      	ldr	r0, [r7, #8]
 8006a7e:	f000 fd31 	bl	80074e4 <prvAddCurrentTaskToDelayedList>
	}
 8006a82:	bf00      	nop
 8006a84:	3718      	adds	r7, #24
 8006a86:	46bd      	mov	sp, r7
 8006a88:	bd80      	pop	{r7, pc}
 8006a8a:	bf00      	nop
 8006a8c:	2000069c 	.word	0x2000069c

08006a90 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006a90:	b580      	push	{r7, lr}
 8006a92:	b086      	sub	sp, #24
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	68db      	ldr	r3, [r3, #12]
 8006a9c:	68db      	ldr	r3, [r3, #12]
 8006a9e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006aa0:	693b      	ldr	r3, [r7, #16]
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d10a      	bne.n	8006abc <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8006aa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006aaa:	f383 8811 	msr	BASEPRI, r3
 8006aae:	f3bf 8f6f 	isb	sy
 8006ab2:	f3bf 8f4f 	dsb	sy
 8006ab6:	60fb      	str	r3, [r7, #12]
}
 8006ab8:	bf00      	nop
 8006aba:	e7fe      	b.n	8006aba <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006abc:	693b      	ldr	r3, [r7, #16]
 8006abe:	3318      	adds	r3, #24
 8006ac0:	4618      	mov	r0, r3
 8006ac2:	f7fe fad9 	bl	8005078 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006ac6:	4b1d      	ldr	r3, [pc, #116]	; (8006b3c <xTaskRemoveFromEventList+0xac>)
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d11c      	bne.n	8006b08 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006ace:	693b      	ldr	r3, [r7, #16]
 8006ad0:	3304      	adds	r3, #4
 8006ad2:	4618      	mov	r0, r3
 8006ad4:	f7fe fad0 	bl	8005078 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006ad8:	693b      	ldr	r3, [r7, #16]
 8006ada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006adc:	2201      	movs	r2, #1
 8006ade:	409a      	lsls	r2, r3
 8006ae0:	4b17      	ldr	r3, [pc, #92]	; (8006b40 <xTaskRemoveFromEventList+0xb0>)
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	4313      	orrs	r3, r2
 8006ae6:	4a16      	ldr	r2, [pc, #88]	; (8006b40 <xTaskRemoveFromEventList+0xb0>)
 8006ae8:	6013      	str	r3, [r2, #0]
 8006aea:	693b      	ldr	r3, [r7, #16]
 8006aec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006aee:	4613      	mov	r3, r2
 8006af0:	009b      	lsls	r3, r3, #2
 8006af2:	4413      	add	r3, r2
 8006af4:	009b      	lsls	r3, r3, #2
 8006af6:	4a13      	ldr	r2, [pc, #76]	; (8006b44 <xTaskRemoveFromEventList+0xb4>)
 8006af8:	441a      	add	r2, r3
 8006afa:	693b      	ldr	r3, [r7, #16]
 8006afc:	3304      	adds	r3, #4
 8006afe:	4619      	mov	r1, r3
 8006b00:	4610      	mov	r0, r2
 8006b02:	f7fe fa5c 	bl	8004fbe <vListInsertEnd>
 8006b06:	e005      	b.n	8006b14 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006b08:	693b      	ldr	r3, [r7, #16]
 8006b0a:	3318      	adds	r3, #24
 8006b0c:	4619      	mov	r1, r3
 8006b0e:	480e      	ldr	r0, [pc, #56]	; (8006b48 <xTaskRemoveFromEventList+0xb8>)
 8006b10:	f7fe fa55 	bl	8004fbe <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006b14:	693b      	ldr	r3, [r7, #16]
 8006b16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b18:	4b0c      	ldr	r3, [pc, #48]	; (8006b4c <xTaskRemoveFromEventList+0xbc>)
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b1e:	429a      	cmp	r2, r3
 8006b20:	d905      	bls.n	8006b2e <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006b22:	2301      	movs	r3, #1
 8006b24:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006b26:	4b0a      	ldr	r3, [pc, #40]	; (8006b50 <xTaskRemoveFromEventList+0xc0>)
 8006b28:	2201      	movs	r2, #1
 8006b2a:	601a      	str	r2, [r3, #0]
 8006b2c:	e001      	b.n	8006b32 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8006b2e:	2300      	movs	r3, #0
 8006b30:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8006b32:	697b      	ldr	r3, [r7, #20]
}
 8006b34:	4618      	mov	r0, r3
 8006b36:	3718      	adds	r7, #24
 8006b38:	46bd      	mov	sp, r7
 8006b3a:	bd80      	pop	{r7, pc}
 8006b3c:	200007c4 	.word	0x200007c4
 8006b40:	200007a4 	.word	0x200007a4
 8006b44:	200006a0 	.word	0x200006a0
 8006b48:	2000075c 	.word	0x2000075c
 8006b4c:	2000069c 	.word	0x2000069c
 8006b50:	200007b0 	.word	0x200007b0

08006b54 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 8006b54:	b580      	push	{r7, lr}
 8006b56:	b086      	sub	sp, #24
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	6078      	str	r0, [r7, #4]
 8006b5c:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 8006b5e:	4b29      	ldr	r3, [pc, #164]	; (8006c04 <vTaskRemoveFromUnorderedEventList+0xb0>)
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d10a      	bne.n	8006b7c <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 8006b66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b6a:	f383 8811 	msr	BASEPRI, r3
 8006b6e:	f3bf 8f6f 	isb	sy
 8006b72:	f3bf 8f4f 	dsb	sy
 8006b76:	613b      	str	r3, [r7, #16]
}
 8006b78:	bf00      	nop
 8006b7a:	e7fe      	b.n	8006b7a <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8006b7c:	683b      	ldr	r3, [r7, #0]
 8006b7e:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = ( TCB_t * ) listGET_LIST_ITEM_OWNER( pxEventListItem );
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	68db      	ldr	r3, [r3, #12]
 8006b8a:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 8006b8c:	697b      	ldr	r3, [r7, #20]
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d10a      	bne.n	8006ba8 <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 8006b92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b96:	f383 8811 	msr	BASEPRI, r3
 8006b9a:	f3bf 8f6f 	isb	sy
 8006b9e:	f3bf 8f4f 	dsb	sy
 8006ba2:	60fb      	str	r3, [r7, #12]
}
 8006ba4:	bf00      	nop
 8006ba6:	e7fe      	b.n	8006ba6 <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 8006ba8:	6878      	ldr	r0, [r7, #4]
 8006baa:	f7fe fa65 	bl	8005078 <uxListRemove>

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006bae:	697b      	ldr	r3, [r7, #20]
 8006bb0:	3304      	adds	r3, #4
 8006bb2:	4618      	mov	r0, r3
 8006bb4:	f7fe fa60 	bl	8005078 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8006bb8:	697b      	ldr	r3, [r7, #20]
 8006bba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bbc:	2201      	movs	r2, #1
 8006bbe:	409a      	lsls	r2, r3
 8006bc0:	4b11      	ldr	r3, [pc, #68]	; (8006c08 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	4313      	orrs	r3, r2
 8006bc6:	4a10      	ldr	r2, [pc, #64]	; (8006c08 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8006bc8:	6013      	str	r3, [r2, #0]
 8006bca:	697b      	ldr	r3, [r7, #20]
 8006bcc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bce:	4613      	mov	r3, r2
 8006bd0:	009b      	lsls	r3, r3, #2
 8006bd2:	4413      	add	r3, r2
 8006bd4:	009b      	lsls	r3, r3, #2
 8006bd6:	4a0d      	ldr	r2, [pc, #52]	; (8006c0c <vTaskRemoveFromUnorderedEventList+0xb8>)
 8006bd8:	441a      	add	r2, r3
 8006bda:	697b      	ldr	r3, [r7, #20]
 8006bdc:	3304      	adds	r3, #4
 8006bde:	4619      	mov	r1, r3
 8006be0:	4610      	mov	r0, r2
 8006be2:	f7fe f9ec 	bl	8004fbe <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006be6:	697b      	ldr	r3, [r7, #20]
 8006be8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bea:	4b09      	ldr	r3, [pc, #36]	; (8006c10 <vTaskRemoveFromUnorderedEventList+0xbc>)
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bf0:	429a      	cmp	r2, r3
 8006bf2:	d902      	bls.n	8006bfa <vTaskRemoveFromUnorderedEventList+0xa6>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 8006bf4:	4b07      	ldr	r3, [pc, #28]	; (8006c14 <vTaskRemoveFromUnorderedEventList+0xc0>)
 8006bf6:	2201      	movs	r2, #1
 8006bf8:	601a      	str	r2, [r3, #0]
	}
}
 8006bfa:	bf00      	nop
 8006bfc:	3718      	adds	r7, #24
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	bd80      	pop	{r7, pc}
 8006c02:	bf00      	nop
 8006c04:	200007c4 	.word	0x200007c4
 8006c08:	200007a4 	.word	0x200007a4
 8006c0c:	200006a0 	.word	0x200006a0
 8006c10:	2000069c 	.word	0x2000069c
 8006c14:	200007b0 	.word	0x200007b0

08006c18 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006c18:	b480      	push	{r7}
 8006c1a:	b083      	sub	sp, #12
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006c20:	4b06      	ldr	r3, [pc, #24]	; (8006c3c <vTaskInternalSetTimeOutState+0x24>)
 8006c22:	681a      	ldr	r2, [r3, #0]
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006c28:	4b05      	ldr	r3, [pc, #20]	; (8006c40 <vTaskInternalSetTimeOutState+0x28>)
 8006c2a:	681a      	ldr	r2, [r3, #0]
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	605a      	str	r2, [r3, #4]
}
 8006c30:	bf00      	nop
 8006c32:	370c      	adds	r7, #12
 8006c34:	46bd      	mov	sp, r7
 8006c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3a:	4770      	bx	lr
 8006c3c:	200007b4 	.word	0x200007b4
 8006c40:	200007a0 	.word	0x200007a0

08006c44 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006c44:	b580      	push	{r7, lr}
 8006c46:	b088      	sub	sp, #32
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	6078      	str	r0, [r7, #4]
 8006c4c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d10a      	bne.n	8006c6a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8006c54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c58:	f383 8811 	msr	BASEPRI, r3
 8006c5c:	f3bf 8f6f 	isb	sy
 8006c60:	f3bf 8f4f 	dsb	sy
 8006c64:	613b      	str	r3, [r7, #16]
}
 8006c66:	bf00      	nop
 8006c68:	e7fe      	b.n	8006c68 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006c6a:	683b      	ldr	r3, [r7, #0]
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d10a      	bne.n	8006c86 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006c70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c74:	f383 8811 	msr	BASEPRI, r3
 8006c78:	f3bf 8f6f 	isb	sy
 8006c7c:	f3bf 8f4f 	dsb	sy
 8006c80:	60fb      	str	r3, [r7, #12]
}
 8006c82:	bf00      	nop
 8006c84:	e7fe      	b.n	8006c84 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8006c86:	f001 f8f5 	bl	8007e74 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006c8a:	4b1d      	ldr	r3, [pc, #116]	; (8006d00 <xTaskCheckForTimeOut+0xbc>)
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	685b      	ldr	r3, [r3, #4]
 8006c94:	69ba      	ldr	r2, [r7, #24]
 8006c96:	1ad3      	subs	r3, r2, r3
 8006c98:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006c9a:	683b      	ldr	r3, [r7, #0]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ca2:	d102      	bne.n	8006caa <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006ca4:	2300      	movs	r3, #0
 8006ca6:	61fb      	str	r3, [r7, #28]
 8006ca8:	e023      	b.n	8006cf2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681a      	ldr	r2, [r3, #0]
 8006cae:	4b15      	ldr	r3, [pc, #84]	; (8006d04 <xTaskCheckForTimeOut+0xc0>)
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	429a      	cmp	r2, r3
 8006cb4:	d007      	beq.n	8006cc6 <xTaskCheckForTimeOut+0x82>
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	685b      	ldr	r3, [r3, #4]
 8006cba:	69ba      	ldr	r2, [r7, #24]
 8006cbc:	429a      	cmp	r2, r3
 8006cbe:	d302      	bcc.n	8006cc6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006cc0:	2301      	movs	r3, #1
 8006cc2:	61fb      	str	r3, [r7, #28]
 8006cc4:	e015      	b.n	8006cf2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006cc6:	683b      	ldr	r3, [r7, #0]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	697a      	ldr	r2, [r7, #20]
 8006ccc:	429a      	cmp	r2, r3
 8006cce:	d20b      	bcs.n	8006ce8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006cd0:	683b      	ldr	r3, [r7, #0]
 8006cd2:	681a      	ldr	r2, [r3, #0]
 8006cd4:	697b      	ldr	r3, [r7, #20]
 8006cd6:	1ad2      	subs	r2, r2, r3
 8006cd8:	683b      	ldr	r3, [r7, #0]
 8006cda:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006cdc:	6878      	ldr	r0, [r7, #4]
 8006cde:	f7ff ff9b 	bl	8006c18 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006ce2:	2300      	movs	r3, #0
 8006ce4:	61fb      	str	r3, [r7, #28]
 8006ce6:	e004      	b.n	8006cf2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8006ce8:	683b      	ldr	r3, [r7, #0]
 8006cea:	2200      	movs	r2, #0
 8006cec:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006cee:	2301      	movs	r3, #1
 8006cf0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006cf2:	f001 f8ef 	bl	8007ed4 <vPortExitCritical>

	return xReturn;
 8006cf6:	69fb      	ldr	r3, [r7, #28]
}
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	3720      	adds	r7, #32
 8006cfc:	46bd      	mov	sp, r7
 8006cfe:	bd80      	pop	{r7, pc}
 8006d00:	200007a0 	.word	0x200007a0
 8006d04:	200007b4 	.word	0x200007b4

08006d08 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006d08:	b480      	push	{r7}
 8006d0a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006d0c:	4b03      	ldr	r3, [pc, #12]	; (8006d1c <vTaskMissedYield+0x14>)
 8006d0e:	2201      	movs	r2, #1
 8006d10:	601a      	str	r2, [r3, #0]
}
 8006d12:	bf00      	nop
 8006d14:	46bd      	mov	sp, r7
 8006d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d1a:	4770      	bx	lr
 8006d1c:	200007b0 	.word	0x200007b0

08006d20 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006d20:	b580      	push	{r7, lr}
 8006d22:	b082      	sub	sp, #8
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006d28:	f000 f854 	bl	8006dd4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006d2c:	4b07      	ldr	r3, [pc, #28]	; (8006d4c <prvIdleTask+0x2c>)
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	2b01      	cmp	r3, #1
 8006d32:	d907      	bls.n	8006d44 <prvIdleTask+0x24>
			{
				taskYIELD();
 8006d34:	4b06      	ldr	r3, [pc, #24]	; (8006d50 <prvIdleTask+0x30>)
 8006d36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d3a:	601a      	str	r2, [r3, #0]
 8006d3c:	f3bf 8f4f 	dsb	sy
 8006d40:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 8006d44:	f7f9 fa9c 	bl	8000280 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8006d48:	e7ee      	b.n	8006d28 <prvIdleTask+0x8>
 8006d4a:	bf00      	nop
 8006d4c:	200006a0 	.word	0x200006a0
 8006d50:	e000ed04 	.word	0xe000ed04

08006d54 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006d54:	b580      	push	{r7, lr}
 8006d56:	b082      	sub	sp, #8
 8006d58:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006d5a:	2300      	movs	r3, #0
 8006d5c:	607b      	str	r3, [r7, #4]
 8006d5e:	e00c      	b.n	8006d7a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006d60:	687a      	ldr	r2, [r7, #4]
 8006d62:	4613      	mov	r3, r2
 8006d64:	009b      	lsls	r3, r3, #2
 8006d66:	4413      	add	r3, r2
 8006d68:	009b      	lsls	r3, r3, #2
 8006d6a:	4a12      	ldr	r2, [pc, #72]	; (8006db4 <prvInitialiseTaskLists+0x60>)
 8006d6c:	4413      	add	r3, r2
 8006d6e:	4618      	mov	r0, r3
 8006d70:	f7fe f8f8 	bl	8004f64 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	3301      	adds	r3, #1
 8006d78:	607b      	str	r3, [r7, #4]
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	2b06      	cmp	r3, #6
 8006d7e:	d9ef      	bls.n	8006d60 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006d80:	480d      	ldr	r0, [pc, #52]	; (8006db8 <prvInitialiseTaskLists+0x64>)
 8006d82:	f7fe f8ef 	bl	8004f64 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006d86:	480d      	ldr	r0, [pc, #52]	; (8006dbc <prvInitialiseTaskLists+0x68>)
 8006d88:	f7fe f8ec 	bl	8004f64 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006d8c:	480c      	ldr	r0, [pc, #48]	; (8006dc0 <prvInitialiseTaskLists+0x6c>)
 8006d8e:	f7fe f8e9 	bl	8004f64 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006d92:	480c      	ldr	r0, [pc, #48]	; (8006dc4 <prvInitialiseTaskLists+0x70>)
 8006d94:	f7fe f8e6 	bl	8004f64 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006d98:	480b      	ldr	r0, [pc, #44]	; (8006dc8 <prvInitialiseTaskLists+0x74>)
 8006d9a:	f7fe f8e3 	bl	8004f64 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006d9e:	4b0b      	ldr	r3, [pc, #44]	; (8006dcc <prvInitialiseTaskLists+0x78>)
 8006da0:	4a05      	ldr	r2, [pc, #20]	; (8006db8 <prvInitialiseTaskLists+0x64>)
 8006da2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006da4:	4b0a      	ldr	r3, [pc, #40]	; (8006dd0 <prvInitialiseTaskLists+0x7c>)
 8006da6:	4a05      	ldr	r2, [pc, #20]	; (8006dbc <prvInitialiseTaskLists+0x68>)
 8006da8:	601a      	str	r2, [r3, #0]
}
 8006daa:	bf00      	nop
 8006dac:	3708      	adds	r7, #8
 8006dae:	46bd      	mov	sp, r7
 8006db0:	bd80      	pop	{r7, pc}
 8006db2:	bf00      	nop
 8006db4:	200006a0 	.word	0x200006a0
 8006db8:	2000072c 	.word	0x2000072c
 8006dbc:	20000740 	.word	0x20000740
 8006dc0:	2000075c 	.word	0x2000075c
 8006dc4:	20000770 	.word	0x20000770
 8006dc8:	20000788 	.word	0x20000788
 8006dcc:	20000754 	.word	0x20000754
 8006dd0:	20000758 	.word	0x20000758

08006dd4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006dd4:	b580      	push	{r7, lr}
 8006dd6:	b082      	sub	sp, #8
 8006dd8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006dda:	e019      	b.n	8006e10 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006ddc:	f001 f84a 	bl	8007e74 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8006de0:	4b10      	ldr	r3, [pc, #64]	; (8006e24 <prvCheckTasksWaitingTermination+0x50>)
 8006de2:	68db      	ldr	r3, [r3, #12]
 8006de4:	68db      	ldr	r3, [r3, #12]
 8006de6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	3304      	adds	r3, #4
 8006dec:	4618      	mov	r0, r3
 8006dee:	f7fe f943 	bl	8005078 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006df2:	4b0d      	ldr	r3, [pc, #52]	; (8006e28 <prvCheckTasksWaitingTermination+0x54>)
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	3b01      	subs	r3, #1
 8006df8:	4a0b      	ldr	r2, [pc, #44]	; (8006e28 <prvCheckTasksWaitingTermination+0x54>)
 8006dfa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006dfc:	4b0b      	ldr	r3, [pc, #44]	; (8006e2c <prvCheckTasksWaitingTermination+0x58>)
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	3b01      	subs	r3, #1
 8006e02:	4a0a      	ldr	r2, [pc, #40]	; (8006e2c <prvCheckTasksWaitingTermination+0x58>)
 8006e04:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006e06:	f001 f865 	bl	8007ed4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006e0a:	6878      	ldr	r0, [r7, #4]
 8006e0c:	f000 f810 	bl	8006e30 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006e10:	4b06      	ldr	r3, [pc, #24]	; (8006e2c <prvCheckTasksWaitingTermination+0x58>)
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d1e1      	bne.n	8006ddc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006e18:	bf00      	nop
 8006e1a:	bf00      	nop
 8006e1c:	3708      	adds	r7, #8
 8006e1e:	46bd      	mov	sp, r7
 8006e20:	bd80      	pop	{r7, pc}
 8006e22:	bf00      	nop
 8006e24:	20000770 	.word	0x20000770
 8006e28:	2000079c 	.word	0x2000079c
 8006e2c:	20000784 	.word	0x20000784

08006e30 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006e30:	b580      	push	{r7, lr}
 8006e32:	b084      	sub	sp, #16
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	3350      	adds	r3, #80	; 0x50
 8006e3c:	4618      	mov	r0, r3
 8006e3e:	f001 fc29 	bl	8008694 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	f893 30b5 	ldrb.w	r3, [r3, #181]	; 0xb5
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d108      	bne.n	8006e5e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e50:	4618      	mov	r0, r3
 8006e52:	f001 f9f5 	bl	8008240 <vPortFree>
				vPortFree( pxTCB );
 8006e56:	6878      	ldr	r0, [r7, #4]
 8006e58:	f001 f9f2 	bl	8008240 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006e5c:	e018      	b.n	8006e90 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	f893 30b5 	ldrb.w	r3, [r3, #181]	; 0xb5
 8006e64:	2b01      	cmp	r3, #1
 8006e66:	d103      	bne.n	8006e70 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006e68:	6878      	ldr	r0, [r7, #4]
 8006e6a:	f001 f9e9 	bl	8008240 <vPortFree>
	}
 8006e6e:	e00f      	b.n	8006e90 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	f893 30b5 	ldrb.w	r3, [r3, #181]	; 0xb5
 8006e76:	2b02      	cmp	r3, #2
 8006e78:	d00a      	beq.n	8006e90 <prvDeleteTCB+0x60>
	__asm volatile
 8006e7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e7e:	f383 8811 	msr	BASEPRI, r3
 8006e82:	f3bf 8f6f 	isb	sy
 8006e86:	f3bf 8f4f 	dsb	sy
 8006e8a:	60fb      	str	r3, [r7, #12]
}
 8006e8c:	bf00      	nop
 8006e8e:	e7fe      	b.n	8006e8e <prvDeleteTCB+0x5e>
	}
 8006e90:	bf00      	nop
 8006e92:	3710      	adds	r7, #16
 8006e94:	46bd      	mov	sp, r7
 8006e96:	bd80      	pop	{r7, pc}

08006e98 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006e98:	b480      	push	{r7}
 8006e9a:	b083      	sub	sp, #12
 8006e9c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006e9e:	4b0f      	ldr	r3, [pc, #60]	; (8006edc <prvResetNextTaskUnblockTime+0x44>)
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d101      	bne.n	8006eac <prvResetNextTaskUnblockTime+0x14>
 8006ea8:	2301      	movs	r3, #1
 8006eaa:	e000      	b.n	8006eae <prvResetNextTaskUnblockTime+0x16>
 8006eac:	2300      	movs	r3, #0
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d004      	beq.n	8006ebc <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006eb2:	4b0b      	ldr	r3, [pc, #44]	; (8006ee0 <prvResetNextTaskUnblockTime+0x48>)
 8006eb4:	f04f 32ff 	mov.w	r2, #4294967295
 8006eb8:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006eba:	e008      	b.n	8006ece <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006ebc:	4b07      	ldr	r3, [pc, #28]	; (8006edc <prvResetNextTaskUnblockTime+0x44>)
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	68db      	ldr	r3, [r3, #12]
 8006ec2:	68db      	ldr	r3, [r3, #12]
 8006ec4:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	685b      	ldr	r3, [r3, #4]
 8006eca:	4a05      	ldr	r2, [pc, #20]	; (8006ee0 <prvResetNextTaskUnblockTime+0x48>)
 8006ecc:	6013      	str	r3, [r2, #0]
}
 8006ece:	bf00      	nop
 8006ed0:	370c      	adds	r7, #12
 8006ed2:	46bd      	mov	sp, r7
 8006ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed8:	4770      	bx	lr
 8006eda:	bf00      	nop
 8006edc:	20000754 	.word	0x20000754
 8006ee0:	200007bc 	.word	0x200007bc

08006ee4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006ee4:	b480      	push	{r7}
 8006ee6:	b083      	sub	sp, #12
 8006ee8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006eea:	4b0b      	ldr	r3, [pc, #44]	; (8006f18 <xTaskGetSchedulerState+0x34>)
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d102      	bne.n	8006ef8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006ef2:	2301      	movs	r3, #1
 8006ef4:	607b      	str	r3, [r7, #4]
 8006ef6:	e008      	b.n	8006f0a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006ef8:	4b08      	ldr	r3, [pc, #32]	; (8006f1c <xTaskGetSchedulerState+0x38>)
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d102      	bne.n	8006f06 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006f00:	2302      	movs	r3, #2
 8006f02:	607b      	str	r3, [r7, #4]
 8006f04:	e001      	b.n	8006f0a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006f06:	2300      	movs	r3, #0
 8006f08:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006f0a:	687b      	ldr	r3, [r7, #4]
	}
 8006f0c:	4618      	mov	r0, r3
 8006f0e:	370c      	adds	r7, #12
 8006f10:	46bd      	mov	sp, r7
 8006f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f16:	4770      	bx	lr
 8006f18:	200007a8 	.word	0x200007a8
 8006f1c:	200007c4 	.word	0x200007c4

08006f20 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8006f20:	b580      	push	{r7, lr}
 8006f22:	b084      	sub	sp, #16
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8006f2c:	2300      	movs	r3, #0
 8006f2e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d06e      	beq.n	8007014 <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8006f36:	68bb      	ldr	r3, [r7, #8]
 8006f38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f3a:	4b39      	ldr	r3, [pc, #228]	; (8007020 <xTaskPriorityInherit+0x100>)
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f40:	429a      	cmp	r2, r3
 8006f42:	d25e      	bcs.n	8007002 <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006f44:	68bb      	ldr	r3, [r7, #8]
 8006f46:	699b      	ldr	r3, [r3, #24]
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	db06      	blt.n	8006f5a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006f4c:	4b34      	ldr	r3, [pc, #208]	; (8007020 <xTaskPriorityInherit+0x100>)
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f52:	f1c3 0207 	rsb	r2, r3, #7
 8006f56:	68bb      	ldr	r3, [r7, #8]
 8006f58:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8006f5a:	68bb      	ldr	r3, [r7, #8]
 8006f5c:	6959      	ldr	r1, [r3, #20]
 8006f5e:	68bb      	ldr	r3, [r7, #8]
 8006f60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f62:	4613      	mov	r3, r2
 8006f64:	009b      	lsls	r3, r3, #2
 8006f66:	4413      	add	r3, r2
 8006f68:	009b      	lsls	r3, r3, #2
 8006f6a:	4a2e      	ldr	r2, [pc, #184]	; (8007024 <xTaskPriorityInherit+0x104>)
 8006f6c:	4413      	add	r3, r2
 8006f6e:	4299      	cmp	r1, r3
 8006f70:	d101      	bne.n	8006f76 <xTaskPriorityInherit+0x56>
 8006f72:	2301      	movs	r3, #1
 8006f74:	e000      	b.n	8006f78 <xTaskPriorityInherit+0x58>
 8006f76:	2300      	movs	r3, #0
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d03a      	beq.n	8006ff2 <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006f7c:	68bb      	ldr	r3, [r7, #8]
 8006f7e:	3304      	adds	r3, #4
 8006f80:	4618      	mov	r0, r3
 8006f82:	f7fe f879 	bl	8005078 <uxListRemove>
 8006f86:	4603      	mov	r3, r0
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d115      	bne.n	8006fb8 <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8006f8c:	68bb      	ldr	r3, [r7, #8]
 8006f8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f90:	4924      	ldr	r1, [pc, #144]	; (8007024 <xTaskPriorityInherit+0x104>)
 8006f92:	4613      	mov	r3, r2
 8006f94:	009b      	lsls	r3, r3, #2
 8006f96:	4413      	add	r3, r2
 8006f98:	009b      	lsls	r3, r3, #2
 8006f9a:	440b      	add	r3, r1
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d10a      	bne.n	8006fb8 <xTaskPriorityInherit+0x98>
 8006fa2:	68bb      	ldr	r3, [r7, #8]
 8006fa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fa6:	2201      	movs	r2, #1
 8006fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8006fac:	43da      	mvns	r2, r3
 8006fae:	4b1e      	ldr	r3, [pc, #120]	; (8007028 <xTaskPriorityInherit+0x108>)
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	4013      	ands	r3, r2
 8006fb4:	4a1c      	ldr	r2, [pc, #112]	; (8007028 <xTaskPriorityInherit+0x108>)
 8006fb6:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006fb8:	4b19      	ldr	r3, [pc, #100]	; (8007020 <xTaskPriorityInherit+0x100>)
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fbe:	68bb      	ldr	r3, [r7, #8]
 8006fc0:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8006fc2:	68bb      	ldr	r3, [r7, #8]
 8006fc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fc6:	2201      	movs	r2, #1
 8006fc8:	409a      	lsls	r2, r3
 8006fca:	4b17      	ldr	r3, [pc, #92]	; (8007028 <xTaskPriorityInherit+0x108>)
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	4313      	orrs	r3, r2
 8006fd0:	4a15      	ldr	r2, [pc, #84]	; (8007028 <xTaskPriorityInherit+0x108>)
 8006fd2:	6013      	str	r3, [r2, #0]
 8006fd4:	68bb      	ldr	r3, [r7, #8]
 8006fd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fd8:	4613      	mov	r3, r2
 8006fda:	009b      	lsls	r3, r3, #2
 8006fdc:	4413      	add	r3, r2
 8006fde:	009b      	lsls	r3, r3, #2
 8006fe0:	4a10      	ldr	r2, [pc, #64]	; (8007024 <xTaskPriorityInherit+0x104>)
 8006fe2:	441a      	add	r2, r3
 8006fe4:	68bb      	ldr	r3, [r7, #8]
 8006fe6:	3304      	adds	r3, #4
 8006fe8:	4619      	mov	r1, r3
 8006fea:	4610      	mov	r0, r2
 8006fec:	f7fd ffe7 	bl	8004fbe <vListInsertEnd>
 8006ff0:	e004      	b.n	8006ffc <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006ff2:	4b0b      	ldr	r3, [pc, #44]	; (8007020 <xTaskPriorityInherit+0x100>)
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ff8:	68bb      	ldr	r3, [r7, #8]
 8006ffa:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8006ffc:	2301      	movs	r3, #1
 8006ffe:	60fb      	str	r3, [r7, #12]
 8007000:	e008      	b.n	8007014 <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8007002:	68bb      	ldr	r3, [r7, #8]
 8007004:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007006:	4b06      	ldr	r3, [pc, #24]	; (8007020 <xTaskPriorityInherit+0x100>)
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800700c:	429a      	cmp	r2, r3
 800700e:	d201      	bcs.n	8007014 <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8007010:	2301      	movs	r3, #1
 8007012:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007014:	68fb      	ldr	r3, [r7, #12]
	}
 8007016:	4618      	mov	r0, r3
 8007018:	3710      	adds	r7, #16
 800701a:	46bd      	mov	sp, r7
 800701c:	bd80      	pop	{r7, pc}
 800701e:	bf00      	nop
 8007020:	2000069c 	.word	0x2000069c
 8007024:	200006a0 	.word	0x200006a0
 8007028:	200007a4 	.word	0x200007a4

0800702c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800702c:	b580      	push	{r7, lr}
 800702e:	b086      	sub	sp, #24
 8007030:	af00      	add	r7, sp, #0
 8007032:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007038:	2300      	movs	r3, #0
 800703a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	2b00      	cmp	r3, #0
 8007040:	d06e      	beq.n	8007120 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007042:	4b3a      	ldr	r3, [pc, #232]	; (800712c <xTaskPriorityDisinherit+0x100>)
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	693a      	ldr	r2, [r7, #16]
 8007048:	429a      	cmp	r2, r3
 800704a:	d00a      	beq.n	8007062 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800704c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007050:	f383 8811 	msr	BASEPRI, r3
 8007054:	f3bf 8f6f 	isb	sy
 8007058:	f3bf 8f4f 	dsb	sy
 800705c:	60fb      	str	r3, [r7, #12]
}
 800705e:	bf00      	nop
 8007060:	e7fe      	b.n	8007060 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007062:	693b      	ldr	r3, [r7, #16]
 8007064:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007066:	2b00      	cmp	r3, #0
 8007068:	d10a      	bne.n	8007080 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800706a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800706e:	f383 8811 	msr	BASEPRI, r3
 8007072:	f3bf 8f6f 	isb	sy
 8007076:	f3bf 8f4f 	dsb	sy
 800707a:	60bb      	str	r3, [r7, #8]
}
 800707c:	bf00      	nop
 800707e:	e7fe      	b.n	800707e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8007080:	693b      	ldr	r3, [r7, #16]
 8007082:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007084:	1e5a      	subs	r2, r3, #1
 8007086:	693b      	ldr	r3, [r7, #16]
 8007088:	64da      	str	r2, [r3, #76]	; 0x4c

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800708a:	693b      	ldr	r3, [r7, #16]
 800708c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800708e:	693b      	ldr	r3, [r7, #16]
 8007090:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007092:	429a      	cmp	r2, r3
 8007094:	d044      	beq.n	8007120 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007096:	693b      	ldr	r3, [r7, #16]
 8007098:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800709a:	2b00      	cmp	r3, #0
 800709c:	d140      	bne.n	8007120 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800709e:	693b      	ldr	r3, [r7, #16]
 80070a0:	3304      	adds	r3, #4
 80070a2:	4618      	mov	r0, r3
 80070a4:	f7fd ffe8 	bl	8005078 <uxListRemove>
 80070a8:	4603      	mov	r3, r0
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d115      	bne.n	80070da <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80070ae:	693b      	ldr	r3, [r7, #16]
 80070b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070b2:	491f      	ldr	r1, [pc, #124]	; (8007130 <xTaskPriorityDisinherit+0x104>)
 80070b4:	4613      	mov	r3, r2
 80070b6:	009b      	lsls	r3, r3, #2
 80070b8:	4413      	add	r3, r2
 80070ba:	009b      	lsls	r3, r3, #2
 80070bc:	440b      	add	r3, r1
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d10a      	bne.n	80070da <xTaskPriorityDisinherit+0xae>
 80070c4:	693b      	ldr	r3, [r7, #16]
 80070c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070c8:	2201      	movs	r2, #1
 80070ca:	fa02 f303 	lsl.w	r3, r2, r3
 80070ce:	43da      	mvns	r2, r3
 80070d0:	4b18      	ldr	r3, [pc, #96]	; (8007134 <xTaskPriorityDisinherit+0x108>)
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	4013      	ands	r3, r2
 80070d6:	4a17      	ldr	r2, [pc, #92]	; (8007134 <xTaskPriorityDisinherit+0x108>)
 80070d8:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80070da:	693b      	ldr	r3, [r7, #16]
 80070dc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80070de:	693b      	ldr	r3, [r7, #16]
 80070e0:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80070e2:	693b      	ldr	r3, [r7, #16]
 80070e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070e6:	f1c3 0207 	rsb	r2, r3, #7
 80070ea:	693b      	ldr	r3, [r7, #16]
 80070ec:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80070ee:	693b      	ldr	r3, [r7, #16]
 80070f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070f2:	2201      	movs	r2, #1
 80070f4:	409a      	lsls	r2, r3
 80070f6:	4b0f      	ldr	r3, [pc, #60]	; (8007134 <xTaskPriorityDisinherit+0x108>)
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	4313      	orrs	r3, r2
 80070fc:	4a0d      	ldr	r2, [pc, #52]	; (8007134 <xTaskPriorityDisinherit+0x108>)
 80070fe:	6013      	str	r3, [r2, #0]
 8007100:	693b      	ldr	r3, [r7, #16]
 8007102:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007104:	4613      	mov	r3, r2
 8007106:	009b      	lsls	r3, r3, #2
 8007108:	4413      	add	r3, r2
 800710a:	009b      	lsls	r3, r3, #2
 800710c:	4a08      	ldr	r2, [pc, #32]	; (8007130 <xTaskPriorityDisinherit+0x104>)
 800710e:	441a      	add	r2, r3
 8007110:	693b      	ldr	r3, [r7, #16]
 8007112:	3304      	adds	r3, #4
 8007114:	4619      	mov	r1, r3
 8007116:	4610      	mov	r0, r2
 8007118:	f7fd ff51 	bl	8004fbe <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800711c:	2301      	movs	r3, #1
 800711e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007120:	697b      	ldr	r3, [r7, #20]
	}
 8007122:	4618      	mov	r0, r3
 8007124:	3718      	adds	r7, #24
 8007126:	46bd      	mov	sp, r7
 8007128:	bd80      	pop	{r7, pc}
 800712a:	bf00      	nop
 800712c:	2000069c 	.word	0x2000069c
 8007130:	200006a0 	.word	0x200006a0
 8007134:	200007a4 	.word	0x200007a4

08007138 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8007138:	b580      	push	{r7, lr}
 800713a:	b088      	sub	sp, #32
 800713c:	af00      	add	r7, sp, #0
 800713e:	6078      	str	r0, [r7, #4]
 8007140:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8007146:	2301      	movs	r3, #1
 8007148:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	2b00      	cmp	r3, #0
 800714e:	f000 8088 	beq.w	8007262 <vTaskPriorityDisinheritAfterTimeout+0x12a>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8007152:	69bb      	ldr	r3, [r7, #24]
 8007154:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007156:	2b00      	cmp	r3, #0
 8007158:	d10a      	bne.n	8007170 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800715a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800715e:	f383 8811 	msr	BASEPRI, r3
 8007162:	f3bf 8f6f 	isb	sy
 8007166:	f3bf 8f4f 	dsb	sy
 800716a:	60fb      	str	r3, [r7, #12]
}
 800716c:	bf00      	nop
 800716e:	e7fe      	b.n	800716e <vTaskPriorityDisinheritAfterTimeout+0x36>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8007170:	69bb      	ldr	r3, [r7, #24]
 8007172:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007174:	683a      	ldr	r2, [r7, #0]
 8007176:	429a      	cmp	r2, r3
 8007178:	d902      	bls.n	8007180 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800717a:	683b      	ldr	r3, [r7, #0]
 800717c:	61fb      	str	r3, [r7, #28]
 800717e:	e002      	b.n	8007186 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8007180:	69bb      	ldr	r3, [r7, #24]
 8007182:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007184:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8007186:	69bb      	ldr	r3, [r7, #24]
 8007188:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800718a:	69fa      	ldr	r2, [r7, #28]
 800718c:	429a      	cmp	r2, r3
 800718e:	d068      	beq.n	8007262 <vTaskPriorityDisinheritAfterTimeout+0x12a>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8007190:	69bb      	ldr	r3, [r7, #24]
 8007192:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007194:	697a      	ldr	r2, [r7, #20]
 8007196:	429a      	cmp	r2, r3
 8007198:	d163      	bne.n	8007262 <vTaskPriorityDisinheritAfterTimeout+0x12a>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800719a:	4b34      	ldr	r3, [pc, #208]	; (800726c <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	69ba      	ldr	r2, [r7, #24]
 80071a0:	429a      	cmp	r2, r3
 80071a2:	d10a      	bne.n	80071ba <vTaskPriorityDisinheritAfterTimeout+0x82>
	__asm volatile
 80071a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071a8:	f383 8811 	msr	BASEPRI, r3
 80071ac:	f3bf 8f6f 	isb	sy
 80071b0:	f3bf 8f4f 	dsb	sy
 80071b4:	60bb      	str	r3, [r7, #8]
}
 80071b6:	bf00      	nop
 80071b8:	e7fe      	b.n	80071b8 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80071ba:	69bb      	ldr	r3, [r7, #24]
 80071bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071be:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80071c0:	69bb      	ldr	r3, [r7, #24]
 80071c2:	69fa      	ldr	r2, [r7, #28]
 80071c4:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80071c6:	69bb      	ldr	r3, [r7, #24]
 80071c8:	699b      	ldr	r3, [r3, #24]
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	db04      	blt.n	80071d8 <vTaskPriorityDisinheritAfterTimeout+0xa0>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80071ce:	69fb      	ldr	r3, [r7, #28]
 80071d0:	f1c3 0207 	rsb	r2, r3, #7
 80071d4:	69bb      	ldr	r3, [r7, #24]
 80071d6:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80071d8:	69bb      	ldr	r3, [r7, #24]
 80071da:	6959      	ldr	r1, [r3, #20]
 80071dc:	693a      	ldr	r2, [r7, #16]
 80071de:	4613      	mov	r3, r2
 80071e0:	009b      	lsls	r3, r3, #2
 80071e2:	4413      	add	r3, r2
 80071e4:	009b      	lsls	r3, r3, #2
 80071e6:	4a22      	ldr	r2, [pc, #136]	; (8007270 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80071e8:	4413      	add	r3, r2
 80071ea:	4299      	cmp	r1, r3
 80071ec:	d101      	bne.n	80071f2 <vTaskPriorityDisinheritAfterTimeout+0xba>
 80071ee:	2301      	movs	r3, #1
 80071f0:	e000      	b.n	80071f4 <vTaskPriorityDisinheritAfterTimeout+0xbc>
 80071f2:	2300      	movs	r3, #0
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d034      	beq.n	8007262 <vTaskPriorityDisinheritAfterTimeout+0x12a>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80071f8:	69bb      	ldr	r3, [r7, #24]
 80071fa:	3304      	adds	r3, #4
 80071fc:	4618      	mov	r0, r3
 80071fe:	f7fd ff3b 	bl	8005078 <uxListRemove>
 8007202:	4603      	mov	r3, r0
 8007204:	2b00      	cmp	r3, #0
 8007206:	d115      	bne.n	8007234 <vTaskPriorityDisinheritAfterTimeout+0xfc>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8007208:	69bb      	ldr	r3, [r7, #24]
 800720a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800720c:	4918      	ldr	r1, [pc, #96]	; (8007270 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800720e:	4613      	mov	r3, r2
 8007210:	009b      	lsls	r3, r3, #2
 8007212:	4413      	add	r3, r2
 8007214:	009b      	lsls	r3, r3, #2
 8007216:	440b      	add	r3, r1
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	2b00      	cmp	r3, #0
 800721c:	d10a      	bne.n	8007234 <vTaskPriorityDisinheritAfterTimeout+0xfc>
 800721e:	69bb      	ldr	r3, [r7, #24]
 8007220:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007222:	2201      	movs	r2, #1
 8007224:	fa02 f303 	lsl.w	r3, r2, r3
 8007228:	43da      	mvns	r2, r3
 800722a:	4b12      	ldr	r3, [pc, #72]	; (8007274 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	4013      	ands	r3, r2
 8007230:	4a10      	ldr	r2, [pc, #64]	; (8007274 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8007232:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8007234:	69bb      	ldr	r3, [r7, #24]
 8007236:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007238:	2201      	movs	r2, #1
 800723a:	409a      	lsls	r2, r3
 800723c:	4b0d      	ldr	r3, [pc, #52]	; (8007274 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	4313      	orrs	r3, r2
 8007242:	4a0c      	ldr	r2, [pc, #48]	; (8007274 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8007244:	6013      	str	r3, [r2, #0]
 8007246:	69bb      	ldr	r3, [r7, #24]
 8007248:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800724a:	4613      	mov	r3, r2
 800724c:	009b      	lsls	r3, r3, #2
 800724e:	4413      	add	r3, r2
 8007250:	009b      	lsls	r3, r3, #2
 8007252:	4a07      	ldr	r2, [pc, #28]	; (8007270 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8007254:	441a      	add	r2, r3
 8007256:	69bb      	ldr	r3, [r7, #24]
 8007258:	3304      	adds	r3, #4
 800725a:	4619      	mov	r1, r3
 800725c:	4610      	mov	r0, r2
 800725e:	f7fd feae 	bl	8004fbe <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007262:	bf00      	nop
 8007264:	3720      	adds	r7, #32
 8007266:	46bd      	mov	sp, r7
 8007268:	bd80      	pop	{r7, pc}
 800726a:	bf00      	nop
 800726c:	2000069c 	.word	0x2000069c
 8007270:	200006a0 	.word	0x200006a0
 8007274:	200007a4 	.word	0x200007a4

08007278 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 8007278:	b480      	push	{r7}
 800727a:	b083      	sub	sp, #12
 800727c:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 800727e:	4b09      	ldr	r3, [pc, #36]	; (80072a4 <uxTaskResetEventItemValue+0x2c>)
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	699b      	ldr	r3, [r3, #24]
 8007284:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007286:	4b07      	ldr	r3, [pc, #28]	; (80072a4 <uxTaskResetEventItemValue+0x2c>)
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800728c:	4b05      	ldr	r3, [pc, #20]	; (80072a4 <uxTaskResetEventItemValue+0x2c>)
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	f1c2 0207 	rsb	r2, r2, #7
 8007294:	619a      	str	r2, [r3, #24]

	return uxReturn;
 8007296:	687b      	ldr	r3, [r7, #4]
}
 8007298:	4618      	mov	r0, r3
 800729a:	370c      	adds	r7, #12
 800729c:	46bd      	mov	sp, r7
 800729e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a2:	4770      	bx	lr
 80072a4:	2000069c 	.word	0x2000069c

080072a8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 80072a8:	b480      	push	{r7}
 80072aa:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80072ac:	4b07      	ldr	r3, [pc, #28]	; (80072cc <pvTaskIncrementMutexHeldCount+0x24>)
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d004      	beq.n	80072be <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80072b4:	4b05      	ldr	r3, [pc, #20]	; (80072cc <pvTaskIncrementMutexHeldCount+0x24>)
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80072ba:	3201      	adds	r2, #1
 80072bc:	64da      	str	r2, [r3, #76]	; 0x4c
		}

		return pxCurrentTCB;
 80072be:	4b03      	ldr	r3, [pc, #12]	; (80072cc <pvTaskIncrementMutexHeldCount+0x24>)
 80072c0:	681b      	ldr	r3, [r3, #0]
	}
 80072c2:	4618      	mov	r0, r3
 80072c4:	46bd      	mov	sp, r7
 80072c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ca:	4770      	bx	lr
 80072cc:	2000069c 	.word	0x2000069c

080072d0 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 80072d0:	b580      	push	{r7, lr}
 80072d2:	b086      	sub	sp, #24
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	60f8      	str	r0, [r7, #12]
 80072d8:	60b9      	str	r1, [r7, #8]
 80072da:	607a      	str	r2, [r7, #4]
 80072dc:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 80072de:	f000 fdc9 	bl	8007e74 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 80072e2:	4b29      	ldr	r3, [pc, #164]	; (8007388 <xTaskNotifyWait+0xb8>)
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	f893 30b4 	ldrb.w	r3, [r3, #180]	; 0xb4
 80072ea:	b2db      	uxtb	r3, r3
 80072ec:	2b02      	cmp	r3, #2
 80072ee:	d01c      	beq.n	800732a <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 80072f0:	4b25      	ldr	r3, [pc, #148]	; (8007388 <xTaskNotifyWait+0xb8>)
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80072f8:	68fa      	ldr	r2, [r7, #12]
 80072fa:	43d2      	mvns	r2, r2
 80072fc:	400a      	ands	r2, r1
 80072fe:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8007302:	4b21      	ldr	r3, [pc, #132]	; (8007388 <xTaskNotifyWait+0xb8>)
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	2201      	movs	r2, #1
 8007308:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4

				if( xTicksToWait > ( TickType_t ) 0 )
 800730c:	683b      	ldr	r3, [r7, #0]
 800730e:	2b00      	cmp	r3, #0
 8007310:	d00b      	beq.n	800732a <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007312:	2101      	movs	r1, #1
 8007314:	6838      	ldr	r0, [r7, #0]
 8007316:	f000 f8e5 	bl	80074e4 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800731a:	4b1c      	ldr	r3, [pc, #112]	; (800738c <xTaskNotifyWait+0xbc>)
 800731c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007320:	601a      	str	r2, [r3, #0]
 8007322:	f3bf 8f4f 	dsb	sy
 8007326:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800732a:	f000 fdd3 	bl	8007ed4 <vPortExitCritical>

		taskENTER_CRITICAL();
 800732e:	f000 fda1 	bl	8007e74 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	2b00      	cmp	r3, #0
 8007336:	d005      	beq.n	8007344 <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8007338:	4b13      	ldr	r3, [pc, #76]	; (8007388 <xTaskNotifyWait+0xb8>)
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8007344:	4b10      	ldr	r3, [pc, #64]	; (8007388 <xTaskNotifyWait+0xb8>)
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	f893 30b4 	ldrb.w	r3, [r3, #180]	; 0xb4
 800734c:	b2db      	uxtb	r3, r3
 800734e:	2b02      	cmp	r3, #2
 8007350:	d002      	beq.n	8007358 <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 8007352:	2300      	movs	r3, #0
 8007354:	617b      	str	r3, [r7, #20]
 8007356:	e00a      	b.n	800736e <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8007358:	4b0b      	ldr	r3, [pc, #44]	; (8007388 <xTaskNotifyWait+0xb8>)
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8007360:	68ba      	ldr	r2, [r7, #8]
 8007362:	43d2      	mvns	r2, r2
 8007364:	400a      	ands	r2, r1
 8007366:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
				xReturn = pdTRUE;
 800736a:	2301      	movs	r3, #1
 800736c:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800736e:	4b06      	ldr	r3, [pc, #24]	; (8007388 <xTaskNotifyWait+0xb8>)
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	2200      	movs	r2, #0
 8007374:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
		}
		taskEXIT_CRITICAL();
 8007378:	f000 fdac 	bl	8007ed4 <vPortExitCritical>

		return xReturn;
 800737c:	697b      	ldr	r3, [r7, #20]
	}
 800737e:	4618      	mov	r0, r3
 8007380:	3718      	adds	r7, #24
 8007382:	46bd      	mov	sp, r7
 8007384:	bd80      	pop	{r7, pc}
 8007386:	bf00      	nop
 8007388:	2000069c 	.word	0x2000069c
 800738c:	e000ed04 	.word	0xe000ed04

08007390 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8007390:	b580      	push	{r7, lr}
 8007392:	b08a      	sub	sp, #40	; 0x28
 8007394:	af00      	add	r7, sp, #0
 8007396:	60f8      	str	r0, [r7, #12]
 8007398:	60b9      	str	r1, [r7, #8]
 800739a:	603b      	str	r3, [r7, #0]
 800739c:	4613      	mov	r3, r2
 800739e:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 80073a0:	2301      	movs	r3, #1
 80073a2:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d10a      	bne.n	80073c0 <xTaskGenericNotify+0x30>
	__asm volatile
 80073aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073ae:	f383 8811 	msr	BASEPRI, r3
 80073b2:	f3bf 8f6f 	isb	sy
 80073b6:	f3bf 8f4f 	dsb	sy
 80073ba:	61bb      	str	r3, [r7, #24]
}
 80073bc:	bf00      	nop
 80073be:	e7fe      	b.n	80073be <xTaskGenericNotify+0x2e>
		pxTCB = ( TCB_t * ) xTaskToNotify;
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 80073c4:	f000 fd56 	bl	8007e74 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 80073c8:	683b      	ldr	r3, [r7, #0]
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d004      	beq.n	80073d8 <xTaskGenericNotify+0x48>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 80073ce:	6a3b      	ldr	r3, [r7, #32]
 80073d0:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80073d4:	683b      	ldr	r3, [r7, #0]
 80073d6:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80073d8:	6a3b      	ldr	r3, [r7, #32]
 80073da:	f893 30b4 	ldrb.w	r3, [r3, #180]	; 0xb4
 80073de:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80073e0:	6a3b      	ldr	r3, [r7, #32]
 80073e2:	2202      	movs	r2, #2
 80073e4:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4

			switch( eAction )
 80073e8:	79fb      	ldrb	r3, [r7, #7]
 80073ea:	2b04      	cmp	r3, #4
 80073ec:	d82d      	bhi.n	800744a <xTaskGenericNotify+0xba>
 80073ee:	a201      	add	r2, pc, #4	; (adr r2, 80073f4 <xTaskGenericNotify+0x64>)
 80073f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073f4:	0800744b 	.word	0x0800744b
 80073f8:	08007409 	.word	0x08007409
 80073fc:	0800741b 	.word	0x0800741b
 8007400:	0800742b 	.word	0x0800742b
 8007404:	08007435 	.word	0x08007435
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8007408:	6a3b      	ldr	r3, [r7, #32]
 800740a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800740e:	68bb      	ldr	r3, [r7, #8]
 8007410:	431a      	orrs	r2, r3
 8007412:	6a3b      	ldr	r3, [r7, #32]
 8007414:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
					break;
 8007418:	e017      	b.n	800744a <xTaskGenericNotify+0xba>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800741a:	6a3b      	ldr	r3, [r7, #32]
 800741c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007420:	1c5a      	adds	r2, r3, #1
 8007422:	6a3b      	ldr	r3, [r7, #32]
 8007424:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
					break;
 8007428:	e00f      	b.n	800744a <xTaskGenericNotify+0xba>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800742a:	6a3b      	ldr	r3, [r7, #32]
 800742c:	68ba      	ldr	r2, [r7, #8]
 800742e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
					break;
 8007432:	e00a      	b.n	800744a <xTaskGenericNotify+0xba>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8007434:	7ffb      	ldrb	r3, [r7, #31]
 8007436:	2b02      	cmp	r3, #2
 8007438:	d004      	beq.n	8007444 <xTaskGenericNotify+0xb4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800743a:	6a3b      	ldr	r3, [r7, #32]
 800743c:	68ba      	ldr	r2, [r7, #8]
 800743e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8007442:	e001      	b.n	8007448 <xTaskGenericNotify+0xb8>
						xReturn = pdFAIL;
 8007444:	2300      	movs	r3, #0
 8007446:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 8007448:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800744a:	7ffb      	ldrb	r3, [r7, #31]
 800744c:	2b01      	cmp	r3, #1
 800744e:	d139      	bne.n	80074c4 <xTaskGenericNotify+0x134>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007450:	6a3b      	ldr	r3, [r7, #32]
 8007452:	3304      	adds	r3, #4
 8007454:	4618      	mov	r0, r3
 8007456:	f7fd fe0f 	bl	8005078 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800745a:	6a3b      	ldr	r3, [r7, #32]
 800745c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800745e:	2201      	movs	r2, #1
 8007460:	409a      	lsls	r2, r3
 8007462:	4b1c      	ldr	r3, [pc, #112]	; (80074d4 <xTaskGenericNotify+0x144>)
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	4313      	orrs	r3, r2
 8007468:	4a1a      	ldr	r2, [pc, #104]	; (80074d4 <xTaskGenericNotify+0x144>)
 800746a:	6013      	str	r3, [r2, #0]
 800746c:	6a3b      	ldr	r3, [r7, #32]
 800746e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007470:	4613      	mov	r3, r2
 8007472:	009b      	lsls	r3, r3, #2
 8007474:	4413      	add	r3, r2
 8007476:	009b      	lsls	r3, r3, #2
 8007478:	4a17      	ldr	r2, [pc, #92]	; (80074d8 <xTaskGenericNotify+0x148>)
 800747a:	441a      	add	r2, r3
 800747c:	6a3b      	ldr	r3, [r7, #32]
 800747e:	3304      	adds	r3, #4
 8007480:	4619      	mov	r1, r3
 8007482:	4610      	mov	r0, r2
 8007484:	f7fd fd9b 	bl	8004fbe <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8007488:	6a3b      	ldr	r3, [r7, #32]
 800748a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800748c:	2b00      	cmp	r3, #0
 800748e:	d00a      	beq.n	80074a6 <xTaskGenericNotify+0x116>
	__asm volatile
 8007490:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007494:	f383 8811 	msr	BASEPRI, r3
 8007498:	f3bf 8f6f 	isb	sy
 800749c:	f3bf 8f4f 	dsb	sy
 80074a0:	617b      	str	r3, [r7, #20]
}
 80074a2:	bf00      	nop
 80074a4:	e7fe      	b.n	80074a4 <xTaskGenericNotify+0x114>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80074a6:	6a3b      	ldr	r3, [r7, #32]
 80074a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074aa:	4b0c      	ldr	r3, [pc, #48]	; (80074dc <xTaskGenericNotify+0x14c>)
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074b0:	429a      	cmp	r2, r3
 80074b2:	d907      	bls.n	80074c4 <xTaskGenericNotify+0x134>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 80074b4:	4b0a      	ldr	r3, [pc, #40]	; (80074e0 <xTaskGenericNotify+0x150>)
 80074b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80074ba:	601a      	str	r2, [r3, #0]
 80074bc:	f3bf 8f4f 	dsb	sy
 80074c0:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80074c4:	f000 fd06 	bl	8007ed4 <vPortExitCritical>

		return xReturn;
 80074c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 80074ca:	4618      	mov	r0, r3
 80074cc:	3728      	adds	r7, #40	; 0x28
 80074ce:	46bd      	mov	sp, r7
 80074d0:	bd80      	pop	{r7, pc}
 80074d2:	bf00      	nop
 80074d4:	200007a4 	.word	0x200007a4
 80074d8:	200006a0 	.word	0x200006a0
 80074dc:	2000069c 	.word	0x2000069c
 80074e0:	e000ed04 	.word	0xe000ed04

080074e4 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80074e4:	b580      	push	{r7, lr}
 80074e6:	b084      	sub	sp, #16
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	6078      	str	r0, [r7, #4]
 80074ec:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80074ee:	4b29      	ldr	r3, [pc, #164]	; (8007594 <prvAddCurrentTaskToDelayedList+0xb0>)
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80074f4:	4b28      	ldr	r3, [pc, #160]	; (8007598 <prvAddCurrentTaskToDelayedList+0xb4>)
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	3304      	adds	r3, #4
 80074fa:	4618      	mov	r0, r3
 80074fc:	f7fd fdbc 	bl	8005078 <uxListRemove>
 8007500:	4603      	mov	r3, r0
 8007502:	2b00      	cmp	r3, #0
 8007504:	d10b      	bne.n	800751e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8007506:	4b24      	ldr	r3, [pc, #144]	; (8007598 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800750c:	2201      	movs	r2, #1
 800750e:	fa02 f303 	lsl.w	r3, r2, r3
 8007512:	43da      	mvns	r2, r3
 8007514:	4b21      	ldr	r3, [pc, #132]	; (800759c <prvAddCurrentTaskToDelayedList+0xb8>)
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	4013      	ands	r3, r2
 800751a:	4a20      	ldr	r2, [pc, #128]	; (800759c <prvAddCurrentTaskToDelayedList+0xb8>)
 800751c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007524:	d10a      	bne.n	800753c <prvAddCurrentTaskToDelayedList+0x58>
 8007526:	683b      	ldr	r3, [r7, #0]
 8007528:	2b00      	cmp	r3, #0
 800752a:	d007      	beq.n	800753c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800752c:	4b1a      	ldr	r3, [pc, #104]	; (8007598 <prvAddCurrentTaskToDelayedList+0xb4>)
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	3304      	adds	r3, #4
 8007532:	4619      	mov	r1, r3
 8007534:	481a      	ldr	r0, [pc, #104]	; (80075a0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8007536:	f7fd fd42 	bl	8004fbe <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800753a:	e026      	b.n	800758a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800753c:	68fa      	ldr	r2, [r7, #12]
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	4413      	add	r3, r2
 8007542:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007544:	4b14      	ldr	r3, [pc, #80]	; (8007598 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	68ba      	ldr	r2, [r7, #8]
 800754a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800754c:	68ba      	ldr	r2, [r7, #8]
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	429a      	cmp	r2, r3
 8007552:	d209      	bcs.n	8007568 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007554:	4b13      	ldr	r3, [pc, #76]	; (80075a4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8007556:	681a      	ldr	r2, [r3, #0]
 8007558:	4b0f      	ldr	r3, [pc, #60]	; (8007598 <prvAddCurrentTaskToDelayedList+0xb4>)
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	3304      	adds	r3, #4
 800755e:	4619      	mov	r1, r3
 8007560:	4610      	mov	r0, r2
 8007562:	f7fd fd50 	bl	8005006 <vListInsert>
}
 8007566:	e010      	b.n	800758a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007568:	4b0f      	ldr	r3, [pc, #60]	; (80075a8 <prvAddCurrentTaskToDelayedList+0xc4>)
 800756a:	681a      	ldr	r2, [r3, #0]
 800756c:	4b0a      	ldr	r3, [pc, #40]	; (8007598 <prvAddCurrentTaskToDelayedList+0xb4>)
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	3304      	adds	r3, #4
 8007572:	4619      	mov	r1, r3
 8007574:	4610      	mov	r0, r2
 8007576:	f7fd fd46 	bl	8005006 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800757a:	4b0c      	ldr	r3, [pc, #48]	; (80075ac <prvAddCurrentTaskToDelayedList+0xc8>)
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	68ba      	ldr	r2, [r7, #8]
 8007580:	429a      	cmp	r2, r3
 8007582:	d202      	bcs.n	800758a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8007584:	4a09      	ldr	r2, [pc, #36]	; (80075ac <prvAddCurrentTaskToDelayedList+0xc8>)
 8007586:	68bb      	ldr	r3, [r7, #8]
 8007588:	6013      	str	r3, [r2, #0]
}
 800758a:	bf00      	nop
 800758c:	3710      	adds	r7, #16
 800758e:	46bd      	mov	sp, r7
 8007590:	bd80      	pop	{r7, pc}
 8007592:	bf00      	nop
 8007594:	200007a0 	.word	0x200007a0
 8007598:	2000069c 	.word	0x2000069c
 800759c:	200007a4 	.word	0x200007a4
 80075a0:	20000788 	.word	0x20000788
 80075a4:	20000758 	.word	0x20000758
 80075a8:	20000754 	.word	0x20000754
 80075ac:	200007bc 	.word	0x200007bc

080075b0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80075b0:	b580      	push	{r7, lr}
 80075b2:	b08a      	sub	sp, #40	; 0x28
 80075b4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80075b6:	2300      	movs	r3, #0
 80075b8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80075ba:	f000 facb 	bl	8007b54 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80075be:	4b1c      	ldr	r3, [pc, #112]	; (8007630 <xTimerCreateTimerTask+0x80>)
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d021      	beq.n	800760a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80075c6:	2300      	movs	r3, #0
 80075c8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80075ca:	2300      	movs	r3, #0
 80075cc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80075ce:	1d3a      	adds	r2, r7, #4
 80075d0:	f107 0108 	add.w	r1, r7, #8
 80075d4:	f107 030c 	add.w	r3, r7, #12
 80075d8:	4618      	mov	r0, r3
 80075da:	f7f8 fe79 	bl	80002d0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80075de:	6879      	ldr	r1, [r7, #4]
 80075e0:	68bb      	ldr	r3, [r7, #8]
 80075e2:	68fa      	ldr	r2, [r7, #12]
 80075e4:	9202      	str	r2, [sp, #8]
 80075e6:	9301      	str	r3, [sp, #4]
 80075e8:	2302      	movs	r3, #2
 80075ea:	9300      	str	r3, [sp, #0]
 80075ec:	2300      	movs	r3, #0
 80075ee:	460a      	mov	r2, r1
 80075f0:	4910      	ldr	r1, [pc, #64]	; (8007634 <xTimerCreateTimerTask+0x84>)
 80075f2:	4811      	ldr	r0, [pc, #68]	; (8007638 <xTimerCreateTimerTask+0x88>)
 80075f4:	f7fe fc3c 	bl	8005e70 <xTaskCreateStatic>
 80075f8:	4603      	mov	r3, r0
 80075fa:	4a10      	ldr	r2, [pc, #64]	; (800763c <xTimerCreateTimerTask+0x8c>)
 80075fc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80075fe:	4b0f      	ldr	r3, [pc, #60]	; (800763c <xTimerCreateTimerTask+0x8c>)
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	2b00      	cmp	r3, #0
 8007604:	d001      	beq.n	800760a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007606:	2301      	movs	r3, #1
 8007608:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800760a:	697b      	ldr	r3, [r7, #20]
 800760c:	2b00      	cmp	r3, #0
 800760e:	d10a      	bne.n	8007626 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8007610:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007614:	f383 8811 	msr	BASEPRI, r3
 8007618:	f3bf 8f6f 	isb	sy
 800761c:	f3bf 8f4f 	dsb	sy
 8007620:	613b      	str	r3, [r7, #16]
}
 8007622:	bf00      	nop
 8007624:	e7fe      	b.n	8007624 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007626:	697b      	ldr	r3, [r7, #20]
}
 8007628:	4618      	mov	r0, r3
 800762a:	3718      	adds	r7, #24
 800762c:	46bd      	mov	sp, r7
 800762e:	bd80      	pop	{r7, pc}
 8007630:	200007f8 	.word	0x200007f8
 8007634:	08008fc8 	.word	0x08008fc8
 8007638:	0800775d 	.word	0x0800775d
 800763c:	200007fc 	.word	0x200007fc

08007640 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007640:	b580      	push	{r7, lr}
 8007642:	b08a      	sub	sp, #40	; 0x28
 8007644:	af00      	add	r7, sp, #0
 8007646:	60f8      	str	r0, [r7, #12]
 8007648:	60b9      	str	r1, [r7, #8]
 800764a:	607a      	str	r2, [r7, #4]
 800764c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800764e:	2300      	movs	r3, #0
 8007650:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	2b00      	cmp	r3, #0
 8007656:	d10a      	bne.n	800766e <xTimerGenericCommand+0x2e>
	__asm volatile
 8007658:	f04f 0350 	mov.w	r3, #80	; 0x50
 800765c:	f383 8811 	msr	BASEPRI, r3
 8007660:	f3bf 8f6f 	isb	sy
 8007664:	f3bf 8f4f 	dsb	sy
 8007668:	623b      	str	r3, [r7, #32]
}
 800766a:	bf00      	nop
 800766c:	e7fe      	b.n	800766c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800766e:	4b1a      	ldr	r3, [pc, #104]	; (80076d8 <xTimerGenericCommand+0x98>)
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	2b00      	cmp	r3, #0
 8007674:	d02a      	beq.n	80076cc <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007676:	68bb      	ldr	r3, [r7, #8]
 8007678:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007682:	68bb      	ldr	r3, [r7, #8]
 8007684:	2b05      	cmp	r3, #5
 8007686:	dc18      	bgt.n	80076ba <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007688:	f7ff fc2c 	bl	8006ee4 <xTaskGetSchedulerState>
 800768c:	4603      	mov	r3, r0
 800768e:	2b02      	cmp	r3, #2
 8007690:	d109      	bne.n	80076a6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007692:	4b11      	ldr	r3, [pc, #68]	; (80076d8 <xTimerGenericCommand+0x98>)
 8007694:	6818      	ldr	r0, [r3, #0]
 8007696:	f107 0110 	add.w	r1, r7, #16
 800769a:	2300      	movs	r3, #0
 800769c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800769e:	f7fd fe51 	bl	8005344 <xQueueGenericSend>
 80076a2:	6278      	str	r0, [r7, #36]	; 0x24
 80076a4:	e012      	b.n	80076cc <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80076a6:	4b0c      	ldr	r3, [pc, #48]	; (80076d8 <xTimerGenericCommand+0x98>)
 80076a8:	6818      	ldr	r0, [r3, #0]
 80076aa:	f107 0110 	add.w	r1, r7, #16
 80076ae:	2300      	movs	r3, #0
 80076b0:	2200      	movs	r2, #0
 80076b2:	f7fd fe47 	bl	8005344 <xQueueGenericSend>
 80076b6:	6278      	str	r0, [r7, #36]	; 0x24
 80076b8:	e008      	b.n	80076cc <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80076ba:	4b07      	ldr	r3, [pc, #28]	; (80076d8 <xTimerGenericCommand+0x98>)
 80076bc:	6818      	ldr	r0, [r3, #0]
 80076be:	f107 0110 	add.w	r1, r7, #16
 80076c2:	2300      	movs	r3, #0
 80076c4:	683a      	ldr	r2, [r7, #0]
 80076c6:	f7fd ff3b 	bl	8005540 <xQueueGenericSendFromISR>
 80076ca:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80076cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80076ce:	4618      	mov	r0, r3
 80076d0:	3728      	adds	r7, #40	; 0x28
 80076d2:	46bd      	mov	sp, r7
 80076d4:	bd80      	pop	{r7, pc}
 80076d6:	bf00      	nop
 80076d8:	200007f8 	.word	0x200007f8

080076dc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80076dc:	b580      	push	{r7, lr}
 80076de:	b088      	sub	sp, #32
 80076e0:	af02      	add	r7, sp, #8
 80076e2:	6078      	str	r0, [r7, #4]
 80076e4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80076e6:	4b1c      	ldr	r3, [pc, #112]	; (8007758 <prvProcessExpiredTimer+0x7c>)
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	68db      	ldr	r3, [r3, #12]
 80076ec:	68db      	ldr	r3, [r3, #12]
 80076ee:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80076f0:	697b      	ldr	r3, [r7, #20]
 80076f2:	3304      	adds	r3, #4
 80076f4:	4618      	mov	r0, r3
 80076f6:	f7fd fcbf 	bl	8005078 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80076fa:	697b      	ldr	r3, [r7, #20]
 80076fc:	69db      	ldr	r3, [r3, #28]
 80076fe:	2b01      	cmp	r3, #1
 8007700:	d122      	bne.n	8007748 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007702:	697b      	ldr	r3, [r7, #20]
 8007704:	699a      	ldr	r2, [r3, #24]
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	18d1      	adds	r1, r2, r3
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	683a      	ldr	r2, [r7, #0]
 800770e:	6978      	ldr	r0, [r7, #20]
 8007710:	f000 f8c8 	bl	80078a4 <prvInsertTimerInActiveList>
 8007714:	4603      	mov	r3, r0
 8007716:	2b00      	cmp	r3, #0
 8007718:	d016      	beq.n	8007748 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800771a:	2300      	movs	r3, #0
 800771c:	9300      	str	r3, [sp, #0]
 800771e:	2300      	movs	r3, #0
 8007720:	687a      	ldr	r2, [r7, #4]
 8007722:	2100      	movs	r1, #0
 8007724:	6978      	ldr	r0, [r7, #20]
 8007726:	f7ff ff8b 	bl	8007640 <xTimerGenericCommand>
 800772a:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800772c:	693b      	ldr	r3, [r7, #16]
 800772e:	2b00      	cmp	r3, #0
 8007730:	d10a      	bne.n	8007748 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 8007732:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007736:	f383 8811 	msr	BASEPRI, r3
 800773a:	f3bf 8f6f 	isb	sy
 800773e:	f3bf 8f4f 	dsb	sy
 8007742:	60fb      	str	r3, [r7, #12]
}
 8007744:	bf00      	nop
 8007746:	e7fe      	b.n	8007746 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007748:	697b      	ldr	r3, [r7, #20]
 800774a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800774c:	6978      	ldr	r0, [r7, #20]
 800774e:	4798      	blx	r3
}
 8007750:	bf00      	nop
 8007752:	3718      	adds	r7, #24
 8007754:	46bd      	mov	sp, r7
 8007756:	bd80      	pop	{r7, pc}
 8007758:	200007f0 	.word	0x200007f0

0800775c <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 800775c:	b580      	push	{r7, lr}
 800775e:	b084      	sub	sp, #16
 8007760:	af00      	add	r7, sp, #0
 8007762:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007764:	f107 0308 	add.w	r3, r7, #8
 8007768:	4618      	mov	r0, r3
 800776a:	f000 f857 	bl	800781c <prvGetNextExpireTime>
 800776e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007770:	68bb      	ldr	r3, [r7, #8]
 8007772:	4619      	mov	r1, r3
 8007774:	68f8      	ldr	r0, [r7, #12]
 8007776:	f000 f803 	bl	8007780 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800777a:	f000 f8d5 	bl	8007928 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800777e:	e7f1      	b.n	8007764 <prvTimerTask+0x8>

08007780 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007780:	b580      	push	{r7, lr}
 8007782:	b084      	sub	sp, #16
 8007784:	af00      	add	r7, sp, #0
 8007786:	6078      	str	r0, [r7, #4]
 8007788:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800778a:	f7fe fe47 	bl	800641c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800778e:	f107 0308 	add.w	r3, r7, #8
 8007792:	4618      	mov	r0, r3
 8007794:	f000 f866 	bl	8007864 <prvSampleTimeNow>
 8007798:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800779a:	68bb      	ldr	r3, [r7, #8]
 800779c:	2b00      	cmp	r3, #0
 800779e:	d130      	bne.n	8007802 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80077a0:	683b      	ldr	r3, [r7, #0]
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d10a      	bne.n	80077bc <prvProcessTimerOrBlockTask+0x3c>
 80077a6:	687a      	ldr	r2, [r7, #4]
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	429a      	cmp	r2, r3
 80077ac:	d806      	bhi.n	80077bc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80077ae:	f7fe fe43 	bl	8006438 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80077b2:	68f9      	ldr	r1, [r7, #12]
 80077b4:	6878      	ldr	r0, [r7, #4]
 80077b6:	f7ff ff91 	bl	80076dc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80077ba:	e024      	b.n	8007806 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80077bc:	683b      	ldr	r3, [r7, #0]
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d008      	beq.n	80077d4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80077c2:	4b13      	ldr	r3, [pc, #76]	; (8007810 <prvProcessTimerOrBlockTask+0x90>)
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	bf0c      	ite	eq
 80077cc:	2301      	moveq	r3, #1
 80077ce:	2300      	movne	r3, #0
 80077d0:	b2db      	uxtb	r3, r3
 80077d2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80077d4:	4b0f      	ldr	r3, [pc, #60]	; (8007814 <prvProcessTimerOrBlockTask+0x94>)
 80077d6:	6818      	ldr	r0, [r3, #0]
 80077d8:	687a      	ldr	r2, [r7, #4]
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	1ad3      	subs	r3, r2, r3
 80077de:	683a      	ldr	r2, [r7, #0]
 80077e0:	4619      	mov	r1, r3
 80077e2:	f7fe fb11 	bl	8005e08 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80077e6:	f7fe fe27 	bl	8006438 <xTaskResumeAll>
 80077ea:	4603      	mov	r3, r0
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d10a      	bne.n	8007806 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80077f0:	4b09      	ldr	r3, [pc, #36]	; (8007818 <prvProcessTimerOrBlockTask+0x98>)
 80077f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80077f6:	601a      	str	r2, [r3, #0]
 80077f8:	f3bf 8f4f 	dsb	sy
 80077fc:	f3bf 8f6f 	isb	sy
}
 8007800:	e001      	b.n	8007806 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007802:	f7fe fe19 	bl	8006438 <xTaskResumeAll>
}
 8007806:	bf00      	nop
 8007808:	3710      	adds	r7, #16
 800780a:	46bd      	mov	sp, r7
 800780c:	bd80      	pop	{r7, pc}
 800780e:	bf00      	nop
 8007810:	200007f4 	.word	0x200007f4
 8007814:	200007f8 	.word	0x200007f8
 8007818:	e000ed04 	.word	0xe000ed04

0800781c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800781c:	b480      	push	{r7}
 800781e:	b085      	sub	sp, #20
 8007820:	af00      	add	r7, sp, #0
 8007822:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007824:	4b0e      	ldr	r3, [pc, #56]	; (8007860 <prvGetNextExpireTime+0x44>)
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	2b00      	cmp	r3, #0
 800782c:	bf0c      	ite	eq
 800782e:	2301      	moveq	r3, #1
 8007830:	2300      	movne	r3, #0
 8007832:	b2db      	uxtb	r3, r3
 8007834:	461a      	mov	r2, r3
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	2b00      	cmp	r3, #0
 8007840:	d105      	bne.n	800784e <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007842:	4b07      	ldr	r3, [pc, #28]	; (8007860 <prvGetNextExpireTime+0x44>)
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	68db      	ldr	r3, [r3, #12]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	60fb      	str	r3, [r7, #12]
 800784c:	e001      	b.n	8007852 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800784e:	2300      	movs	r3, #0
 8007850:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007852:	68fb      	ldr	r3, [r7, #12]
}
 8007854:	4618      	mov	r0, r3
 8007856:	3714      	adds	r7, #20
 8007858:	46bd      	mov	sp, r7
 800785a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800785e:	4770      	bx	lr
 8007860:	200007f0 	.word	0x200007f0

08007864 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007864:	b580      	push	{r7, lr}
 8007866:	b084      	sub	sp, #16
 8007868:	af00      	add	r7, sp, #0
 800786a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800786c:	f7fe fe80 	bl	8006570 <xTaskGetTickCount>
 8007870:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007872:	4b0b      	ldr	r3, [pc, #44]	; (80078a0 <prvSampleTimeNow+0x3c>)
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	68fa      	ldr	r2, [r7, #12]
 8007878:	429a      	cmp	r2, r3
 800787a:	d205      	bcs.n	8007888 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800787c:	f000 f908 	bl	8007a90 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	2201      	movs	r2, #1
 8007884:	601a      	str	r2, [r3, #0]
 8007886:	e002      	b.n	800788e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	2200      	movs	r2, #0
 800788c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800788e:	4a04      	ldr	r2, [pc, #16]	; (80078a0 <prvSampleTimeNow+0x3c>)
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007894:	68fb      	ldr	r3, [r7, #12]
}
 8007896:	4618      	mov	r0, r3
 8007898:	3710      	adds	r7, #16
 800789a:	46bd      	mov	sp, r7
 800789c:	bd80      	pop	{r7, pc}
 800789e:	bf00      	nop
 80078a0:	20000800 	.word	0x20000800

080078a4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80078a4:	b580      	push	{r7, lr}
 80078a6:	b086      	sub	sp, #24
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	60f8      	str	r0, [r7, #12]
 80078ac:	60b9      	str	r1, [r7, #8]
 80078ae:	607a      	str	r2, [r7, #4]
 80078b0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80078b2:	2300      	movs	r3, #0
 80078b4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	68ba      	ldr	r2, [r7, #8]
 80078ba:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	68fa      	ldr	r2, [r7, #12]
 80078c0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80078c2:	68ba      	ldr	r2, [r7, #8]
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	429a      	cmp	r2, r3
 80078c8:	d812      	bhi.n	80078f0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80078ca:	687a      	ldr	r2, [r7, #4]
 80078cc:	683b      	ldr	r3, [r7, #0]
 80078ce:	1ad2      	subs	r2, r2, r3
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	699b      	ldr	r3, [r3, #24]
 80078d4:	429a      	cmp	r2, r3
 80078d6:	d302      	bcc.n	80078de <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80078d8:	2301      	movs	r3, #1
 80078da:	617b      	str	r3, [r7, #20]
 80078dc:	e01b      	b.n	8007916 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80078de:	4b10      	ldr	r3, [pc, #64]	; (8007920 <prvInsertTimerInActiveList+0x7c>)
 80078e0:	681a      	ldr	r2, [r3, #0]
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	3304      	adds	r3, #4
 80078e6:	4619      	mov	r1, r3
 80078e8:	4610      	mov	r0, r2
 80078ea:	f7fd fb8c 	bl	8005006 <vListInsert>
 80078ee:	e012      	b.n	8007916 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80078f0:	687a      	ldr	r2, [r7, #4]
 80078f2:	683b      	ldr	r3, [r7, #0]
 80078f4:	429a      	cmp	r2, r3
 80078f6:	d206      	bcs.n	8007906 <prvInsertTimerInActiveList+0x62>
 80078f8:	68ba      	ldr	r2, [r7, #8]
 80078fa:	683b      	ldr	r3, [r7, #0]
 80078fc:	429a      	cmp	r2, r3
 80078fe:	d302      	bcc.n	8007906 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007900:	2301      	movs	r3, #1
 8007902:	617b      	str	r3, [r7, #20]
 8007904:	e007      	b.n	8007916 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007906:	4b07      	ldr	r3, [pc, #28]	; (8007924 <prvInsertTimerInActiveList+0x80>)
 8007908:	681a      	ldr	r2, [r3, #0]
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	3304      	adds	r3, #4
 800790e:	4619      	mov	r1, r3
 8007910:	4610      	mov	r0, r2
 8007912:	f7fd fb78 	bl	8005006 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007916:	697b      	ldr	r3, [r7, #20]
}
 8007918:	4618      	mov	r0, r3
 800791a:	3718      	adds	r7, #24
 800791c:	46bd      	mov	sp, r7
 800791e:	bd80      	pop	{r7, pc}
 8007920:	200007f4 	.word	0x200007f4
 8007924:	200007f0 	.word	0x200007f0

08007928 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007928:	b580      	push	{r7, lr}
 800792a:	b08e      	sub	sp, #56	; 0x38
 800792c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800792e:	e09d      	b.n	8007a6c <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	2b00      	cmp	r3, #0
 8007934:	da18      	bge.n	8007968 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007936:	1d3b      	adds	r3, r7, #4
 8007938:	3304      	adds	r3, #4
 800793a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800793c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800793e:	2b00      	cmp	r3, #0
 8007940:	d10a      	bne.n	8007958 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8007942:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007946:	f383 8811 	msr	BASEPRI, r3
 800794a:	f3bf 8f6f 	isb	sy
 800794e:	f3bf 8f4f 	dsb	sy
 8007952:	61fb      	str	r3, [r7, #28]
}
 8007954:	bf00      	nop
 8007956:	e7fe      	b.n	8007956 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007958:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800795e:	6850      	ldr	r0, [r2, #4]
 8007960:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007962:	6892      	ldr	r2, [r2, #8]
 8007964:	4611      	mov	r1, r2
 8007966:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	2b00      	cmp	r3, #0
 800796c:	db7d      	blt.n	8007a6a <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007972:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007974:	695b      	ldr	r3, [r3, #20]
 8007976:	2b00      	cmp	r3, #0
 8007978:	d004      	beq.n	8007984 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800797a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800797c:	3304      	adds	r3, #4
 800797e:	4618      	mov	r0, r3
 8007980:	f7fd fb7a 	bl	8005078 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007984:	463b      	mov	r3, r7
 8007986:	4618      	mov	r0, r3
 8007988:	f7ff ff6c 	bl	8007864 <prvSampleTimeNow>
 800798c:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	2b09      	cmp	r3, #9
 8007992:	d86b      	bhi.n	8007a6c <prvProcessReceivedCommands+0x144>
 8007994:	a201      	add	r2, pc, #4	; (adr r2, 800799c <prvProcessReceivedCommands+0x74>)
 8007996:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800799a:	bf00      	nop
 800799c:	080079c5 	.word	0x080079c5
 80079a0:	080079c5 	.word	0x080079c5
 80079a4:	080079c5 	.word	0x080079c5
 80079a8:	08007a6d 	.word	0x08007a6d
 80079ac:	08007a21 	.word	0x08007a21
 80079b0:	08007a59 	.word	0x08007a59
 80079b4:	080079c5 	.word	0x080079c5
 80079b8:	080079c5 	.word	0x080079c5
 80079bc:	08007a6d 	.word	0x08007a6d
 80079c0:	08007a21 	.word	0x08007a21
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80079c4:	68ba      	ldr	r2, [r7, #8]
 80079c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079c8:	699b      	ldr	r3, [r3, #24]
 80079ca:	18d1      	adds	r1, r2, r3
 80079cc:	68bb      	ldr	r3, [r7, #8]
 80079ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80079d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80079d2:	f7ff ff67 	bl	80078a4 <prvInsertTimerInActiveList>
 80079d6:	4603      	mov	r3, r0
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d047      	beq.n	8007a6c <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80079dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80079e2:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80079e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079e6:	69db      	ldr	r3, [r3, #28]
 80079e8:	2b01      	cmp	r3, #1
 80079ea:	d13f      	bne.n	8007a6c <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80079ec:	68ba      	ldr	r2, [r7, #8]
 80079ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079f0:	699b      	ldr	r3, [r3, #24]
 80079f2:	441a      	add	r2, r3
 80079f4:	2300      	movs	r3, #0
 80079f6:	9300      	str	r3, [sp, #0]
 80079f8:	2300      	movs	r3, #0
 80079fa:	2100      	movs	r1, #0
 80079fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80079fe:	f7ff fe1f 	bl	8007640 <xTimerGenericCommand>
 8007a02:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007a04:	6a3b      	ldr	r3, [r7, #32]
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d130      	bne.n	8007a6c <prvProcessReceivedCommands+0x144>
	__asm volatile
 8007a0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a0e:	f383 8811 	msr	BASEPRI, r3
 8007a12:	f3bf 8f6f 	isb	sy
 8007a16:	f3bf 8f4f 	dsb	sy
 8007a1a:	61bb      	str	r3, [r7, #24]
}
 8007a1c:	bf00      	nop
 8007a1e:	e7fe      	b.n	8007a1e <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007a20:	68ba      	ldr	r2, [r7, #8]
 8007a22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a24:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007a26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a28:	699b      	ldr	r3, [r3, #24]
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d10a      	bne.n	8007a44 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 8007a2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a32:	f383 8811 	msr	BASEPRI, r3
 8007a36:	f3bf 8f6f 	isb	sy
 8007a3a:	f3bf 8f4f 	dsb	sy
 8007a3e:	617b      	str	r3, [r7, #20]
}
 8007a40:	bf00      	nop
 8007a42:	e7fe      	b.n	8007a42 <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007a44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a46:	699a      	ldr	r2, [r3, #24]
 8007a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a4a:	18d1      	adds	r1, r2, r3
 8007a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a50:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007a52:	f7ff ff27 	bl	80078a4 <prvInsertTimerInActiveList>
					break;
 8007a56:	e009      	b.n	8007a6c <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8007a58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a5a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d104      	bne.n	8007a6c <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 8007a62:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007a64:	f000 fbec 	bl	8008240 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007a68:	e000      	b.n	8007a6c <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8007a6a:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007a6c:	4b07      	ldr	r3, [pc, #28]	; (8007a8c <prvProcessReceivedCommands+0x164>)
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	1d39      	adds	r1, r7, #4
 8007a72:	2200      	movs	r2, #0
 8007a74:	4618      	mov	r0, r3
 8007a76:	f7fd fe89 	bl	800578c <xQueueReceive>
 8007a7a:	4603      	mov	r3, r0
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	f47f af57 	bne.w	8007930 <prvProcessReceivedCommands+0x8>
	}
}
 8007a82:	bf00      	nop
 8007a84:	bf00      	nop
 8007a86:	3730      	adds	r7, #48	; 0x30
 8007a88:	46bd      	mov	sp, r7
 8007a8a:	bd80      	pop	{r7, pc}
 8007a8c:	200007f8 	.word	0x200007f8

08007a90 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007a90:	b580      	push	{r7, lr}
 8007a92:	b088      	sub	sp, #32
 8007a94:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007a96:	e045      	b.n	8007b24 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007a98:	4b2c      	ldr	r3, [pc, #176]	; (8007b4c <prvSwitchTimerLists+0xbc>)
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	68db      	ldr	r3, [r3, #12]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007aa2:	4b2a      	ldr	r3, [pc, #168]	; (8007b4c <prvSwitchTimerLists+0xbc>)
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	68db      	ldr	r3, [r3, #12]
 8007aa8:	68db      	ldr	r3, [r3, #12]
 8007aaa:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	3304      	adds	r3, #4
 8007ab0:	4618      	mov	r0, r3
 8007ab2:	f7fd fae1 	bl	8005078 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007aba:	68f8      	ldr	r0, [r7, #12]
 8007abc:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	69db      	ldr	r3, [r3, #28]
 8007ac2:	2b01      	cmp	r3, #1
 8007ac4:	d12e      	bne.n	8007b24 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	699b      	ldr	r3, [r3, #24]
 8007aca:	693a      	ldr	r2, [r7, #16]
 8007acc:	4413      	add	r3, r2
 8007ace:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007ad0:	68ba      	ldr	r2, [r7, #8]
 8007ad2:	693b      	ldr	r3, [r7, #16]
 8007ad4:	429a      	cmp	r2, r3
 8007ad6:	d90e      	bls.n	8007af6 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	68ba      	ldr	r2, [r7, #8]
 8007adc:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	68fa      	ldr	r2, [r7, #12]
 8007ae2:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007ae4:	4b19      	ldr	r3, [pc, #100]	; (8007b4c <prvSwitchTimerLists+0xbc>)
 8007ae6:	681a      	ldr	r2, [r3, #0]
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	3304      	adds	r3, #4
 8007aec:	4619      	mov	r1, r3
 8007aee:	4610      	mov	r0, r2
 8007af0:	f7fd fa89 	bl	8005006 <vListInsert>
 8007af4:	e016      	b.n	8007b24 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007af6:	2300      	movs	r3, #0
 8007af8:	9300      	str	r3, [sp, #0]
 8007afa:	2300      	movs	r3, #0
 8007afc:	693a      	ldr	r2, [r7, #16]
 8007afe:	2100      	movs	r1, #0
 8007b00:	68f8      	ldr	r0, [r7, #12]
 8007b02:	f7ff fd9d 	bl	8007640 <xTimerGenericCommand>
 8007b06:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d10a      	bne.n	8007b24 <prvSwitchTimerLists+0x94>
	__asm volatile
 8007b0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b12:	f383 8811 	msr	BASEPRI, r3
 8007b16:	f3bf 8f6f 	isb	sy
 8007b1a:	f3bf 8f4f 	dsb	sy
 8007b1e:	603b      	str	r3, [r7, #0]
}
 8007b20:	bf00      	nop
 8007b22:	e7fe      	b.n	8007b22 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007b24:	4b09      	ldr	r3, [pc, #36]	; (8007b4c <prvSwitchTimerLists+0xbc>)
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d1b4      	bne.n	8007a98 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007b2e:	4b07      	ldr	r3, [pc, #28]	; (8007b4c <prvSwitchTimerLists+0xbc>)
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007b34:	4b06      	ldr	r3, [pc, #24]	; (8007b50 <prvSwitchTimerLists+0xc0>)
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	4a04      	ldr	r2, [pc, #16]	; (8007b4c <prvSwitchTimerLists+0xbc>)
 8007b3a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007b3c:	4a04      	ldr	r2, [pc, #16]	; (8007b50 <prvSwitchTimerLists+0xc0>)
 8007b3e:	697b      	ldr	r3, [r7, #20]
 8007b40:	6013      	str	r3, [r2, #0]
}
 8007b42:	bf00      	nop
 8007b44:	3718      	adds	r7, #24
 8007b46:	46bd      	mov	sp, r7
 8007b48:	bd80      	pop	{r7, pc}
 8007b4a:	bf00      	nop
 8007b4c:	200007f0 	.word	0x200007f0
 8007b50:	200007f4 	.word	0x200007f4

08007b54 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007b54:	b580      	push	{r7, lr}
 8007b56:	b082      	sub	sp, #8
 8007b58:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007b5a:	f000 f98b 	bl	8007e74 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007b5e:	4b15      	ldr	r3, [pc, #84]	; (8007bb4 <prvCheckForValidListAndQueue+0x60>)
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d120      	bne.n	8007ba8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007b66:	4814      	ldr	r0, [pc, #80]	; (8007bb8 <prvCheckForValidListAndQueue+0x64>)
 8007b68:	f7fd f9fc 	bl	8004f64 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007b6c:	4813      	ldr	r0, [pc, #76]	; (8007bbc <prvCheckForValidListAndQueue+0x68>)
 8007b6e:	f7fd f9f9 	bl	8004f64 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007b72:	4b13      	ldr	r3, [pc, #76]	; (8007bc0 <prvCheckForValidListAndQueue+0x6c>)
 8007b74:	4a10      	ldr	r2, [pc, #64]	; (8007bb8 <prvCheckForValidListAndQueue+0x64>)
 8007b76:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007b78:	4b12      	ldr	r3, [pc, #72]	; (8007bc4 <prvCheckForValidListAndQueue+0x70>)
 8007b7a:	4a10      	ldr	r2, [pc, #64]	; (8007bbc <prvCheckForValidListAndQueue+0x68>)
 8007b7c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007b7e:	2300      	movs	r3, #0
 8007b80:	9300      	str	r3, [sp, #0]
 8007b82:	4b11      	ldr	r3, [pc, #68]	; (8007bc8 <prvCheckForValidListAndQueue+0x74>)
 8007b84:	4a11      	ldr	r2, [pc, #68]	; (8007bcc <prvCheckForValidListAndQueue+0x78>)
 8007b86:	2110      	movs	r1, #16
 8007b88:	200a      	movs	r0, #10
 8007b8a:	f7fd fb07 	bl	800519c <xQueueGenericCreateStatic>
 8007b8e:	4603      	mov	r3, r0
 8007b90:	4a08      	ldr	r2, [pc, #32]	; (8007bb4 <prvCheckForValidListAndQueue+0x60>)
 8007b92:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007b94:	4b07      	ldr	r3, [pc, #28]	; (8007bb4 <prvCheckForValidListAndQueue+0x60>)
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d005      	beq.n	8007ba8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007b9c:	4b05      	ldr	r3, [pc, #20]	; (8007bb4 <prvCheckForValidListAndQueue+0x60>)
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	490b      	ldr	r1, [pc, #44]	; (8007bd0 <prvCheckForValidListAndQueue+0x7c>)
 8007ba2:	4618      	mov	r0, r3
 8007ba4:	f7fe f906 	bl	8005db4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007ba8:	f000 f994 	bl	8007ed4 <vPortExitCritical>
}
 8007bac:	bf00      	nop
 8007bae:	46bd      	mov	sp, r7
 8007bb0:	bd80      	pop	{r7, pc}
 8007bb2:	bf00      	nop
 8007bb4:	200007f8 	.word	0x200007f8
 8007bb8:	200007c8 	.word	0x200007c8
 8007bbc:	200007dc 	.word	0x200007dc
 8007bc0:	200007f0 	.word	0x200007f0
 8007bc4:	200007f4 	.word	0x200007f4
 8007bc8:	200008a4 	.word	0x200008a4
 8007bcc:	20000804 	.word	0x20000804
 8007bd0:	08008fd0 	.word	0x08008fd0

08007bd4 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8007bd4:	b580      	push	{r7, lr}
 8007bd6:	b08a      	sub	sp, #40	; 0x28
 8007bd8:	af00      	add	r7, sp, #0
 8007bda:	60f8      	str	r0, [r7, #12]
 8007bdc:	60b9      	str	r1, [r7, #8]
 8007bde:	607a      	str	r2, [r7, #4]
 8007be0:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 8007be2:	f06f 0301 	mvn.w	r3, #1
 8007be6:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 8007bec:	68bb      	ldr	r3, [r7, #8]
 8007bee:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007bf4:	4b06      	ldr	r3, [pc, #24]	; (8007c10 <xTimerPendFunctionCallFromISR+0x3c>)
 8007bf6:	6818      	ldr	r0, [r3, #0]
 8007bf8:	f107 0114 	add.w	r1, r7, #20
 8007bfc:	2300      	movs	r3, #0
 8007bfe:	683a      	ldr	r2, [r7, #0]
 8007c00:	f7fd fc9e 	bl	8005540 <xQueueGenericSendFromISR>
 8007c04:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 8007c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8007c08:	4618      	mov	r0, r3
 8007c0a:	3728      	adds	r7, #40	; 0x28
 8007c0c:	46bd      	mov	sp, r7
 8007c0e:	bd80      	pop	{r7, pc}
 8007c10:	200007f8 	.word	0x200007f8

08007c14 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007c14:	b480      	push	{r7}
 8007c16:	b085      	sub	sp, #20
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	60f8      	str	r0, [r7, #12]
 8007c1c:	60b9      	str	r1, [r7, #8]
 8007c1e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	3b04      	subs	r3, #4
 8007c24:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007c2c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	3b04      	subs	r3, #4
 8007c32:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007c34:	68bb      	ldr	r3, [r7, #8]
 8007c36:	f023 0201 	bic.w	r2, r3, #1
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	3b04      	subs	r3, #4
 8007c42:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007c44:	4a0c      	ldr	r2, [pc, #48]	; (8007c78 <pxPortInitialiseStack+0x64>)
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	3b14      	subs	r3, #20
 8007c4e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007c50:	687a      	ldr	r2, [r7, #4]
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	3b04      	subs	r3, #4
 8007c5a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	f06f 0202 	mvn.w	r2, #2
 8007c62:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	3b20      	subs	r3, #32
 8007c68:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007c6a:	68fb      	ldr	r3, [r7, #12]
}
 8007c6c:	4618      	mov	r0, r3
 8007c6e:	3714      	adds	r7, #20
 8007c70:	46bd      	mov	sp, r7
 8007c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c76:	4770      	bx	lr
 8007c78:	08007c7d 	.word	0x08007c7d

08007c7c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007c7c:	b480      	push	{r7}
 8007c7e:	b085      	sub	sp, #20
 8007c80:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007c82:	2300      	movs	r3, #0
 8007c84:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007c86:	4b12      	ldr	r3, [pc, #72]	; (8007cd0 <prvTaskExitError+0x54>)
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c8e:	d00a      	beq.n	8007ca6 <prvTaskExitError+0x2a>
	__asm volatile
 8007c90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c94:	f383 8811 	msr	BASEPRI, r3
 8007c98:	f3bf 8f6f 	isb	sy
 8007c9c:	f3bf 8f4f 	dsb	sy
 8007ca0:	60fb      	str	r3, [r7, #12]
}
 8007ca2:	bf00      	nop
 8007ca4:	e7fe      	b.n	8007ca4 <prvTaskExitError+0x28>
	__asm volatile
 8007ca6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007caa:	f383 8811 	msr	BASEPRI, r3
 8007cae:	f3bf 8f6f 	isb	sy
 8007cb2:	f3bf 8f4f 	dsb	sy
 8007cb6:	60bb      	str	r3, [r7, #8]
}
 8007cb8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007cba:	bf00      	nop
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d0fc      	beq.n	8007cbc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007cc2:	bf00      	nop
 8007cc4:	bf00      	nop
 8007cc6:	3714      	adds	r7, #20
 8007cc8:	46bd      	mov	sp, r7
 8007cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cce:	4770      	bx	lr
 8007cd0:	2000000c 	.word	0x2000000c
	...

08007ce0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007ce0:	4b07      	ldr	r3, [pc, #28]	; (8007d00 <pxCurrentTCBConst2>)
 8007ce2:	6819      	ldr	r1, [r3, #0]
 8007ce4:	6808      	ldr	r0, [r1, #0]
 8007ce6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cea:	f380 8809 	msr	PSP, r0
 8007cee:	f3bf 8f6f 	isb	sy
 8007cf2:	f04f 0000 	mov.w	r0, #0
 8007cf6:	f380 8811 	msr	BASEPRI, r0
 8007cfa:	4770      	bx	lr
 8007cfc:	f3af 8000 	nop.w

08007d00 <pxCurrentTCBConst2>:
 8007d00:	2000069c 	.word	0x2000069c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007d04:	bf00      	nop
 8007d06:	bf00      	nop

08007d08 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007d08:	4808      	ldr	r0, [pc, #32]	; (8007d2c <prvPortStartFirstTask+0x24>)
 8007d0a:	6800      	ldr	r0, [r0, #0]
 8007d0c:	6800      	ldr	r0, [r0, #0]
 8007d0e:	f380 8808 	msr	MSP, r0
 8007d12:	f04f 0000 	mov.w	r0, #0
 8007d16:	f380 8814 	msr	CONTROL, r0
 8007d1a:	b662      	cpsie	i
 8007d1c:	b661      	cpsie	f
 8007d1e:	f3bf 8f4f 	dsb	sy
 8007d22:	f3bf 8f6f 	isb	sy
 8007d26:	df00      	svc	0
 8007d28:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007d2a:	bf00      	nop
 8007d2c:	e000ed08 	.word	0xe000ed08

08007d30 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007d30:	b580      	push	{r7, lr}
 8007d32:	b086      	sub	sp, #24
 8007d34:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007d36:	4b46      	ldr	r3, [pc, #280]	; (8007e50 <xPortStartScheduler+0x120>)
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	4a46      	ldr	r2, [pc, #280]	; (8007e54 <xPortStartScheduler+0x124>)
 8007d3c:	4293      	cmp	r3, r2
 8007d3e:	d10a      	bne.n	8007d56 <xPortStartScheduler+0x26>
	__asm volatile
 8007d40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d44:	f383 8811 	msr	BASEPRI, r3
 8007d48:	f3bf 8f6f 	isb	sy
 8007d4c:	f3bf 8f4f 	dsb	sy
 8007d50:	613b      	str	r3, [r7, #16]
}
 8007d52:	bf00      	nop
 8007d54:	e7fe      	b.n	8007d54 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007d56:	4b3e      	ldr	r3, [pc, #248]	; (8007e50 <xPortStartScheduler+0x120>)
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	4a3f      	ldr	r2, [pc, #252]	; (8007e58 <xPortStartScheduler+0x128>)
 8007d5c:	4293      	cmp	r3, r2
 8007d5e:	d10a      	bne.n	8007d76 <xPortStartScheduler+0x46>
	__asm volatile
 8007d60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d64:	f383 8811 	msr	BASEPRI, r3
 8007d68:	f3bf 8f6f 	isb	sy
 8007d6c:	f3bf 8f4f 	dsb	sy
 8007d70:	60fb      	str	r3, [r7, #12]
}
 8007d72:	bf00      	nop
 8007d74:	e7fe      	b.n	8007d74 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007d76:	4b39      	ldr	r3, [pc, #228]	; (8007e5c <xPortStartScheduler+0x12c>)
 8007d78:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007d7a:	697b      	ldr	r3, [r7, #20]
 8007d7c:	781b      	ldrb	r3, [r3, #0]
 8007d7e:	b2db      	uxtb	r3, r3
 8007d80:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007d82:	697b      	ldr	r3, [r7, #20]
 8007d84:	22ff      	movs	r2, #255	; 0xff
 8007d86:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007d88:	697b      	ldr	r3, [r7, #20]
 8007d8a:	781b      	ldrb	r3, [r3, #0]
 8007d8c:	b2db      	uxtb	r3, r3
 8007d8e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007d90:	78fb      	ldrb	r3, [r7, #3]
 8007d92:	b2db      	uxtb	r3, r3
 8007d94:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007d98:	b2da      	uxtb	r2, r3
 8007d9a:	4b31      	ldr	r3, [pc, #196]	; (8007e60 <xPortStartScheduler+0x130>)
 8007d9c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007d9e:	4b31      	ldr	r3, [pc, #196]	; (8007e64 <xPortStartScheduler+0x134>)
 8007da0:	2207      	movs	r2, #7
 8007da2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007da4:	e009      	b.n	8007dba <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007da6:	4b2f      	ldr	r3, [pc, #188]	; (8007e64 <xPortStartScheduler+0x134>)
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	3b01      	subs	r3, #1
 8007dac:	4a2d      	ldr	r2, [pc, #180]	; (8007e64 <xPortStartScheduler+0x134>)
 8007dae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007db0:	78fb      	ldrb	r3, [r7, #3]
 8007db2:	b2db      	uxtb	r3, r3
 8007db4:	005b      	lsls	r3, r3, #1
 8007db6:	b2db      	uxtb	r3, r3
 8007db8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007dba:	78fb      	ldrb	r3, [r7, #3]
 8007dbc:	b2db      	uxtb	r3, r3
 8007dbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007dc2:	2b80      	cmp	r3, #128	; 0x80
 8007dc4:	d0ef      	beq.n	8007da6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007dc6:	4b27      	ldr	r3, [pc, #156]	; (8007e64 <xPortStartScheduler+0x134>)
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	f1c3 0307 	rsb	r3, r3, #7
 8007dce:	2b04      	cmp	r3, #4
 8007dd0:	d00a      	beq.n	8007de8 <xPortStartScheduler+0xb8>
	__asm volatile
 8007dd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dd6:	f383 8811 	msr	BASEPRI, r3
 8007dda:	f3bf 8f6f 	isb	sy
 8007dde:	f3bf 8f4f 	dsb	sy
 8007de2:	60bb      	str	r3, [r7, #8]
}
 8007de4:	bf00      	nop
 8007de6:	e7fe      	b.n	8007de6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007de8:	4b1e      	ldr	r3, [pc, #120]	; (8007e64 <xPortStartScheduler+0x134>)
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	021b      	lsls	r3, r3, #8
 8007dee:	4a1d      	ldr	r2, [pc, #116]	; (8007e64 <xPortStartScheduler+0x134>)
 8007df0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007df2:	4b1c      	ldr	r3, [pc, #112]	; (8007e64 <xPortStartScheduler+0x134>)
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007dfa:	4a1a      	ldr	r2, [pc, #104]	; (8007e64 <xPortStartScheduler+0x134>)
 8007dfc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	b2da      	uxtb	r2, r3
 8007e02:	697b      	ldr	r3, [r7, #20]
 8007e04:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007e06:	4b18      	ldr	r3, [pc, #96]	; (8007e68 <xPortStartScheduler+0x138>)
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	4a17      	ldr	r2, [pc, #92]	; (8007e68 <xPortStartScheduler+0x138>)
 8007e0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007e10:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007e12:	4b15      	ldr	r3, [pc, #84]	; (8007e68 <xPortStartScheduler+0x138>)
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	4a14      	ldr	r2, [pc, #80]	; (8007e68 <xPortStartScheduler+0x138>)
 8007e18:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007e1c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007e1e:	f000 f8dd 	bl	8007fdc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007e22:	4b12      	ldr	r3, [pc, #72]	; (8007e6c <xPortStartScheduler+0x13c>)
 8007e24:	2200      	movs	r2, #0
 8007e26:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007e28:	f000 f8fc 	bl	8008024 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007e2c:	4b10      	ldr	r3, [pc, #64]	; (8007e70 <xPortStartScheduler+0x140>)
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	4a0f      	ldr	r2, [pc, #60]	; (8007e70 <xPortStartScheduler+0x140>)
 8007e32:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007e36:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007e38:	f7ff ff66 	bl	8007d08 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007e3c:	f7fe fd3a 	bl	80068b4 <vTaskSwitchContext>
	prvTaskExitError();
 8007e40:	f7ff ff1c 	bl	8007c7c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007e44:	2300      	movs	r3, #0
}
 8007e46:	4618      	mov	r0, r3
 8007e48:	3718      	adds	r7, #24
 8007e4a:	46bd      	mov	sp, r7
 8007e4c:	bd80      	pop	{r7, pc}
 8007e4e:	bf00      	nop
 8007e50:	e000ed00 	.word	0xe000ed00
 8007e54:	410fc271 	.word	0x410fc271
 8007e58:	410fc270 	.word	0x410fc270
 8007e5c:	e000e400 	.word	0xe000e400
 8007e60:	200008ec 	.word	0x200008ec
 8007e64:	200008f0 	.word	0x200008f0
 8007e68:	e000ed20 	.word	0xe000ed20
 8007e6c:	2000000c 	.word	0x2000000c
 8007e70:	e000ef34 	.word	0xe000ef34

08007e74 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007e74:	b480      	push	{r7}
 8007e76:	b083      	sub	sp, #12
 8007e78:	af00      	add	r7, sp, #0
	__asm volatile
 8007e7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e7e:	f383 8811 	msr	BASEPRI, r3
 8007e82:	f3bf 8f6f 	isb	sy
 8007e86:	f3bf 8f4f 	dsb	sy
 8007e8a:	607b      	str	r3, [r7, #4]
}
 8007e8c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007e8e:	4b0f      	ldr	r3, [pc, #60]	; (8007ecc <vPortEnterCritical+0x58>)
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	3301      	adds	r3, #1
 8007e94:	4a0d      	ldr	r2, [pc, #52]	; (8007ecc <vPortEnterCritical+0x58>)
 8007e96:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007e98:	4b0c      	ldr	r3, [pc, #48]	; (8007ecc <vPortEnterCritical+0x58>)
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	2b01      	cmp	r3, #1
 8007e9e:	d10f      	bne.n	8007ec0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007ea0:	4b0b      	ldr	r3, [pc, #44]	; (8007ed0 <vPortEnterCritical+0x5c>)
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	b2db      	uxtb	r3, r3
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d00a      	beq.n	8007ec0 <vPortEnterCritical+0x4c>
	__asm volatile
 8007eaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007eae:	f383 8811 	msr	BASEPRI, r3
 8007eb2:	f3bf 8f6f 	isb	sy
 8007eb6:	f3bf 8f4f 	dsb	sy
 8007eba:	603b      	str	r3, [r7, #0]
}
 8007ebc:	bf00      	nop
 8007ebe:	e7fe      	b.n	8007ebe <vPortEnterCritical+0x4a>
	}
}
 8007ec0:	bf00      	nop
 8007ec2:	370c      	adds	r7, #12
 8007ec4:	46bd      	mov	sp, r7
 8007ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eca:	4770      	bx	lr
 8007ecc:	2000000c 	.word	0x2000000c
 8007ed0:	e000ed04 	.word	0xe000ed04

08007ed4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007ed4:	b480      	push	{r7}
 8007ed6:	b083      	sub	sp, #12
 8007ed8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007eda:	4b12      	ldr	r3, [pc, #72]	; (8007f24 <vPortExitCritical+0x50>)
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d10a      	bne.n	8007ef8 <vPortExitCritical+0x24>
	__asm volatile
 8007ee2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ee6:	f383 8811 	msr	BASEPRI, r3
 8007eea:	f3bf 8f6f 	isb	sy
 8007eee:	f3bf 8f4f 	dsb	sy
 8007ef2:	607b      	str	r3, [r7, #4]
}
 8007ef4:	bf00      	nop
 8007ef6:	e7fe      	b.n	8007ef6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007ef8:	4b0a      	ldr	r3, [pc, #40]	; (8007f24 <vPortExitCritical+0x50>)
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	3b01      	subs	r3, #1
 8007efe:	4a09      	ldr	r2, [pc, #36]	; (8007f24 <vPortExitCritical+0x50>)
 8007f00:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007f02:	4b08      	ldr	r3, [pc, #32]	; (8007f24 <vPortExitCritical+0x50>)
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d105      	bne.n	8007f16 <vPortExitCritical+0x42>
 8007f0a:	2300      	movs	r3, #0
 8007f0c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007f0e:	683b      	ldr	r3, [r7, #0]
 8007f10:	f383 8811 	msr	BASEPRI, r3
}
 8007f14:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007f16:	bf00      	nop
 8007f18:	370c      	adds	r7, #12
 8007f1a:	46bd      	mov	sp, r7
 8007f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f20:	4770      	bx	lr
 8007f22:	bf00      	nop
 8007f24:	2000000c 	.word	0x2000000c
	...

08007f30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007f30:	f3ef 8009 	mrs	r0, PSP
 8007f34:	f3bf 8f6f 	isb	sy
 8007f38:	4b15      	ldr	r3, [pc, #84]	; (8007f90 <pxCurrentTCBConst>)
 8007f3a:	681a      	ldr	r2, [r3, #0]
 8007f3c:	f01e 0f10 	tst.w	lr, #16
 8007f40:	bf08      	it	eq
 8007f42:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007f46:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f4a:	6010      	str	r0, [r2, #0]
 8007f4c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007f50:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007f54:	f380 8811 	msr	BASEPRI, r0
 8007f58:	f3bf 8f4f 	dsb	sy
 8007f5c:	f3bf 8f6f 	isb	sy
 8007f60:	f7fe fca8 	bl	80068b4 <vTaskSwitchContext>
 8007f64:	f04f 0000 	mov.w	r0, #0
 8007f68:	f380 8811 	msr	BASEPRI, r0
 8007f6c:	bc09      	pop	{r0, r3}
 8007f6e:	6819      	ldr	r1, [r3, #0]
 8007f70:	6808      	ldr	r0, [r1, #0]
 8007f72:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f76:	f01e 0f10 	tst.w	lr, #16
 8007f7a:	bf08      	it	eq
 8007f7c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007f80:	f380 8809 	msr	PSP, r0
 8007f84:	f3bf 8f6f 	isb	sy
 8007f88:	4770      	bx	lr
 8007f8a:	bf00      	nop
 8007f8c:	f3af 8000 	nop.w

08007f90 <pxCurrentTCBConst>:
 8007f90:	2000069c 	.word	0x2000069c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007f94:	bf00      	nop
 8007f96:	bf00      	nop

08007f98 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007f98:	b580      	push	{r7, lr}
 8007f9a:	b082      	sub	sp, #8
 8007f9c:	af00      	add	r7, sp, #0
	__asm volatile
 8007f9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fa2:	f383 8811 	msr	BASEPRI, r3
 8007fa6:	f3bf 8f6f 	isb	sy
 8007faa:	f3bf 8f4f 	dsb	sy
 8007fae:	607b      	str	r3, [r7, #4]
}
 8007fb0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007fb2:	f7fe fbb9 	bl	8006728 <xTaskIncrementTick>
 8007fb6:	4603      	mov	r3, r0
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d003      	beq.n	8007fc4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007fbc:	4b06      	ldr	r3, [pc, #24]	; (8007fd8 <SysTick_Handler+0x40>)
 8007fbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007fc2:	601a      	str	r2, [r3, #0]
 8007fc4:	2300      	movs	r3, #0
 8007fc6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007fc8:	683b      	ldr	r3, [r7, #0]
 8007fca:	f383 8811 	msr	BASEPRI, r3
}
 8007fce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007fd0:	bf00      	nop
 8007fd2:	3708      	adds	r7, #8
 8007fd4:	46bd      	mov	sp, r7
 8007fd6:	bd80      	pop	{r7, pc}
 8007fd8:	e000ed04 	.word	0xe000ed04

08007fdc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007fdc:	b480      	push	{r7}
 8007fde:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007fe0:	4b0b      	ldr	r3, [pc, #44]	; (8008010 <vPortSetupTimerInterrupt+0x34>)
 8007fe2:	2200      	movs	r2, #0
 8007fe4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007fe6:	4b0b      	ldr	r3, [pc, #44]	; (8008014 <vPortSetupTimerInterrupt+0x38>)
 8007fe8:	2200      	movs	r2, #0
 8007fea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007fec:	4b0a      	ldr	r3, [pc, #40]	; (8008018 <vPortSetupTimerInterrupt+0x3c>)
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	4a0a      	ldr	r2, [pc, #40]	; (800801c <vPortSetupTimerInterrupt+0x40>)
 8007ff2:	fba2 2303 	umull	r2, r3, r2, r3
 8007ff6:	099b      	lsrs	r3, r3, #6
 8007ff8:	4a09      	ldr	r2, [pc, #36]	; (8008020 <vPortSetupTimerInterrupt+0x44>)
 8007ffa:	3b01      	subs	r3, #1
 8007ffc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007ffe:	4b04      	ldr	r3, [pc, #16]	; (8008010 <vPortSetupTimerInterrupt+0x34>)
 8008000:	2207      	movs	r2, #7
 8008002:	601a      	str	r2, [r3, #0]
}
 8008004:	bf00      	nop
 8008006:	46bd      	mov	sp, r7
 8008008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800800c:	4770      	bx	lr
 800800e:	bf00      	nop
 8008010:	e000e010 	.word	0xe000e010
 8008014:	e000e018 	.word	0xe000e018
 8008018:	20000000 	.word	0x20000000
 800801c:	10624dd3 	.word	0x10624dd3
 8008020:	e000e014 	.word	0xe000e014

08008024 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008024:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008034 <vPortEnableVFP+0x10>
 8008028:	6801      	ldr	r1, [r0, #0]
 800802a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800802e:	6001      	str	r1, [r0, #0]
 8008030:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008032:	bf00      	nop
 8008034:	e000ed88 	.word	0xe000ed88

08008038 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008038:	b480      	push	{r7}
 800803a:	b085      	sub	sp, #20
 800803c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800803e:	f3ef 8305 	mrs	r3, IPSR
 8008042:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	2b0f      	cmp	r3, #15
 8008048:	d914      	bls.n	8008074 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800804a:	4a17      	ldr	r2, [pc, #92]	; (80080a8 <vPortValidateInterruptPriority+0x70>)
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	4413      	add	r3, r2
 8008050:	781b      	ldrb	r3, [r3, #0]
 8008052:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008054:	4b15      	ldr	r3, [pc, #84]	; (80080ac <vPortValidateInterruptPriority+0x74>)
 8008056:	781b      	ldrb	r3, [r3, #0]
 8008058:	7afa      	ldrb	r2, [r7, #11]
 800805a:	429a      	cmp	r2, r3
 800805c:	d20a      	bcs.n	8008074 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800805e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008062:	f383 8811 	msr	BASEPRI, r3
 8008066:	f3bf 8f6f 	isb	sy
 800806a:	f3bf 8f4f 	dsb	sy
 800806e:	607b      	str	r3, [r7, #4]
}
 8008070:	bf00      	nop
 8008072:	e7fe      	b.n	8008072 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008074:	4b0e      	ldr	r3, [pc, #56]	; (80080b0 <vPortValidateInterruptPriority+0x78>)
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800807c:	4b0d      	ldr	r3, [pc, #52]	; (80080b4 <vPortValidateInterruptPriority+0x7c>)
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	429a      	cmp	r2, r3
 8008082:	d90a      	bls.n	800809a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8008084:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008088:	f383 8811 	msr	BASEPRI, r3
 800808c:	f3bf 8f6f 	isb	sy
 8008090:	f3bf 8f4f 	dsb	sy
 8008094:	603b      	str	r3, [r7, #0]
}
 8008096:	bf00      	nop
 8008098:	e7fe      	b.n	8008098 <vPortValidateInterruptPriority+0x60>
	}
 800809a:	bf00      	nop
 800809c:	3714      	adds	r7, #20
 800809e:	46bd      	mov	sp, r7
 80080a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a4:	4770      	bx	lr
 80080a6:	bf00      	nop
 80080a8:	e000e3f0 	.word	0xe000e3f0
 80080ac:	200008ec 	.word	0x200008ec
 80080b0:	e000ed0c 	.word	0xe000ed0c
 80080b4:	200008f0 	.word	0x200008f0

080080b8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80080b8:	b580      	push	{r7, lr}
 80080ba:	b08a      	sub	sp, #40	; 0x28
 80080bc:	af00      	add	r7, sp, #0
 80080be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80080c0:	2300      	movs	r3, #0
 80080c2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80080c4:	f7fe f9aa 	bl	800641c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80080c8:	4b58      	ldr	r3, [pc, #352]	; (800822c <pvPortMalloc+0x174>)
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d101      	bne.n	80080d4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80080d0:	f000 f910 	bl	80082f4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80080d4:	4b56      	ldr	r3, [pc, #344]	; (8008230 <pvPortMalloc+0x178>)
 80080d6:	681a      	ldr	r2, [r3, #0]
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	4013      	ands	r3, r2
 80080dc:	2b00      	cmp	r3, #0
 80080de:	f040 808e 	bne.w	80081fe <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d01d      	beq.n	8008124 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80080e8:	2208      	movs	r2, #8
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	4413      	add	r3, r2
 80080ee:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	f003 0307 	and.w	r3, r3, #7
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d014      	beq.n	8008124 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	f023 0307 	bic.w	r3, r3, #7
 8008100:	3308      	adds	r3, #8
 8008102:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	f003 0307 	and.w	r3, r3, #7
 800810a:	2b00      	cmp	r3, #0
 800810c:	d00a      	beq.n	8008124 <pvPortMalloc+0x6c>
	__asm volatile
 800810e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008112:	f383 8811 	msr	BASEPRI, r3
 8008116:	f3bf 8f6f 	isb	sy
 800811a:	f3bf 8f4f 	dsb	sy
 800811e:	617b      	str	r3, [r7, #20]
}
 8008120:	bf00      	nop
 8008122:	e7fe      	b.n	8008122 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	2b00      	cmp	r3, #0
 8008128:	d069      	beq.n	80081fe <pvPortMalloc+0x146>
 800812a:	4b42      	ldr	r3, [pc, #264]	; (8008234 <pvPortMalloc+0x17c>)
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	687a      	ldr	r2, [r7, #4]
 8008130:	429a      	cmp	r2, r3
 8008132:	d864      	bhi.n	80081fe <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008134:	4b40      	ldr	r3, [pc, #256]	; (8008238 <pvPortMalloc+0x180>)
 8008136:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008138:	4b3f      	ldr	r3, [pc, #252]	; (8008238 <pvPortMalloc+0x180>)
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800813e:	e004      	b.n	800814a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008142:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800814a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800814c:	685b      	ldr	r3, [r3, #4]
 800814e:	687a      	ldr	r2, [r7, #4]
 8008150:	429a      	cmp	r2, r3
 8008152:	d903      	bls.n	800815c <pvPortMalloc+0xa4>
 8008154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	2b00      	cmp	r3, #0
 800815a:	d1f1      	bne.n	8008140 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800815c:	4b33      	ldr	r3, [pc, #204]	; (800822c <pvPortMalloc+0x174>)
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008162:	429a      	cmp	r2, r3
 8008164:	d04b      	beq.n	80081fe <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008166:	6a3b      	ldr	r3, [r7, #32]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	2208      	movs	r2, #8
 800816c:	4413      	add	r3, r2
 800816e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008172:	681a      	ldr	r2, [r3, #0]
 8008174:	6a3b      	ldr	r3, [r7, #32]
 8008176:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800817a:	685a      	ldr	r2, [r3, #4]
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	1ad2      	subs	r2, r2, r3
 8008180:	2308      	movs	r3, #8
 8008182:	005b      	lsls	r3, r3, #1
 8008184:	429a      	cmp	r2, r3
 8008186:	d91f      	bls.n	80081c8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008188:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	4413      	add	r3, r2
 800818e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008190:	69bb      	ldr	r3, [r7, #24]
 8008192:	f003 0307 	and.w	r3, r3, #7
 8008196:	2b00      	cmp	r3, #0
 8008198:	d00a      	beq.n	80081b0 <pvPortMalloc+0xf8>
	__asm volatile
 800819a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800819e:	f383 8811 	msr	BASEPRI, r3
 80081a2:	f3bf 8f6f 	isb	sy
 80081a6:	f3bf 8f4f 	dsb	sy
 80081aa:	613b      	str	r3, [r7, #16]
}
 80081ac:	bf00      	nop
 80081ae:	e7fe      	b.n	80081ae <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80081b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081b2:	685a      	ldr	r2, [r3, #4]
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	1ad2      	subs	r2, r2, r3
 80081b8:	69bb      	ldr	r3, [r7, #24]
 80081ba:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80081bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081be:	687a      	ldr	r2, [r7, #4]
 80081c0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80081c2:	69b8      	ldr	r0, [r7, #24]
 80081c4:	f000 f8f8 	bl	80083b8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80081c8:	4b1a      	ldr	r3, [pc, #104]	; (8008234 <pvPortMalloc+0x17c>)
 80081ca:	681a      	ldr	r2, [r3, #0]
 80081cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081ce:	685b      	ldr	r3, [r3, #4]
 80081d0:	1ad3      	subs	r3, r2, r3
 80081d2:	4a18      	ldr	r2, [pc, #96]	; (8008234 <pvPortMalloc+0x17c>)
 80081d4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80081d6:	4b17      	ldr	r3, [pc, #92]	; (8008234 <pvPortMalloc+0x17c>)
 80081d8:	681a      	ldr	r2, [r3, #0]
 80081da:	4b18      	ldr	r3, [pc, #96]	; (800823c <pvPortMalloc+0x184>)
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	429a      	cmp	r2, r3
 80081e0:	d203      	bcs.n	80081ea <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80081e2:	4b14      	ldr	r3, [pc, #80]	; (8008234 <pvPortMalloc+0x17c>)
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	4a15      	ldr	r2, [pc, #84]	; (800823c <pvPortMalloc+0x184>)
 80081e8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80081ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081ec:	685a      	ldr	r2, [r3, #4]
 80081ee:	4b10      	ldr	r3, [pc, #64]	; (8008230 <pvPortMalloc+0x178>)
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	431a      	orrs	r2, r3
 80081f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081f6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80081f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081fa:	2200      	movs	r2, #0
 80081fc:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80081fe:	f7fe f91b 	bl	8006438 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008202:	69fb      	ldr	r3, [r7, #28]
 8008204:	f003 0307 	and.w	r3, r3, #7
 8008208:	2b00      	cmp	r3, #0
 800820a:	d00a      	beq.n	8008222 <pvPortMalloc+0x16a>
	__asm volatile
 800820c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008210:	f383 8811 	msr	BASEPRI, r3
 8008214:	f3bf 8f6f 	isb	sy
 8008218:	f3bf 8f4f 	dsb	sy
 800821c:	60fb      	str	r3, [r7, #12]
}
 800821e:	bf00      	nop
 8008220:	e7fe      	b.n	8008220 <pvPortMalloc+0x168>
	return pvReturn;
 8008222:	69fb      	ldr	r3, [r7, #28]
}
 8008224:	4618      	mov	r0, r3
 8008226:	3728      	adds	r7, #40	; 0x28
 8008228:	46bd      	mov	sp, r7
 800822a:	bd80      	pop	{r7, pc}
 800822c:	20002454 	.word	0x20002454
 8008230:	20002460 	.word	0x20002460
 8008234:	20002458 	.word	0x20002458
 8008238:	2000244c 	.word	0x2000244c
 800823c:	2000245c 	.word	0x2000245c

08008240 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008240:	b580      	push	{r7, lr}
 8008242:	b086      	sub	sp, #24
 8008244:	af00      	add	r7, sp, #0
 8008246:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	2b00      	cmp	r3, #0
 8008250:	d048      	beq.n	80082e4 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008252:	2308      	movs	r3, #8
 8008254:	425b      	negs	r3, r3
 8008256:	697a      	ldr	r2, [r7, #20]
 8008258:	4413      	add	r3, r2
 800825a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800825c:	697b      	ldr	r3, [r7, #20]
 800825e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008260:	693b      	ldr	r3, [r7, #16]
 8008262:	685a      	ldr	r2, [r3, #4]
 8008264:	4b21      	ldr	r3, [pc, #132]	; (80082ec <vPortFree+0xac>)
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	4013      	ands	r3, r2
 800826a:	2b00      	cmp	r3, #0
 800826c:	d10a      	bne.n	8008284 <vPortFree+0x44>
	__asm volatile
 800826e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008272:	f383 8811 	msr	BASEPRI, r3
 8008276:	f3bf 8f6f 	isb	sy
 800827a:	f3bf 8f4f 	dsb	sy
 800827e:	60fb      	str	r3, [r7, #12]
}
 8008280:	bf00      	nop
 8008282:	e7fe      	b.n	8008282 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008284:	693b      	ldr	r3, [r7, #16]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	2b00      	cmp	r3, #0
 800828a:	d00a      	beq.n	80082a2 <vPortFree+0x62>
	__asm volatile
 800828c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008290:	f383 8811 	msr	BASEPRI, r3
 8008294:	f3bf 8f6f 	isb	sy
 8008298:	f3bf 8f4f 	dsb	sy
 800829c:	60bb      	str	r3, [r7, #8]
}
 800829e:	bf00      	nop
 80082a0:	e7fe      	b.n	80082a0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80082a2:	693b      	ldr	r3, [r7, #16]
 80082a4:	685a      	ldr	r2, [r3, #4]
 80082a6:	4b11      	ldr	r3, [pc, #68]	; (80082ec <vPortFree+0xac>)
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	4013      	ands	r3, r2
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d019      	beq.n	80082e4 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80082b0:	693b      	ldr	r3, [r7, #16]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d115      	bne.n	80082e4 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80082b8:	693b      	ldr	r3, [r7, #16]
 80082ba:	685a      	ldr	r2, [r3, #4]
 80082bc:	4b0b      	ldr	r3, [pc, #44]	; (80082ec <vPortFree+0xac>)
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	43db      	mvns	r3, r3
 80082c2:	401a      	ands	r2, r3
 80082c4:	693b      	ldr	r3, [r7, #16]
 80082c6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80082c8:	f7fe f8a8 	bl	800641c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80082cc:	693b      	ldr	r3, [r7, #16]
 80082ce:	685a      	ldr	r2, [r3, #4]
 80082d0:	4b07      	ldr	r3, [pc, #28]	; (80082f0 <vPortFree+0xb0>)
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	4413      	add	r3, r2
 80082d6:	4a06      	ldr	r2, [pc, #24]	; (80082f0 <vPortFree+0xb0>)
 80082d8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80082da:	6938      	ldr	r0, [r7, #16]
 80082dc:	f000 f86c 	bl	80083b8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80082e0:	f7fe f8aa 	bl	8006438 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80082e4:	bf00      	nop
 80082e6:	3718      	adds	r7, #24
 80082e8:	46bd      	mov	sp, r7
 80082ea:	bd80      	pop	{r7, pc}
 80082ec:	20002460 	.word	0x20002460
 80082f0:	20002458 	.word	0x20002458

080082f4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80082f4:	b480      	push	{r7}
 80082f6:	b085      	sub	sp, #20
 80082f8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80082fa:	f641 3358 	movw	r3, #7000	; 0x1b58
 80082fe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008300:	4b27      	ldr	r3, [pc, #156]	; (80083a0 <prvHeapInit+0xac>)
 8008302:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	f003 0307 	and.w	r3, r3, #7
 800830a:	2b00      	cmp	r3, #0
 800830c:	d00c      	beq.n	8008328 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	3307      	adds	r3, #7
 8008312:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	f023 0307 	bic.w	r3, r3, #7
 800831a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800831c:	68ba      	ldr	r2, [r7, #8]
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	1ad3      	subs	r3, r2, r3
 8008322:	4a1f      	ldr	r2, [pc, #124]	; (80083a0 <prvHeapInit+0xac>)
 8008324:	4413      	add	r3, r2
 8008326:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800832c:	4a1d      	ldr	r2, [pc, #116]	; (80083a4 <prvHeapInit+0xb0>)
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008332:	4b1c      	ldr	r3, [pc, #112]	; (80083a4 <prvHeapInit+0xb0>)
 8008334:	2200      	movs	r2, #0
 8008336:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	68ba      	ldr	r2, [r7, #8]
 800833c:	4413      	add	r3, r2
 800833e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008340:	2208      	movs	r2, #8
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	1a9b      	subs	r3, r3, r2
 8008346:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	f023 0307 	bic.w	r3, r3, #7
 800834e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	4a15      	ldr	r2, [pc, #84]	; (80083a8 <prvHeapInit+0xb4>)
 8008354:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008356:	4b14      	ldr	r3, [pc, #80]	; (80083a8 <prvHeapInit+0xb4>)
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	2200      	movs	r2, #0
 800835c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800835e:	4b12      	ldr	r3, [pc, #72]	; (80083a8 <prvHeapInit+0xb4>)
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	2200      	movs	r2, #0
 8008364:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800836a:	683b      	ldr	r3, [r7, #0]
 800836c:	68fa      	ldr	r2, [r7, #12]
 800836e:	1ad2      	subs	r2, r2, r3
 8008370:	683b      	ldr	r3, [r7, #0]
 8008372:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008374:	4b0c      	ldr	r3, [pc, #48]	; (80083a8 <prvHeapInit+0xb4>)
 8008376:	681a      	ldr	r2, [r3, #0]
 8008378:	683b      	ldr	r3, [r7, #0]
 800837a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800837c:	683b      	ldr	r3, [r7, #0]
 800837e:	685b      	ldr	r3, [r3, #4]
 8008380:	4a0a      	ldr	r2, [pc, #40]	; (80083ac <prvHeapInit+0xb8>)
 8008382:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008384:	683b      	ldr	r3, [r7, #0]
 8008386:	685b      	ldr	r3, [r3, #4]
 8008388:	4a09      	ldr	r2, [pc, #36]	; (80083b0 <prvHeapInit+0xbc>)
 800838a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800838c:	4b09      	ldr	r3, [pc, #36]	; (80083b4 <prvHeapInit+0xc0>)
 800838e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008392:	601a      	str	r2, [r3, #0]
}
 8008394:	bf00      	nop
 8008396:	3714      	adds	r7, #20
 8008398:	46bd      	mov	sp, r7
 800839a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800839e:	4770      	bx	lr
 80083a0:	200008f4 	.word	0x200008f4
 80083a4:	2000244c 	.word	0x2000244c
 80083a8:	20002454 	.word	0x20002454
 80083ac:	2000245c 	.word	0x2000245c
 80083b0:	20002458 	.word	0x20002458
 80083b4:	20002460 	.word	0x20002460

080083b8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80083b8:	b480      	push	{r7}
 80083ba:	b085      	sub	sp, #20
 80083bc:	af00      	add	r7, sp, #0
 80083be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80083c0:	4b28      	ldr	r3, [pc, #160]	; (8008464 <prvInsertBlockIntoFreeList+0xac>)
 80083c2:	60fb      	str	r3, [r7, #12]
 80083c4:	e002      	b.n	80083cc <prvInsertBlockIntoFreeList+0x14>
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	60fb      	str	r3, [r7, #12]
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	687a      	ldr	r2, [r7, #4]
 80083d2:	429a      	cmp	r2, r3
 80083d4:	d8f7      	bhi.n	80083c6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	685b      	ldr	r3, [r3, #4]
 80083de:	68ba      	ldr	r2, [r7, #8]
 80083e0:	4413      	add	r3, r2
 80083e2:	687a      	ldr	r2, [r7, #4]
 80083e4:	429a      	cmp	r2, r3
 80083e6:	d108      	bne.n	80083fa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	685a      	ldr	r2, [r3, #4]
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	685b      	ldr	r3, [r3, #4]
 80083f0:	441a      	add	r2, r3
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	685b      	ldr	r3, [r3, #4]
 8008402:	68ba      	ldr	r2, [r7, #8]
 8008404:	441a      	add	r2, r3
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	429a      	cmp	r2, r3
 800840c:	d118      	bne.n	8008440 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	681a      	ldr	r2, [r3, #0]
 8008412:	4b15      	ldr	r3, [pc, #84]	; (8008468 <prvInsertBlockIntoFreeList+0xb0>)
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	429a      	cmp	r2, r3
 8008418:	d00d      	beq.n	8008436 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	685a      	ldr	r2, [r3, #4]
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	685b      	ldr	r3, [r3, #4]
 8008424:	441a      	add	r2, r3
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	681a      	ldr	r2, [r3, #0]
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	601a      	str	r2, [r3, #0]
 8008434:	e008      	b.n	8008448 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008436:	4b0c      	ldr	r3, [pc, #48]	; (8008468 <prvInsertBlockIntoFreeList+0xb0>)
 8008438:	681a      	ldr	r2, [r3, #0]
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	601a      	str	r2, [r3, #0]
 800843e:	e003      	b.n	8008448 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	681a      	ldr	r2, [r3, #0]
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008448:	68fa      	ldr	r2, [r7, #12]
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	429a      	cmp	r2, r3
 800844e:	d002      	beq.n	8008456 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	687a      	ldr	r2, [r7, #4]
 8008454:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008456:	bf00      	nop
 8008458:	3714      	adds	r7, #20
 800845a:	46bd      	mov	sp, r7
 800845c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008460:	4770      	bx	lr
 8008462:	bf00      	nop
 8008464:	2000244c 	.word	0x2000244c
 8008468:	20002454 	.word	0x20002454

0800846c <arm_mean_q15>:
 800846c:	ea5f 0c91 	movs.w	ip, r1, lsr #2
 8008470:	b4f0      	push	{r4, r5, r6, r7}
 8008472:	d028      	beq.n	80084c6 <arm_mean_q15+0x5a>
 8008474:	4604      	mov	r4, r0
 8008476:	4665      	mov	r5, ip
 8008478:	2300      	movs	r3, #0
 800847a:	6827      	ldr	r7, [r4, #0]
 800847c:	6866      	ldr	r6, [r4, #4]
 800847e:	fa03 f387 	sxtah	r3, r3, r7
 8008482:	eb03 4327 	add.w	r3, r3, r7, asr #16
 8008486:	fa03 f386 	sxtah	r3, r3, r6
 800848a:	3d01      	subs	r5, #1
 800848c:	eb03 4326 	add.w	r3, r3, r6, asr #16
 8008490:	f104 0408 	add.w	r4, r4, #8
 8008494:	d1f1      	bne.n	800847a <arm_mean_q15+0xe>
 8008496:	eb00 00cc 	add.w	r0, r0, ip, lsl #3
 800849a:	f011 0403 	ands.w	r4, r1, #3
 800849e:	d00d      	beq.n	80084bc <arm_mean_q15+0x50>
 80084a0:	f9b0 5000 	ldrsh.w	r5, [r0]
 80084a4:	3c01      	subs	r4, #1
 80084a6:	442b      	add	r3, r5
 80084a8:	d008      	beq.n	80084bc <arm_mean_q15+0x50>
 80084aa:	f9b0 5002 	ldrsh.w	r5, [r0, #2]
 80084ae:	2c01      	cmp	r4, #1
 80084b0:	bf18      	it	ne
 80084b2:	f9b0 0004 	ldrshne.w	r0, [r0, #4]
 80084b6:	442b      	add	r3, r5
 80084b8:	bf18      	it	ne
 80084ba:	181b      	addne	r3, r3, r0
 80084bc:	fb93 f3f1 	sdiv	r3, r3, r1
 80084c0:	bcf0      	pop	{r4, r5, r6, r7}
 80084c2:	8013      	strh	r3, [r2, #0]
 80084c4:	4770      	bx	lr
 80084c6:	4663      	mov	r3, ip
 80084c8:	e7e7      	b.n	800849a <arm_mean_q15+0x2e>
 80084ca:	bf00      	nop

080084cc <__errno>:
 80084cc:	4b01      	ldr	r3, [pc, #4]	; (80084d4 <__errno+0x8>)
 80084ce:	6818      	ldr	r0, [r3, #0]
 80084d0:	4770      	bx	lr
 80084d2:	bf00      	nop
 80084d4:	20000010 	.word	0x20000010

080084d8 <__libc_init_array>:
 80084d8:	b570      	push	{r4, r5, r6, lr}
 80084da:	4d0d      	ldr	r5, [pc, #52]	; (8008510 <__libc_init_array+0x38>)
 80084dc:	4c0d      	ldr	r4, [pc, #52]	; (8008514 <__libc_init_array+0x3c>)
 80084de:	1b64      	subs	r4, r4, r5
 80084e0:	10a4      	asrs	r4, r4, #2
 80084e2:	2600      	movs	r6, #0
 80084e4:	42a6      	cmp	r6, r4
 80084e6:	d109      	bne.n	80084fc <__libc_init_array+0x24>
 80084e8:	4d0b      	ldr	r5, [pc, #44]	; (8008518 <__libc_init_array+0x40>)
 80084ea:	4c0c      	ldr	r4, [pc, #48]	; (800851c <__libc_init_array+0x44>)
 80084ec:	f000 fcf8 	bl	8008ee0 <_init>
 80084f0:	1b64      	subs	r4, r4, r5
 80084f2:	10a4      	asrs	r4, r4, #2
 80084f4:	2600      	movs	r6, #0
 80084f6:	42a6      	cmp	r6, r4
 80084f8:	d105      	bne.n	8008506 <__libc_init_array+0x2e>
 80084fa:	bd70      	pop	{r4, r5, r6, pc}
 80084fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8008500:	4798      	blx	r3
 8008502:	3601      	adds	r6, #1
 8008504:	e7ee      	b.n	80084e4 <__libc_init_array+0xc>
 8008506:	f855 3b04 	ldr.w	r3, [r5], #4
 800850a:	4798      	blx	r3
 800850c:	3601      	adds	r6, #1
 800850e:	e7f2      	b.n	80084f6 <__libc_init_array+0x1e>
 8008510:	080090a4 	.word	0x080090a4
 8008514:	080090a4 	.word	0x080090a4
 8008518:	080090a4 	.word	0x080090a4
 800851c:	080090a8 	.word	0x080090a8

08008520 <__retarget_lock_acquire_recursive>:
 8008520:	4770      	bx	lr

08008522 <__retarget_lock_release_recursive>:
 8008522:	4770      	bx	lr

08008524 <memcpy>:
 8008524:	440a      	add	r2, r1
 8008526:	4291      	cmp	r1, r2
 8008528:	f100 33ff 	add.w	r3, r0, #4294967295
 800852c:	d100      	bne.n	8008530 <memcpy+0xc>
 800852e:	4770      	bx	lr
 8008530:	b510      	push	{r4, lr}
 8008532:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008536:	f803 4f01 	strb.w	r4, [r3, #1]!
 800853a:	4291      	cmp	r1, r2
 800853c:	d1f9      	bne.n	8008532 <memcpy+0xe>
 800853e:	bd10      	pop	{r4, pc}

08008540 <memset>:
 8008540:	4402      	add	r2, r0
 8008542:	4603      	mov	r3, r0
 8008544:	4293      	cmp	r3, r2
 8008546:	d100      	bne.n	800854a <memset+0xa>
 8008548:	4770      	bx	lr
 800854a:	f803 1b01 	strb.w	r1, [r3], #1
 800854e:	e7f9      	b.n	8008544 <memset+0x4>

08008550 <sbrk_aligned>:
 8008550:	b570      	push	{r4, r5, r6, lr}
 8008552:	4e0e      	ldr	r6, [pc, #56]	; (800858c <sbrk_aligned+0x3c>)
 8008554:	460c      	mov	r4, r1
 8008556:	6831      	ldr	r1, [r6, #0]
 8008558:	4605      	mov	r5, r0
 800855a:	b911      	cbnz	r1, 8008562 <sbrk_aligned+0x12>
 800855c:	f000 f8f6 	bl	800874c <_sbrk_r>
 8008560:	6030      	str	r0, [r6, #0]
 8008562:	4621      	mov	r1, r4
 8008564:	4628      	mov	r0, r5
 8008566:	f000 f8f1 	bl	800874c <_sbrk_r>
 800856a:	1c43      	adds	r3, r0, #1
 800856c:	d00a      	beq.n	8008584 <sbrk_aligned+0x34>
 800856e:	1cc4      	adds	r4, r0, #3
 8008570:	f024 0403 	bic.w	r4, r4, #3
 8008574:	42a0      	cmp	r0, r4
 8008576:	d007      	beq.n	8008588 <sbrk_aligned+0x38>
 8008578:	1a21      	subs	r1, r4, r0
 800857a:	4628      	mov	r0, r5
 800857c:	f000 f8e6 	bl	800874c <_sbrk_r>
 8008580:	3001      	adds	r0, #1
 8008582:	d101      	bne.n	8008588 <sbrk_aligned+0x38>
 8008584:	f04f 34ff 	mov.w	r4, #4294967295
 8008588:	4620      	mov	r0, r4
 800858a:	bd70      	pop	{r4, r5, r6, pc}
 800858c:	2000246c 	.word	0x2000246c

08008590 <_malloc_r>:
 8008590:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008594:	1ccd      	adds	r5, r1, #3
 8008596:	f025 0503 	bic.w	r5, r5, #3
 800859a:	3508      	adds	r5, #8
 800859c:	2d0c      	cmp	r5, #12
 800859e:	bf38      	it	cc
 80085a0:	250c      	movcc	r5, #12
 80085a2:	2d00      	cmp	r5, #0
 80085a4:	4607      	mov	r7, r0
 80085a6:	db01      	blt.n	80085ac <_malloc_r+0x1c>
 80085a8:	42a9      	cmp	r1, r5
 80085aa:	d905      	bls.n	80085b8 <_malloc_r+0x28>
 80085ac:	230c      	movs	r3, #12
 80085ae:	603b      	str	r3, [r7, #0]
 80085b0:	2600      	movs	r6, #0
 80085b2:	4630      	mov	r0, r6
 80085b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80085b8:	4e2e      	ldr	r6, [pc, #184]	; (8008674 <_malloc_r+0xe4>)
 80085ba:	f000 f8f7 	bl	80087ac <__malloc_lock>
 80085be:	6833      	ldr	r3, [r6, #0]
 80085c0:	461c      	mov	r4, r3
 80085c2:	bb34      	cbnz	r4, 8008612 <_malloc_r+0x82>
 80085c4:	4629      	mov	r1, r5
 80085c6:	4638      	mov	r0, r7
 80085c8:	f7ff ffc2 	bl	8008550 <sbrk_aligned>
 80085cc:	1c43      	adds	r3, r0, #1
 80085ce:	4604      	mov	r4, r0
 80085d0:	d14d      	bne.n	800866e <_malloc_r+0xde>
 80085d2:	6834      	ldr	r4, [r6, #0]
 80085d4:	4626      	mov	r6, r4
 80085d6:	2e00      	cmp	r6, #0
 80085d8:	d140      	bne.n	800865c <_malloc_r+0xcc>
 80085da:	6823      	ldr	r3, [r4, #0]
 80085dc:	4631      	mov	r1, r6
 80085de:	4638      	mov	r0, r7
 80085e0:	eb04 0803 	add.w	r8, r4, r3
 80085e4:	f000 f8b2 	bl	800874c <_sbrk_r>
 80085e8:	4580      	cmp	r8, r0
 80085ea:	d13a      	bne.n	8008662 <_malloc_r+0xd2>
 80085ec:	6821      	ldr	r1, [r4, #0]
 80085ee:	3503      	adds	r5, #3
 80085f0:	1a6d      	subs	r5, r5, r1
 80085f2:	f025 0503 	bic.w	r5, r5, #3
 80085f6:	3508      	adds	r5, #8
 80085f8:	2d0c      	cmp	r5, #12
 80085fa:	bf38      	it	cc
 80085fc:	250c      	movcc	r5, #12
 80085fe:	4629      	mov	r1, r5
 8008600:	4638      	mov	r0, r7
 8008602:	f7ff ffa5 	bl	8008550 <sbrk_aligned>
 8008606:	3001      	adds	r0, #1
 8008608:	d02b      	beq.n	8008662 <_malloc_r+0xd2>
 800860a:	6823      	ldr	r3, [r4, #0]
 800860c:	442b      	add	r3, r5
 800860e:	6023      	str	r3, [r4, #0]
 8008610:	e00e      	b.n	8008630 <_malloc_r+0xa0>
 8008612:	6822      	ldr	r2, [r4, #0]
 8008614:	1b52      	subs	r2, r2, r5
 8008616:	d41e      	bmi.n	8008656 <_malloc_r+0xc6>
 8008618:	2a0b      	cmp	r2, #11
 800861a:	d916      	bls.n	800864a <_malloc_r+0xba>
 800861c:	1961      	adds	r1, r4, r5
 800861e:	42a3      	cmp	r3, r4
 8008620:	6025      	str	r5, [r4, #0]
 8008622:	bf18      	it	ne
 8008624:	6059      	strne	r1, [r3, #4]
 8008626:	6863      	ldr	r3, [r4, #4]
 8008628:	bf08      	it	eq
 800862a:	6031      	streq	r1, [r6, #0]
 800862c:	5162      	str	r2, [r4, r5]
 800862e:	604b      	str	r3, [r1, #4]
 8008630:	4638      	mov	r0, r7
 8008632:	f104 060b 	add.w	r6, r4, #11
 8008636:	f000 f8bf 	bl	80087b8 <__malloc_unlock>
 800863a:	f026 0607 	bic.w	r6, r6, #7
 800863e:	1d23      	adds	r3, r4, #4
 8008640:	1af2      	subs	r2, r6, r3
 8008642:	d0b6      	beq.n	80085b2 <_malloc_r+0x22>
 8008644:	1b9b      	subs	r3, r3, r6
 8008646:	50a3      	str	r3, [r4, r2]
 8008648:	e7b3      	b.n	80085b2 <_malloc_r+0x22>
 800864a:	6862      	ldr	r2, [r4, #4]
 800864c:	42a3      	cmp	r3, r4
 800864e:	bf0c      	ite	eq
 8008650:	6032      	streq	r2, [r6, #0]
 8008652:	605a      	strne	r2, [r3, #4]
 8008654:	e7ec      	b.n	8008630 <_malloc_r+0xa0>
 8008656:	4623      	mov	r3, r4
 8008658:	6864      	ldr	r4, [r4, #4]
 800865a:	e7b2      	b.n	80085c2 <_malloc_r+0x32>
 800865c:	4634      	mov	r4, r6
 800865e:	6876      	ldr	r6, [r6, #4]
 8008660:	e7b9      	b.n	80085d6 <_malloc_r+0x46>
 8008662:	230c      	movs	r3, #12
 8008664:	603b      	str	r3, [r7, #0]
 8008666:	4638      	mov	r0, r7
 8008668:	f000 f8a6 	bl	80087b8 <__malloc_unlock>
 800866c:	e7a1      	b.n	80085b2 <_malloc_r+0x22>
 800866e:	6025      	str	r5, [r4, #0]
 8008670:	e7de      	b.n	8008630 <_malloc_r+0xa0>
 8008672:	bf00      	nop
 8008674:	20002468 	.word	0x20002468

08008678 <cleanup_glue>:
 8008678:	b538      	push	{r3, r4, r5, lr}
 800867a:	460c      	mov	r4, r1
 800867c:	6809      	ldr	r1, [r1, #0]
 800867e:	4605      	mov	r5, r0
 8008680:	b109      	cbz	r1, 8008686 <cleanup_glue+0xe>
 8008682:	f7ff fff9 	bl	8008678 <cleanup_glue>
 8008686:	4621      	mov	r1, r4
 8008688:	4628      	mov	r0, r5
 800868a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800868e:	f000 b899 	b.w	80087c4 <_free_r>
	...

08008694 <_reclaim_reent>:
 8008694:	4b2c      	ldr	r3, [pc, #176]	; (8008748 <_reclaim_reent+0xb4>)
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	4283      	cmp	r3, r0
 800869a:	b570      	push	{r4, r5, r6, lr}
 800869c:	4604      	mov	r4, r0
 800869e:	d051      	beq.n	8008744 <_reclaim_reent+0xb0>
 80086a0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80086a2:	b143      	cbz	r3, 80086b6 <_reclaim_reent+0x22>
 80086a4:	68db      	ldr	r3, [r3, #12]
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d14a      	bne.n	8008740 <_reclaim_reent+0xac>
 80086aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80086ac:	6819      	ldr	r1, [r3, #0]
 80086ae:	b111      	cbz	r1, 80086b6 <_reclaim_reent+0x22>
 80086b0:	4620      	mov	r0, r4
 80086b2:	f000 f887 	bl	80087c4 <_free_r>
 80086b6:	6961      	ldr	r1, [r4, #20]
 80086b8:	b111      	cbz	r1, 80086c0 <_reclaim_reent+0x2c>
 80086ba:	4620      	mov	r0, r4
 80086bc:	f000 f882 	bl	80087c4 <_free_r>
 80086c0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80086c2:	b111      	cbz	r1, 80086ca <_reclaim_reent+0x36>
 80086c4:	4620      	mov	r0, r4
 80086c6:	f000 f87d 	bl	80087c4 <_free_r>
 80086ca:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80086cc:	b111      	cbz	r1, 80086d4 <_reclaim_reent+0x40>
 80086ce:	4620      	mov	r0, r4
 80086d0:	f000 f878 	bl	80087c4 <_free_r>
 80086d4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80086d6:	b111      	cbz	r1, 80086de <_reclaim_reent+0x4a>
 80086d8:	4620      	mov	r0, r4
 80086da:	f000 f873 	bl	80087c4 <_free_r>
 80086de:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80086e0:	b111      	cbz	r1, 80086e8 <_reclaim_reent+0x54>
 80086e2:	4620      	mov	r0, r4
 80086e4:	f000 f86e 	bl	80087c4 <_free_r>
 80086e8:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80086ea:	b111      	cbz	r1, 80086f2 <_reclaim_reent+0x5e>
 80086ec:	4620      	mov	r0, r4
 80086ee:	f000 f869 	bl	80087c4 <_free_r>
 80086f2:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80086f4:	b111      	cbz	r1, 80086fc <_reclaim_reent+0x68>
 80086f6:	4620      	mov	r0, r4
 80086f8:	f000 f864 	bl	80087c4 <_free_r>
 80086fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80086fe:	b111      	cbz	r1, 8008706 <_reclaim_reent+0x72>
 8008700:	4620      	mov	r0, r4
 8008702:	f000 f85f 	bl	80087c4 <_free_r>
 8008706:	69a3      	ldr	r3, [r4, #24]
 8008708:	b1e3      	cbz	r3, 8008744 <_reclaim_reent+0xb0>
 800870a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800870c:	4620      	mov	r0, r4
 800870e:	4798      	blx	r3
 8008710:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8008712:	b1b9      	cbz	r1, 8008744 <_reclaim_reent+0xb0>
 8008714:	4620      	mov	r0, r4
 8008716:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800871a:	f7ff bfad 	b.w	8008678 <cleanup_glue>
 800871e:	5949      	ldr	r1, [r1, r5]
 8008720:	b941      	cbnz	r1, 8008734 <_reclaim_reent+0xa0>
 8008722:	3504      	adds	r5, #4
 8008724:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008726:	2d80      	cmp	r5, #128	; 0x80
 8008728:	68d9      	ldr	r1, [r3, #12]
 800872a:	d1f8      	bne.n	800871e <_reclaim_reent+0x8a>
 800872c:	4620      	mov	r0, r4
 800872e:	f000 f849 	bl	80087c4 <_free_r>
 8008732:	e7ba      	b.n	80086aa <_reclaim_reent+0x16>
 8008734:	680e      	ldr	r6, [r1, #0]
 8008736:	4620      	mov	r0, r4
 8008738:	f000 f844 	bl	80087c4 <_free_r>
 800873c:	4631      	mov	r1, r6
 800873e:	e7ef      	b.n	8008720 <_reclaim_reent+0x8c>
 8008740:	2500      	movs	r5, #0
 8008742:	e7ef      	b.n	8008724 <_reclaim_reent+0x90>
 8008744:	bd70      	pop	{r4, r5, r6, pc}
 8008746:	bf00      	nop
 8008748:	20000010 	.word	0x20000010

0800874c <_sbrk_r>:
 800874c:	b538      	push	{r3, r4, r5, lr}
 800874e:	4d06      	ldr	r5, [pc, #24]	; (8008768 <_sbrk_r+0x1c>)
 8008750:	2300      	movs	r3, #0
 8008752:	4604      	mov	r4, r0
 8008754:	4608      	mov	r0, r1
 8008756:	602b      	str	r3, [r5, #0]
 8008758:	f7f8 fc40 	bl	8000fdc <_sbrk>
 800875c:	1c43      	adds	r3, r0, #1
 800875e:	d102      	bne.n	8008766 <_sbrk_r+0x1a>
 8008760:	682b      	ldr	r3, [r5, #0]
 8008762:	b103      	cbz	r3, 8008766 <_sbrk_r+0x1a>
 8008764:	6023      	str	r3, [r4, #0]
 8008766:	bd38      	pop	{r3, r4, r5, pc}
 8008768:	20002470 	.word	0x20002470

0800876c <siprintf>:
 800876c:	b40e      	push	{r1, r2, r3}
 800876e:	b500      	push	{lr}
 8008770:	b09c      	sub	sp, #112	; 0x70
 8008772:	ab1d      	add	r3, sp, #116	; 0x74
 8008774:	9002      	str	r0, [sp, #8]
 8008776:	9006      	str	r0, [sp, #24]
 8008778:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800877c:	4809      	ldr	r0, [pc, #36]	; (80087a4 <siprintf+0x38>)
 800877e:	9107      	str	r1, [sp, #28]
 8008780:	9104      	str	r1, [sp, #16]
 8008782:	4909      	ldr	r1, [pc, #36]	; (80087a8 <siprintf+0x3c>)
 8008784:	f853 2b04 	ldr.w	r2, [r3], #4
 8008788:	9105      	str	r1, [sp, #20]
 800878a:	6800      	ldr	r0, [r0, #0]
 800878c:	9301      	str	r3, [sp, #4]
 800878e:	a902      	add	r1, sp, #8
 8008790:	f000 f8c0 	bl	8008914 <_svfiprintf_r>
 8008794:	9b02      	ldr	r3, [sp, #8]
 8008796:	2200      	movs	r2, #0
 8008798:	701a      	strb	r2, [r3, #0]
 800879a:	b01c      	add	sp, #112	; 0x70
 800879c:	f85d eb04 	ldr.w	lr, [sp], #4
 80087a0:	b003      	add	sp, #12
 80087a2:	4770      	bx	lr
 80087a4:	20000010 	.word	0x20000010
 80087a8:	ffff0208 	.word	0xffff0208

080087ac <__malloc_lock>:
 80087ac:	4801      	ldr	r0, [pc, #4]	; (80087b4 <__malloc_lock+0x8>)
 80087ae:	f7ff beb7 	b.w	8008520 <__retarget_lock_acquire_recursive>
 80087b2:	bf00      	nop
 80087b4:	20002464 	.word	0x20002464

080087b8 <__malloc_unlock>:
 80087b8:	4801      	ldr	r0, [pc, #4]	; (80087c0 <__malloc_unlock+0x8>)
 80087ba:	f7ff beb2 	b.w	8008522 <__retarget_lock_release_recursive>
 80087be:	bf00      	nop
 80087c0:	20002464 	.word	0x20002464

080087c4 <_free_r>:
 80087c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80087c6:	2900      	cmp	r1, #0
 80087c8:	d044      	beq.n	8008854 <_free_r+0x90>
 80087ca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80087ce:	9001      	str	r0, [sp, #4]
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	f1a1 0404 	sub.w	r4, r1, #4
 80087d6:	bfb8      	it	lt
 80087d8:	18e4      	addlt	r4, r4, r3
 80087da:	f7ff ffe7 	bl	80087ac <__malloc_lock>
 80087de:	4a1e      	ldr	r2, [pc, #120]	; (8008858 <_free_r+0x94>)
 80087e0:	9801      	ldr	r0, [sp, #4]
 80087e2:	6813      	ldr	r3, [r2, #0]
 80087e4:	b933      	cbnz	r3, 80087f4 <_free_r+0x30>
 80087e6:	6063      	str	r3, [r4, #4]
 80087e8:	6014      	str	r4, [r2, #0]
 80087ea:	b003      	add	sp, #12
 80087ec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80087f0:	f7ff bfe2 	b.w	80087b8 <__malloc_unlock>
 80087f4:	42a3      	cmp	r3, r4
 80087f6:	d908      	bls.n	800880a <_free_r+0x46>
 80087f8:	6825      	ldr	r5, [r4, #0]
 80087fa:	1961      	adds	r1, r4, r5
 80087fc:	428b      	cmp	r3, r1
 80087fe:	bf01      	itttt	eq
 8008800:	6819      	ldreq	r1, [r3, #0]
 8008802:	685b      	ldreq	r3, [r3, #4]
 8008804:	1949      	addeq	r1, r1, r5
 8008806:	6021      	streq	r1, [r4, #0]
 8008808:	e7ed      	b.n	80087e6 <_free_r+0x22>
 800880a:	461a      	mov	r2, r3
 800880c:	685b      	ldr	r3, [r3, #4]
 800880e:	b10b      	cbz	r3, 8008814 <_free_r+0x50>
 8008810:	42a3      	cmp	r3, r4
 8008812:	d9fa      	bls.n	800880a <_free_r+0x46>
 8008814:	6811      	ldr	r1, [r2, #0]
 8008816:	1855      	adds	r5, r2, r1
 8008818:	42a5      	cmp	r5, r4
 800881a:	d10b      	bne.n	8008834 <_free_r+0x70>
 800881c:	6824      	ldr	r4, [r4, #0]
 800881e:	4421      	add	r1, r4
 8008820:	1854      	adds	r4, r2, r1
 8008822:	42a3      	cmp	r3, r4
 8008824:	6011      	str	r1, [r2, #0]
 8008826:	d1e0      	bne.n	80087ea <_free_r+0x26>
 8008828:	681c      	ldr	r4, [r3, #0]
 800882a:	685b      	ldr	r3, [r3, #4]
 800882c:	6053      	str	r3, [r2, #4]
 800882e:	4421      	add	r1, r4
 8008830:	6011      	str	r1, [r2, #0]
 8008832:	e7da      	b.n	80087ea <_free_r+0x26>
 8008834:	d902      	bls.n	800883c <_free_r+0x78>
 8008836:	230c      	movs	r3, #12
 8008838:	6003      	str	r3, [r0, #0]
 800883a:	e7d6      	b.n	80087ea <_free_r+0x26>
 800883c:	6825      	ldr	r5, [r4, #0]
 800883e:	1961      	adds	r1, r4, r5
 8008840:	428b      	cmp	r3, r1
 8008842:	bf04      	itt	eq
 8008844:	6819      	ldreq	r1, [r3, #0]
 8008846:	685b      	ldreq	r3, [r3, #4]
 8008848:	6063      	str	r3, [r4, #4]
 800884a:	bf04      	itt	eq
 800884c:	1949      	addeq	r1, r1, r5
 800884e:	6021      	streq	r1, [r4, #0]
 8008850:	6054      	str	r4, [r2, #4]
 8008852:	e7ca      	b.n	80087ea <_free_r+0x26>
 8008854:	b003      	add	sp, #12
 8008856:	bd30      	pop	{r4, r5, pc}
 8008858:	20002468 	.word	0x20002468

0800885c <__ssputs_r>:
 800885c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008860:	688e      	ldr	r6, [r1, #8]
 8008862:	429e      	cmp	r6, r3
 8008864:	4682      	mov	sl, r0
 8008866:	460c      	mov	r4, r1
 8008868:	4690      	mov	r8, r2
 800886a:	461f      	mov	r7, r3
 800886c:	d838      	bhi.n	80088e0 <__ssputs_r+0x84>
 800886e:	898a      	ldrh	r2, [r1, #12]
 8008870:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008874:	d032      	beq.n	80088dc <__ssputs_r+0x80>
 8008876:	6825      	ldr	r5, [r4, #0]
 8008878:	6909      	ldr	r1, [r1, #16]
 800887a:	eba5 0901 	sub.w	r9, r5, r1
 800887e:	6965      	ldr	r5, [r4, #20]
 8008880:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008884:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008888:	3301      	adds	r3, #1
 800888a:	444b      	add	r3, r9
 800888c:	106d      	asrs	r5, r5, #1
 800888e:	429d      	cmp	r5, r3
 8008890:	bf38      	it	cc
 8008892:	461d      	movcc	r5, r3
 8008894:	0553      	lsls	r3, r2, #21
 8008896:	d531      	bpl.n	80088fc <__ssputs_r+0xa0>
 8008898:	4629      	mov	r1, r5
 800889a:	f7ff fe79 	bl	8008590 <_malloc_r>
 800889e:	4606      	mov	r6, r0
 80088a0:	b950      	cbnz	r0, 80088b8 <__ssputs_r+0x5c>
 80088a2:	230c      	movs	r3, #12
 80088a4:	f8ca 3000 	str.w	r3, [sl]
 80088a8:	89a3      	ldrh	r3, [r4, #12]
 80088aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80088ae:	81a3      	strh	r3, [r4, #12]
 80088b0:	f04f 30ff 	mov.w	r0, #4294967295
 80088b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80088b8:	6921      	ldr	r1, [r4, #16]
 80088ba:	464a      	mov	r2, r9
 80088bc:	f7ff fe32 	bl	8008524 <memcpy>
 80088c0:	89a3      	ldrh	r3, [r4, #12]
 80088c2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80088c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80088ca:	81a3      	strh	r3, [r4, #12]
 80088cc:	6126      	str	r6, [r4, #16]
 80088ce:	6165      	str	r5, [r4, #20]
 80088d0:	444e      	add	r6, r9
 80088d2:	eba5 0509 	sub.w	r5, r5, r9
 80088d6:	6026      	str	r6, [r4, #0]
 80088d8:	60a5      	str	r5, [r4, #8]
 80088da:	463e      	mov	r6, r7
 80088dc:	42be      	cmp	r6, r7
 80088de:	d900      	bls.n	80088e2 <__ssputs_r+0x86>
 80088e0:	463e      	mov	r6, r7
 80088e2:	6820      	ldr	r0, [r4, #0]
 80088e4:	4632      	mov	r2, r6
 80088e6:	4641      	mov	r1, r8
 80088e8:	f000 faa8 	bl	8008e3c <memmove>
 80088ec:	68a3      	ldr	r3, [r4, #8]
 80088ee:	1b9b      	subs	r3, r3, r6
 80088f0:	60a3      	str	r3, [r4, #8]
 80088f2:	6823      	ldr	r3, [r4, #0]
 80088f4:	4433      	add	r3, r6
 80088f6:	6023      	str	r3, [r4, #0]
 80088f8:	2000      	movs	r0, #0
 80088fa:	e7db      	b.n	80088b4 <__ssputs_r+0x58>
 80088fc:	462a      	mov	r2, r5
 80088fe:	f000 fab7 	bl	8008e70 <_realloc_r>
 8008902:	4606      	mov	r6, r0
 8008904:	2800      	cmp	r0, #0
 8008906:	d1e1      	bne.n	80088cc <__ssputs_r+0x70>
 8008908:	6921      	ldr	r1, [r4, #16]
 800890a:	4650      	mov	r0, sl
 800890c:	f7ff ff5a 	bl	80087c4 <_free_r>
 8008910:	e7c7      	b.n	80088a2 <__ssputs_r+0x46>
	...

08008914 <_svfiprintf_r>:
 8008914:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008918:	4698      	mov	r8, r3
 800891a:	898b      	ldrh	r3, [r1, #12]
 800891c:	061b      	lsls	r3, r3, #24
 800891e:	b09d      	sub	sp, #116	; 0x74
 8008920:	4607      	mov	r7, r0
 8008922:	460d      	mov	r5, r1
 8008924:	4614      	mov	r4, r2
 8008926:	d50e      	bpl.n	8008946 <_svfiprintf_r+0x32>
 8008928:	690b      	ldr	r3, [r1, #16]
 800892a:	b963      	cbnz	r3, 8008946 <_svfiprintf_r+0x32>
 800892c:	2140      	movs	r1, #64	; 0x40
 800892e:	f7ff fe2f 	bl	8008590 <_malloc_r>
 8008932:	6028      	str	r0, [r5, #0]
 8008934:	6128      	str	r0, [r5, #16]
 8008936:	b920      	cbnz	r0, 8008942 <_svfiprintf_r+0x2e>
 8008938:	230c      	movs	r3, #12
 800893a:	603b      	str	r3, [r7, #0]
 800893c:	f04f 30ff 	mov.w	r0, #4294967295
 8008940:	e0d1      	b.n	8008ae6 <_svfiprintf_r+0x1d2>
 8008942:	2340      	movs	r3, #64	; 0x40
 8008944:	616b      	str	r3, [r5, #20]
 8008946:	2300      	movs	r3, #0
 8008948:	9309      	str	r3, [sp, #36]	; 0x24
 800894a:	2320      	movs	r3, #32
 800894c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008950:	f8cd 800c 	str.w	r8, [sp, #12]
 8008954:	2330      	movs	r3, #48	; 0x30
 8008956:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008b00 <_svfiprintf_r+0x1ec>
 800895a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800895e:	f04f 0901 	mov.w	r9, #1
 8008962:	4623      	mov	r3, r4
 8008964:	469a      	mov	sl, r3
 8008966:	f813 2b01 	ldrb.w	r2, [r3], #1
 800896a:	b10a      	cbz	r2, 8008970 <_svfiprintf_r+0x5c>
 800896c:	2a25      	cmp	r2, #37	; 0x25
 800896e:	d1f9      	bne.n	8008964 <_svfiprintf_r+0x50>
 8008970:	ebba 0b04 	subs.w	fp, sl, r4
 8008974:	d00b      	beq.n	800898e <_svfiprintf_r+0x7a>
 8008976:	465b      	mov	r3, fp
 8008978:	4622      	mov	r2, r4
 800897a:	4629      	mov	r1, r5
 800897c:	4638      	mov	r0, r7
 800897e:	f7ff ff6d 	bl	800885c <__ssputs_r>
 8008982:	3001      	adds	r0, #1
 8008984:	f000 80aa 	beq.w	8008adc <_svfiprintf_r+0x1c8>
 8008988:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800898a:	445a      	add	r2, fp
 800898c:	9209      	str	r2, [sp, #36]	; 0x24
 800898e:	f89a 3000 	ldrb.w	r3, [sl]
 8008992:	2b00      	cmp	r3, #0
 8008994:	f000 80a2 	beq.w	8008adc <_svfiprintf_r+0x1c8>
 8008998:	2300      	movs	r3, #0
 800899a:	f04f 32ff 	mov.w	r2, #4294967295
 800899e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80089a2:	f10a 0a01 	add.w	sl, sl, #1
 80089a6:	9304      	str	r3, [sp, #16]
 80089a8:	9307      	str	r3, [sp, #28]
 80089aa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80089ae:	931a      	str	r3, [sp, #104]	; 0x68
 80089b0:	4654      	mov	r4, sl
 80089b2:	2205      	movs	r2, #5
 80089b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80089b8:	4851      	ldr	r0, [pc, #324]	; (8008b00 <_svfiprintf_r+0x1ec>)
 80089ba:	f7f7 fc11 	bl	80001e0 <memchr>
 80089be:	9a04      	ldr	r2, [sp, #16]
 80089c0:	b9d8      	cbnz	r0, 80089fa <_svfiprintf_r+0xe6>
 80089c2:	06d0      	lsls	r0, r2, #27
 80089c4:	bf44      	itt	mi
 80089c6:	2320      	movmi	r3, #32
 80089c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80089cc:	0711      	lsls	r1, r2, #28
 80089ce:	bf44      	itt	mi
 80089d0:	232b      	movmi	r3, #43	; 0x2b
 80089d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80089d6:	f89a 3000 	ldrb.w	r3, [sl]
 80089da:	2b2a      	cmp	r3, #42	; 0x2a
 80089dc:	d015      	beq.n	8008a0a <_svfiprintf_r+0xf6>
 80089de:	9a07      	ldr	r2, [sp, #28]
 80089e0:	4654      	mov	r4, sl
 80089e2:	2000      	movs	r0, #0
 80089e4:	f04f 0c0a 	mov.w	ip, #10
 80089e8:	4621      	mov	r1, r4
 80089ea:	f811 3b01 	ldrb.w	r3, [r1], #1
 80089ee:	3b30      	subs	r3, #48	; 0x30
 80089f0:	2b09      	cmp	r3, #9
 80089f2:	d94e      	bls.n	8008a92 <_svfiprintf_r+0x17e>
 80089f4:	b1b0      	cbz	r0, 8008a24 <_svfiprintf_r+0x110>
 80089f6:	9207      	str	r2, [sp, #28]
 80089f8:	e014      	b.n	8008a24 <_svfiprintf_r+0x110>
 80089fa:	eba0 0308 	sub.w	r3, r0, r8
 80089fe:	fa09 f303 	lsl.w	r3, r9, r3
 8008a02:	4313      	orrs	r3, r2
 8008a04:	9304      	str	r3, [sp, #16]
 8008a06:	46a2      	mov	sl, r4
 8008a08:	e7d2      	b.n	80089b0 <_svfiprintf_r+0x9c>
 8008a0a:	9b03      	ldr	r3, [sp, #12]
 8008a0c:	1d19      	adds	r1, r3, #4
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	9103      	str	r1, [sp, #12]
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	bfbb      	ittet	lt
 8008a16:	425b      	neglt	r3, r3
 8008a18:	f042 0202 	orrlt.w	r2, r2, #2
 8008a1c:	9307      	strge	r3, [sp, #28]
 8008a1e:	9307      	strlt	r3, [sp, #28]
 8008a20:	bfb8      	it	lt
 8008a22:	9204      	strlt	r2, [sp, #16]
 8008a24:	7823      	ldrb	r3, [r4, #0]
 8008a26:	2b2e      	cmp	r3, #46	; 0x2e
 8008a28:	d10c      	bne.n	8008a44 <_svfiprintf_r+0x130>
 8008a2a:	7863      	ldrb	r3, [r4, #1]
 8008a2c:	2b2a      	cmp	r3, #42	; 0x2a
 8008a2e:	d135      	bne.n	8008a9c <_svfiprintf_r+0x188>
 8008a30:	9b03      	ldr	r3, [sp, #12]
 8008a32:	1d1a      	adds	r2, r3, #4
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	9203      	str	r2, [sp, #12]
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	bfb8      	it	lt
 8008a3c:	f04f 33ff 	movlt.w	r3, #4294967295
 8008a40:	3402      	adds	r4, #2
 8008a42:	9305      	str	r3, [sp, #20]
 8008a44:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008b10 <_svfiprintf_r+0x1fc>
 8008a48:	7821      	ldrb	r1, [r4, #0]
 8008a4a:	2203      	movs	r2, #3
 8008a4c:	4650      	mov	r0, sl
 8008a4e:	f7f7 fbc7 	bl	80001e0 <memchr>
 8008a52:	b140      	cbz	r0, 8008a66 <_svfiprintf_r+0x152>
 8008a54:	2340      	movs	r3, #64	; 0x40
 8008a56:	eba0 000a 	sub.w	r0, r0, sl
 8008a5a:	fa03 f000 	lsl.w	r0, r3, r0
 8008a5e:	9b04      	ldr	r3, [sp, #16]
 8008a60:	4303      	orrs	r3, r0
 8008a62:	3401      	adds	r4, #1
 8008a64:	9304      	str	r3, [sp, #16]
 8008a66:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a6a:	4826      	ldr	r0, [pc, #152]	; (8008b04 <_svfiprintf_r+0x1f0>)
 8008a6c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008a70:	2206      	movs	r2, #6
 8008a72:	f7f7 fbb5 	bl	80001e0 <memchr>
 8008a76:	2800      	cmp	r0, #0
 8008a78:	d038      	beq.n	8008aec <_svfiprintf_r+0x1d8>
 8008a7a:	4b23      	ldr	r3, [pc, #140]	; (8008b08 <_svfiprintf_r+0x1f4>)
 8008a7c:	bb1b      	cbnz	r3, 8008ac6 <_svfiprintf_r+0x1b2>
 8008a7e:	9b03      	ldr	r3, [sp, #12]
 8008a80:	3307      	adds	r3, #7
 8008a82:	f023 0307 	bic.w	r3, r3, #7
 8008a86:	3308      	adds	r3, #8
 8008a88:	9303      	str	r3, [sp, #12]
 8008a8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a8c:	4433      	add	r3, r6
 8008a8e:	9309      	str	r3, [sp, #36]	; 0x24
 8008a90:	e767      	b.n	8008962 <_svfiprintf_r+0x4e>
 8008a92:	fb0c 3202 	mla	r2, ip, r2, r3
 8008a96:	460c      	mov	r4, r1
 8008a98:	2001      	movs	r0, #1
 8008a9a:	e7a5      	b.n	80089e8 <_svfiprintf_r+0xd4>
 8008a9c:	2300      	movs	r3, #0
 8008a9e:	3401      	adds	r4, #1
 8008aa0:	9305      	str	r3, [sp, #20]
 8008aa2:	4619      	mov	r1, r3
 8008aa4:	f04f 0c0a 	mov.w	ip, #10
 8008aa8:	4620      	mov	r0, r4
 8008aaa:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008aae:	3a30      	subs	r2, #48	; 0x30
 8008ab0:	2a09      	cmp	r2, #9
 8008ab2:	d903      	bls.n	8008abc <_svfiprintf_r+0x1a8>
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d0c5      	beq.n	8008a44 <_svfiprintf_r+0x130>
 8008ab8:	9105      	str	r1, [sp, #20]
 8008aba:	e7c3      	b.n	8008a44 <_svfiprintf_r+0x130>
 8008abc:	fb0c 2101 	mla	r1, ip, r1, r2
 8008ac0:	4604      	mov	r4, r0
 8008ac2:	2301      	movs	r3, #1
 8008ac4:	e7f0      	b.n	8008aa8 <_svfiprintf_r+0x194>
 8008ac6:	ab03      	add	r3, sp, #12
 8008ac8:	9300      	str	r3, [sp, #0]
 8008aca:	462a      	mov	r2, r5
 8008acc:	4b0f      	ldr	r3, [pc, #60]	; (8008b0c <_svfiprintf_r+0x1f8>)
 8008ace:	a904      	add	r1, sp, #16
 8008ad0:	4638      	mov	r0, r7
 8008ad2:	f3af 8000 	nop.w
 8008ad6:	1c42      	adds	r2, r0, #1
 8008ad8:	4606      	mov	r6, r0
 8008ada:	d1d6      	bne.n	8008a8a <_svfiprintf_r+0x176>
 8008adc:	89ab      	ldrh	r3, [r5, #12]
 8008ade:	065b      	lsls	r3, r3, #25
 8008ae0:	f53f af2c 	bmi.w	800893c <_svfiprintf_r+0x28>
 8008ae4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008ae6:	b01d      	add	sp, #116	; 0x74
 8008ae8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008aec:	ab03      	add	r3, sp, #12
 8008aee:	9300      	str	r3, [sp, #0]
 8008af0:	462a      	mov	r2, r5
 8008af2:	4b06      	ldr	r3, [pc, #24]	; (8008b0c <_svfiprintf_r+0x1f8>)
 8008af4:	a904      	add	r1, sp, #16
 8008af6:	4638      	mov	r0, r7
 8008af8:	f000 f87a 	bl	8008bf0 <_printf_i>
 8008afc:	e7eb      	b.n	8008ad6 <_svfiprintf_r+0x1c2>
 8008afe:	bf00      	nop
 8008b00:	08009070 	.word	0x08009070
 8008b04:	0800907a 	.word	0x0800907a
 8008b08:	00000000 	.word	0x00000000
 8008b0c:	0800885d 	.word	0x0800885d
 8008b10:	08009076 	.word	0x08009076

08008b14 <_printf_common>:
 8008b14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b18:	4616      	mov	r6, r2
 8008b1a:	4699      	mov	r9, r3
 8008b1c:	688a      	ldr	r2, [r1, #8]
 8008b1e:	690b      	ldr	r3, [r1, #16]
 8008b20:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008b24:	4293      	cmp	r3, r2
 8008b26:	bfb8      	it	lt
 8008b28:	4613      	movlt	r3, r2
 8008b2a:	6033      	str	r3, [r6, #0]
 8008b2c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008b30:	4607      	mov	r7, r0
 8008b32:	460c      	mov	r4, r1
 8008b34:	b10a      	cbz	r2, 8008b3a <_printf_common+0x26>
 8008b36:	3301      	adds	r3, #1
 8008b38:	6033      	str	r3, [r6, #0]
 8008b3a:	6823      	ldr	r3, [r4, #0]
 8008b3c:	0699      	lsls	r1, r3, #26
 8008b3e:	bf42      	ittt	mi
 8008b40:	6833      	ldrmi	r3, [r6, #0]
 8008b42:	3302      	addmi	r3, #2
 8008b44:	6033      	strmi	r3, [r6, #0]
 8008b46:	6825      	ldr	r5, [r4, #0]
 8008b48:	f015 0506 	ands.w	r5, r5, #6
 8008b4c:	d106      	bne.n	8008b5c <_printf_common+0x48>
 8008b4e:	f104 0a19 	add.w	sl, r4, #25
 8008b52:	68e3      	ldr	r3, [r4, #12]
 8008b54:	6832      	ldr	r2, [r6, #0]
 8008b56:	1a9b      	subs	r3, r3, r2
 8008b58:	42ab      	cmp	r3, r5
 8008b5a:	dc26      	bgt.n	8008baa <_printf_common+0x96>
 8008b5c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008b60:	1e13      	subs	r3, r2, #0
 8008b62:	6822      	ldr	r2, [r4, #0]
 8008b64:	bf18      	it	ne
 8008b66:	2301      	movne	r3, #1
 8008b68:	0692      	lsls	r2, r2, #26
 8008b6a:	d42b      	bmi.n	8008bc4 <_printf_common+0xb0>
 8008b6c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008b70:	4649      	mov	r1, r9
 8008b72:	4638      	mov	r0, r7
 8008b74:	47c0      	blx	r8
 8008b76:	3001      	adds	r0, #1
 8008b78:	d01e      	beq.n	8008bb8 <_printf_common+0xa4>
 8008b7a:	6823      	ldr	r3, [r4, #0]
 8008b7c:	68e5      	ldr	r5, [r4, #12]
 8008b7e:	6832      	ldr	r2, [r6, #0]
 8008b80:	f003 0306 	and.w	r3, r3, #6
 8008b84:	2b04      	cmp	r3, #4
 8008b86:	bf08      	it	eq
 8008b88:	1aad      	subeq	r5, r5, r2
 8008b8a:	68a3      	ldr	r3, [r4, #8]
 8008b8c:	6922      	ldr	r2, [r4, #16]
 8008b8e:	bf0c      	ite	eq
 8008b90:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008b94:	2500      	movne	r5, #0
 8008b96:	4293      	cmp	r3, r2
 8008b98:	bfc4      	itt	gt
 8008b9a:	1a9b      	subgt	r3, r3, r2
 8008b9c:	18ed      	addgt	r5, r5, r3
 8008b9e:	2600      	movs	r6, #0
 8008ba0:	341a      	adds	r4, #26
 8008ba2:	42b5      	cmp	r5, r6
 8008ba4:	d11a      	bne.n	8008bdc <_printf_common+0xc8>
 8008ba6:	2000      	movs	r0, #0
 8008ba8:	e008      	b.n	8008bbc <_printf_common+0xa8>
 8008baa:	2301      	movs	r3, #1
 8008bac:	4652      	mov	r2, sl
 8008bae:	4649      	mov	r1, r9
 8008bb0:	4638      	mov	r0, r7
 8008bb2:	47c0      	blx	r8
 8008bb4:	3001      	adds	r0, #1
 8008bb6:	d103      	bne.n	8008bc0 <_printf_common+0xac>
 8008bb8:	f04f 30ff 	mov.w	r0, #4294967295
 8008bbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008bc0:	3501      	adds	r5, #1
 8008bc2:	e7c6      	b.n	8008b52 <_printf_common+0x3e>
 8008bc4:	18e1      	adds	r1, r4, r3
 8008bc6:	1c5a      	adds	r2, r3, #1
 8008bc8:	2030      	movs	r0, #48	; 0x30
 8008bca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008bce:	4422      	add	r2, r4
 8008bd0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008bd4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008bd8:	3302      	adds	r3, #2
 8008bda:	e7c7      	b.n	8008b6c <_printf_common+0x58>
 8008bdc:	2301      	movs	r3, #1
 8008bde:	4622      	mov	r2, r4
 8008be0:	4649      	mov	r1, r9
 8008be2:	4638      	mov	r0, r7
 8008be4:	47c0      	blx	r8
 8008be6:	3001      	adds	r0, #1
 8008be8:	d0e6      	beq.n	8008bb8 <_printf_common+0xa4>
 8008bea:	3601      	adds	r6, #1
 8008bec:	e7d9      	b.n	8008ba2 <_printf_common+0x8e>
	...

08008bf0 <_printf_i>:
 8008bf0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008bf4:	7e0f      	ldrb	r7, [r1, #24]
 8008bf6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008bf8:	2f78      	cmp	r7, #120	; 0x78
 8008bfa:	4691      	mov	r9, r2
 8008bfc:	4680      	mov	r8, r0
 8008bfe:	460c      	mov	r4, r1
 8008c00:	469a      	mov	sl, r3
 8008c02:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008c06:	d807      	bhi.n	8008c18 <_printf_i+0x28>
 8008c08:	2f62      	cmp	r7, #98	; 0x62
 8008c0a:	d80a      	bhi.n	8008c22 <_printf_i+0x32>
 8008c0c:	2f00      	cmp	r7, #0
 8008c0e:	f000 80d8 	beq.w	8008dc2 <_printf_i+0x1d2>
 8008c12:	2f58      	cmp	r7, #88	; 0x58
 8008c14:	f000 80a3 	beq.w	8008d5e <_printf_i+0x16e>
 8008c18:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008c1c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008c20:	e03a      	b.n	8008c98 <_printf_i+0xa8>
 8008c22:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008c26:	2b15      	cmp	r3, #21
 8008c28:	d8f6      	bhi.n	8008c18 <_printf_i+0x28>
 8008c2a:	a101      	add	r1, pc, #4	; (adr r1, 8008c30 <_printf_i+0x40>)
 8008c2c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008c30:	08008c89 	.word	0x08008c89
 8008c34:	08008c9d 	.word	0x08008c9d
 8008c38:	08008c19 	.word	0x08008c19
 8008c3c:	08008c19 	.word	0x08008c19
 8008c40:	08008c19 	.word	0x08008c19
 8008c44:	08008c19 	.word	0x08008c19
 8008c48:	08008c9d 	.word	0x08008c9d
 8008c4c:	08008c19 	.word	0x08008c19
 8008c50:	08008c19 	.word	0x08008c19
 8008c54:	08008c19 	.word	0x08008c19
 8008c58:	08008c19 	.word	0x08008c19
 8008c5c:	08008da9 	.word	0x08008da9
 8008c60:	08008ccd 	.word	0x08008ccd
 8008c64:	08008d8b 	.word	0x08008d8b
 8008c68:	08008c19 	.word	0x08008c19
 8008c6c:	08008c19 	.word	0x08008c19
 8008c70:	08008dcb 	.word	0x08008dcb
 8008c74:	08008c19 	.word	0x08008c19
 8008c78:	08008ccd 	.word	0x08008ccd
 8008c7c:	08008c19 	.word	0x08008c19
 8008c80:	08008c19 	.word	0x08008c19
 8008c84:	08008d93 	.word	0x08008d93
 8008c88:	682b      	ldr	r3, [r5, #0]
 8008c8a:	1d1a      	adds	r2, r3, #4
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	602a      	str	r2, [r5, #0]
 8008c90:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008c94:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008c98:	2301      	movs	r3, #1
 8008c9a:	e0a3      	b.n	8008de4 <_printf_i+0x1f4>
 8008c9c:	6820      	ldr	r0, [r4, #0]
 8008c9e:	6829      	ldr	r1, [r5, #0]
 8008ca0:	0606      	lsls	r6, r0, #24
 8008ca2:	f101 0304 	add.w	r3, r1, #4
 8008ca6:	d50a      	bpl.n	8008cbe <_printf_i+0xce>
 8008ca8:	680e      	ldr	r6, [r1, #0]
 8008caa:	602b      	str	r3, [r5, #0]
 8008cac:	2e00      	cmp	r6, #0
 8008cae:	da03      	bge.n	8008cb8 <_printf_i+0xc8>
 8008cb0:	232d      	movs	r3, #45	; 0x2d
 8008cb2:	4276      	negs	r6, r6
 8008cb4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008cb8:	485e      	ldr	r0, [pc, #376]	; (8008e34 <_printf_i+0x244>)
 8008cba:	230a      	movs	r3, #10
 8008cbc:	e019      	b.n	8008cf2 <_printf_i+0x102>
 8008cbe:	680e      	ldr	r6, [r1, #0]
 8008cc0:	602b      	str	r3, [r5, #0]
 8008cc2:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008cc6:	bf18      	it	ne
 8008cc8:	b236      	sxthne	r6, r6
 8008cca:	e7ef      	b.n	8008cac <_printf_i+0xbc>
 8008ccc:	682b      	ldr	r3, [r5, #0]
 8008cce:	6820      	ldr	r0, [r4, #0]
 8008cd0:	1d19      	adds	r1, r3, #4
 8008cd2:	6029      	str	r1, [r5, #0]
 8008cd4:	0601      	lsls	r1, r0, #24
 8008cd6:	d501      	bpl.n	8008cdc <_printf_i+0xec>
 8008cd8:	681e      	ldr	r6, [r3, #0]
 8008cda:	e002      	b.n	8008ce2 <_printf_i+0xf2>
 8008cdc:	0646      	lsls	r6, r0, #25
 8008cde:	d5fb      	bpl.n	8008cd8 <_printf_i+0xe8>
 8008ce0:	881e      	ldrh	r6, [r3, #0]
 8008ce2:	4854      	ldr	r0, [pc, #336]	; (8008e34 <_printf_i+0x244>)
 8008ce4:	2f6f      	cmp	r7, #111	; 0x6f
 8008ce6:	bf0c      	ite	eq
 8008ce8:	2308      	moveq	r3, #8
 8008cea:	230a      	movne	r3, #10
 8008cec:	2100      	movs	r1, #0
 8008cee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008cf2:	6865      	ldr	r5, [r4, #4]
 8008cf4:	60a5      	str	r5, [r4, #8]
 8008cf6:	2d00      	cmp	r5, #0
 8008cf8:	bfa2      	ittt	ge
 8008cfa:	6821      	ldrge	r1, [r4, #0]
 8008cfc:	f021 0104 	bicge.w	r1, r1, #4
 8008d00:	6021      	strge	r1, [r4, #0]
 8008d02:	b90e      	cbnz	r6, 8008d08 <_printf_i+0x118>
 8008d04:	2d00      	cmp	r5, #0
 8008d06:	d04d      	beq.n	8008da4 <_printf_i+0x1b4>
 8008d08:	4615      	mov	r5, r2
 8008d0a:	fbb6 f1f3 	udiv	r1, r6, r3
 8008d0e:	fb03 6711 	mls	r7, r3, r1, r6
 8008d12:	5dc7      	ldrb	r7, [r0, r7]
 8008d14:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008d18:	4637      	mov	r7, r6
 8008d1a:	42bb      	cmp	r3, r7
 8008d1c:	460e      	mov	r6, r1
 8008d1e:	d9f4      	bls.n	8008d0a <_printf_i+0x11a>
 8008d20:	2b08      	cmp	r3, #8
 8008d22:	d10b      	bne.n	8008d3c <_printf_i+0x14c>
 8008d24:	6823      	ldr	r3, [r4, #0]
 8008d26:	07de      	lsls	r6, r3, #31
 8008d28:	d508      	bpl.n	8008d3c <_printf_i+0x14c>
 8008d2a:	6923      	ldr	r3, [r4, #16]
 8008d2c:	6861      	ldr	r1, [r4, #4]
 8008d2e:	4299      	cmp	r1, r3
 8008d30:	bfde      	ittt	le
 8008d32:	2330      	movle	r3, #48	; 0x30
 8008d34:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008d38:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008d3c:	1b52      	subs	r2, r2, r5
 8008d3e:	6122      	str	r2, [r4, #16]
 8008d40:	f8cd a000 	str.w	sl, [sp]
 8008d44:	464b      	mov	r3, r9
 8008d46:	aa03      	add	r2, sp, #12
 8008d48:	4621      	mov	r1, r4
 8008d4a:	4640      	mov	r0, r8
 8008d4c:	f7ff fee2 	bl	8008b14 <_printf_common>
 8008d50:	3001      	adds	r0, #1
 8008d52:	d14c      	bne.n	8008dee <_printf_i+0x1fe>
 8008d54:	f04f 30ff 	mov.w	r0, #4294967295
 8008d58:	b004      	add	sp, #16
 8008d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d5e:	4835      	ldr	r0, [pc, #212]	; (8008e34 <_printf_i+0x244>)
 8008d60:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008d64:	6829      	ldr	r1, [r5, #0]
 8008d66:	6823      	ldr	r3, [r4, #0]
 8008d68:	f851 6b04 	ldr.w	r6, [r1], #4
 8008d6c:	6029      	str	r1, [r5, #0]
 8008d6e:	061d      	lsls	r5, r3, #24
 8008d70:	d514      	bpl.n	8008d9c <_printf_i+0x1ac>
 8008d72:	07df      	lsls	r7, r3, #31
 8008d74:	bf44      	itt	mi
 8008d76:	f043 0320 	orrmi.w	r3, r3, #32
 8008d7a:	6023      	strmi	r3, [r4, #0]
 8008d7c:	b91e      	cbnz	r6, 8008d86 <_printf_i+0x196>
 8008d7e:	6823      	ldr	r3, [r4, #0]
 8008d80:	f023 0320 	bic.w	r3, r3, #32
 8008d84:	6023      	str	r3, [r4, #0]
 8008d86:	2310      	movs	r3, #16
 8008d88:	e7b0      	b.n	8008cec <_printf_i+0xfc>
 8008d8a:	6823      	ldr	r3, [r4, #0]
 8008d8c:	f043 0320 	orr.w	r3, r3, #32
 8008d90:	6023      	str	r3, [r4, #0]
 8008d92:	2378      	movs	r3, #120	; 0x78
 8008d94:	4828      	ldr	r0, [pc, #160]	; (8008e38 <_printf_i+0x248>)
 8008d96:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008d9a:	e7e3      	b.n	8008d64 <_printf_i+0x174>
 8008d9c:	0659      	lsls	r1, r3, #25
 8008d9e:	bf48      	it	mi
 8008da0:	b2b6      	uxthmi	r6, r6
 8008da2:	e7e6      	b.n	8008d72 <_printf_i+0x182>
 8008da4:	4615      	mov	r5, r2
 8008da6:	e7bb      	b.n	8008d20 <_printf_i+0x130>
 8008da8:	682b      	ldr	r3, [r5, #0]
 8008daa:	6826      	ldr	r6, [r4, #0]
 8008dac:	6961      	ldr	r1, [r4, #20]
 8008dae:	1d18      	adds	r0, r3, #4
 8008db0:	6028      	str	r0, [r5, #0]
 8008db2:	0635      	lsls	r5, r6, #24
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	d501      	bpl.n	8008dbc <_printf_i+0x1cc>
 8008db8:	6019      	str	r1, [r3, #0]
 8008dba:	e002      	b.n	8008dc2 <_printf_i+0x1d2>
 8008dbc:	0670      	lsls	r0, r6, #25
 8008dbe:	d5fb      	bpl.n	8008db8 <_printf_i+0x1c8>
 8008dc0:	8019      	strh	r1, [r3, #0]
 8008dc2:	2300      	movs	r3, #0
 8008dc4:	6123      	str	r3, [r4, #16]
 8008dc6:	4615      	mov	r5, r2
 8008dc8:	e7ba      	b.n	8008d40 <_printf_i+0x150>
 8008dca:	682b      	ldr	r3, [r5, #0]
 8008dcc:	1d1a      	adds	r2, r3, #4
 8008dce:	602a      	str	r2, [r5, #0]
 8008dd0:	681d      	ldr	r5, [r3, #0]
 8008dd2:	6862      	ldr	r2, [r4, #4]
 8008dd4:	2100      	movs	r1, #0
 8008dd6:	4628      	mov	r0, r5
 8008dd8:	f7f7 fa02 	bl	80001e0 <memchr>
 8008ddc:	b108      	cbz	r0, 8008de2 <_printf_i+0x1f2>
 8008dde:	1b40      	subs	r0, r0, r5
 8008de0:	6060      	str	r0, [r4, #4]
 8008de2:	6863      	ldr	r3, [r4, #4]
 8008de4:	6123      	str	r3, [r4, #16]
 8008de6:	2300      	movs	r3, #0
 8008de8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008dec:	e7a8      	b.n	8008d40 <_printf_i+0x150>
 8008dee:	6923      	ldr	r3, [r4, #16]
 8008df0:	462a      	mov	r2, r5
 8008df2:	4649      	mov	r1, r9
 8008df4:	4640      	mov	r0, r8
 8008df6:	47d0      	blx	sl
 8008df8:	3001      	adds	r0, #1
 8008dfa:	d0ab      	beq.n	8008d54 <_printf_i+0x164>
 8008dfc:	6823      	ldr	r3, [r4, #0]
 8008dfe:	079b      	lsls	r3, r3, #30
 8008e00:	d413      	bmi.n	8008e2a <_printf_i+0x23a>
 8008e02:	68e0      	ldr	r0, [r4, #12]
 8008e04:	9b03      	ldr	r3, [sp, #12]
 8008e06:	4298      	cmp	r0, r3
 8008e08:	bfb8      	it	lt
 8008e0a:	4618      	movlt	r0, r3
 8008e0c:	e7a4      	b.n	8008d58 <_printf_i+0x168>
 8008e0e:	2301      	movs	r3, #1
 8008e10:	4632      	mov	r2, r6
 8008e12:	4649      	mov	r1, r9
 8008e14:	4640      	mov	r0, r8
 8008e16:	47d0      	blx	sl
 8008e18:	3001      	adds	r0, #1
 8008e1a:	d09b      	beq.n	8008d54 <_printf_i+0x164>
 8008e1c:	3501      	adds	r5, #1
 8008e1e:	68e3      	ldr	r3, [r4, #12]
 8008e20:	9903      	ldr	r1, [sp, #12]
 8008e22:	1a5b      	subs	r3, r3, r1
 8008e24:	42ab      	cmp	r3, r5
 8008e26:	dcf2      	bgt.n	8008e0e <_printf_i+0x21e>
 8008e28:	e7eb      	b.n	8008e02 <_printf_i+0x212>
 8008e2a:	2500      	movs	r5, #0
 8008e2c:	f104 0619 	add.w	r6, r4, #25
 8008e30:	e7f5      	b.n	8008e1e <_printf_i+0x22e>
 8008e32:	bf00      	nop
 8008e34:	08009081 	.word	0x08009081
 8008e38:	08009092 	.word	0x08009092

08008e3c <memmove>:
 8008e3c:	4288      	cmp	r0, r1
 8008e3e:	b510      	push	{r4, lr}
 8008e40:	eb01 0402 	add.w	r4, r1, r2
 8008e44:	d902      	bls.n	8008e4c <memmove+0x10>
 8008e46:	4284      	cmp	r4, r0
 8008e48:	4623      	mov	r3, r4
 8008e4a:	d807      	bhi.n	8008e5c <memmove+0x20>
 8008e4c:	1e43      	subs	r3, r0, #1
 8008e4e:	42a1      	cmp	r1, r4
 8008e50:	d008      	beq.n	8008e64 <memmove+0x28>
 8008e52:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008e56:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008e5a:	e7f8      	b.n	8008e4e <memmove+0x12>
 8008e5c:	4402      	add	r2, r0
 8008e5e:	4601      	mov	r1, r0
 8008e60:	428a      	cmp	r2, r1
 8008e62:	d100      	bne.n	8008e66 <memmove+0x2a>
 8008e64:	bd10      	pop	{r4, pc}
 8008e66:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008e6a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008e6e:	e7f7      	b.n	8008e60 <memmove+0x24>

08008e70 <_realloc_r>:
 8008e70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e74:	4680      	mov	r8, r0
 8008e76:	4614      	mov	r4, r2
 8008e78:	460e      	mov	r6, r1
 8008e7a:	b921      	cbnz	r1, 8008e86 <_realloc_r+0x16>
 8008e7c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008e80:	4611      	mov	r1, r2
 8008e82:	f7ff bb85 	b.w	8008590 <_malloc_r>
 8008e86:	b92a      	cbnz	r2, 8008e94 <_realloc_r+0x24>
 8008e88:	f7ff fc9c 	bl	80087c4 <_free_r>
 8008e8c:	4625      	mov	r5, r4
 8008e8e:	4628      	mov	r0, r5
 8008e90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008e94:	f000 f81b 	bl	8008ece <_malloc_usable_size_r>
 8008e98:	4284      	cmp	r4, r0
 8008e9a:	4607      	mov	r7, r0
 8008e9c:	d802      	bhi.n	8008ea4 <_realloc_r+0x34>
 8008e9e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008ea2:	d812      	bhi.n	8008eca <_realloc_r+0x5a>
 8008ea4:	4621      	mov	r1, r4
 8008ea6:	4640      	mov	r0, r8
 8008ea8:	f7ff fb72 	bl	8008590 <_malloc_r>
 8008eac:	4605      	mov	r5, r0
 8008eae:	2800      	cmp	r0, #0
 8008eb0:	d0ed      	beq.n	8008e8e <_realloc_r+0x1e>
 8008eb2:	42bc      	cmp	r4, r7
 8008eb4:	4622      	mov	r2, r4
 8008eb6:	4631      	mov	r1, r6
 8008eb8:	bf28      	it	cs
 8008eba:	463a      	movcs	r2, r7
 8008ebc:	f7ff fb32 	bl	8008524 <memcpy>
 8008ec0:	4631      	mov	r1, r6
 8008ec2:	4640      	mov	r0, r8
 8008ec4:	f7ff fc7e 	bl	80087c4 <_free_r>
 8008ec8:	e7e1      	b.n	8008e8e <_realloc_r+0x1e>
 8008eca:	4635      	mov	r5, r6
 8008ecc:	e7df      	b.n	8008e8e <_realloc_r+0x1e>

08008ece <_malloc_usable_size_r>:
 8008ece:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008ed2:	1f18      	subs	r0, r3, #4
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	bfbc      	itt	lt
 8008ed8:	580b      	ldrlt	r3, [r1, r0]
 8008eda:	18c0      	addlt	r0, r0, r3
 8008edc:	4770      	bx	lr
	...

08008ee0 <_init>:
 8008ee0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ee2:	bf00      	nop
 8008ee4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008ee6:	bc08      	pop	{r3}
 8008ee8:	469e      	mov	lr, r3
 8008eea:	4770      	bx	lr

08008eec <_fini>:
 8008eec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008eee:	bf00      	nop
 8008ef0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008ef2:	bc08      	pop	{r3}
 8008ef4:	469e      	mov	lr, r3
 8008ef6:	4770      	bx	lr
