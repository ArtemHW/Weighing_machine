
Weighing_machine.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008ac8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000178  08008c58  08008c58  00018c58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008dd0  08008dd0  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08008dd0  08008dd0  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008dd0  08008dd0  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008dd0  08008dd0  00018dd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008dd4  08008dd4  00018dd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08008dd8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000023f8  20000074  08008e4c  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000246c  08008e4c  0002246c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d621  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003f25  00000000  00000000  0003d6c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001648  00000000  00000000  000415f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000014e0  00000000  00000000  00042c38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f103  00000000  00000000  00044118  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001bd78  00000000  00000000  0006321b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b66d9  00000000  00000000  0007ef93  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000c5  00000000  00000000  0013566c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006198  00000000  00000000  00135734  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    00000210  00000000  00000000  0013b8cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008c40 	.word	0x08008c40

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08008c40 	.word	0x08008c40

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <vApplicationIdleHook>:
void vApplicationIdleHook(void);
void vApplicationTickHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 8000280:	b480      	push	{r7}
 8000282:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 8000284:	bf00      	nop
 8000286:	46bd      	mov	sp, r7
 8000288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800028c:	4770      	bx	lr

0800028e <vApplicationTickHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 3 */
__weak void vApplicationTickHook( void )
{
 800028e:	b480      	push	{r7}
 8000290:	af00      	add	r7, sp, #0
   /* This function will be called by each tick interrupt if
   configUSE_TICK_HOOK is set to 1 in FreeRTOSConfig.h. User code can be
   added here, but the tick hook is called from an interrupt context, so
   code must not attempt to block, and only the interrupt safe FreeRTOS API
   functions can be used (those that end in FromISR()). */
}
 8000292:	bf00      	nop
 8000294:	46bd      	mov	sp, r7
 8000296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800029a:	4770      	bx	lr

0800029c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800029c:	b480      	push	{r7}
 800029e:	b085      	sub	sp, #20
 80002a0:	af00      	add	r7, sp, #0
 80002a2:	60f8      	str	r0, [r7, #12]
 80002a4:	60b9      	str	r1, [r7, #8]
 80002a6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80002a8:	68fb      	ldr	r3, [r7, #12]
 80002aa:	4a07      	ldr	r2, [pc, #28]	; (80002c8 <vApplicationGetIdleTaskMemory+0x2c>)
 80002ac:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80002ae:	68bb      	ldr	r3, [r7, #8]
 80002b0:	4a06      	ldr	r2, [pc, #24]	; (80002cc <vApplicationGetIdleTaskMemory+0x30>)
 80002b2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	2240      	movs	r2, #64	; 0x40
 80002b8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80002ba:	bf00      	nop
 80002bc:	3714      	adds	r7, #20
 80002be:	46bd      	mov	sp, r7
 80002c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002c4:	4770      	bx	lr
 80002c6:	bf00      	nop
 80002c8:	20000090 	.word	0x20000090
 80002cc:	20000148 	.word	0x20000148

080002d0 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 80002d0:	b480      	push	{r7}
 80002d2:	b085      	sub	sp, #20
 80002d4:	af00      	add	r7, sp, #0
 80002d6:	60f8      	str	r0, [r7, #12]
 80002d8:	60b9      	str	r1, [r7, #8]
 80002da:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 80002dc:	68fb      	ldr	r3, [r7, #12]
 80002de:	4a07      	ldr	r2, [pc, #28]	; (80002fc <vApplicationGetTimerTaskMemory+0x2c>)
 80002e0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 80002e2:	68bb      	ldr	r3, [r7, #8]
 80002e4:	4a06      	ldr	r2, [pc, #24]	; (8000300 <vApplicationGetTimerTaskMemory+0x30>)
 80002e6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 80002e8:	687b      	ldr	r3, [r7, #4]
 80002ea:	2240      	movs	r2, #64	; 0x40
 80002ec:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80002ee:	bf00      	nop
 80002f0:	3714      	adds	r7, #20
 80002f2:	46bd      	mov	sp, r7
 80002f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f8:	4770      	bx	lr
 80002fa:	bf00      	nop
 80002fc:	20000248 	.word	0x20000248
 8000300:	20000300 	.word	0x20000300

08000304 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000304:	b5b0      	push	{r4, r5, r7, lr}
 8000306:	b08c      	sub	sp, #48	; 0x30
 8000308:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800030a:	f000 fdb7 	bl	8000e7c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800030e:	f000 f8b3 	bl	8000478 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000312:	f000 f9c3 	bl	800069c <MX_GPIO_Init>
  MX_ADC1_Init();
 8000316:	f000 f909 	bl	800052c <MX_ADC1_Init>
  MX_DMA_Init();
 800031a:	f000 f9a1 	bl	8000660 <MX_DMA_Init>
  MX_USART1_UART_Init();
 800031e:	f000 f96f 	bl	8000600 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000322:	4841      	ldr	r0, [pc, #260]	; (8000428 <main+0x124>)
 8000324:	f001 fce8 	bl	8001cf8 <HAL_DMA_Init>
 8000328:	4603      	mov	r3, r0
 800032a:	2b00      	cmp	r3, #0
 800032c:	d001      	beq.n	8000332 <main+0x2e>
  {
    Error_Handler();
 800032e:	f000 fbc7 	bl	8000ac0 <Error_Handler>
  }

  __HAL_LINKDMA(&hadc1,DMA_Handle,hdma_adc1);
 8000332:	4b3e      	ldr	r3, [pc, #248]	; (800042c <main+0x128>)
 8000334:	4a3c      	ldr	r2, [pc, #240]	; (8000428 <main+0x124>)
 8000336:	639a      	str	r2, [r3, #56]	; 0x38
 8000338:	4b3b      	ldr	r3, [pc, #236]	; (8000428 <main+0x124>)
 800033a:	4a3c      	ldr	r2, [pc, #240]	; (800042c <main+0x128>)
 800033c:	625a      	str	r2, [r3, #36]	; 0x24
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&buffer.adc_buf, sizeof(buffer.adc_buf)/2);
 800033e:	2232      	movs	r2, #50	; 0x32
 8000340:	493b      	ldr	r1, [pc, #236]	; (8000430 <main+0x12c>)
 8000342:	483a      	ldr	r0, [pc, #232]	; (800042c <main+0x128>)
 8000344:	f000 ff74 	bl	8001230 <HAL_ADC_Start_DMA>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* add semaphores, ... */
  xSemaphore1 = xSemaphoreCreateBinary();
 8000348:	2203      	movs	r2, #3
 800034a:	2100      	movs	r1, #0
 800034c:	2001      	movs	r0, #1
 800034e:	f004 fe6e 	bl	800502e <xQueueGenericCreate>
 8000352:	4603      	mov	r3, r0
 8000354:	4a37      	ldr	r2, [pc, #220]	; (8000434 <main+0x130>)
 8000356:	6013      	str	r3, [r2, #0]
  //xSemaphore2 = xSemaphoreCreateCounting(4, 0);
  xCreatedEventGroup1 = xEventGroupCreate();
 8000358:	f004 fb40 	bl	80049dc <xEventGroupCreate>
 800035c:	4603      	mov	r3, r0
 800035e:	4a36      	ldr	r2, [pc, #216]	; (8000438 <main+0x134>)
 8000360:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  QueueHandle_t myQueue1;
  myQueue1 = xQueueCreate(40, sizeof(char));
 8000362:	2200      	movs	r2, #0
 8000364:	2101      	movs	r1, #1
 8000366:	2028      	movs	r0, #40	; 0x28
 8000368:	f004 fe61 	bl	800502e <xQueueGenericCreate>
 800036c:	6278      	str	r0, [r7, #36]	; 0x24
  buffer.queueh = myQueue1;
 800036e:	4a33      	ldr	r2, [pc, #204]	; (800043c <main+0x138>)
 8000370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000372:	6013      	str	r3, [r2, #0]

  QueueHandle_t myQueue2;
  myQueue2 = xQueueCreate(40, sizeof(char));
 8000374:	2200      	movs	r2, #0
 8000376:	2101      	movs	r1, #1
 8000378:	2028      	movs	r0, #40	; 0x28
 800037a:	f004 fe58 	bl	800502e <xQueueGenericCreate>
 800037e:	6238      	str	r0, [r7, #32]
  buffer.queueh_clbrt = myQueue2;
 8000380:	4a2e      	ldr	r2, [pc, #184]	; (800043c <main+0x138>)
 8000382:	6a3b      	ldr	r3, [r7, #32]
 8000384:	6053      	str	r3, [r2, #4]
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityIdle, 0, 80);
 8000386:	4b2e      	ldr	r3, [pc, #184]	; (8000440 <main+0x13c>)
 8000388:	1d3c      	adds	r4, r7, #4
 800038a:	461d      	mov	r5, r3
 800038c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800038e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000390:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000394:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000398:	1d3b      	adds	r3, r7, #4
 800039a:	2100      	movs	r1, #0
 800039c:	4618      	mov	r0, r3
 800039e:	f004 fad1 	bl	8004944 <osThreadCreate>
 80003a2:	4603      	mov	r3, r0
 80003a4:	4a27      	ldr	r2, [pc, #156]	; (8000444 <main+0x140>)
 80003a6:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  xTaskCreate(calibration, "calibration", 128, NULL, 5, NULL);
 80003a8:	2300      	movs	r3, #0
 80003aa:	9301      	str	r3, [sp, #4]
 80003ac:	2305      	movs	r3, #5
 80003ae:	9300      	str	r3, [sp, #0]
 80003b0:	2300      	movs	r3, #0
 80003b2:	2280      	movs	r2, #128	; 0x80
 80003b4:	4924      	ldr	r1, [pc, #144]	; (8000448 <main+0x144>)
 80003b6:	4825      	ldr	r0, [pc, #148]	; (800044c <main+0x148>)
 80003b8:	f005 fc88 	bl	8005ccc <xTaskCreate>
  xTaskCreate(weighing, "weighing", 64, NULL, 2, NULL);
 80003bc:	2300      	movs	r3, #0
 80003be:	9301      	str	r3, [sp, #4]
 80003c0:	2302      	movs	r3, #2
 80003c2:	9300      	str	r3, [sp, #0]
 80003c4:	2300      	movs	r3, #0
 80003c6:	2240      	movs	r2, #64	; 0x40
 80003c8:	4921      	ldr	r1, [pc, #132]	; (8000450 <main+0x14c>)
 80003ca:	4822      	ldr	r0, [pc, #136]	; (8000454 <main+0x150>)
 80003cc:	f005 fc7e 	bl	8005ccc <xTaskCreate>
  xTaskCreate(sendUSART1weighing, "send data W", 128, NULL, 3, NULL);
 80003d0:	2300      	movs	r3, #0
 80003d2:	9301      	str	r3, [sp, #4]
 80003d4:	2303      	movs	r3, #3
 80003d6:	9300      	str	r3, [sp, #0]
 80003d8:	2300      	movs	r3, #0
 80003da:	2280      	movs	r2, #128	; 0x80
 80003dc:	491e      	ldr	r1, [pc, #120]	; (8000458 <main+0x154>)
 80003de:	481f      	ldr	r0, [pc, #124]	; (800045c <main+0x158>)
 80003e0:	f005 fc74 	bl	8005ccc <xTaskCreate>
  xTaskCreate(receiveUSART1, "receive data", 64, NULL, 2, NULL);
 80003e4:	2300      	movs	r3, #0
 80003e6:	9301      	str	r3, [sp, #4]
 80003e8:	2302      	movs	r3, #2
 80003ea:	9300      	str	r3, [sp, #0]
 80003ec:	2300      	movs	r3, #0
 80003ee:	2240      	movs	r2, #64	; 0x40
 80003f0:	491b      	ldr	r1, [pc, #108]	; (8000460 <main+0x15c>)
 80003f2:	481c      	ldr	r0, [pc, #112]	; (8000464 <main+0x160>)
 80003f4:	f005 fc6a 	bl	8005ccc <xTaskCreate>
  xTaskCreate(sendUSART1int, "send data i", 160, NULL, 4, NULL);
 80003f8:	2300      	movs	r3, #0
 80003fa:	9301      	str	r3, [sp, #4]
 80003fc:	2304      	movs	r3, #4
 80003fe:	9300      	str	r3, [sp, #0]
 8000400:	2300      	movs	r3, #0
 8000402:	22a0      	movs	r2, #160	; 0xa0
 8000404:	4918      	ldr	r1, [pc, #96]	; (8000468 <main+0x164>)
 8000406:	4819      	ldr	r0, [pc, #100]	; (800046c <main+0x168>)
 8000408:	f005 fc60 	bl	8005ccc <xTaskCreate>
  xTaskCreate(sendUSART1char, "send data c", 128, NULL, 4, NULL);
 800040c:	2300      	movs	r3, #0
 800040e:	9301      	str	r3, [sp, #4]
 8000410:	2304      	movs	r3, #4
 8000412:	9300      	str	r3, [sp, #0]
 8000414:	2300      	movs	r3, #0
 8000416:	2280      	movs	r2, #128	; 0x80
 8000418:	4915      	ldr	r1, [pc, #84]	; (8000470 <main+0x16c>)
 800041a:	4816      	ldr	r0, [pc, #88]	; (8000474 <main+0x170>)
 800041c:	f005 fc56 	bl	8005ccc <xTaskCreate>
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000420:	f004 fa89 	bl	8004936 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000424:	e7fe      	b.n	8000424 <main+0x120>
 8000426:	bf00      	nop
 8000428:	20000450 	.word	0x20000450
 800042c:	20000400 	.word	0x20000400
 8000430:	2000052c 	.word	0x2000052c
 8000434:	200005f8 	.word	0x200005f8
 8000438:	200005fc 	.word	0x200005fc
 800043c:	20000520 	.word	0x20000520
 8000440:	08008cb0 	.word	0x08008cb0
 8000444:	2000051c 	.word	0x2000051c
 8000448:	08008c64 	.word	0x08008c64
 800044c:	08000749 	.word	0x08000749
 8000450:	08008c70 	.word	0x08008c70
 8000454:	08000859 	.word	0x08000859
 8000458:	08008c7c 	.word	0x08008c7c
 800045c:	080008c5 	.word	0x080008c5
 8000460:	08008c88 	.word	0x08008c88
 8000464:	08000a59 	.word	0x08000a59
 8000468:	08008c98 	.word	0x08008c98
 800046c:	08000941 	.word	0x08000941
 8000470:	08008ca4 	.word	0x08008ca4
 8000474:	080009d1 	.word	0x080009d1

08000478 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000478:	b580      	push	{r7, lr}
 800047a:	b09c      	sub	sp, #112	; 0x70
 800047c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800047e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000482:	2228      	movs	r2, #40	; 0x28
 8000484:	2100      	movs	r1, #0
 8000486:	4618      	mov	r0, r3
 8000488:	f007 ff0a 	bl	80082a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800048c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000490:	2200      	movs	r2, #0
 8000492:	601a      	str	r2, [r3, #0]
 8000494:	605a      	str	r2, [r3, #4]
 8000496:	609a      	str	r2, [r3, #8]
 8000498:	60da      	str	r2, [r3, #12]
 800049a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800049c:	463b      	mov	r3, r7
 800049e:	2234      	movs	r2, #52	; 0x34
 80004a0:	2100      	movs	r1, #0
 80004a2:	4618      	mov	r0, r3
 80004a4:	f007 fefc 	bl	80082a0 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80004a8:	2302      	movs	r3, #2
 80004aa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004ac:	2301      	movs	r3, #1
 80004ae:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80004b0:	2310      	movs	r3, #16
 80004b2:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80004b4:	2302      	movs	r3, #2
 80004b6:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80004b8:	2300      	movs	r3, #0
 80004ba:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80004bc:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80004c0:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004c2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80004c6:	4618      	mov	r0, r3
 80004c8:	f001 ff38 	bl	800233c <HAL_RCC_OscConfig>
 80004cc:	4603      	mov	r3, r0
 80004ce:	2b00      	cmp	r3, #0
 80004d0:	d001      	beq.n	80004d6 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80004d2:	f000 faf5 	bl	8000ac0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004d6:	230f      	movs	r3, #15
 80004d8:	637b      	str	r3, [r7, #52]	; 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004da:	2302      	movs	r3, #2
 80004dc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004de:	2300      	movs	r3, #0
 80004e0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80004e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80004e6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004e8:	2300      	movs	r3, #0
 80004ea:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80004ec:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80004f0:	2102      	movs	r1, #2
 80004f2:	4618      	mov	r0, r3
 80004f4:	f002 ff60 	bl	80033b8 <HAL_RCC_ClockConfig>
 80004f8:	4603      	mov	r3, r0
 80004fa:	2b00      	cmp	r3, #0
 80004fc:	d001      	beq.n	8000502 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80004fe:	f000 fadf 	bl	8000ac0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_ADC1;
 8000502:	2381      	movs	r3, #129	; 0x81
 8000504:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000506:	2300      	movs	r3, #0
 8000508:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.Adc1ClockSelection = RCC_ADC1PLLCLK_DIV1;
 800050a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800050e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000510:	463b      	mov	r3, r7
 8000512:	4618      	mov	r0, r3
 8000514:	f003 f9b8 	bl	8003888 <HAL_RCCEx_PeriphCLKConfig>
 8000518:	4603      	mov	r3, r0
 800051a:	2b00      	cmp	r3, #0
 800051c:	d001      	beq.n	8000522 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800051e:	f000 facf 	bl	8000ac0 <Error_Handler>
  }
}
 8000522:	bf00      	nop
 8000524:	3770      	adds	r7, #112	; 0x70
 8000526:	46bd      	mov	sp, r7
 8000528:	bd80      	pop	{r7, pc}
	...

0800052c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b086      	sub	sp, #24
 8000530:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000532:	463b      	mov	r3, r7
 8000534:	2200      	movs	r2, #0
 8000536:	601a      	str	r2, [r3, #0]
 8000538:	605a      	str	r2, [r3, #4]
 800053a:	609a      	str	r2, [r3, #8]
 800053c:	60da      	str	r2, [r3, #12]
 800053e:	611a      	str	r2, [r3, #16]
 8000540:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000542:	4b2e      	ldr	r3, [pc, #184]	; (80005fc <MX_ADC1_Init+0xd0>)
 8000544:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000548:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800054a:	4b2c      	ldr	r3, [pc, #176]	; (80005fc <MX_ADC1_Init+0xd0>)
 800054c:	2200      	movs	r2, #0
 800054e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000550:	4b2a      	ldr	r3, [pc, #168]	; (80005fc <MX_ADC1_Init+0xd0>)
 8000552:	2200      	movs	r2, #0
 8000554:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000556:	4b29      	ldr	r3, [pc, #164]	; (80005fc <MX_ADC1_Init+0xd0>)
 8000558:	2201      	movs	r2, #1
 800055a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800055c:	4b27      	ldr	r3, [pc, #156]	; (80005fc <MX_ADC1_Init+0xd0>)
 800055e:	2201      	movs	r2, #1
 8000560:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000562:	4b26      	ldr	r3, [pc, #152]	; (80005fc <MX_ADC1_Init+0xd0>)
 8000564:	2200      	movs	r2, #0
 8000566:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800056a:	4b24      	ldr	r3, [pc, #144]	; (80005fc <MX_ADC1_Init+0xd0>)
 800056c:	2200      	movs	r2, #0
 800056e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000570:	4b22      	ldr	r3, [pc, #136]	; (80005fc <MX_ADC1_Init+0xd0>)
 8000572:	2201      	movs	r2, #1
 8000574:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000576:	4b21      	ldr	r3, [pc, #132]	; (80005fc <MX_ADC1_Init+0xd0>)
 8000578:	2200      	movs	r2, #0
 800057a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 800057c:	4b1f      	ldr	r3, [pc, #124]	; (80005fc <MX_ADC1_Init+0xd0>)
 800057e:	2202      	movs	r2, #2
 8000580:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000582:	4b1e      	ldr	r3, [pc, #120]	; (80005fc <MX_ADC1_Init+0xd0>)
 8000584:	2201      	movs	r2, #1
 8000586:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800058a:	4b1c      	ldr	r3, [pc, #112]	; (80005fc <MX_ADC1_Init+0xd0>)
 800058c:	2204      	movs	r2, #4
 800058e:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000590:	4b1a      	ldr	r3, [pc, #104]	; (80005fc <MX_ADC1_Init+0xd0>)
 8000592:	2200      	movs	r2, #0
 8000594:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000596:	4b19      	ldr	r3, [pc, #100]	; (80005fc <MX_ADC1_Init+0xd0>)
 8000598:	2200      	movs	r2, #0
 800059a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800059c:	4817      	ldr	r0, [pc, #92]	; (80005fc <MX_ADC1_Init+0xd0>)
 800059e:	f000 fcc1 	bl	8000f24 <HAL_ADC_Init>
 80005a2:	4603      	mov	r3, r0
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d001      	beq.n	80005ac <MX_ADC1_Init+0x80>
  {
    Error_Handler();
 80005a8:	f000 fa8a 	bl	8000ac0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80005ac:	2301      	movs	r3, #1
 80005ae:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80005b0:	2301      	movs	r3, #1
 80005b2:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80005b4:	2300      	movs	r3, #0
 80005b6:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80005b8:	2300      	movs	r3, #0
 80005ba:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80005bc:	2300      	movs	r3, #0
 80005be:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80005c0:	2300      	movs	r3, #0
 80005c2:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005c4:	463b      	mov	r3, r7
 80005c6:	4619      	mov	r1, r3
 80005c8:	480c      	ldr	r0, [pc, #48]	; (80005fc <MX_ADC1_Init+0xd0>)
 80005ca:	f000 fecd 	bl	8001368 <HAL_ADC_ConfigChannel>
 80005ce:	4603      	mov	r3, r0
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d001      	beq.n	80005d8 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80005d4:	f000 fa74 	bl	8000ac0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80005d8:	2302      	movs	r3, #2
 80005da:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80005dc:	2302      	movs	r3, #2
 80005de:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005e0:	463b      	mov	r3, r7
 80005e2:	4619      	mov	r1, r3
 80005e4:	4805      	ldr	r0, [pc, #20]	; (80005fc <MX_ADC1_Init+0xd0>)
 80005e6:	f000 febf 	bl	8001368 <HAL_ADC_ConfigChannel>
 80005ea:	4603      	mov	r3, r0
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d001      	beq.n	80005f4 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 80005f0:	f000 fa66 	bl	8000ac0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80005f4:	bf00      	nop
 80005f6:	3718      	adds	r7, #24
 80005f8:	46bd      	mov	sp, r7
 80005fa:	bd80      	pop	{r7, pc}
 80005fc:	20000400 	.word	0x20000400

08000600 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000604:	4b14      	ldr	r3, [pc, #80]	; (8000658 <MX_USART1_UART_Init+0x58>)
 8000606:	4a15      	ldr	r2, [pc, #84]	; (800065c <MX_USART1_UART_Init+0x5c>)
 8000608:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800060a:	4b13      	ldr	r3, [pc, #76]	; (8000658 <MX_USART1_UART_Init+0x58>)
 800060c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000610:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000612:	4b11      	ldr	r3, [pc, #68]	; (8000658 <MX_USART1_UART_Init+0x58>)
 8000614:	2200      	movs	r2, #0
 8000616:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000618:	4b0f      	ldr	r3, [pc, #60]	; (8000658 <MX_USART1_UART_Init+0x58>)
 800061a:	2200      	movs	r2, #0
 800061c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800061e:	4b0e      	ldr	r3, [pc, #56]	; (8000658 <MX_USART1_UART_Init+0x58>)
 8000620:	2200      	movs	r2, #0
 8000622:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000624:	4b0c      	ldr	r3, [pc, #48]	; (8000658 <MX_USART1_UART_Init+0x58>)
 8000626:	220c      	movs	r2, #12
 8000628:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800062a:	4b0b      	ldr	r3, [pc, #44]	; (8000658 <MX_USART1_UART_Init+0x58>)
 800062c:	2200      	movs	r2, #0
 800062e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000630:	4b09      	ldr	r3, [pc, #36]	; (8000658 <MX_USART1_UART_Init+0x58>)
 8000632:	2200      	movs	r2, #0
 8000634:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000636:	4b08      	ldr	r3, [pc, #32]	; (8000658 <MX_USART1_UART_Init+0x58>)
 8000638:	2200      	movs	r2, #0
 800063a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800063c:	4b06      	ldr	r3, [pc, #24]	; (8000658 <MX_USART1_UART_Init+0x58>)
 800063e:	2200      	movs	r2, #0
 8000640:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000642:	4805      	ldr	r0, [pc, #20]	; (8000658 <MX_USART1_UART_Init+0x58>)
 8000644:	f003 fd3c 	bl	80040c0 <HAL_UART_Init>
 8000648:	4603      	mov	r3, r0
 800064a:	2b00      	cmp	r3, #0
 800064c:	d001      	beq.n	8000652 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800064e:	f000 fa37 	bl	8000ac0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000652:	bf00      	nop
 8000654:	bd80      	pop	{r7, pc}
 8000656:	bf00      	nop
 8000658:	20000494 	.word	0x20000494
 800065c:	40013800 	.word	0x40013800

08000660 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b082      	sub	sp, #8
 8000664:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000666:	4b0c      	ldr	r3, [pc, #48]	; (8000698 <MX_DMA_Init+0x38>)
 8000668:	695b      	ldr	r3, [r3, #20]
 800066a:	4a0b      	ldr	r2, [pc, #44]	; (8000698 <MX_DMA_Init+0x38>)
 800066c:	f043 0301 	orr.w	r3, r3, #1
 8000670:	6153      	str	r3, [r2, #20]
 8000672:	4b09      	ldr	r3, [pc, #36]	; (8000698 <MX_DMA_Init+0x38>)
 8000674:	695b      	ldr	r3, [r3, #20]
 8000676:	f003 0301 	and.w	r3, r3, #1
 800067a:	607b      	str	r3, [r7, #4]
 800067c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 800067e:	2200      	movs	r2, #0
 8000680:	2105      	movs	r1, #5
 8000682:	200b      	movs	r0, #11
 8000684:	f001 fb0e 	bl	8001ca4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000688:	200b      	movs	r0, #11
 800068a:	f001 fb27 	bl	8001cdc <HAL_NVIC_EnableIRQ>

}
 800068e:	bf00      	nop
 8000690:	3708      	adds	r7, #8
 8000692:	46bd      	mov	sp, r7
 8000694:	bd80      	pop	{r7, pc}
 8000696:	bf00      	nop
 8000698:	40021000 	.word	0x40021000

0800069c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b088      	sub	sp, #32
 80006a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006a2:	f107 030c 	add.w	r3, r7, #12
 80006a6:	2200      	movs	r2, #0
 80006a8:	601a      	str	r2, [r3, #0]
 80006aa:	605a      	str	r2, [r3, #4]
 80006ac:	609a      	str	r2, [r3, #8]
 80006ae:	60da      	str	r2, [r3, #12]
 80006b0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006b2:	4b23      	ldr	r3, [pc, #140]	; (8000740 <MX_GPIO_Init+0xa4>)
 80006b4:	695b      	ldr	r3, [r3, #20]
 80006b6:	4a22      	ldr	r2, [pc, #136]	; (8000740 <MX_GPIO_Init+0xa4>)
 80006b8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80006bc:	6153      	str	r3, [r2, #20]
 80006be:	4b20      	ldr	r3, [pc, #128]	; (8000740 <MX_GPIO_Init+0xa4>)
 80006c0:	695b      	ldr	r3, [r3, #20]
 80006c2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80006c6:	60bb      	str	r3, [r7, #8]
 80006c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ca:	4b1d      	ldr	r3, [pc, #116]	; (8000740 <MX_GPIO_Init+0xa4>)
 80006cc:	695b      	ldr	r3, [r3, #20]
 80006ce:	4a1c      	ldr	r2, [pc, #112]	; (8000740 <MX_GPIO_Init+0xa4>)
 80006d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006d4:	6153      	str	r3, [r2, #20]
 80006d6:	4b1a      	ldr	r3, [pc, #104]	; (8000740 <MX_GPIO_Init+0xa4>)
 80006d8:	695b      	ldr	r3, [r3, #20]
 80006da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80006de:	607b      	str	r3, [r7, #4]
 80006e0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80006e2:	230c      	movs	r3, #12
 80006e4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80006e6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80006ea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80006ec:	2302      	movs	r3, #2
 80006ee:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006f0:	f107 030c 	add.w	r3, r7, #12
 80006f4:	4619      	mov	r1, r3
 80006f6:	4813      	ldr	r0, [pc, #76]	; (8000744 <MX_GPIO_Init+0xa8>)
 80006f8:	f001 fc96 	bl	8002028 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC10 PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80006fc:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000700:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000702:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000706:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000708:	2300      	movs	r3, #0
 800070a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800070c:	f107 030c 	add.w	r3, r7, #12
 8000710:	4619      	mov	r1, r3
 8000712:	480c      	ldr	r0, [pc, #48]	; (8000744 <MX_GPIO_Init+0xa8>)
 8000714:	f001 fc88 	bl	8002028 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_TSC_IRQn, 5, 0);
 8000718:	2200      	movs	r2, #0
 800071a:	2105      	movs	r1, #5
 800071c:	2008      	movs	r0, #8
 800071e:	f001 fac1 	bl	8001ca4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_TSC_IRQn);
 8000722:	2008      	movs	r0, #8
 8000724:	f001 fada 	bl	8001cdc <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 8000728:	2200      	movs	r2, #0
 800072a:	2105      	movs	r1, #5
 800072c:	2009      	movs	r0, #9
 800072e:	f001 fab9 	bl	8001ca4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000732:	2009      	movs	r0, #9
 8000734:	f001 fad2 	bl	8001cdc <HAL_NVIC_EnableIRQ>

}
 8000738:	bf00      	nop
 800073a:	3720      	adds	r7, #32
 800073c:	46bd      	mov	sp, r7
 800073e:	bd80      	pop	{r7, pc}
 8000740:	40021000 	.word	0x40021000
 8000744:	48000800 	.word	0x48000800

08000748 <calibration>:

/* USER CODE BEGIN 4 */
void calibration(void)
{
 8000748:	b5b0      	push	{r4, r5, r7, lr}
 800074a:	b08a      	sub	sp, #40	; 0x28
 800074c:	af02      	add	r7, sp, #8
	for( ;; )
	{
		xSemaphoreTake(xSemaphore1, portMAX_DELAY);
 800074e:	4b3a      	ldr	r3, [pc, #232]	; (8000838 <calibration+0xf0>)
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	f04f 31ff 	mov.w	r1, #4294967295
 8000756:	4618      	mov	r0, r3
 8000758:	f004 ffca 	bl	80056f0 <xQueueSemaphoreTake>
		for(int i = 0; i < SIZE_BUFFER; i++)
 800075c:	2300      	movs	r3, #0
 800075e:	61fb      	str	r3, [r7, #28]
 8000760:	e00d      	b.n	800077e <calibration+0x36>
		{
			arm_mean_q15((int16_t*)&buffer.adc_buf, sizeof(buffer.adc_buf)/2, (int16_t*)&buffer.adc_calibration[i]);
 8000762:	69fb      	ldr	r3, [r7, #28]
 8000764:	3338      	adds	r3, #56	; 0x38
 8000766:	005b      	lsls	r3, r3, #1
 8000768:	4a34      	ldr	r2, [pc, #208]	; (800083c <calibration+0xf4>)
 800076a:	4413      	add	r3, r2
 800076c:	3302      	adds	r3, #2
 800076e:	461a      	mov	r2, r3
 8000770:	2132      	movs	r1, #50	; 0x32
 8000772:	4833      	ldr	r0, [pc, #204]	; (8000840 <calibration+0xf8>)
 8000774:	f007 fd2a 	bl	80081cc <arm_mean_q15>
		for(int i = 0; i < SIZE_BUFFER; i++)
 8000778:	69fb      	ldr	r3, [r7, #28]
 800077a:	3301      	adds	r3, #1
 800077c:	61fb      	str	r3, [r7, #28]
 800077e:	69fb      	ldr	r3, [r7, #28]
 8000780:	2b31      	cmp	r3, #49	; 0x31
 8000782:	ddee      	ble.n	8000762 <calibration+0x1a>
		}
		arm_mean_q15((int16_t*)&buffer.adc_calibration, sizeof(buffer.adc_calibration)/2, (int16_t*)&buffer.adc_calibration_result);
 8000784:	4a2f      	ldr	r2, [pc, #188]	; (8000844 <calibration+0xfc>)
 8000786:	2132      	movs	r1, #50	; 0x32
 8000788:	482f      	ldr	r0, [pc, #188]	; (8000848 <calibration+0x100>)
 800078a:	f007 fd1f 	bl	80081cc <arm_mean_q15>
		char string_buff[] = "Calibration 0 value: = ";
 800078e:	4b2f      	ldr	r3, [pc, #188]	; (800084c <calibration+0x104>)
 8000790:	463c      	mov	r4, r7
 8000792:	461d      	mov	r5, r3
 8000794:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000796:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000798:	e895 0003 	ldmia.w	r5, {r0, r1}
 800079c:	e884 0003 	stmia.w	r4, {r0, r1}
		for(uint8_t i = 0; i<(sizeof(string_buff)); i++)
 80007a0:	2300      	movs	r3, #0
 80007a2:	76fb      	strb	r3, [r7, #27]
 80007a4:	e00b      	b.n	80007be <calibration+0x76>
		{
			xQueueSend(buffer.queueh_clbrt, (void*)(&string_buff[i]), 5);
 80007a6:	4b25      	ldr	r3, [pc, #148]	; (800083c <calibration+0xf4>)
 80007a8:	6858      	ldr	r0, [r3, #4]
 80007aa:	7efb      	ldrb	r3, [r7, #27]
 80007ac:	463a      	mov	r2, r7
 80007ae:	18d1      	adds	r1, r2, r3
 80007b0:	2300      	movs	r3, #0
 80007b2:	2205      	movs	r2, #5
 80007b4:	f004 fc98 	bl	80050e8 <xQueueGenericSend>
		for(uint8_t i = 0; i<(sizeof(string_buff)); i++)
 80007b8:	7efb      	ldrb	r3, [r7, #27]
 80007ba:	3301      	adds	r3, #1
 80007bc:	76fb      	strb	r3, [r7, #27]
 80007be:	7efb      	ldrb	r3, [r7, #27]
 80007c0:	2b17      	cmp	r3, #23
 80007c2:	d9f0      	bls.n	80007a6 <calibration+0x5e>
		}
		xEventGroupSetBits(xCreatedEventGroup1, 0x1);
 80007c4:	4b22      	ldr	r3, [pc, #136]	; (8000850 <calibration+0x108>)
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	2101      	movs	r1, #1
 80007ca:	4618      	mov	r0, r3
 80007cc:	f004 f9ee 	bl	8004bac <xEventGroupSetBits>
		xEventGroupWaitBits(xCreatedEventGroup1, 0x2, pdTRUE, pdTRUE, portMAX_DELAY);
 80007d0:	4b1f      	ldr	r3, [pc, #124]	; (8000850 <calibration+0x108>)
 80007d2:	6818      	ldr	r0, [r3, #0]
 80007d4:	f04f 33ff 	mov.w	r3, #4294967295
 80007d8:	9300      	str	r3, [sp, #0]
 80007da:	2301      	movs	r3, #1
 80007dc:	2201      	movs	r2, #1
 80007de:	2102      	movs	r1, #2
 80007e0:	f004 f916 	bl	8004a10 <xEventGroupWaitBits>
		xQueueSend(buffer.queueh_clbrt, (void*)(((char*) &buffer.adc_calibration_result)), 1);
 80007e4:	4b15      	ldr	r3, [pc, #84]	; (800083c <calibration+0xf4>)
 80007e6:	6858      	ldr	r0, [r3, #4]
 80007e8:	2300      	movs	r3, #0
 80007ea:	2201      	movs	r2, #1
 80007ec:	4915      	ldr	r1, [pc, #84]	; (8000844 <calibration+0xfc>)
 80007ee:	f004 fc7b 	bl	80050e8 <xQueueGenericSend>
		xQueueSend(buffer.queueh_clbrt, (void*)(((char*) &buffer.adc_calibration_result)+1), 1);
 80007f2:	4b12      	ldr	r3, [pc, #72]	; (800083c <calibration+0xf4>)
 80007f4:	6858      	ldr	r0, [r3, #4]
 80007f6:	4917      	ldr	r1, [pc, #92]	; (8000854 <calibration+0x10c>)
 80007f8:	2300      	movs	r3, #0
 80007fa:	2201      	movs	r2, #1
 80007fc:	f004 fc74 	bl	80050e8 <xQueueGenericSend>
		xEventGroupSetBits(xCreatedEventGroup1, 0x4);
 8000800:	4b13      	ldr	r3, [pc, #76]	; (8000850 <calibration+0x108>)
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	2104      	movs	r1, #4
 8000806:	4618      	mov	r0, r3
 8000808:	f004 f9d0 	bl	8004bac <xEventGroupSetBits>
		xEventGroupWaitBits(xCreatedEventGroup1, 0x8, pdTRUE, pdTRUE, portMAX_DELAY);
 800080c:	4b10      	ldr	r3, [pc, #64]	; (8000850 <calibration+0x108>)
 800080e:	6818      	ldr	r0, [r3, #0]
 8000810:	f04f 33ff 	mov.w	r3, #4294967295
 8000814:	9300      	str	r3, [sp, #0]
 8000816:	2301      	movs	r3, #1
 8000818:	2201      	movs	r2, #1
 800081a:	2108      	movs	r1, #8
 800081c:	f004 f8f8 	bl	8004a10 <xEventGroupWaitBits>

		vTaskDelay(400);
 8000820:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8000824:	f005 fc28 	bl	8006078 <vTaskDelay>
		xSemaphoreTake(xSemaphore1, 1);
 8000828:	4b03      	ldr	r3, [pc, #12]	; (8000838 <calibration+0xf0>)
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	2101      	movs	r1, #1
 800082e:	4618      	mov	r0, r3
 8000830:	f004 ff5e 	bl	80056f0 <xQueueSemaphoreTake>
	{
 8000834:	e78b      	b.n	800074e <calibration+0x6>
 8000836:	bf00      	nop
 8000838:	200005f8 	.word	0x200005f8
 800083c:	20000520 	.word	0x20000520
 8000840:	2000052c 	.word	0x2000052c
 8000844:	200005f6 	.word	0x200005f6
 8000848:	20000592 	.word	0x20000592
 800084c:	08008ccc 	.word	0x08008ccc
 8000850:	200005fc 	.word	0x200005fc
 8000854:	200005f7 	.word	0x200005f7

08000858 <weighing>:
	}
	vTaskDelete(xTaskGetHandle("calibration"));
}

void weighing(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	af00      	add	r7, sp, #0
	for( ;; )
	{
		vTaskDelay(250);
 800085c:	20fa      	movs	r0, #250	; 0xfa
 800085e:	f005 fc0b 	bl	8006078 <vTaskDelay>
		arm_mean_q15((int16_t*)&buffer.adc_buf, sizeof(buffer.adc_buf)/2, (int16_t*)&buffer.adc_buf_result);
 8000862:	4a12      	ldr	r2, [pc, #72]	; (80008ac <weighing+0x54>)
 8000864:	2132      	movs	r1, #50	; 0x32
 8000866:	4812      	ldr	r0, [pc, #72]	; (80008b0 <weighing+0x58>)
 8000868:	f007 fcb0 	bl	80081cc <arm_mean_q15>
		xQueueSend(buffer.queueh, (void*)(((char*) &buffer.adc_buf_result)), 1);
 800086c:	4b11      	ldr	r3, [pc, #68]	; (80008b4 <weighing+0x5c>)
 800086e:	6818      	ldr	r0, [r3, #0]
 8000870:	2300      	movs	r3, #0
 8000872:	2201      	movs	r2, #1
 8000874:	490d      	ldr	r1, [pc, #52]	; (80008ac <weighing+0x54>)
 8000876:	f004 fc37 	bl	80050e8 <xQueueGenericSend>
		xQueueSend(buffer.queueh, (void*)(((char*) &buffer.adc_buf_result)+1), 1);
 800087a:	4b0e      	ldr	r3, [pc, #56]	; (80008b4 <weighing+0x5c>)
 800087c:	6818      	ldr	r0, [r3, #0]
 800087e:	490e      	ldr	r1, [pc, #56]	; (80008b8 <weighing+0x60>)
 8000880:	2300      	movs	r3, #0
 8000882:	2201      	movs	r2, #1
 8000884:	f004 fc30 	bl	80050e8 <xQueueGenericSend>
		xTaskNotify(xTaskGetHandle("send data W"), 0, eNoAction);
 8000888:	480c      	ldr	r0, [pc, #48]	; (80008bc <weighing+0x64>)
 800088a:	f005 fdb9 	bl	8006400 <xTaskGetHandle>
 800088e:	2300      	movs	r3, #0
 8000890:	2200      	movs	r2, #0
 8000892:	2100      	movs	r1, #0
 8000894:	f006 fc4e 	bl	8007134 <xTaskGenericNotify>
		taskYIELD();
 8000898:	4b09      	ldr	r3, [pc, #36]	; (80008c0 <weighing+0x68>)
 800089a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800089e:	601a      	str	r2, [r3, #0]
 80008a0:	f3bf 8f4f 	dsb	sy
 80008a4:	f3bf 8f6f 	isb	sy
	{
 80008a8:	e7d8      	b.n	800085c <weighing+0x4>
 80008aa:	bf00      	nop
 80008ac:	20000590 	.word	0x20000590
 80008b0:	2000052c 	.word	0x2000052c
 80008b4:	20000520 	.word	0x20000520
 80008b8:	20000591 	.word	0x20000591
 80008bc:	08008c7c 	.word	0x08008c7c
 80008c0:	e000ed04 	.word	0xe000ed04

080008c4 <sendUSART1weighing>:
	}
}

void sendUSART1weighing(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b084      	sub	sp, #16
 80008c8:	af00      	add	r7, sp, #0
	uint16_t res_to_uart;
	char string_buff[8];
	for( ;; )
	{
		xTaskNotifyWait(0x00, 0xffffffff, NULL, portMAX_DELAY);
 80008ca:	f04f 33ff 	mov.w	r3, #4294967295
 80008ce:	2200      	movs	r2, #0
 80008d0:	f04f 31ff 	mov.w	r1, #4294967295
 80008d4:	2000      	movs	r0, #0
 80008d6:	f006 fbcd 	bl	8007074 <xTaskNotifyWait>
		//HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_10);
		xQueueReceive(buffer.queueh, &buffer.tx[0], portMAX_DELAY);
 80008da:	4b14      	ldr	r3, [pc, #80]	; (800092c <sendUSART1weighing+0x68>)
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	f04f 32ff 	mov.w	r2, #4294967295
 80008e2:	4913      	ldr	r1, [pc, #76]	; (8000930 <sendUSART1weighing+0x6c>)
 80008e4:	4618      	mov	r0, r3
 80008e6:	f004 fe23 	bl	8005530 <xQueueReceive>
		xQueueReceive(buffer.queueh, &buffer.tx[1], portMAX_DELAY);
 80008ea:	4b10      	ldr	r3, [pc, #64]	; (800092c <sendUSART1weighing+0x68>)
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	f04f 32ff 	mov.w	r2, #4294967295
 80008f2:	4910      	ldr	r1, [pc, #64]	; (8000934 <sendUSART1weighing+0x70>)
 80008f4:	4618      	mov	r0, r3
 80008f6:	f004 fe1b 	bl	8005530 <xQueueReceive>
		res_to_uart = buffer.tx[0];
 80008fa:	4b0c      	ldr	r3, [pc, #48]	; (800092c <sendUSART1weighing+0x68>)
 80008fc:	7a1b      	ldrb	r3, [r3, #8]
 80008fe:	81fb      	strh	r3, [r7, #14]
		res_to_uart = res_to_uart + (buffer.tx[1] << 8);
 8000900:	4b0a      	ldr	r3, [pc, #40]	; (800092c <sendUSART1weighing+0x68>)
 8000902:	7a5b      	ldrb	r3, [r3, #9]
 8000904:	b29b      	uxth	r3, r3
 8000906:	021b      	lsls	r3, r3, #8
 8000908:	b29a      	uxth	r2, r3
 800090a:	89fb      	ldrh	r3, [r7, #14]
 800090c:	4413      	add	r3, r2
 800090e:	81fb      	strh	r3, [r7, #14]
		sprintf(string_buff, "%d\r\n", res_to_uart);
 8000910:	89fa      	ldrh	r2, [r7, #14]
 8000912:	1d3b      	adds	r3, r7, #4
 8000914:	4908      	ldr	r1, [pc, #32]	; (8000938 <sendUSART1weighing+0x74>)
 8000916:	4618      	mov	r0, r3
 8000918:	f007 fdd8 	bl	80084cc <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*) string_buff, sizeof(string_buff), 100);
 800091c:	1d39      	adds	r1, r7, #4
 800091e:	2364      	movs	r3, #100	; 0x64
 8000920:	2208      	movs	r2, #8
 8000922:	4806      	ldr	r0, [pc, #24]	; (800093c <sendUSART1weighing+0x78>)
 8000924:	f003 fc1a 	bl	800415c <HAL_UART_Transmit>
		xTaskNotifyWait(0x00, 0xffffffff, NULL, portMAX_DELAY);
 8000928:	e7cf      	b.n	80008ca <sendUSART1weighing+0x6>
 800092a:	bf00      	nop
 800092c:	20000520 	.word	0x20000520
 8000930:	20000528 	.word	0x20000528
 8000934:	20000529 	.word	0x20000529
 8000938:	08008ce4 	.word	0x08008ce4
 800093c:	20000494 	.word	0x20000494

08000940 <sendUSART1int>:
	}
	 vTaskDelete(xTaskGetHandle("send data W"));
}

void sendUSART1int(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b08a      	sub	sp, #40	; 0x28
 8000944:	af02      	add	r7, sp, #8
	for( ;; )
	{
		uint16_t res_to_uart;
		char string_buff[30];
		xEventGroupWaitBits(xCreatedEventGroup1, 0x4, pdTRUE, pdTRUE, portMAX_DELAY);
 8000946:	4b1c      	ldr	r3, [pc, #112]	; (80009b8 <sendUSART1int+0x78>)
 8000948:	6818      	ldr	r0, [r3, #0]
 800094a:	f04f 33ff 	mov.w	r3, #4294967295
 800094e:	9300      	str	r3, [sp, #0]
 8000950:	2301      	movs	r3, #1
 8000952:	2201      	movs	r2, #1
 8000954:	2104      	movs	r1, #4
 8000956:	f004 f85b 	bl	8004a10 <xEventGroupWaitBits>
		xQueueReceive(buffer.queueh_clbrt, &buffer.tx[0], portMAX_DELAY);
 800095a:	4b18      	ldr	r3, [pc, #96]	; (80009bc <sendUSART1int+0x7c>)
 800095c:	685b      	ldr	r3, [r3, #4]
 800095e:	f04f 32ff 	mov.w	r2, #4294967295
 8000962:	4917      	ldr	r1, [pc, #92]	; (80009c0 <sendUSART1int+0x80>)
 8000964:	4618      	mov	r0, r3
 8000966:	f004 fde3 	bl	8005530 <xQueueReceive>
		xQueueReceive(buffer.queueh_clbrt, &buffer.tx[1], portMAX_DELAY);
 800096a:	4b14      	ldr	r3, [pc, #80]	; (80009bc <sendUSART1int+0x7c>)
 800096c:	685b      	ldr	r3, [r3, #4]
 800096e:	f04f 32ff 	mov.w	r2, #4294967295
 8000972:	4914      	ldr	r1, [pc, #80]	; (80009c4 <sendUSART1int+0x84>)
 8000974:	4618      	mov	r0, r3
 8000976:	f004 fddb 	bl	8005530 <xQueueReceive>
		res_to_uart = buffer.tx[0];
 800097a:	4b10      	ldr	r3, [pc, #64]	; (80009bc <sendUSART1int+0x7c>)
 800097c:	7a1b      	ldrb	r3, [r3, #8]
 800097e:	83fb      	strh	r3, [r7, #30]
		res_to_uart = res_to_uart + (buffer.tx[1] << 8);
 8000980:	4b0e      	ldr	r3, [pc, #56]	; (80009bc <sendUSART1int+0x7c>)
 8000982:	7a5b      	ldrb	r3, [r3, #9]
 8000984:	b29b      	uxth	r3, r3
 8000986:	021b      	lsls	r3, r3, #8
 8000988:	b29a      	uxth	r2, r3
 800098a:	8bfb      	ldrh	r3, [r7, #30]
 800098c:	4413      	add	r3, r2
 800098e:	83fb      	strh	r3, [r7, #30]
		sprintf(string_buff, "%d\r\n", res_to_uart);
 8000990:	8bfa      	ldrh	r2, [r7, #30]
 8000992:	463b      	mov	r3, r7
 8000994:	490c      	ldr	r1, [pc, #48]	; (80009c8 <sendUSART1int+0x88>)
 8000996:	4618      	mov	r0, r3
 8000998:	f007 fd98 	bl	80084cc <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*) string_buff, sizeof(string_buff), 100);
 800099c:	4639      	mov	r1, r7
 800099e:	2364      	movs	r3, #100	; 0x64
 80009a0:	221e      	movs	r2, #30
 80009a2:	480a      	ldr	r0, [pc, #40]	; (80009cc <sendUSART1int+0x8c>)
 80009a4:	f003 fbda 	bl	800415c <HAL_UART_Transmit>
		xEventGroupSetBits(xCreatedEventGroup1, 0x8);
 80009a8:	4b03      	ldr	r3, [pc, #12]	; (80009b8 <sendUSART1int+0x78>)
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	2108      	movs	r1, #8
 80009ae:	4618      	mov	r0, r3
 80009b0:	f004 f8fc 	bl	8004bac <xEventGroupSetBits>
	{
 80009b4:	e7c7      	b.n	8000946 <sendUSART1int+0x6>
 80009b6:	bf00      	nop
 80009b8:	200005fc 	.word	0x200005fc
 80009bc:	20000520 	.word	0x20000520
 80009c0:	20000528 	.word	0x20000528
 80009c4:	20000529 	.word	0x20000529
 80009c8:	08008ce4 	.word	0x08008ce4
 80009cc:	20000494 	.word	0x20000494

080009d0 <sendUSART1char>:
	}
	 vTaskDelete(xTaskGetHandle("send data i"));
}
void sendUSART1char(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b08c      	sub	sp, #48	; 0x30
 80009d4:	af02      	add	r7, sp, #8
	for( ;; )
	{
		char string_buff[30];
		BaseType_t res;
		uint8_t i = 0;
 80009d6:	2300      	movs	r3, #0
 80009d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
//		xTaskNotifyWait(0x00, 0xffffffff, NULL, portMAX_DELAY);
//		xSemaphoreTake(xSemaphore2, portMAX_DELAY);
		xEventGroupWaitBits(xCreatedEventGroup1, 0x1, pdTRUE, pdTRUE, portMAX_DELAY);
 80009dc:	4b1b      	ldr	r3, [pc, #108]	; (8000a4c <sendUSART1char+0x7c>)
 80009de:	6818      	ldr	r0, [r3, #0]
 80009e0:	f04f 33ff 	mov.w	r3, #4294967295
 80009e4:	9300      	str	r3, [sp, #0]
 80009e6:	2301      	movs	r3, #1
 80009e8:	2201      	movs	r2, #1
 80009ea:	2101      	movs	r1, #1
 80009ec:	f004 f810 	bl	8004a10 <xEventGroupWaitBits>
		do{
			res = xQueueReceive(buffer.queueh_clbrt, &string_buff[i], portMAX_DELAY);
 80009f0:	4b17      	ldr	r3, [pc, #92]	; (8000a50 <sendUSART1char+0x80>)
 80009f2:	6858      	ldr	r0, [r3, #4]
 80009f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80009f8:	463a      	mov	r2, r7
 80009fa:	4413      	add	r3, r2
 80009fc:	f04f 32ff 	mov.w	r2, #4294967295
 8000a00:	4619      	mov	r1, r3
 8000a02:	f004 fd95 	bl	8005530 <xQueueReceive>
 8000a06:	6238      	str	r0, [r7, #32]
			i++;
 8000a08:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000a0c:	3301      	adds	r3, #1
 8000a0e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		}while(res != errQUEUE_EMPTY && string_buff[i-1] != '\0');
 8000a12:	6a3b      	ldr	r3, [r7, #32]
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d008      	beq.n	8000a2a <sendUSART1char+0x5a>
 8000a18:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000a1c:	3b01      	subs	r3, #1
 8000a1e:	3328      	adds	r3, #40	; 0x28
 8000a20:	443b      	add	r3, r7
 8000a22:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d1e2      	bne.n	80009f0 <sendUSART1char+0x20>

		HAL_UART_Transmit(&huart1, (uint8_t*) string_buff, i+1, 100);
 8000a2a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000a2e:	b29b      	uxth	r3, r3
 8000a30:	3301      	adds	r3, #1
 8000a32:	b29a      	uxth	r2, r3
 8000a34:	4639      	mov	r1, r7
 8000a36:	2364      	movs	r3, #100	; 0x64
 8000a38:	4806      	ldr	r0, [pc, #24]	; (8000a54 <sendUSART1char+0x84>)
 8000a3a:	f003 fb8f 	bl	800415c <HAL_UART_Transmit>
//		xTaskNotify(xTaskGetHandle("calibration"), 0, eNoAction);
//		xSemaphoreGive(xSemaphore2);
		xEventGroupSetBits(xCreatedEventGroup1, 0x2);
 8000a3e:	4b03      	ldr	r3, [pc, #12]	; (8000a4c <sendUSART1char+0x7c>)
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	2102      	movs	r1, #2
 8000a44:	4618      	mov	r0, r3
 8000a46:	f004 f8b1 	bl	8004bac <xEventGroupSetBits>
	{
 8000a4a:	e7c4      	b.n	80009d6 <sendUSART1char+0x6>
 8000a4c:	200005fc 	.word	0x200005fc
 8000a50:	20000520 	.word	0x20000520
 8000a54:	20000494 	.word	0x20000494

08000a58 <receiveUSART1>:
	}
	 vTaskDelete(xTaskGetHandle("send data c"));
}

void receiveUSART1(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	af00      	add	r7, sp, #0
	for( ;; )
	{
		vTaskDelete(xTaskGetHandle("receive data"));
 8000a5c:	4803      	ldr	r0, [pc, #12]	; (8000a6c <receiveUSART1+0x14>)
 8000a5e:	f005 fccf 	bl	8006400 <xTaskGetHandle>
 8000a62:	4603      	mov	r3, r0
 8000a64:	4618      	mov	r0, r3
 8000a66:	f005 fa77 	bl	8005f58 <vTaskDelete>
 8000a6a:	e7f7      	b.n	8000a5c <receiveUSART1+0x4>
 8000a6c:	08008c88 	.word	0x08008c88

08000a70 <HAL_GPIO_EXTI_Callback>:
	}
	vTaskDelete(xTaskGetHandle("receive data"));
}

HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b082      	sub	sp, #8
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	4603      	mov	r3, r0
 8000a78:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_2)
 8000a7a:	88fb      	ldrh	r3, [r7, #6]
 8000a7c:	2b04      	cmp	r3, #4
 8000a7e:	d105      	bne.n	8000a8c <HAL_GPIO_EXTI_Callback+0x1c>
	{
		xSemaphoreGiveFromISR(xSemaphore1, NULL);
 8000a80:	4b04      	ldr	r3, [pc, #16]	; (8000a94 <HAL_GPIO_EXTI_Callback+0x24>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	2100      	movs	r1, #0
 8000a86:	4618      	mov	r0, r3
 8000a88:	f004 fcc4 	bl	8005414 <xQueueGiveFromISR>
	}
	if(GPIO_Pin == GPIO_PIN_3)
	{

	}
}
 8000a8c:	bf00      	nop
 8000a8e:	3708      	adds	r7, #8
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bd80      	pop	{r7, pc}
 8000a94:	200005f8 	.word	0x200005f8

08000a98 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	b083      	sub	sp, #12
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
 8000aa0:	e7fe      	b.n	8000aa0 <StartDefaultTask+0x8>

08000aa2 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000aa2:	b580      	push	{r7, lr}
 8000aa4:	b082      	sub	sp, #8
 8000aa6:	af00      	add	r7, sp, #0
 8000aa8:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000ab2:	d101      	bne.n	8000ab8 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000ab4:	f000 f9f8 	bl	8000ea8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000ab8:	bf00      	nop
 8000aba:	3708      	adds	r7, #8
 8000abc:	46bd      	mov	sp, r7
 8000abe:	bd80      	pop	{r7, pc}

08000ac0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ac4:	b672      	cpsid	i
}
 8000ac6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ac8:	e7fe      	b.n	8000ac8 <Error_Handler+0x8>
	...

08000acc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b082      	sub	sp, #8
 8000ad0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ad2:	4b11      	ldr	r3, [pc, #68]	; (8000b18 <HAL_MspInit+0x4c>)
 8000ad4:	699b      	ldr	r3, [r3, #24]
 8000ad6:	4a10      	ldr	r2, [pc, #64]	; (8000b18 <HAL_MspInit+0x4c>)
 8000ad8:	f043 0301 	orr.w	r3, r3, #1
 8000adc:	6193      	str	r3, [r2, #24]
 8000ade:	4b0e      	ldr	r3, [pc, #56]	; (8000b18 <HAL_MspInit+0x4c>)
 8000ae0:	699b      	ldr	r3, [r3, #24]
 8000ae2:	f003 0301 	and.w	r3, r3, #1
 8000ae6:	607b      	str	r3, [r7, #4]
 8000ae8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000aea:	4b0b      	ldr	r3, [pc, #44]	; (8000b18 <HAL_MspInit+0x4c>)
 8000aec:	69db      	ldr	r3, [r3, #28]
 8000aee:	4a0a      	ldr	r2, [pc, #40]	; (8000b18 <HAL_MspInit+0x4c>)
 8000af0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000af4:	61d3      	str	r3, [r2, #28]
 8000af6:	4b08      	ldr	r3, [pc, #32]	; (8000b18 <HAL_MspInit+0x4c>)
 8000af8:	69db      	ldr	r3, [r3, #28]
 8000afa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000afe:	603b      	str	r3, [r7, #0]
 8000b00:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000b02:	2200      	movs	r2, #0
 8000b04:	210f      	movs	r1, #15
 8000b06:	f06f 0001 	mvn.w	r0, #1
 8000b0a:	f001 f8cb 	bl	8001ca4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b0e:	bf00      	nop
 8000b10:	3708      	adds	r7, #8
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	40021000 	.word	0x40021000

08000b1c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b08a      	sub	sp, #40	; 0x28
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b24:	f107 0314 	add.w	r3, r7, #20
 8000b28:	2200      	movs	r2, #0
 8000b2a:	601a      	str	r2, [r3, #0]
 8000b2c:	605a      	str	r2, [r3, #4]
 8000b2e:	609a      	str	r2, [r3, #8]
 8000b30:	60da      	str	r2, [r3, #12]
 8000b32:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000b3c:	d14d      	bne.n	8000bda <HAL_ADC_MspInit+0xbe>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000b3e:	4b29      	ldr	r3, [pc, #164]	; (8000be4 <HAL_ADC_MspInit+0xc8>)
 8000b40:	695b      	ldr	r3, [r3, #20]
 8000b42:	4a28      	ldr	r2, [pc, #160]	; (8000be4 <HAL_ADC_MspInit+0xc8>)
 8000b44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b48:	6153      	str	r3, [r2, #20]
 8000b4a:	4b26      	ldr	r3, [pc, #152]	; (8000be4 <HAL_ADC_MspInit+0xc8>)
 8000b4c:	695b      	ldr	r3, [r3, #20]
 8000b4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b52:	613b      	str	r3, [r7, #16]
 8000b54:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b56:	4b23      	ldr	r3, [pc, #140]	; (8000be4 <HAL_ADC_MspInit+0xc8>)
 8000b58:	695b      	ldr	r3, [r3, #20]
 8000b5a:	4a22      	ldr	r2, [pc, #136]	; (8000be4 <HAL_ADC_MspInit+0xc8>)
 8000b5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b60:	6153      	str	r3, [r2, #20]
 8000b62:	4b20      	ldr	r3, [pc, #128]	; (8000be4 <HAL_ADC_MspInit+0xc8>)
 8000b64:	695b      	ldr	r3, [r3, #20]
 8000b66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b6a:	60fb      	str	r3, [r7, #12]
 8000b6c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000b6e:	2303      	movs	r3, #3
 8000b70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b72:	2303      	movs	r3, #3
 8000b74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b76:	2300      	movs	r3, #0
 8000b78:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b7a:	f107 0314 	add.w	r3, r7, #20
 8000b7e:	4619      	mov	r1, r3
 8000b80:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b84:	f001 fa50 	bl	8002028 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000b88:	4b17      	ldr	r3, [pc, #92]	; (8000be8 <HAL_ADC_MspInit+0xcc>)
 8000b8a:	4a18      	ldr	r2, [pc, #96]	; (8000bec <HAL_ADC_MspInit+0xd0>)
 8000b8c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b8e:	4b16      	ldr	r3, [pc, #88]	; (8000be8 <HAL_ADC_MspInit+0xcc>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b94:	4b14      	ldr	r3, [pc, #80]	; (8000be8 <HAL_ADC_MspInit+0xcc>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000b9a:	4b13      	ldr	r3, [pc, #76]	; (8000be8 <HAL_ADC_MspInit+0xcc>)
 8000b9c:	2280      	movs	r2, #128	; 0x80
 8000b9e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000ba0:	4b11      	ldr	r3, [pc, #68]	; (8000be8 <HAL_ADC_MspInit+0xcc>)
 8000ba2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ba6:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000ba8:	4b0f      	ldr	r3, [pc, #60]	; (8000be8 <HAL_ADC_MspInit+0xcc>)
 8000baa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000bae:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000bb0:	4b0d      	ldr	r3, [pc, #52]	; (8000be8 <HAL_ADC_MspInit+0xcc>)
 8000bb2:	2220      	movs	r2, #32
 8000bb4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000bb6:	4b0c      	ldr	r3, [pc, #48]	; (8000be8 <HAL_ADC_MspInit+0xcc>)
 8000bb8:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8000bbc:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000bbe:	480a      	ldr	r0, [pc, #40]	; (8000be8 <HAL_ADC_MspInit+0xcc>)
 8000bc0:	f001 f89a 	bl	8001cf8 <HAL_DMA_Init>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d001      	beq.n	8000bce <HAL_ADC_MspInit+0xb2>
    {
      Error_Handler();
 8000bca:	f7ff ff79 	bl	8000ac0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	4a05      	ldr	r2, [pc, #20]	; (8000be8 <HAL_ADC_MspInit+0xcc>)
 8000bd2:	639a      	str	r2, [r3, #56]	; 0x38
 8000bd4:	4a04      	ldr	r2, [pc, #16]	; (8000be8 <HAL_ADC_MspInit+0xcc>)
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000bda:	bf00      	nop
 8000bdc:	3728      	adds	r7, #40	; 0x28
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	40021000 	.word	0x40021000
 8000be8:	20000450 	.word	0x20000450
 8000bec:	40020008 	.word	0x40020008

08000bf0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b08a      	sub	sp, #40	; 0x28
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bf8:	f107 0314 	add.w	r3, r7, #20
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	601a      	str	r2, [r3, #0]
 8000c00:	605a      	str	r2, [r3, #4]
 8000c02:	609a      	str	r2, [r3, #8]
 8000c04:	60da      	str	r2, [r3, #12]
 8000c06:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	4a17      	ldr	r2, [pc, #92]	; (8000c6c <HAL_UART_MspInit+0x7c>)
 8000c0e:	4293      	cmp	r3, r2
 8000c10:	d127      	bne.n	8000c62 <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c12:	4b17      	ldr	r3, [pc, #92]	; (8000c70 <HAL_UART_MspInit+0x80>)
 8000c14:	699b      	ldr	r3, [r3, #24]
 8000c16:	4a16      	ldr	r2, [pc, #88]	; (8000c70 <HAL_UART_MspInit+0x80>)
 8000c18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c1c:	6193      	str	r3, [r2, #24]
 8000c1e:	4b14      	ldr	r3, [pc, #80]	; (8000c70 <HAL_UART_MspInit+0x80>)
 8000c20:	699b      	ldr	r3, [r3, #24]
 8000c22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c26:	613b      	str	r3, [r7, #16]
 8000c28:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c2a:	4b11      	ldr	r3, [pc, #68]	; (8000c70 <HAL_UART_MspInit+0x80>)
 8000c2c:	695b      	ldr	r3, [r3, #20]
 8000c2e:	4a10      	ldr	r2, [pc, #64]	; (8000c70 <HAL_UART_MspInit+0x80>)
 8000c30:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000c34:	6153      	str	r3, [r2, #20]
 8000c36:	4b0e      	ldr	r3, [pc, #56]	; (8000c70 <HAL_UART_MspInit+0x80>)
 8000c38:	695b      	ldr	r3, [r3, #20]
 8000c3a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000c3e:	60fb      	str	r3, [r7, #12]
 8000c40:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000c42:	2330      	movs	r3, #48	; 0x30
 8000c44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c46:	2302      	movs	r3, #2
 8000c48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c4e:	2303      	movs	r3, #3
 8000c50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000c52:	2307      	movs	r3, #7
 8000c54:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c56:	f107 0314 	add.w	r3, r7, #20
 8000c5a:	4619      	mov	r1, r3
 8000c5c:	4805      	ldr	r0, [pc, #20]	; (8000c74 <HAL_UART_MspInit+0x84>)
 8000c5e:	f001 f9e3 	bl	8002028 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000c62:	bf00      	nop
 8000c64:	3728      	adds	r7, #40	; 0x28
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	40013800 	.word	0x40013800
 8000c70:	40021000 	.word	0x40021000
 8000c74:	48000800 	.word	0x48000800

08000c78 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b08c      	sub	sp, #48	; 0x30
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000c80:	2300      	movs	r3, #0
 8000c82:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000c84:	2300      	movs	r3, #0
 8000c86:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM2 IRQ priority */
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0);
 8000c88:	2200      	movs	r2, #0
 8000c8a:	6879      	ldr	r1, [r7, #4]
 8000c8c:	201c      	movs	r0, #28
 8000c8e:	f001 f809 	bl	8001ca4 <HAL_NVIC_SetPriority>

  /* Enable the TIM2 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000c92:	201c      	movs	r0, #28
 8000c94:	f001 f822 	bl	8001cdc <HAL_NVIC_EnableIRQ>

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8000c98:	4b20      	ldr	r3, [pc, #128]	; (8000d1c <HAL_InitTick+0xa4>)
 8000c9a:	69db      	ldr	r3, [r3, #28]
 8000c9c:	4a1f      	ldr	r2, [pc, #124]	; (8000d1c <HAL_InitTick+0xa4>)
 8000c9e:	f043 0301 	orr.w	r3, r3, #1
 8000ca2:	61d3      	str	r3, [r2, #28]
 8000ca4:	4b1d      	ldr	r3, [pc, #116]	; (8000d1c <HAL_InitTick+0xa4>)
 8000ca6:	69db      	ldr	r3, [r3, #28]
 8000ca8:	f003 0301 	and.w	r3, r3, #1
 8000cac:	60fb      	str	r3, [r7, #12]
 8000cae:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000cb0:	f107 0210 	add.w	r2, r7, #16
 8000cb4:	f107 0314 	add.w	r3, r7, #20
 8000cb8:	4611      	mov	r1, r2
 8000cba:	4618      	mov	r0, r3
 8000cbc:	f002 fdb2 	bl	8003824 <HAL_RCC_GetClockConfig>

  /* Compute TIM2 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000cc0:	f002 fd6c 	bl	800379c <HAL_RCC_GetPCLK1Freq>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	005b      	lsls	r3, r3, #1
 8000cc8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000cca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ccc:	4a14      	ldr	r2, [pc, #80]	; (8000d20 <HAL_InitTick+0xa8>)
 8000cce:	fba2 2303 	umull	r2, r3, r2, r3
 8000cd2:	0c9b      	lsrs	r3, r3, #18
 8000cd4:	3b01      	subs	r3, #1
 8000cd6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8000cd8:	4b12      	ldr	r3, [pc, #72]	; (8000d24 <HAL_InitTick+0xac>)
 8000cda:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000cde:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8000ce0:	4b10      	ldr	r3, [pc, #64]	; (8000d24 <HAL_InitTick+0xac>)
 8000ce2:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000ce6:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8000ce8:	4a0e      	ldr	r2, [pc, #56]	; (8000d24 <HAL_InitTick+0xac>)
 8000cea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cec:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8000cee:	4b0d      	ldr	r3, [pc, #52]	; (8000d24 <HAL_InitTick+0xac>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cf4:	4b0b      	ldr	r3, [pc, #44]	; (8000d24 <HAL_InitTick+0xac>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 8000cfa:	480a      	ldr	r0, [pc, #40]	; (8000d24 <HAL_InitTick+0xac>)
 8000cfc:	f002 ff56 	bl	8003bac <HAL_TIM_Base_Init>
 8000d00:	4603      	mov	r3, r0
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d104      	bne.n	8000d10 <HAL_InitTick+0x98>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim2);
 8000d06:	4807      	ldr	r0, [pc, #28]	; (8000d24 <HAL_InitTick+0xac>)
 8000d08:	f002 ffb2 	bl	8003c70 <HAL_TIM_Base_Start_IT>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	e000      	b.n	8000d12 <HAL_InitTick+0x9a>
  }

  /* Return function status */
  return HAL_ERROR;
 8000d10:	2301      	movs	r3, #1
}
 8000d12:	4618      	mov	r0, r3
 8000d14:	3730      	adds	r7, #48	; 0x30
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	40021000 	.word	0x40021000
 8000d20:	431bde83 	.word	0x431bde83
 8000d24:	20000600 	.word	0x20000600

08000d28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d2c:	e7fe      	b.n	8000d2c <NMI_Handler+0x4>

08000d2e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d2e:	b480      	push	{r7}
 8000d30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d32:	e7fe      	b.n	8000d32 <HardFault_Handler+0x4>

08000d34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d34:	b480      	push	{r7}
 8000d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d38:	e7fe      	b.n	8000d38 <MemManage_Handler+0x4>

08000d3a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d3a:	b480      	push	{r7}
 8000d3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d3e:	e7fe      	b.n	8000d3e <BusFault_Handler+0x4>

08000d40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d44:	e7fe      	b.n	8000d44 <UsageFault_Handler+0x4>

08000d46 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d46:	b480      	push	{r7}
 8000d48:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d4a:	bf00      	nop
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d52:	4770      	bx	lr

08000d54 <EXTI2_TSC_IRQHandler>:

/**
  * @brief This function handles EXTI line2 and Touch Sense controller.
  */
void EXTI2_TSC_IRQHandler(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	af00      	add	r7, sp, #0
//		EXTI->PR |= (1<<2);
//		//xTaskNotifyFromISR(xTaskGetHandle("calibration"), 0, eNoAction, pdFALSE);
//		xSemaphoreGiveFromISR(xSemaphore1, pdTRUE);
//	}
  /* USER CODE END EXTI2_TSC_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8000d58:	2004      	movs	r0, #4
 8000d5a:	f001 fad7 	bl	800230c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_TSC_IRQn 1 */

  /* USER CODE END EXTI2_TSC_IRQn 1 */
}
 8000d5e:	bf00      	nop
 8000d60:	bd80      	pop	{r7, pc}

08000d62 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8000d62:	b580      	push	{r7, lr}
 8000d64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8000d66:	2008      	movs	r0, #8
 8000d68:	f001 fad0 	bl	800230c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8000d6c:	bf00      	nop
 8000d6e:	bd80      	pop	{r7, pc}

08000d70 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000d74:	4802      	ldr	r0, [pc, #8]	; (8000d80 <DMA1_Channel1_IRQHandler+0x10>)
 8000d76:	f001 f865 	bl	8001e44 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000d7a:	bf00      	nop
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	20000450 	.word	0x20000450

08000d84 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000d88:	4802      	ldr	r0, [pc, #8]	; (8000d94 <TIM2_IRQHandler+0x10>)
 8000d8a:	f002 ffc5 	bl	8003d18 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000d8e:	bf00      	nop
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	20000600 	.word	0x20000600

08000d98 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b086      	sub	sp, #24
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000da0:	4a14      	ldr	r2, [pc, #80]	; (8000df4 <_sbrk+0x5c>)
 8000da2:	4b15      	ldr	r3, [pc, #84]	; (8000df8 <_sbrk+0x60>)
 8000da4:	1ad3      	subs	r3, r2, r3
 8000da6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000da8:	697b      	ldr	r3, [r7, #20]
 8000daa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000dac:	4b13      	ldr	r3, [pc, #76]	; (8000dfc <_sbrk+0x64>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d102      	bne.n	8000dba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000db4:	4b11      	ldr	r3, [pc, #68]	; (8000dfc <_sbrk+0x64>)
 8000db6:	4a12      	ldr	r2, [pc, #72]	; (8000e00 <_sbrk+0x68>)
 8000db8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000dba:	4b10      	ldr	r3, [pc, #64]	; (8000dfc <_sbrk+0x64>)
 8000dbc:	681a      	ldr	r2, [r3, #0]
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	4413      	add	r3, r2
 8000dc2:	693a      	ldr	r2, [r7, #16]
 8000dc4:	429a      	cmp	r2, r3
 8000dc6:	d207      	bcs.n	8000dd8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000dc8:	f007 fa30 	bl	800822c <__errno>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	220c      	movs	r2, #12
 8000dd0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000dd2:	f04f 33ff 	mov.w	r3, #4294967295
 8000dd6:	e009      	b.n	8000dec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000dd8:	4b08      	ldr	r3, [pc, #32]	; (8000dfc <_sbrk+0x64>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000dde:	4b07      	ldr	r3, [pc, #28]	; (8000dfc <_sbrk+0x64>)
 8000de0:	681a      	ldr	r2, [r3, #0]
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	4413      	add	r3, r2
 8000de6:	4a05      	ldr	r2, [pc, #20]	; (8000dfc <_sbrk+0x64>)
 8000de8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000dea:	68fb      	ldr	r3, [r7, #12]
}
 8000dec:	4618      	mov	r0, r3
 8000dee:	3718      	adds	r7, #24
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bd80      	pop	{r7, pc}
 8000df4:	20004000 	.word	0x20004000
 8000df8:	00000400 	.word	0x00000400
 8000dfc:	2000064c 	.word	0x2000064c
 8000e00:	20002470 	.word	0x20002470

08000e04 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e08:	4b06      	ldr	r3, [pc, #24]	; (8000e24 <SystemInit+0x20>)
 8000e0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e0e:	4a05      	ldr	r2, [pc, #20]	; (8000e24 <SystemInit+0x20>)
 8000e10:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e14:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e18:	bf00      	nop
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e20:	4770      	bx	lr
 8000e22:	bf00      	nop
 8000e24:	e000ed00 	.word	0xe000ed00

08000e28 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000e28:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e60 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e2c:	f7ff ffea 	bl	8000e04 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e30:	480c      	ldr	r0, [pc, #48]	; (8000e64 <LoopForever+0x6>)
  ldr r1, =_edata
 8000e32:	490d      	ldr	r1, [pc, #52]	; (8000e68 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e34:	4a0d      	ldr	r2, [pc, #52]	; (8000e6c <LoopForever+0xe>)
  movs r3, #0
 8000e36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e38:	e002      	b.n	8000e40 <LoopCopyDataInit>

08000e3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e3e:	3304      	adds	r3, #4

08000e40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e44:	d3f9      	bcc.n	8000e3a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e46:	4a0a      	ldr	r2, [pc, #40]	; (8000e70 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e48:	4c0a      	ldr	r4, [pc, #40]	; (8000e74 <LoopForever+0x16>)
  movs r3, #0
 8000e4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e4c:	e001      	b.n	8000e52 <LoopFillZerobss>

08000e4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e50:	3204      	adds	r2, #4

08000e52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e54:	d3fb      	bcc.n	8000e4e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e56:	f007 f9ef 	bl	8008238 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000e5a:	f7ff fa53 	bl	8000304 <main>

08000e5e <LoopForever>:

LoopForever:
    b LoopForever
 8000e5e:	e7fe      	b.n	8000e5e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000e60:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8000e64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e68:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000e6c:	08008dd8 	.word	0x08008dd8
  ldr r2, =_sbss
 8000e70:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000e74:	2000246c 	.word	0x2000246c

08000e78 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000e78:	e7fe      	b.n	8000e78 <ADC1_IRQHandler>
	...

08000e7c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e80:	4b08      	ldr	r3, [pc, #32]	; (8000ea4 <HAL_Init+0x28>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	4a07      	ldr	r2, [pc, #28]	; (8000ea4 <HAL_Init+0x28>)
 8000e86:	f043 0310 	orr.w	r3, r3, #16
 8000e8a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e8c:	2003      	movs	r0, #3
 8000e8e:	f000 fefe 	bl	8001c8e <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e92:	200f      	movs	r0, #15
 8000e94:	f7ff fef0 	bl	8000c78 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e98:	f7ff fe18 	bl	8000acc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e9c:	2300      	movs	r3, #0
}
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	40022000 	.word	0x40022000

08000ea8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000eac:	4b06      	ldr	r3, [pc, #24]	; (8000ec8 <HAL_IncTick+0x20>)
 8000eae:	781b      	ldrb	r3, [r3, #0]
 8000eb0:	461a      	mov	r2, r3
 8000eb2:	4b06      	ldr	r3, [pc, #24]	; (8000ecc <HAL_IncTick+0x24>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	4413      	add	r3, r2
 8000eb8:	4a04      	ldr	r2, [pc, #16]	; (8000ecc <HAL_IncTick+0x24>)
 8000eba:	6013      	str	r3, [r2, #0]
}
 8000ebc:	bf00      	nop
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec4:	4770      	bx	lr
 8000ec6:	bf00      	nop
 8000ec8:	20000008 	.word	0x20000008
 8000ecc:	20000650 	.word	0x20000650

08000ed0 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	af00      	add	r7, sp, #0
  return uwTick;  
 8000ed4:	4b03      	ldr	r3, [pc, #12]	; (8000ee4 <HAL_GetTick+0x14>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
}
 8000ed8:	4618      	mov	r0, r3
 8000eda:	46bd      	mov	sp, r7
 8000edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop
 8000ee4:	20000650 	.word	0x20000650

08000ee8 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	b083      	sub	sp, #12
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8000ef0:	bf00      	nop
 8000ef2:	370c      	adds	r7, #12
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efa:	4770      	bx	lr

08000efc <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000efc:	b480      	push	{r7}
 8000efe:	b083      	sub	sp, #12
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8000f04:	bf00      	nop
 8000f06:	370c      	adds	r7, #12
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0e:	4770      	bx	lr

08000f10 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8000f10:	b480      	push	{r7}
 8000f12:	b083      	sub	sp, #12
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8000f18:	bf00      	nop
 8000f1a:	370c      	adds	r7, #12
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f22:	4770      	bx	lr

08000f24 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b09a      	sub	sp, #104	; 0x68
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8000f32:	2300      	movs	r3, #0
 8000f34:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8000f36:	2300      	movs	r3, #0
 8000f38:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d101      	bne.n	8000f44 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8000f40:	2301      	movs	r3, #1
 8000f42:	e169      	b.n	8001218 <HAL_ADC_Init+0x2f4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	691b      	ldr	r3, [r3, #16]
 8000f48:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f4e:	f003 0310 	and.w	r3, r3, #16
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d176      	bne.n	8001044 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d152      	bne.n	8001004 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	2200      	movs	r2, #0
 8000f62:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	2200      	movs	r2, #0
 8000f68:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	2200      	movs	r2, #0
 8000f74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000f78:	6878      	ldr	r0, [r7, #4]
 8000f7a:	f7ff fdcf 	bl	8000b1c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	689b      	ldr	r3, [r3, #8]
 8000f84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d13b      	bne.n	8001004 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8000f8c:	6878      	ldr	r0, [r7, #4]
 8000f8e:	f000 fd6b 	bl	8001a68 <ADC_Disable>
 8000f92:	4603      	mov	r3, r0
 8000f94:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f9c:	f003 0310 	and.w	r3, r3, #16
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d12f      	bne.n	8001004 <HAL_ADC_Init+0xe0>
 8000fa4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d12b      	bne.n	8001004 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fb0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000fb4:	f023 0302 	bic.w	r3, r3, #2
 8000fb8:	f043 0202 	orr.w	r2, r3, #2
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	689a      	ldr	r2, [r3, #8]
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000fce:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	689a      	ldr	r2, [r3, #8]
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000fde:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000fe0:	4b8f      	ldr	r3, [pc, #572]	; (8001220 <HAL_ADC_Init+0x2fc>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	4a8f      	ldr	r2, [pc, #572]	; (8001224 <HAL_ADC_Init+0x300>)
 8000fe6:	fba2 2303 	umull	r2, r3, r2, r3
 8000fea:	0c9a      	lsrs	r2, r3, #18
 8000fec:	4613      	mov	r3, r2
 8000fee:	009b      	lsls	r3, r3, #2
 8000ff0:	4413      	add	r3, r2
 8000ff2:	005b      	lsls	r3, r3, #1
 8000ff4:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000ff6:	e002      	b.n	8000ffe <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8000ff8:	68bb      	ldr	r3, [r7, #8]
 8000ffa:	3b01      	subs	r3, #1
 8000ffc:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000ffe:	68bb      	ldr	r3, [r7, #8]
 8001000:	2b00      	cmp	r3, #0
 8001002:	d1f9      	bne.n	8000ff8 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	689b      	ldr	r3, [r3, #8]
 800100a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800100e:	2b00      	cmp	r3, #0
 8001010:	d007      	beq.n	8001022 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	689b      	ldr	r3, [r3, #8]
 8001018:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 800101c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001020:	d110      	bne.n	8001044 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001026:	f023 0312 	bic.w	r3, r3, #18
 800102a:	f043 0210 	orr.w	r2, r3, #16
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001036:	f043 0201 	orr.w	r2, r3, #1
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 800103e:	2301      	movs	r3, #1
 8001040:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001048:	f003 0310 	and.w	r3, r3, #16
 800104c:	2b00      	cmp	r3, #0
 800104e:	f040 80d6 	bne.w	80011fe <HAL_ADC_Init+0x2da>
 8001052:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001056:	2b00      	cmp	r3, #0
 8001058:	f040 80d1 	bne.w	80011fe <HAL_ADC_Init+0x2da>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	689b      	ldr	r3, [r3, #8]
 8001062:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8001066:	2b00      	cmp	r3, #0
 8001068:	f040 80c9 	bne.w	80011fe <HAL_ADC_Init+0x2da>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001070:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001074:	f043 0202 	orr.w	r2, r3, #2
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800107c:	4b6a      	ldr	r3, [pc, #424]	; (8001228 <HAL_ADC_Init+0x304>)
 800107e:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001080:	2300      	movs	r3, #0
 8001082:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	689b      	ldr	r3, [r3, #8]
 800108a:	f003 0303 	and.w	r3, r3, #3
 800108e:	2b01      	cmp	r3, #1
 8001090:	d108      	bne.n	80010a4 <HAL_ADC_Init+0x180>
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	f003 0301 	and.w	r3, r3, #1
 800109c:	2b01      	cmp	r3, #1
 800109e:	d101      	bne.n	80010a4 <HAL_ADC_Init+0x180>
 80010a0:	2301      	movs	r3, #1
 80010a2:	e000      	b.n	80010a6 <HAL_ADC_Init+0x182>
 80010a4:	2300      	movs	r3, #0
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d11c      	bne.n	80010e4 <HAL_ADC_Init+0x1c0>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80010aa:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d010      	beq.n	80010d2 <HAL_ADC_Init+0x1ae>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	689b      	ldr	r3, [r3, #8]
 80010b4:	f003 0303 	and.w	r3, r3, #3
 80010b8:	2b01      	cmp	r3, #1
 80010ba:	d107      	bne.n	80010cc <HAL_ADC_Init+0x1a8>
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	f003 0301 	and.w	r3, r3, #1
 80010c4:	2b01      	cmp	r3, #1
 80010c6:	d101      	bne.n	80010cc <HAL_ADC_Init+0x1a8>
 80010c8:	2301      	movs	r3, #1
 80010ca:	e000      	b.n	80010ce <HAL_ADC_Init+0x1aa>
 80010cc:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d108      	bne.n	80010e4 <HAL_ADC_Init+0x1c0>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 80010d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80010d4:	689b      	ldr	r3, [r3, #8]
 80010d6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	685b      	ldr	r3, [r3, #4]
 80010de:	431a      	orrs	r2, r3
 80010e0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80010e2:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	7e5b      	ldrb	r3, [r3, #25]
 80010e8:	035b      	lsls	r3, r3, #13
 80010ea:	687a      	ldr	r2, [r7, #4]
 80010ec:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80010ee:	2a01      	cmp	r2, #1
 80010f0:	d002      	beq.n	80010f8 <HAL_ADC_Init+0x1d4>
 80010f2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80010f6:	e000      	b.n	80010fa <HAL_ADC_Init+0x1d6>
 80010f8:	2200      	movs	r2, #0
 80010fa:	431a      	orrs	r2, r3
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	68db      	ldr	r3, [r3, #12]
 8001100:	431a      	orrs	r2, r3
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	689b      	ldr	r3, [r3, #8]
 8001106:	4313      	orrs	r3, r2
 8001108:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800110a:	4313      	orrs	r3, r2
 800110c:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001114:	2b01      	cmp	r3, #1
 8001116:	d11b      	bne.n	8001150 <HAL_ADC_Init+0x22c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	7e5b      	ldrb	r3, [r3, #25]
 800111c:	2b00      	cmp	r3, #0
 800111e:	d109      	bne.n	8001134 <HAL_ADC_Init+0x210>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001124:	3b01      	subs	r3, #1
 8001126:	045a      	lsls	r2, r3, #17
 8001128:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800112a:	4313      	orrs	r3, r2
 800112c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001130:	663b      	str	r3, [r7, #96]	; 0x60
 8001132:	e00d      	b.n	8001150 <HAL_ADC_Init+0x22c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001138:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800113c:	f043 0220 	orr.w	r2, r3, #32
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001148:	f043 0201 	orr.w	r2, r3, #1
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001154:	2b01      	cmp	r3, #1
 8001156:	d007      	beq.n	8001168 <HAL_ADC_Init+0x244>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001160:	4313      	orrs	r3, r2
 8001162:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001164:	4313      	orrs	r3, r2
 8001166:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	689b      	ldr	r3, [r3, #8]
 800116e:	f003 030c 	and.w	r3, r3, #12
 8001172:	2b00      	cmp	r3, #0
 8001174:	d114      	bne.n	80011a0 <HAL_ADC_Init+0x27c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	68db      	ldr	r3, [r3, #12]
 800117c:	687a      	ldr	r2, [r7, #4]
 800117e:	6812      	ldr	r2, [r2, #0]
 8001180:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001184:	f023 0302 	bic.w	r3, r3, #2
 8001188:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	7e1b      	ldrb	r3, [r3, #24]
 800118e:	039a      	lsls	r2, r3, #14
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001196:	005b      	lsls	r3, r3, #1
 8001198:	4313      	orrs	r3, r2
 800119a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800119c:	4313      	orrs	r3, r2
 800119e:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	68da      	ldr	r2, [r3, #12]
 80011a6:	4b21      	ldr	r3, [pc, #132]	; (800122c <HAL_ADC_Init+0x308>)
 80011a8:	4013      	ands	r3, r2
 80011aa:	687a      	ldr	r2, [r7, #4]
 80011ac:	6812      	ldr	r2, [r2, #0]
 80011ae:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80011b0:	430b      	orrs	r3, r1
 80011b2:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	691b      	ldr	r3, [r3, #16]
 80011b8:	2b01      	cmp	r3, #1
 80011ba:	d10c      	bne.n	80011d6 <HAL_ADC_Init+0x2b2>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c2:	f023 010f 	bic.w	r1, r3, #15
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	69db      	ldr	r3, [r3, #28]
 80011ca:	1e5a      	subs	r2, r3, #1
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	430a      	orrs	r2, r1
 80011d2:	631a      	str	r2, [r3, #48]	; 0x30
 80011d4:	e007      	b.n	80011e6 <HAL_ADC_Init+0x2c2>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	f022 020f 	bic.w	r2, r2, #15
 80011e4:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	2200      	movs	r2, #0
 80011ea:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011f0:	f023 0303 	bic.w	r3, r3, #3
 80011f4:	f043 0201 	orr.w	r2, r3, #1
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	641a      	str	r2, [r3, #64]	; 0x40
 80011fc:	e00a      	b.n	8001214 <HAL_ADC_Init+0x2f0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001202:	f023 0312 	bic.w	r3, r3, #18
 8001206:	f043 0210 	orr.w	r2, r3, #16
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 800120e:	2301      	movs	r3, #1
 8001210:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8001214:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001218:	4618      	mov	r0, r3
 800121a:	3768      	adds	r7, #104	; 0x68
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}
 8001220:	20000000 	.word	0x20000000
 8001224:	431bde83 	.word	0x431bde83
 8001228:	50000300 	.word	0x50000300
 800122c:	fff0c007 	.word	0xfff0c007

08001230 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b086      	sub	sp, #24
 8001234:	af00      	add	r7, sp, #0
 8001236:	60f8      	str	r0, [r7, #12]
 8001238:	60b9      	str	r1, [r7, #8]
 800123a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800123c:	2300      	movs	r3, #0
 800123e:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	689b      	ldr	r3, [r3, #8]
 8001246:	f003 0304 	and.w	r3, r3, #4
 800124a:	2b00      	cmp	r3, #0
 800124c:	d17e      	bne.n	800134c <HAL_ADC_Start_DMA+0x11c>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001254:	2b01      	cmp	r3, #1
 8001256:	d101      	bne.n	800125c <HAL_ADC_Start_DMA+0x2c>
 8001258:	2302      	movs	r3, #2
 800125a:	e07a      	b.n	8001352 <HAL_ADC_Start_DMA+0x122>
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	2201      	movs	r2, #1
 8001260:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* If multimode is enabled, dedicated function multimode conversion       */
    /* start DMA must be used.                                                */
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8001264:	68f8      	ldr	r0, [r7, #12]
 8001266:	f000 fb9b 	bl	80019a0 <ADC_Enable>
 800126a:	4603      	mov	r3, r0
 800126c:	75fb      	strb	r3, [r7, #23]
      
      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800126e:	7dfb      	ldrb	r3, [r7, #23]
 8001270:	2b00      	cmp	r3, #0
 8001272:	d166      	bne.n	8001342 <HAL_ADC_Start_DMA+0x112>
      {
        /* Set ADC state                                                      */
        /* - Clear state bitfield related to regular group conversion results */
        /* - Set state bitfield related to regular operation                  */
        ADC_STATE_CLR_SET(hadc->State,
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001278:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800127c:	f023 0301 	bic.w	r3, r3, #1
 8001280:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	641a      	str	r2, [r3, #64]	; 0x40
        /* for all cases of multimode: independent mode, multimode ADC master */
        /* or multimode ADC slave (for devices with several ADCs):            */
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
        {
          /* Set ADC state (ADC independent or master) */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800128c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	68db      	ldr	r3, [r3, #12]
 800129a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d007      	beq.n	80012b2 <HAL_ADC_Start_DMA+0x82>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80012aa:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	641a      	str	r2, [r3, #64]	; 0x40
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
          }
        }
        
        /* State machine update: Check if an injected conversion is ongoing */
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80012ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80012be:	d106      	bne.n	80012ce <HAL_ADC_Start_DMA+0x9e>
        {
          /* Reset ADC error code fields related to conversions on group regular*/
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012c4:	f023 0206 	bic.w	r2, r3, #6
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	645a      	str	r2, [r3, #68]	; 0x44
 80012cc:	e002      	b.n	80012d4 <HAL_ADC_Start_DMA+0xa4>
        }
        else
        {
          /* Reset ADC all error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	2200      	movs	r2, #0
 80012d2:	645a      	str	r2, [r3, #68]	; 0x44
        }
        
        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	2200      	movs	r2, #0
 80012d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        
        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012e0:	4a1e      	ldr	r2, [pc, #120]	; (800135c <HAL_ADC_Start_DMA+0x12c>)
 80012e2:	629a      	str	r2, [r3, #40]	; 0x28

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012e8:	4a1d      	ldr	r2, [pc, #116]	; (8001360 <HAL_ADC_Start_DMA+0x130>)
 80012ea:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012f0:	4a1c      	ldr	r2, [pc, #112]	; (8001364 <HAL_ADC_Start_DMA+0x134>)
 80012f2:	631a      	str	r2, [r3, #48]	; 0x30
        /* start (in case of SW start):                                       */
        
        /* Clear regular group conversion flag and overrun flag */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	221c      	movs	r2, #28
 80012fa:	601a      	str	r2, [r3, #0]
        
        /* Enable ADC overrun interrupt */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	685a      	ldr	r2, [r3, #4]
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f042 0210 	orr.w	r2, r2, #16
 800130a:	605a      	str	r2, [r3, #4]
        
        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	68da      	ldr	r2, [r3, #12]
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f042 0201 	orr.w	r2, r2, #1
 800131a:	60da      	str	r2, [r3, #12]
        
        /* Start the DMA channel */
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	3340      	adds	r3, #64	; 0x40
 8001326:	4619      	mov	r1, r3
 8001328:	68ba      	ldr	r2, [r7, #8]
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	f000 fd2b 	bl	8001d86 <HAL_DMA_Start_IT>
                 
        /* Enable conversion of regular group.                                */
        /* If software start has been selected, conversion starts immediately.*/
        /* If external trigger has been selected, conversion will start at    */
        /* next trigger event.                                                */
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	689a      	ldr	r2, [r3, #8]
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f042 0204 	orr.w	r2, r2, #4
 800133e:	609a      	str	r2, [r3, #8]
 8001340:	e006      	b.n	8001350 <HAL_ADC_Start_DMA+0x120>
        
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	2200      	movs	r2, #0
 8001346:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800134a:	e001      	b.n	8001350 <HAL_ADC_Start_DMA+0x120>
      __HAL_UNLOCK(hadc);
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800134c:	2302      	movs	r3, #2
 800134e:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001350:	7dfb      	ldrb	r3, [r7, #23]
}
 8001352:	4618      	mov	r0, r3
 8001354:	3718      	adds	r7, #24
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	080018d5 	.word	0x080018d5
 8001360:	0800194f 	.word	0x0800194f
 8001364:	0800196b 	.word	0x0800196b

08001368 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001368:	b480      	push	{r7}
 800136a:	b09b      	sub	sp, #108	; 0x6c
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
 8001370:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001372:	2300      	movs	r3, #0
 8001374:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8001378:	2300      	movs	r3, #0
 800137a:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001382:	2b01      	cmp	r3, #1
 8001384:	d101      	bne.n	800138a <HAL_ADC_ConfigChannel+0x22>
 8001386:	2302      	movs	r3, #2
 8001388:	e299      	b.n	80018be <HAL_ADC_ConfigChannel+0x556>
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	2201      	movs	r2, #1
 800138e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	689b      	ldr	r3, [r3, #8]
 8001398:	f003 0304 	and.w	r3, r3, #4
 800139c:	2b00      	cmp	r3, #0
 800139e:	f040 827d 	bne.w	800189c <HAL_ADC_ConfigChannel+0x534>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	685b      	ldr	r3, [r3, #4]
 80013a6:	2b04      	cmp	r3, #4
 80013a8:	d81c      	bhi.n	80013e4 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	685a      	ldr	r2, [r3, #4]
 80013b4:	4613      	mov	r3, r2
 80013b6:	005b      	lsls	r3, r3, #1
 80013b8:	4413      	add	r3, r2
 80013ba:	005b      	lsls	r3, r3, #1
 80013bc:	461a      	mov	r2, r3
 80013be:	231f      	movs	r3, #31
 80013c0:	4093      	lsls	r3, r2
 80013c2:	43db      	mvns	r3, r3
 80013c4:	4019      	ands	r1, r3
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	6818      	ldr	r0, [r3, #0]
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	685a      	ldr	r2, [r3, #4]
 80013ce:	4613      	mov	r3, r2
 80013d0:	005b      	lsls	r3, r3, #1
 80013d2:	4413      	add	r3, r2
 80013d4:	005b      	lsls	r3, r3, #1
 80013d6:	fa00 f203 	lsl.w	r2, r0, r3
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	430a      	orrs	r2, r1
 80013e0:	631a      	str	r2, [r3, #48]	; 0x30
 80013e2:	e063      	b.n	80014ac <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	685b      	ldr	r3, [r3, #4]
 80013e8:	2b09      	cmp	r3, #9
 80013ea:	d81e      	bhi.n	800142a <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	685a      	ldr	r2, [r3, #4]
 80013f6:	4613      	mov	r3, r2
 80013f8:	005b      	lsls	r3, r3, #1
 80013fa:	4413      	add	r3, r2
 80013fc:	005b      	lsls	r3, r3, #1
 80013fe:	3b1e      	subs	r3, #30
 8001400:	221f      	movs	r2, #31
 8001402:	fa02 f303 	lsl.w	r3, r2, r3
 8001406:	43db      	mvns	r3, r3
 8001408:	4019      	ands	r1, r3
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	6818      	ldr	r0, [r3, #0]
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	685a      	ldr	r2, [r3, #4]
 8001412:	4613      	mov	r3, r2
 8001414:	005b      	lsls	r3, r3, #1
 8001416:	4413      	add	r3, r2
 8001418:	005b      	lsls	r3, r3, #1
 800141a:	3b1e      	subs	r3, #30
 800141c:	fa00 f203 	lsl.w	r2, r0, r3
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	430a      	orrs	r2, r1
 8001426:	635a      	str	r2, [r3, #52]	; 0x34
 8001428:	e040      	b.n	80014ac <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	685b      	ldr	r3, [r3, #4]
 800142e:	2b0e      	cmp	r3, #14
 8001430:	d81e      	bhi.n	8001470 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	685a      	ldr	r2, [r3, #4]
 800143c:	4613      	mov	r3, r2
 800143e:	005b      	lsls	r3, r3, #1
 8001440:	4413      	add	r3, r2
 8001442:	005b      	lsls	r3, r3, #1
 8001444:	3b3c      	subs	r3, #60	; 0x3c
 8001446:	221f      	movs	r2, #31
 8001448:	fa02 f303 	lsl.w	r3, r2, r3
 800144c:	43db      	mvns	r3, r3
 800144e:	4019      	ands	r1, r3
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	6818      	ldr	r0, [r3, #0]
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	685a      	ldr	r2, [r3, #4]
 8001458:	4613      	mov	r3, r2
 800145a:	005b      	lsls	r3, r3, #1
 800145c:	4413      	add	r3, r2
 800145e:	005b      	lsls	r3, r3, #1
 8001460:	3b3c      	subs	r3, #60	; 0x3c
 8001462:	fa00 f203 	lsl.w	r2, r0, r3
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	430a      	orrs	r2, r1
 800146c:	639a      	str	r2, [r3, #56]	; 0x38
 800146e:	e01d      	b.n	80014ac <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	685a      	ldr	r2, [r3, #4]
 800147a:	4613      	mov	r3, r2
 800147c:	005b      	lsls	r3, r3, #1
 800147e:	4413      	add	r3, r2
 8001480:	005b      	lsls	r3, r3, #1
 8001482:	3b5a      	subs	r3, #90	; 0x5a
 8001484:	221f      	movs	r2, #31
 8001486:	fa02 f303 	lsl.w	r3, r2, r3
 800148a:	43db      	mvns	r3, r3
 800148c:	4019      	ands	r1, r3
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	6818      	ldr	r0, [r3, #0]
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	685a      	ldr	r2, [r3, #4]
 8001496:	4613      	mov	r3, r2
 8001498:	005b      	lsls	r3, r3, #1
 800149a:	4413      	add	r3, r2
 800149c:	005b      	lsls	r3, r3, #1
 800149e:	3b5a      	subs	r3, #90	; 0x5a
 80014a0:	fa00 f203 	lsl.w	r2, r0, r3
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	430a      	orrs	r2, r1
 80014aa:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	689b      	ldr	r3, [r3, #8]
 80014b2:	f003 030c 	and.w	r3, r3, #12
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	f040 80e5 	bne.w	8001686 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	2b09      	cmp	r3, #9
 80014c2:	d91c      	bls.n	80014fe <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	6999      	ldr	r1, [r3, #24]
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	681a      	ldr	r2, [r3, #0]
 80014ce:	4613      	mov	r3, r2
 80014d0:	005b      	lsls	r3, r3, #1
 80014d2:	4413      	add	r3, r2
 80014d4:	3b1e      	subs	r3, #30
 80014d6:	2207      	movs	r2, #7
 80014d8:	fa02 f303 	lsl.w	r3, r2, r3
 80014dc:	43db      	mvns	r3, r3
 80014de:	4019      	ands	r1, r3
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	6898      	ldr	r0, [r3, #8]
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	681a      	ldr	r2, [r3, #0]
 80014e8:	4613      	mov	r3, r2
 80014ea:	005b      	lsls	r3, r3, #1
 80014ec:	4413      	add	r3, r2
 80014ee:	3b1e      	subs	r3, #30
 80014f0:	fa00 f203 	lsl.w	r2, r0, r3
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	430a      	orrs	r2, r1
 80014fa:	619a      	str	r2, [r3, #24]
 80014fc:	e019      	b.n	8001532 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	6959      	ldr	r1, [r3, #20]
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	681a      	ldr	r2, [r3, #0]
 8001508:	4613      	mov	r3, r2
 800150a:	005b      	lsls	r3, r3, #1
 800150c:	4413      	add	r3, r2
 800150e:	2207      	movs	r2, #7
 8001510:	fa02 f303 	lsl.w	r3, r2, r3
 8001514:	43db      	mvns	r3, r3
 8001516:	4019      	ands	r1, r3
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	6898      	ldr	r0, [r3, #8]
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	681a      	ldr	r2, [r3, #0]
 8001520:	4613      	mov	r3, r2
 8001522:	005b      	lsls	r3, r3, #1
 8001524:	4413      	add	r3, r2
 8001526:	fa00 f203 	lsl.w	r2, r0, r3
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	430a      	orrs	r2, r1
 8001530:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	695a      	ldr	r2, [r3, #20]
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	68db      	ldr	r3, [r3, #12]
 800153c:	08db      	lsrs	r3, r3, #3
 800153e:	f003 0303 	and.w	r3, r3, #3
 8001542:	005b      	lsls	r3, r3, #1
 8001544:	fa02 f303 	lsl.w	r3, r2, r3
 8001548:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	691b      	ldr	r3, [r3, #16]
 800154e:	3b01      	subs	r3, #1
 8001550:	2b03      	cmp	r3, #3
 8001552:	d84f      	bhi.n	80015f4 <HAL_ADC_ConfigChannel+0x28c>
 8001554:	a201      	add	r2, pc, #4	; (adr r2, 800155c <HAL_ADC_ConfigChannel+0x1f4>)
 8001556:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800155a:	bf00      	nop
 800155c:	0800156d 	.word	0x0800156d
 8001560:	0800158f 	.word	0x0800158f
 8001564:	080015b1 	.word	0x080015b1
 8001568:	080015d3 	.word	0x080015d3
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001572:	4b99      	ldr	r3, [pc, #612]	; (80017d8 <HAL_ADC_ConfigChannel+0x470>)
 8001574:	4013      	ands	r3, r2
 8001576:	683a      	ldr	r2, [r7, #0]
 8001578:	6812      	ldr	r2, [r2, #0]
 800157a:	0691      	lsls	r1, r2, #26
 800157c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800157e:	430a      	orrs	r2, r1
 8001580:	431a      	orrs	r2, r3
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800158a:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800158c:	e07e      	b.n	800168c <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001594:	4b90      	ldr	r3, [pc, #576]	; (80017d8 <HAL_ADC_ConfigChannel+0x470>)
 8001596:	4013      	ands	r3, r2
 8001598:	683a      	ldr	r2, [r7, #0]
 800159a:	6812      	ldr	r2, [r2, #0]
 800159c:	0691      	lsls	r1, r2, #26
 800159e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80015a0:	430a      	orrs	r2, r1
 80015a2:	431a      	orrs	r2, r3
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80015ac:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80015ae:	e06d      	b.n	800168c <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80015b6:	4b88      	ldr	r3, [pc, #544]	; (80017d8 <HAL_ADC_ConfigChannel+0x470>)
 80015b8:	4013      	ands	r3, r2
 80015ba:	683a      	ldr	r2, [r7, #0]
 80015bc:	6812      	ldr	r2, [r2, #0]
 80015be:	0691      	lsls	r1, r2, #26
 80015c0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80015c2:	430a      	orrs	r2, r1
 80015c4:	431a      	orrs	r2, r3
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80015ce:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80015d0:	e05c      	b.n	800168c <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80015d8:	4b7f      	ldr	r3, [pc, #508]	; (80017d8 <HAL_ADC_ConfigChannel+0x470>)
 80015da:	4013      	ands	r3, r2
 80015dc:	683a      	ldr	r2, [r7, #0]
 80015de:	6812      	ldr	r2, [r2, #0]
 80015e0:	0691      	lsls	r1, r2, #26
 80015e2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80015e4:	430a      	orrs	r2, r1
 80015e6:	431a      	orrs	r2, r3
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80015f0:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80015f2:	e04b      	b.n	800168c <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015fa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	069b      	lsls	r3, r3, #26
 8001604:	429a      	cmp	r2, r3
 8001606:	d107      	bne.n	8001618 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001616:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800161e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	069b      	lsls	r3, r3, #26
 8001628:	429a      	cmp	r2, r3
 800162a:	d107      	bne.n	800163c <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800163a:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001642:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	069b      	lsls	r3, r3, #26
 800164c:	429a      	cmp	r2, r3
 800164e:	d107      	bne.n	8001660 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800165e:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001666:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	069b      	lsls	r3, r3, #26
 8001670:	429a      	cmp	r2, r3
 8001672:	d10a      	bne.n	800168a <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001682:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8001684:	e001      	b.n	800168a <HAL_ADC_ConfigChannel+0x322>
    }

  }
 8001686:	bf00      	nop
 8001688:	e000      	b.n	800168c <HAL_ADC_ConfigChannel+0x324>
      break;
 800168a:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	689b      	ldr	r3, [r3, #8]
 8001692:	f003 0303 	and.w	r3, r3, #3
 8001696:	2b01      	cmp	r3, #1
 8001698:	d108      	bne.n	80016ac <HAL_ADC_ConfigChannel+0x344>
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f003 0301 	and.w	r3, r3, #1
 80016a4:	2b01      	cmp	r3, #1
 80016a6:	d101      	bne.n	80016ac <HAL_ADC_ConfigChannel+0x344>
 80016a8:	2301      	movs	r3, #1
 80016aa:	e000      	b.n	80016ae <HAL_ADC_ConfigChannel+0x346>
 80016ac:	2300      	movs	r3, #0
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	f040 80ff 	bne.w	80018b2 <HAL_ADC_ConfigChannel+0x54a>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	68db      	ldr	r3, [r3, #12]
 80016b8:	2b01      	cmp	r3, #1
 80016ba:	d00f      	beq.n	80016dc <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	2201      	movs	r2, #1
 80016ca:	fa02 f303 	lsl.w	r3, r2, r3
 80016ce:	43da      	mvns	r2, r3
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	400a      	ands	r2, r1
 80016d6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 80016da:	e049      	b.n	8001770 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	2201      	movs	r2, #1
 80016ea:	409a      	lsls	r2, r3
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	430a      	orrs	r2, r1
 80016f2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	2b09      	cmp	r3, #9
 80016fc:	d91c      	bls.n	8001738 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	6999      	ldr	r1, [r3, #24]
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	681a      	ldr	r2, [r3, #0]
 8001708:	4613      	mov	r3, r2
 800170a:	005b      	lsls	r3, r3, #1
 800170c:	4413      	add	r3, r2
 800170e:	3b1b      	subs	r3, #27
 8001710:	2207      	movs	r2, #7
 8001712:	fa02 f303 	lsl.w	r3, r2, r3
 8001716:	43db      	mvns	r3, r3
 8001718:	4019      	ands	r1, r3
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	6898      	ldr	r0, [r3, #8]
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	681a      	ldr	r2, [r3, #0]
 8001722:	4613      	mov	r3, r2
 8001724:	005b      	lsls	r3, r3, #1
 8001726:	4413      	add	r3, r2
 8001728:	3b1b      	subs	r3, #27
 800172a:	fa00 f203 	lsl.w	r2, r0, r3
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	430a      	orrs	r2, r1
 8001734:	619a      	str	r2, [r3, #24]
 8001736:	e01b      	b.n	8001770 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	6959      	ldr	r1, [r3, #20]
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	1c5a      	adds	r2, r3, #1
 8001744:	4613      	mov	r3, r2
 8001746:	005b      	lsls	r3, r3, #1
 8001748:	4413      	add	r3, r2
 800174a:	2207      	movs	r2, #7
 800174c:	fa02 f303 	lsl.w	r3, r2, r3
 8001750:	43db      	mvns	r3, r3
 8001752:	4019      	ands	r1, r3
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	6898      	ldr	r0, [r3, #8]
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	1c5a      	adds	r2, r3, #1
 800175e:	4613      	mov	r3, r2
 8001760:	005b      	lsls	r3, r3, #1
 8001762:	4413      	add	r3, r2
 8001764:	fa00 f203 	lsl.w	r2, r0, r3
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	430a      	orrs	r2, r1
 800176e:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001770:	4b1a      	ldr	r3, [pc, #104]	; (80017dc <HAL_ADC_ConfigChannel+0x474>)
 8001772:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	2b10      	cmp	r3, #16
 800177a:	d105      	bne.n	8001788 <HAL_ADC_ConfigChannel+0x420>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800177c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800177e:	689b      	ldr	r3, [r3, #8]
 8001780:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001784:	2b00      	cmp	r3, #0
 8001786:	d014      	beq.n	80017b2 <HAL_ADC_ConfigChannel+0x44a>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800178c:	2b11      	cmp	r3, #17
 800178e:	d105      	bne.n	800179c <HAL_ADC_ConfigChannel+0x434>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001790:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001792:	689b      	ldr	r3, [r3, #8]
 8001794:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001798:	2b00      	cmp	r3, #0
 800179a:	d00a      	beq.n	80017b2 <HAL_ADC_ConfigChannel+0x44a>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80017a0:	2b12      	cmp	r3, #18
 80017a2:	f040 8086 	bne.w	80018b2 <HAL_ADC_ConfigChannel+0x54a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 80017a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80017a8:	689b      	ldr	r3, [r3, #8]
 80017aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d17f      	bne.n	80018b2 <HAL_ADC_ConfigChannel+0x54a>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80017b2:	2300      	movs	r3, #0
 80017b4:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	689b      	ldr	r3, [r3, #8]
 80017bc:	f003 0303 	and.w	r3, r3, #3
 80017c0:	2b01      	cmp	r3, #1
 80017c2:	d10d      	bne.n	80017e0 <HAL_ADC_ConfigChannel+0x478>
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f003 0301 	and.w	r3, r3, #1
 80017ce:	2b01      	cmp	r3, #1
 80017d0:	d106      	bne.n	80017e0 <HAL_ADC_ConfigChannel+0x478>
 80017d2:	2301      	movs	r3, #1
 80017d4:	e005      	b.n	80017e2 <HAL_ADC_ConfigChannel+0x47a>
 80017d6:	bf00      	nop
 80017d8:	83fff000 	.word	0x83fff000
 80017dc:	50000300 	.word	0x50000300
 80017e0:	2300      	movs	r3, #0
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d150      	bne.n	8001888 <HAL_ADC_ConfigChannel+0x520>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80017e6:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d010      	beq.n	800180e <HAL_ADC_ConfigChannel+0x4a6>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	689b      	ldr	r3, [r3, #8]
 80017f0:	f003 0303 	and.w	r3, r3, #3
 80017f4:	2b01      	cmp	r3, #1
 80017f6:	d107      	bne.n	8001808 <HAL_ADC_ConfigChannel+0x4a0>
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f003 0301 	and.w	r3, r3, #1
 8001800:	2b01      	cmp	r3, #1
 8001802:	d101      	bne.n	8001808 <HAL_ADC_ConfigChannel+0x4a0>
 8001804:	2301      	movs	r3, #1
 8001806:	e000      	b.n	800180a <HAL_ADC_ConfigChannel+0x4a2>
 8001808:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800180a:	2b00      	cmp	r3, #0
 800180c:	d13c      	bne.n	8001888 <HAL_ADC_ConfigChannel+0x520>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	2b10      	cmp	r3, #16
 8001814:	d11d      	bne.n	8001852 <HAL_ADC_ConfigChannel+0x4ea>
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800181e:	d118      	bne.n	8001852 <HAL_ADC_ConfigChannel+0x4ea>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8001820:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001822:	689b      	ldr	r3, [r3, #8]
 8001824:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001828:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800182a:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800182c:	4b27      	ldr	r3, [pc, #156]	; (80018cc <HAL_ADC_ConfigChannel+0x564>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4a27      	ldr	r2, [pc, #156]	; (80018d0 <HAL_ADC_ConfigChannel+0x568>)
 8001832:	fba2 2303 	umull	r2, r3, r2, r3
 8001836:	0c9a      	lsrs	r2, r3, #18
 8001838:	4613      	mov	r3, r2
 800183a:	009b      	lsls	r3, r3, #2
 800183c:	4413      	add	r3, r2
 800183e:	005b      	lsls	r3, r3, #1
 8001840:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001842:	e002      	b.n	800184a <HAL_ADC_ConfigChannel+0x4e2>
          {
            wait_loop_index--;
 8001844:	68bb      	ldr	r3, [r7, #8]
 8001846:	3b01      	subs	r3, #1
 8001848:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800184a:	68bb      	ldr	r3, [r7, #8]
 800184c:	2b00      	cmp	r3, #0
 800184e:	d1f9      	bne.n	8001844 <HAL_ADC_ConfigChannel+0x4dc>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001850:	e02e      	b.n	80018b0 <HAL_ADC_ConfigChannel+0x548>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	2b11      	cmp	r3, #17
 8001858:	d10b      	bne.n	8001872 <HAL_ADC_ConfigChannel+0x50a>
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001862:	d106      	bne.n	8001872 <HAL_ADC_ConfigChannel+0x50a>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8001864:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001866:	689b      	ldr	r3, [r3, #8]
 8001868:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 800186c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800186e:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001870:	e01e      	b.n	80018b0 <HAL_ADC_ConfigChannel+0x548>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	2b12      	cmp	r3, #18
 8001878:	d11a      	bne.n	80018b0 <HAL_ADC_ConfigChannel+0x548>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 800187a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800187c:	689b      	ldr	r3, [r3, #8]
 800187e:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001882:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001884:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001886:	e013      	b.n	80018b0 <HAL_ADC_ConfigChannel+0x548>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800188c:	f043 0220 	orr.w	r2, r3, #32
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8001894:	2301      	movs	r3, #1
 8001896:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800189a:	e00a      	b.n	80018b2 <HAL_ADC_ConfigChannel+0x54a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018a0:	f043 0220 	orr.w	r2, r3, #32
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 80018a8:	2301      	movs	r3, #1
 80018aa:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80018ae:	e000      	b.n	80018b2 <HAL_ADC_ConfigChannel+0x54a>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80018b0:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	2200      	movs	r2, #0
 80018b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80018ba:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80018be:	4618      	mov	r0, r3
 80018c0:	376c      	adds	r7, #108	; 0x6c
 80018c2:	46bd      	mov	sp, r7
 80018c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c8:	4770      	bx	lr
 80018ca:	bf00      	nop
 80018cc:	20000000 	.word	0x20000000
 80018d0:	431bde83 	.word	0x431bde83

080018d4 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b084      	sub	sp, #16
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018e0:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018e6:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d126      	bne.n	800193c <ADC_DMAConvCplt+0x68>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018f2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	641a      	str	r2, [r3, #64]	; 0x40
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F3 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	68db      	ldr	r3, [r3, #12]
 8001900:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001904:	2b00      	cmp	r3, #0
 8001906:	d115      	bne.n	8001934 <ADC_DMAConvCplt+0x60>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	7e5b      	ldrb	r3, [r3, #25]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800190c:	2b00      	cmp	r3, #0
 800190e:	d111      	bne.n	8001934 <ADC_DMAConvCplt+0x60>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001914:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001920:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001924:	2b00      	cmp	r3, #0
 8001926:	d105      	bne.n	8001934 <ADC_DMAConvCplt+0x60>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800192c:	f043 0201 	orr.w	r2, r3, #1
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8001934:	68f8      	ldr	r0, [r7, #12]
 8001936:	f7ff fad7 	bl	8000ee8 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 800193a:	e004      	b.n	8001946 <ADC_DMAConvCplt+0x72>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001942:	6878      	ldr	r0, [r7, #4]
 8001944:	4798      	blx	r3
}
 8001946:	bf00      	nop
 8001948:	3710      	adds	r7, #16
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}

0800194e <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800194e:	b580      	push	{r7, lr}
 8001950:	b084      	sub	sp, #16
 8001952:	af00      	add	r7, sp, #0
 8001954:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800195a:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800195c:	68f8      	ldr	r0, [r7, #12]
 800195e:	f7ff facd 	bl	8000efc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */ 
}
 8001962:	bf00      	nop
 8001964:	3710      	adds	r7, #16
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}

0800196a <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800196a:	b580      	push	{r7, lr}
 800196c:	b084      	sub	sp, #16
 800196e:	af00      	add	r7, sp, #0
 8001970:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001976:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800197c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001988:	f043 0204 	orr.w	r2, r3, #4
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001990:	68f8      	ldr	r0, [r7, #12]
 8001992:	f7ff fabd 	bl	8000f10 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001996:	bf00      	nop
 8001998:	3710      	adds	r7, #16
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}
	...

080019a0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b084      	sub	sp, #16
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80019a8:	2300      	movs	r3, #0
 80019aa:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	689b      	ldr	r3, [r3, #8]
 80019b2:	f003 0303 	and.w	r3, r3, #3
 80019b6:	2b01      	cmp	r3, #1
 80019b8:	d108      	bne.n	80019cc <ADC_Enable+0x2c>
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f003 0301 	and.w	r3, r3, #1
 80019c4:	2b01      	cmp	r3, #1
 80019c6:	d101      	bne.n	80019cc <ADC_Enable+0x2c>
 80019c8:	2301      	movs	r3, #1
 80019ca:	e000      	b.n	80019ce <ADC_Enable+0x2e>
 80019cc:	2300      	movs	r3, #0
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d143      	bne.n	8001a5a <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	689a      	ldr	r2, [r3, #8]
 80019d8:	4b22      	ldr	r3, [pc, #136]	; (8001a64 <ADC_Enable+0xc4>)
 80019da:	4013      	ands	r3, r2
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d00d      	beq.n	80019fc <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019e4:	f043 0210 	orr.w	r2, r3, #16
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019f0:	f043 0201 	orr.w	r2, r3, #1
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 80019f8:	2301      	movs	r3, #1
 80019fa:	e02f      	b.n	8001a5c <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	689a      	ldr	r2, [r3, #8]
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f042 0201 	orr.w	r2, r2, #1
 8001a0a:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8001a0c:	f7ff fa60 	bl	8000ed0 <HAL_GetTick>
 8001a10:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001a12:	e01b      	b.n	8001a4c <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001a14:	f7ff fa5c 	bl	8000ed0 <HAL_GetTick>
 8001a18:	4602      	mov	r2, r0
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	1ad3      	subs	r3, r2, r3
 8001a1e:	2b02      	cmp	r3, #2
 8001a20:	d914      	bls.n	8001a4c <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f003 0301 	and.w	r3, r3, #1
 8001a2c:	2b01      	cmp	r3, #1
 8001a2e:	d00d      	beq.n	8001a4c <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a34:	f043 0210 	orr.w	r2, r3, #16
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a40:	f043 0201 	orr.w	r2, r3, #1
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8001a48:	2301      	movs	r3, #1
 8001a4a:	e007      	b.n	8001a5c <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f003 0301 	and.w	r3, r3, #1
 8001a56:	2b01      	cmp	r3, #1
 8001a58:	d1dc      	bne.n	8001a14 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001a5a:	2300      	movs	r3, #0
}
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	3710      	adds	r7, #16
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd80      	pop	{r7, pc}
 8001a64:	8000003f 	.word	0x8000003f

08001a68 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b084      	sub	sp, #16
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001a70:	2300      	movs	r3, #0
 8001a72:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	689b      	ldr	r3, [r3, #8]
 8001a7a:	f003 0303 	and.w	r3, r3, #3
 8001a7e:	2b01      	cmp	r3, #1
 8001a80:	d108      	bne.n	8001a94 <ADC_Disable+0x2c>
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f003 0301 	and.w	r3, r3, #1
 8001a8c:	2b01      	cmp	r3, #1
 8001a8e:	d101      	bne.n	8001a94 <ADC_Disable+0x2c>
 8001a90:	2301      	movs	r3, #1
 8001a92:	e000      	b.n	8001a96 <ADC_Disable+0x2e>
 8001a94:	2300      	movs	r3, #0
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d047      	beq.n	8001b2a <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	689b      	ldr	r3, [r3, #8]
 8001aa0:	f003 030d 	and.w	r3, r3, #13
 8001aa4:	2b01      	cmp	r3, #1
 8001aa6:	d10f      	bne.n	8001ac8 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	689a      	ldr	r2, [r3, #8]
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f042 0202 	orr.w	r2, r2, #2
 8001ab6:	609a      	str	r2, [r3, #8]
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	2203      	movs	r2, #3
 8001abe:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8001ac0:	f7ff fa06 	bl	8000ed0 <HAL_GetTick>
 8001ac4:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001ac6:	e029      	b.n	8001b1c <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001acc:	f043 0210 	orr.w	r2, r3, #16
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ad8:	f043 0201 	orr.w	r2, r3, #1
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	e023      	b.n	8001b2c <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001ae4:	f7ff f9f4 	bl	8000ed0 <HAL_GetTick>
 8001ae8:	4602      	mov	r2, r0
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	1ad3      	subs	r3, r2, r3
 8001aee:	2b02      	cmp	r3, #2
 8001af0:	d914      	bls.n	8001b1c <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	689b      	ldr	r3, [r3, #8]
 8001af8:	f003 0301 	and.w	r3, r3, #1
 8001afc:	2b01      	cmp	r3, #1
 8001afe:	d10d      	bne.n	8001b1c <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b04:	f043 0210 	orr.w	r2, r3, #16
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b10:	f043 0201 	orr.w	r2, r3, #1
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8001b18:	2301      	movs	r3, #1
 8001b1a:	e007      	b.n	8001b2c <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	689b      	ldr	r3, [r3, #8]
 8001b22:	f003 0301 	and.w	r3, r3, #1
 8001b26:	2b01      	cmp	r3, #1
 8001b28:	d0dc      	beq.n	8001ae4 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001b2a:	2300      	movs	r3, #0
}
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	3710      	adds	r7, #16
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bd80      	pop	{r7, pc}

08001b34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b34:	b480      	push	{r7}
 8001b36:	b085      	sub	sp, #20
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	f003 0307 	and.w	r3, r3, #7
 8001b42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b44:	4b0c      	ldr	r3, [pc, #48]	; (8001b78 <__NVIC_SetPriorityGrouping+0x44>)
 8001b46:	68db      	ldr	r3, [r3, #12]
 8001b48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b4a:	68ba      	ldr	r2, [r7, #8]
 8001b4c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b50:	4013      	ands	r3, r2
 8001b52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b58:	68bb      	ldr	r3, [r7, #8]
 8001b5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b5c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b66:	4a04      	ldr	r2, [pc, #16]	; (8001b78 <__NVIC_SetPriorityGrouping+0x44>)
 8001b68:	68bb      	ldr	r3, [r7, #8]
 8001b6a:	60d3      	str	r3, [r2, #12]
}
 8001b6c:	bf00      	nop
 8001b6e:	3714      	adds	r7, #20
 8001b70:	46bd      	mov	sp, r7
 8001b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b76:	4770      	bx	lr
 8001b78:	e000ed00 	.word	0xe000ed00

08001b7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b80:	4b04      	ldr	r3, [pc, #16]	; (8001b94 <__NVIC_GetPriorityGrouping+0x18>)
 8001b82:	68db      	ldr	r3, [r3, #12]
 8001b84:	0a1b      	lsrs	r3, r3, #8
 8001b86:	f003 0307 	and.w	r3, r3, #7
}
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b92:	4770      	bx	lr
 8001b94:	e000ed00 	.word	0xe000ed00

08001b98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b083      	sub	sp, #12
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ba2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	db0b      	blt.n	8001bc2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001baa:	79fb      	ldrb	r3, [r7, #7]
 8001bac:	f003 021f 	and.w	r2, r3, #31
 8001bb0:	4907      	ldr	r1, [pc, #28]	; (8001bd0 <__NVIC_EnableIRQ+0x38>)
 8001bb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bb6:	095b      	lsrs	r3, r3, #5
 8001bb8:	2001      	movs	r0, #1
 8001bba:	fa00 f202 	lsl.w	r2, r0, r2
 8001bbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001bc2:	bf00      	nop
 8001bc4:	370c      	adds	r7, #12
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bcc:	4770      	bx	lr
 8001bce:	bf00      	nop
 8001bd0:	e000e100 	.word	0xe000e100

08001bd4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	b083      	sub	sp, #12
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	4603      	mov	r3, r0
 8001bdc:	6039      	str	r1, [r7, #0]
 8001bde:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001be0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	db0a      	blt.n	8001bfe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	b2da      	uxtb	r2, r3
 8001bec:	490c      	ldr	r1, [pc, #48]	; (8001c20 <__NVIC_SetPriority+0x4c>)
 8001bee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bf2:	0112      	lsls	r2, r2, #4
 8001bf4:	b2d2      	uxtb	r2, r2
 8001bf6:	440b      	add	r3, r1
 8001bf8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bfc:	e00a      	b.n	8001c14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	b2da      	uxtb	r2, r3
 8001c02:	4908      	ldr	r1, [pc, #32]	; (8001c24 <__NVIC_SetPriority+0x50>)
 8001c04:	79fb      	ldrb	r3, [r7, #7]
 8001c06:	f003 030f 	and.w	r3, r3, #15
 8001c0a:	3b04      	subs	r3, #4
 8001c0c:	0112      	lsls	r2, r2, #4
 8001c0e:	b2d2      	uxtb	r2, r2
 8001c10:	440b      	add	r3, r1
 8001c12:	761a      	strb	r2, [r3, #24]
}
 8001c14:	bf00      	nop
 8001c16:	370c      	adds	r7, #12
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1e:	4770      	bx	lr
 8001c20:	e000e100 	.word	0xe000e100
 8001c24:	e000ed00 	.word	0xe000ed00

08001c28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	b089      	sub	sp, #36	; 0x24
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	60f8      	str	r0, [r7, #12]
 8001c30:	60b9      	str	r1, [r7, #8]
 8001c32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	f003 0307 	and.w	r3, r3, #7
 8001c3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c3c:	69fb      	ldr	r3, [r7, #28]
 8001c3e:	f1c3 0307 	rsb	r3, r3, #7
 8001c42:	2b04      	cmp	r3, #4
 8001c44:	bf28      	it	cs
 8001c46:	2304      	movcs	r3, #4
 8001c48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c4a:	69fb      	ldr	r3, [r7, #28]
 8001c4c:	3304      	adds	r3, #4
 8001c4e:	2b06      	cmp	r3, #6
 8001c50:	d902      	bls.n	8001c58 <NVIC_EncodePriority+0x30>
 8001c52:	69fb      	ldr	r3, [r7, #28]
 8001c54:	3b03      	subs	r3, #3
 8001c56:	e000      	b.n	8001c5a <NVIC_EncodePriority+0x32>
 8001c58:	2300      	movs	r3, #0
 8001c5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c5c:	f04f 32ff 	mov.w	r2, #4294967295
 8001c60:	69bb      	ldr	r3, [r7, #24]
 8001c62:	fa02 f303 	lsl.w	r3, r2, r3
 8001c66:	43da      	mvns	r2, r3
 8001c68:	68bb      	ldr	r3, [r7, #8]
 8001c6a:	401a      	ands	r2, r3
 8001c6c:	697b      	ldr	r3, [r7, #20]
 8001c6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c70:	f04f 31ff 	mov.w	r1, #4294967295
 8001c74:	697b      	ldr	r3, [r7, #20]
 8001c76:	fa01 f303 	lsl.w	r3, r1, r3
 8001c7a:	43d9      	mvns	r1, r3
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c80:	4313      	orrs	r3, r2
         );
}
 8001c82:	4618      	mov	r0, r3
 8001c84:	3724      	adds	r7, #36	; 0x24
 8001c86:	46bd      	mov	sp, r7
 8001c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8c:	4770      	bx	lr

08001c8e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c8e:	b580      	push	{r7, lr}
 8001c90:	b082      	sub	sp, #8
 8001c92:	af00      	add	r7, sp, #0
 8001c94:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c96:	6878      	ldr	r0, [r7, #4]
 8001c98:	f7ff ff4c 	bl	8001b34 <__NVIC_SetPriorityGrouping>
}
 8001c9c:	bf00      	nop
 8001c9e:	3708      	adds	r7, #8
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bd80      	pop	{r7, pc}

08001ca4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b086      	sub	sp, #24
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	4603      	mov	r3, r0
 8001cac:	60b9      	str	r1, [r7, #8]
 8001cae:	607a      	str	r2, [r7, #4]
 8001cb0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001cb6:	f7ff ff61 	bl	8001b7c <__NVIC_GetPriorityGrouping>
 8001cba:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cbc:	687a      	ldr	r2, [r7, #4]
 8001cbe:	68b9      	ldr	r1, [r7, #8]
 8001cc0:	6978      	ldr	r0, [r7, #20]
 8001cc2:	f7ff ffb1 	bl	8001c28 <NVIC_EncodePriority>
 8001cc6:	4602      	mov	r2, r0
 8001cc8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ccc:	4611      	mov	r1, r2
 8001cce:	4618      	mov	r0, r3
 8001cd0:	f7ff ff80 	bl	8001bd4 <__NVIC_SetPriority>
}
 8001cd4:	bf00      	nop
 8001cd6:	3718      	adds	r7, #24
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bd80      	pop	{r7, pc}

08001cdc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b082      	sub	sp, #8
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ce6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cea:	4618      	mov	r0, r3
 8001cec:	f7ff ff54 	bl	8001b98 <__NVIC_EnableIRQ>
}
 8001cf0:	bf00      	nop
 8001cf2:	3708      	adds	r7, #8
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bd80      	pop	{r7, pc}

08001cf8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b084      	sub	sp, #16
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001d00:	2300      	movs	r3, #0
 8001d02:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d101      	bne.n	8001d0e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	e037      	b.n	8001d7e <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	2202      	movs	r2, #2
 8001d12:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001d24:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001d28:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001d32:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	68db      	ldr	r3, [r3, #12]
 8001d38:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d3e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	695b      	ldr	r3, [r3, #20]
 8001d44:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d4a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	69db      	ldr	r3, [r3, #28]
 8001d50:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001d52:	68fa      	ldr	r2, [r7, #12]
 8001d54:	4313      	orrs	r3, r2
 8001d56:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	68fa      	ldr	r2, [r7, #12]
 8001d5e:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8001d60:	6878      	ldr	r0, [r7, #4]
 8001d62:	f000 f941 	bl	8001fe8 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	2200      	movs	r2, #0
 8001d6a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2201      	movs	r2, #1
 8001d70:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2200      	movs	r2, #0
 8001d78:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8001d7c:	2300      	movs	r3, #0
}  
 8001d7e:	4618      	mov	r0, r3
 8001d80:	3710      	adds	r7, #16
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}

08001d86 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001d86:	b580      	push	{r7, lr}
 8001d88:	b086      	sub	sp, #24
 8001d8a:	af00      	add	r7, sp, #0
 8001d8c:	60f8      	str	r0, [r7, #12]
 8001d8e:	60b9      	str	r1, [r7, #8]
 8001d90:	607a      	str	r2, [r7, #4]
 8001d92:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8001d94:	2300      	movs	r3, #0
 8001d96:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d9e:	2b01      	cmp	r3, #1
 8001da0:	d101      	bne.n	8001da6 <HAL_DMA_Start_IT+0x20>
 8001da2:	2302      	movs	r3, #2
 8001da4:	e04a      	b.n	8001e3c <HAL_DMA_Start_IT+0xb6>
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	2201      	movs	r2, #1
 8001daa:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001db4:	2b01      	cmp	r3, #1
 8001db6:	d13a      	bne.n	8001e2e <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	2202      	movs	r2, #2
 8001dbc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	681a      	ldr	r2, [r3, #0]
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f022 0201 	bic.w	r2, r2, #1
 8001dd4:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	687a      	ldr	r2, [r7, #4]
 8001dda:	68b9      	ldr	r1, [r7, #8]
 8001ddc:	68f8      	ldr	r0, [r7, #12]
 8001dde:	f000 f8d4 	bl	8001f8a <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d008      	beq.n	8001dfc <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	681a      	ldr	r2, [r3, #0]
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f042 020e 	orr.w	r2, r2, #14
 8001df8:	601a      	str	r2, [r3, #0]
 8001dfa:	e00f      	b.n	8001e1c <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	681a      	ldr	r2, [r3, #0]
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f042 020a 	orr.w	r2, r2, #10
 8001e0a:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	681a      	ldr	r2, [r3, #0]
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f022 0204 	bic.w	r2, r2, #4
 8001e1a:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	681a      	ldr	r2, [r3, #0]
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f042 0201 	orr.w	r2, r2, #1
 8001e2a:	601a      	str	r2, [r3, #0]
 8001e2c:	e005      	b.n	8001e3a <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	2200      	movs	r2, #0
 8001e32:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8001e36:	2302      	movs	r3, #2
 8001e38:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 8001e3a:	7dfb      	ldrb	r3, [r7, #23]
} 
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	3718      	adds	r7, #24
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bd80      	pop	{r7, pc}

08001e44 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b084      	sub	sp, #16
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e60:	2204      	movs	r2, #4
 8001e62:	409a      	lsls	r2, r3
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	4013      	ands	r3, r2
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d024      	beq.n	8001eb6 <HAL_DMA_IRQHandler+0x72>
 8001e6c:	68bb      	ldr	r3, [r7, #8]
 8001e6e:	f003 0304 	and.w	r3, r3, #4
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d01f      	beq.n	8001eb6 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f003 0320 	and.w	r3, r3, #32
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d107      	bne.n	8001e94 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	681a      	ldr	r2, [r3, #0]
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f022 0204 	bic.w	r2, r2, #4
 8001e92:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e9c:	2104      	movs	r1, #4
 8001e9e:	fa01 f202 	lsl.w	r2, r1, r2
 8001ea2:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d06a      	beq.n	8001f82 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eb0:	6878      	ldr	r0, [r7, #4]
 8001eb2:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8001eb4:	e065      	b.n	8001f82 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eba:	2202      	movs	r2, #2
 8001ebc:	409a      	lsls	r2, r3
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	4013      	ands	r3, r2
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d02c      	beq.n	8001f20 <HAL_DMA_IRQHandler+0xdc>
 8001ec6:	68bb      	ldr	r3, [r7, #8]
 8001ec8:	f003 0302 	and.w	r3, r3, #2
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d027      	beq.n	8001f20 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f003 0320 	and.w	r3, r3, #32
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d10b      	bne.n	8001ef6 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	681a      	ldr	r2, [r3, #0]
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f022 020a 	bic.w	r2, r2, #10
 8001eec:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	2201      	movs	r2, #1
 8001ef2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001efe:	2102      	movs	r1, #2
 8001f00:	fa01 f202 	lsl.w	r2, r1, r2
 8001f04:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	2200      	movs	r2, #0
 8001f0a:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d035      	beq.n	8001f82 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f1a:	6878      	ldr	r0, [r7, #4]
 8001f1c:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8001f1e:	e030      	b.n	8001f82 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f24:	2208      	movs	r2, #8
 8001f26:	409a      	lsls	r2, r3
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	4013      	ands	r3, r2
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d028      	beq.n	8001f82 <HAL_DMA_IRQHandler+0x13e>
 8001f30:	68bb      	ldr	r3, [r7, #8]
 8001f32:	f003 0308 	and.w	r3, r3, #8
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d023      	beq.n	8001f82 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	681a      	ldr	r2, [r3, #0]
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f022 020e 	bic.w	r2, r2, #14
 8001f48:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f52:	2101      	movs	r1, #1
 8001f54:	fa01 f202 	lsl.w	r2, r1, r2
 8001f58:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2201      	movs	r2, #1
 8001f5e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2201      	movs	r2, #1
 8001f64:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d004      	beq.n	8001f82 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f7c:	6878      	ldr	r0, [r7, #4]
 8001f7e:	4798      	blx	r3
    }
  }
}  
 8001f80:	e7ff      	b.n	8001f82 <HAL_DMA_IRQHandler+0x13e>
 8001f82:	bf00      	nop
 8001f84:	3710      	adds	r7, #16
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}

08001f8a <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001f8a:	b480      	push	{r7}
 8001f8c:	b085      	sub	sp, #20
 8001f8e:	af00      	add	r7, sp, #0
 8001f90:	60f8      	str	r0, [r7, #12]
 8001f92:	60b9      	str	r1, [r7, #8]
 8001f94:	607a      	str	r2, [r7, #4]
 8001f96:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fa0:	2101      	movs	r1, #1
 8001fa2:	fa01 f202 	lsl.w	r2, r1, r2
 8001fa6:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	683a      	ldr	r2, [r7, #0]
 8001fae:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	2b10      	cmp	r3, #16
 8001fb6:	d108      	bne.n	8001fca <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	687a      	ldr	r2, [r7, #4]
 8001fbe:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	68ba      	ldr	r2, [r7, #8]
 8001fc6:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001fc8:	e007      	b.n	8001fda <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	68ba      	ldr	r2, [r7, #8]
 8001fd0:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	687a      	ldr	r2, [r7, #4]
 8001fd8:	60da      	str	r2, [r3, #12]
}
 8001fda:	bf00      	nop
 8001fdc:	3714      	adds	r7, #20
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe4:	4770      	bx	lr
	...

08001fe8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	b083      	sub	sp, #12
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	461a      	mov	r2, r3
 8001ff6:	4b09      	ldr	r3, [pc, #36]	; (800201c <DMA_CalcBaseAndBitshift+0x34>)
 8001ff8:	4413      	add	r3, r2
 8001ffa:	4a09      	ldr	r2, [pc, #36]	; (8002020 <DMA_CalcBaseAndBitshift+0x38>)
 8001ffc:	fba2 2303 	umull	r2, r3, r2, r3
 8002000:	091b      	lsrs	r3, r3, #4
 8002002:	009a      	lsls	r2, r3, #2
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	4a06      	ldr	r2, [pc, #24]	; (8002024 <DMA_CalcBaseAndBitshift+0x3c>)
 800200c:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 800200e:	bf00      	nop
 8002010:	370c      	adds	r7, #12
 8002012:	46bd      	mov	sp, r7
 8002014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002018:	4770      	bx	lr
 800201a:	bf00      	nop
 800201c:	bffdfff8 	.word	0xbffdfff8
 8002020:	cccccccd 	.word	0xcccccccd
 8002024:	40020000 	.word	0x40020000

08002028 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002028:	b480      	push	{r7}
 800202a:	b087      	sub	sp, #28
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
 8002030:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002032:	2300      	movs	r3, #0
 8002034:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002036:	e14e      	b.n	80022d6 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	681a      	ldr	r2, [r3, #0]
 800203c:	2101      	movs	r1, #1
 800203e:	697b      	ldr	r3, [r7, #20]
 8002040:	fa01 f303 	lsl.w	r3, r1, r3
 8002044:	4013      	ands	r3, r2
 8002046:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	2b00      	cmp	r3, #0
 800204c:	f000 8140 	beq.w	80022d0 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	f003 0303 	and.w	r3, r3, #3
 8002058:	2b01      	cmp	r3, #1
 800205a:	d005      	beq.n	8002068 <HAL_GPIO_Init+0x40>
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	f003 0303 	and.w	r3, r3, #3
 8002064:	2b02      	cmp	r3, #2
 8002066:	d130      	bne.n	80020ca <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	689b      	ldr	r3, [r3, #8]
 800206c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800206e:	697b      	ldr	r3, [r7, #20]
 8002070:	005b      	lsls	r3, r3, #1
 8002072:	2203      	movs	r2, #3
 8002074:	fa02 f303 	lsl.w	r3, r2, r3
 8002078:	43db      	mvns	r3, r3
 800207a:	693a      	ldr	r2, [r7, #16]
 800207c:	4013      	ands	r3, r2
 800207e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	68da      	ldr	r2, [r3, #12]
 8002084:	697b      	ldr	r3, [r7, #20]
 8002086:	005b      	lsls	r3, r3, #1
 8002088:	fa02 f303 	lsl.w	r3, r2, r3
 800208c:	693a      	ldr	r2, [r7, #16]
 800208e:	4313      	orrs	r3, r2
 8002090:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	693a      	ldr	r2, [r7, #16]
 8002096:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800209e:	2201      	movs	r2, #1
 80020a0:	697b      	ldr	r3, [r7, #20]
 80020a2:	fa02 f303 	lsl.w	r3, r2, r3
 80020a6:	43db      	mvns	r3, r3
 80020a8:	693a      	ldr	r2, [r7, #16]
 80020aa:	4013      	ands	r3, r2
 80020ac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	091b      	lsrs	r3, r3, #4
 80020b4:	f003 0201 	and.w	r2, r3, #1
 80020b8:	697b      	ldr	r3, [r7, #20]
 80020ba:	fa02 f303 	lsl.w	r3, r2, r3
 80020be:	693a      	ldr	r2, [r7, #16]
 80020c0:	4313      	orrs	r3, r2
 80020c2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	693a      	ldr	r2, [r7, #16]
 80020c8:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	f003 0303 	and.w	r3, r3, #3
 80020d2:	2b03      	cmp	r3, #3
 80020d4:	d017      	beq.n	8002106 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	68db      	ldr	r3, [r3, #12]
 80020da:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80020dc:	697b      	ldr	r3, [r7, #20]
 80020de:	005b      	lsls	r3, r3, #1
 80020e0:	2203      	movs	r2, #3
 80020e2:	fa02 f303 	lsl.w	r3, r2, r3
 80020e6:	43db      	mvns	r3, r3
 80020e8:	693a      	ldr	r2, [r7, #16]
 80020ea:	4013      	ands	r3, r2
 80020ec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	689a      	ldr	r2, [r3, #8]
 80020f2:	697b      	ldr	r3, [r7, #20]
 80020f4:	005b      	lsls	r3, r3, #1
 80020f6:	fa02 f303 	lsl.w	r3, r2, r3
 80020fa:	693a      	ldr	r2, [r7, #16]
 80020fc:	4313      	orrs	r3, r2
 80020fe:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	693a      	ldr	r2, [r7, #16]
 8002104:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	f003 0303 	and.w	r3, r3, #3
 800210e:	2b02      	cmp	r3, #2
 8002110:	d123      	bne.n	800215a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002112:	697b      	ldr	r3, [r7, #20]
 8002114:	08da      	lsrs	r2, r3, #3
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	3208      	adds	r2, #8
 800211a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800211e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002120:	697b      	ldr	r3, [r7, #20]
 8002122:	f003 0307 	and.w	r3, r3, #7
 8002126:	009b      	lsls	r3, r3, #2
 8002128:	220f      	movs	r2, #15
 800212a:	fa02 f303 	lsl.w	r3, r2, r3
 800212e:	43db      	mvns	r3, r3
 8002130:	693a      	ldr	r2, [r7, #16]
 8002132:	4013      	ands	r3, r2
 8002134:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	691a      	ldr	r2, [r3, #16]
 800213a:	697b      	ldr	r3, [r7, #20]
 800213c:	f003 0307 	and.w	r3, r3, #7
 8002140:	009b      	lsls	r3, r3, #2
 8002142:	fa02 f303 	lsl.w	r3, r2, r3
 8002146:	693a      	ldr	r2, [r7, #16]
 8002148:	4313      	orrs	r3, r2
 800214a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800214c:	697b      	ldr	r3, [r7, #20]
 800214e:	08da      	lsrs	r2, r3, #3
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	3208      	adds	r2, #8
 8002154:	6939      	ldr	r1, [r7, #16]
 8002156:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002160:	697b      	ldr	r3, [r7, #20]
 8002162:	005b      	lsls	r3, r3, #1
 8002164:	2203      	movs	r2, #3
 8002166:	fa02 f303 	lsl.w	r3, r2, r3
 800216a:	43db      	mvns	r3, r3
 800216c:	693a      	ldr	r2, [r7, #16]
 800216e:	4013      	ands	r3, r2
 8002170:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	f003 0203 	and.w	r2, r3, #3
 800217a:	697b      	ldr	r3, [r7, #20]
 800217c:	005b      	lsls	r3, r3, #1
 800217e:	fa02 f303 	lsl.w	r3, r2, r3
 8002182:	693a      	ldr	r2, [r7, #16]
 8002184:	4313      	orrs	r3, r2
 8002186:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	693a      	ldr	r2, [r7, #16]
 800218c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	685b      	ldr	r3, [r3, #4]
 8002192:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002196:	2b00      	cmp	r3, #0
 8002198:	f000 809a 	beq.w	80022d0 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800219c:	4b55      	ldr	r3, [pc, #340]	; (80022f4 <HAL_GPIO_Init+0x2cc>)
 800219e:	699b      	ldr	r3, [r3, #24]
 80021a0:	4a54      	ldr	r2, [pc, #336]	; (80022f4 <HAL_GPIO_Init+0x2cc>)
 80021a2:	f043 0301 	orr.w	r3, r3, #1
 80021a6:	6193      	str	r3, [r2, #24]
 80021a8:	4b52      	ldr	r3, [pc, #328]	; (80022f4 <HAL_GPIO_Init+0x2cc>)
 80021aa:	699b      	ldr	r3, [r3, #24]
 80021ac:	f003 0301 	and.w	r3, r3, #1
 80021b0:	60bb      	str	r3, [r7, #8]
 80021b2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80021b4:	4a50      	ldr	r2, [pc, #320]	; (80022f8 <HAL_GPIO_Init+0x2d0>)
 80021b6:	697b      	ldr	r3, [r7, #20]
 80021b8:	089b      	lsrs	r3, r3, #2
 80021ba:	3302      	adds	r3, #2
 80021bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021c0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80021c2:	697b      	ldr	r3, [r7, #20]
 80021c4:	f003 0303 	and.w	r3, r3, #3
 80021c8:	009b      	lsls	r3, r3, #2
 80021ca:	220f      	movs	r2, #15
 80021cc:	fa02 f303 	lsl.w	r3, r2, r3
 80021d0:	43db      	mvns	r3, r3
 80021d2:	693a      	ldr	r2, [r7, #16]
 80021d4:	4013      	ands	r3, r2
 80021d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80021de:	d013      	beq.n	8002208 <HAL_GPIO_Init+0x1e0>
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	4a46      	ldr	r2, [pc, #280]	; (80022fc <HAL_GPIO_Init+0x2d4>)
 80021e4:	4293      	cmp	r3, r2
 80021e6:	d00d      	beq.n	8002204 <HAL_GPIO_Init+0x1dc>
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	4a45      	ldr	r2, [pc, #276]	; (8002300 <HAL_GPIO_Init+0x2d8>)
 80021ec:	4293      	cmp	r3, r2
 80021ee:	d007      	beq.n	8002200 <HAL_GPIO_Init+0x1d8>
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	4a44      	ldr	r2, [pc, #272]	; (8002304 <HAL_GPIO_Init+0x2dc>)
 80021f4:	4293      	cmp	r3, r2
 80021f6:	d101      	bne.n	80021fc <HAL_GPIO_Init+0x1d4>
 80021f8:	2303      	movs	r3, #3
 80021fa:	e006      	b.n	800220a <HAL_GPIO_Init+0x1e2>
 80021fc:	2305      	movs	r3, #5
 80021fe:	e004      	b.n	800220a <HAL_GPIO_Init+0x1e2>
 8002200:	2302      	movs	r3, #2
 8002202:	e002      	b.n	800220a <HAL_GPIO_Init+0x1e2>
 8002204:	2301      	movs	r3, #1
 8002206:	e000      	b.n	800220a <HAL_GPIO_Init+0x1e2>
 8002208:	2300      	movs	r3, #0
 800220a:	697a      	ldr	r2, [r7, #20]
 800220c:	f002 0203 	and.w	r2, r2, #3
 8002210:	0092      	lsls	r2, r2, #2
 8002212:	4093      	lsls	r3, r2
 8002214:	693a      	ldr	r2, [r7, #16]
 8002216:	4313      	orrs	r3, r2
 8002218:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800221a:	4937      	ldr	r1, [pc, #220]	; (80022f8 <HAL_GPIO_Init+0x2d0>)
 800221c:	697b      	ldr	r3, [r7, #20]
 800221e:	089b      	lsrs	r3, r3, #2
 8002220:	3302      	adds	r3, #2
 8002222:	693a      	ldr	r2, [r7, #16]
 8002224:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002228:	4b37      	ldr	r3, [pc, #220]	; (8002308 <HAL_GPIO_Init+0x2e0>)
 800222a:	689b      	ldr	r3, [r3, #8]
 800222c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	43db      	mvns	r3, r3
 8002232:	693a      	ldr	r2, [r7, #16]
 8002234:	4013      	ands	r3, r2
 8002236:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002240:	2b00      	cmp	r3, #0
 8002242:	d003      	beq.n	800224c <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8002244:	693a      	ldr	r2, [r7, #16]
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	4313      	orrs	r3, r2
 800224a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800224c:	4a2e      	ldr	r2, [pc, #184]	; (8002308 <HAL_GPIO_Init+0x2e0>)
 800224e:	693b      	ldr	r3, [r7, #16]
 8002250:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002252:	4b2d      	ldr	r3, [pc, #180]	; (8002308 <HAL_GPIO_Init+0x2e0>)
 8002254:	68db      	ldr	r3, [r3, #12]
 8002256:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	43db      	mvns	r3, r3
 800225c:	693a      	ldr	r2, [r7, #16]
 800225e:	4013      	ands	r3, r2
 8002260:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800226a:	2b00      	cmp	r3, #0
 800226c:	d003      	beq.n	8002276 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 800226e:	693a      	ldr	r2, [r7, #16]
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	4313      	orrs	r3, r2
 8002274:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002276:	4a24      	ldr	r2, [pc, #144]	; (8002308 <HAL_GPIO_Init+0x2e0>)
 8002278:	693b      	ldr	r3, [r7, #16]
 800227a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800227c:	4b22      	ldr	r3, [pc, #136]	; (8002308 <HAL_GPIO_Init+0x2e0>)
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	43db      	mvns	r3, r3
 8002286:	693a      	ldr	r2, [r7, #16]
 8002288:	4013      	ands	r3, r2
 800228a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002294:	2b00      	cmp	r3, #0
 8002296:	d003      	beq.n	80022a0 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8002298:	693a      	ldr	r2, [r7, #16]
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	4313      	orrs	r3, r2
 800229e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80022a0:	4a19      	ldr	r2, [pc, #100]	; (8002308 <HAL_GPIO_Init+0x2e0>)
 80022a2:	693b      	ldr	r3, [r7, #16]
 80022a4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80022a6:	4b18      	ldr	r3, [pc, #96]	; (8002308 <HAL_GPIO_Init+0x2e0>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	43db      	mvns	r3, r3
 80022b0:	693a      	ldr	r2, [r7, #16]
 80022b2:	4013      	ands	r3, r2
 80022b4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d003      	beq.n	80022ca <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80022c2:	693a      	ldr	r2, [r7, #16]
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	4313      	orrs	r3, r2
 80022c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80022ca:	4a0f      	ldr	r2, [pc, #60]	; (8002308 <HAL_GPIO_Init+0x2e0>)
 80022cc:	693b      	ldr	r3, [r7, #16]
 80022ce:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80022d0:	697b      	ldr	r3, [r7, #20]
 80022d2:	3301      	adds	r3, #1
 80022d4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	681a      	ldr	r2, [r3, #0]
 80022da:	697b      	ldr	r3, [r7, #20]
 80022dc:	fa22 f303 	lsr.w	r3, r2, r3
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	f47f aea9 	bne.w	8002038 <HAL_GPIO_Init+0x10>
  }
}
 80022e6:	bf00      	nop
 80022e8:	bf00      	nop
 80022ea:	371c      	adds	r7, #28
 80022ec:	46bd      	mov	sp, r7
 80022ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f2:	4770      	bx	lr
 80022f4:	40021000 	.word	0x40021000
 80022f8:	40010000 	.word	0x40010000
 80022fc:	48000400 	.word	0x48000400
 8002300:	48000800 	.word	0x48000800
 8002304:	48000c00 	.word	0x48000c00
 8002308:	40010400 	.word	0x40010400

0800230c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b082      	sub	sp, #8
 8002310:	af00      	add	r7, sp, #0
 8002312:	4603      	mov	r3, r0
 8002314:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002316:	4b08      	ldr	r3, [pc, #32]	; (8002338 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002318:	695a      	ldr	r2, [r3, #20]
 800231a:	88fb      	ldrh	r3, [r7, #6]
 800231c:	4013      	ands	r3, r2
 800231e:	2b00      	cmp	r3, #0
 8002320:	d006      	beq.n	8002330 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002322:	4a05      	ldr	r2, [pc, #20]	; (8002338 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002324:	88fb      	ldrh	r3, [r7, #6]
 8002326:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002328:	88fb      	ldrh	r3, [r7, #6]
 800232a:	4618      	mov	r0, r3
 800232c:	f7fe fba0 	bl	8000a70 <HAL_GPIO_EXTI_Callback>
  }
}
 8002330:	bf00      	nop
 8002332:	3708      	adds	r7, #8
 8002334:	46bd      	mov	sp, r7
 8002336:	bd80      	pop	{r7, pc}
 8002338:	40010400 	.word	0x40010400

0800233c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8002342:	af00      	add	r7, sp, #0
 8002344:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002348:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800234c:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800234e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002352:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d102      	bne.n	8002362 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 800235c:	2301      	movs	r3, #1
 800235e:	f001 b823 	b.w	80033a8 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002362:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002366:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f003 0301 	and.w	r3, r3, #1
 8002372:	2b00      	cmp	r3, #0
 8002374:	f000 817d 	beq.w	8002672 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002378:	4bbc      	ldr	r3, [pc, #752]	; (800266c <HAL_RCC_OscConfig+0x330>)
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	f003 030c 	and.w	r3, r3, #12
 8002380:	2b04      	cmp	r3, #4
 8002382:	d00c      	beq.n	800239e <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002384:	4bb9      	ldr	r3, [pc, #740]	; (800266c <HAL_RCC_OscConfig+0x330>)
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	f003 030c 	and.w	r3, r3, #12
 800238c:	2b08      	cmp	r3, #8
 800238e:	d15c      	bne.n	800244a <HAL_RCC_OscConfig+0x10e>
 8002390:	4bb6      	ldr	r3, [pc, #728]	; (800266c <HAL_RCC_OscConfig+0x330>)
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002398:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800239c:	d155      	bne.n	800244a <HAL_RCC_OscConfig+0x10e>
 800239e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80023a2:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023a6:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80023aa:	fa93 f3a3 	rbit	r3, r3
 80023ae:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80023b2:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023b6:	fab3 f383 	clz	r3, r3
 80023ba:	b2db      	uxtb	r3, r3
 80023bc:	095b      	lsrs	r3, r3, #5
 80023be:	b2db      	uxtb	r3, r3
 80023c0:	f043 0301 	orr.w	r3, r3, #1
 80023c4:	b2db      	uxtb	r3, r3
 80023c6:	2b01      	cmp	r3, #1
 80023c8:	d102      	bne.n	80023d0 <HAL_RCC_OscConfig+0x94>
 80023ca:	4ba8      	ldr	r3, [pc, #672]	; (800266c <HAL_RCC_OscConfig+0x330>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	e015      	b.n	80023fc <HAL_RCC_OscConfig+0xc0>
 80023d0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80023d4:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023d8:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80023dc:	fa93 f3a3 	rbit	r3, r3
 80023e0:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80023e4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80023e8:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80023ec:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80023f0:	fa93 f3a3 	rbit	r3, r3
 80023f4:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80023f8:	4b9c      	ldr	r3, [pc, #624]	; (800266c <HAL_RCC_OscConfig+0x330>)
 80023fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023fc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002400:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8002404:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002408:	fa92 f2a2 	rbit	r2, r2
 800240c:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8002410:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8002414:	fab2 f282 	clz	r2, r2
 8002418:	b2d2      	uxtb	r2, r2
 800241a:	f042 0220 	orr.w	r2, r2, #32
 800241e:	b2d2      	uxtb	r2, r2
 8002420:	f002 021f 	and.w	r2, r2, #31
 8002424:	2101      	movs	r1, #1
 8002426:	fa01 f202 	lsl.w	r2, r1, r2
 800242a:	4013      	ands	r3, r2
 800242c:	2b00      	cmp	r3, #0
 800242e:	f000 811f 	beq.w	8002670 <HAL_RCC_OscConfig+0x334>
 8002432:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002436:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	2b00      	cmp	r3, #0
 8002440:	f040 8116 	bne.w	8002670 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8002444:	2301      	movs	r3, #1
 8002446:	f000 bfaf 	b.w	80033a8 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800244a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800244e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800245a:	d106      	bne.n	800246a <HAL_RCC_OscConfig+0x12e>
 800245c:	4b83      	ldr	r3, [pc, #524]	; (800266c <HAL_RCC_OscConfig+0x330>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4a82      	ldr	r2, [pc, #520]	; (800266c <HAL_RCC_OscConfig+0x330>)
 8002462:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002466:	6013      	str	r3, [r2, #0]
 8002468:	e036      	b.n	80024d8 <HAL_RCC_OscConfig+0x19c>
 800246a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800246e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	685b      	ldr	r3, [r3, #4]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d10c      	bne.n	8002494 <HAL_RCC_OscConfig+0x158>
 800247a:	4b7c      	ldr	r3, [pc, #496]	; (800266c <HAL_RCC_OscConfig+0x330>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4a7b      	ldr	r2, [pc, #492]	; (800266c <HAL_RCC_OscConfig+0x330>)
 8002480:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002484:	6013      	str	r3, [r2, #0]
 8002486:	4b79      	ldr	r3, [pc, #484]	; (800266c <HAL_RCC_OscConfig+0x330>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4a78      	ldr	r2, [pc, #480]	; (800266c <HAL_RCC_OscConfig+0x330>)
 800248c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002490:	6013      	str	r3, [r2, #0]
 8002492:	e021      	b.n	80024d8 <HAL_RCC_OscConfig+0x19c>
 8002494:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002498:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80024a4:	d10c      	bne.n	80024c0 <HAL_RCC_OscConfig+0x184>
 80024a6:	4b71      	ldr	r3, [pc, #452]	; (800266c <HAL_RCC_OscConfig+0x330>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4a70      	ldr	r2, [pc, #448]	; (800266c <HAL_RCC_OscConfig+0x330>)
 80024ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80024b0:	6013      	str	r3, [r2, #0]
 80024b2:	4b6e      	ldr	r3, [pc, #440]	; (800266c <HAL_RCC_OscConfig+0x330>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4a6d      	ldr	r2, [pc, #436]	; (800266c <HAL_RCC_OscConfig+0x330>)
 80024b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024bc:	6013      	str	r3, [r2, #0]
 80024be:	e00b      	b.n	80024d8 <HAL_RCC_OscConfig+0x19c>
 80024c0:	4b6a      	ldr	r3, [pc, #424]	; (800266c <HAL_RCC_OscConfig+0x330>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4a69      	ldr	r2, [pc, #420]	; (800266c <HAL_RCC_OscConfig+0x330>)
 80024c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024ca:	6013      	str	r3, [r2, #0]
 80024cc:	4b67      	ldr	r3, [pc, #412]	; (800266c <HAL_RCC_OscConfig+0x330>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4a66      	ldr	r2, [pc, #408]	; (800266c <HAL_RCC_OscConfig+0x330>)
 80024d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024d6:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80024d8:	4b64      	ldr	r3, [pc, #400]	; (800266c <HAL_RCC_OscConfig+0x330>)
 80024da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024dc:	f023 020f 	bic.w	r2, r3, #15
 80024e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024e4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	689b      	ldr	r3, [r3, #8]
 80024ec:	495f      	ldr	r1, [pc, #380]	; (800266c <HAL_RCC_OscConfig+0x330>)
 80024ee:	4313      	orrs	r3, r2
 80024f0:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80024f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024f6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d059      	beq.n	80025b6 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002502:	f7fe fce5 	bl	8000ed0 <HAL_GetTick>
 8002506:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800250a:	e00a      	b.n	8002522 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800250c:	f7fe fce0 	bl	8000ed0 <HAL_GetTick>
 8002510:	4602      	mov	r2, r0
 8002512:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002516:	1ad3      	subs	r3, r2, r3
 8002518:	2b64      	cmp	r3, #100	; 0x64
 800251a:	d902      	bls.n	8002522 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 800251c:	2303      	movs	r3, #3
 800251e:	f000 bf43 	b.w	80033a8 <HAL_RCC_OscConfig+0x106c>
 8002522:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002526:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800252a:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 800252e:	fa93 f3a3 	rbit	r3, r3
 8002532:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8002536:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800253a:	fab3 f383 	clz	r3, r3
 800253e:	b2db      	uxtb	r3, r3
 8002540:	095b      	lsrs	r3, r3, #5
 8002542:	b2db      	uxtb	r3, r3
 8002544:	f043 0301 	orr.w	r3, r3, #1
 8002548:	b2db      	uxtb	r3, r3
 800254a:	2b01      	cmp	r3, #1
 800254c:	d102      	bne.n	8002554 <HAL_RCC_OscConfig+0x218>
 800254e:	4b47      	ldr	r3, [pc, #284]	; (800266c <HAL_RCC_OscConfig+0x330>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	e015      	b.n	8002580 <HAL_RCC_OscConfig+0x244>
 8002554:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002558:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800255c:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8002560:	fa93 f3a3 	rbit	r3, r3
 8002564:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002568:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800256c:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002570:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002574:	fa93 f3a3 	rbit	r3, r3
 8002578:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 800257c:	4b3b      	ldr	r3, [pc, #236]	; (800266c <HAL_RCC_OscConfig+0x330>)
 800257e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002580:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002584:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8002588:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800258c:	fa92 f2a2 	rbit	r2, r2
 8002590:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8002594:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8002598:	fab2 f282 	clz	r2, r2
 800259c:	b2d2      	uxtb	r2, r2
 800259e:	f042 0220 	orr.w	r2, r2, #32
 80025a2:	b2d2      	uxtb	r2, r2
 80025a4:	f002 021f 	and.w	r2, r2, #31
 80025a8:	2101      	movs	r1, #1
 80025aa:	fa01 f202 	lsl.w	r2, r1, r2
 80025ae:	4013      	ands	r3, r2
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d0ab      	beq.n	800250c <HAL_RCC_OscConfig+0x1d0>
 80025b4:	e05d      	b.n	8002672 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025b6:	f7fe fc8b 	bl	8000ed0 <HAL_GetTick>
 80025ba:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025be:	e00a      	b.n	80025d6 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80025c0:	f7fe fc86 	bl	8000ed0 <HAL_GetTick>
 80025c4:	4602      	mov	r2, r0
 80025c6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80025ca:	1ad3      	subs	r3, r2, r3
 80025cc:	2b64      	cmp	r3, #100	; 0x64
 80025ce:	d902      	bls.n	80025d6 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 80025d0:	2303      	movs	r3, #3
 80025d2:	f000 bee9 	b.w	80033a8 <HAL_RCC_OscConfig+0x106c>
 80025d6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80025da:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025de:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80025e2:	fa93 f3a3 	rbit	r3, r3
 80025e6:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80025ea:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025ee:	fab3 f383 	clz	r3, r3
 80025f2:	b2db      	uxtb	r3, r3
 80025f4:	095b      	lsrs	r3, r3, #5
 80025f6:	b2db      	uxtb	r3, r3
 80025f8:	f043 0301 	orr.w	r3, r3, #1
 80025fc:	b2db      	uxtb	r3, r3
 80025fe:	2b01      	cmp	r3, #1
 8002600:	d102      	bne.n	8002608 <HAL_RCC_OscConfig+0x2cc>
 8002602:	4b1a      	ldr	r3, [pc, #104]	; (800266c <HAL_RCC_OscConfig+0x330>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	e015      	b.n	8002634 <HAL_RCC_OscConfig+0x2f8>
 8002608:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800260c:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002610:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002614:	fa93 f3a3 	rbit	r3, r3
 8002618:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800261c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002620:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002624:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002628:	fa93 f3a3 	rbit	r3, r3
 800262c:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8002630:	4b0e      	ldr	r3, [pc, #56]	; (800266c <HAL_RCC_OscConfig+0x330>)
 8002632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002634:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002638:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 800263c:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002640:	fa92 f2a2 	rbit	r2, r2
 8002644:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8002648:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 800264c:	fab2 f282 	clz	r2, r2
 8002650:	b2d2      	uxtb	r2, r2
 8002652:	f042 0220 	orr.w	r2, r2, #32
 8002656:	b2d2      	uxtb	r2, r2
 8002658:	f002 021f 	and.w	r2, r2, #31
 800265c:	2101      	movs	r1, #1
 800265e:	fa01 f202 	lsl.w	r2, r1, r2
 8002662:	4013      	ands	r3, r2
 8002664:	2b00      	cmp	r3, #0
 8002666:	d1ab      	bne.n	80025c0 <HAL_RCC_OscConfig+0x284>
 8002668:	e003      	b.n	8002672 <HAL_RCC_OscConfig+0x336>
 800266a:	bf00      	nop
 800266c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002670:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002672:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002676:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f003 0302 	and.w	r3, r3, #2
 8002682:	2b00      	cmp	r3, #0
 8002684:	f000 817d 	beq.w	8002982 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002688:	4ba6      	ldr	r3, [pc, #664]	; (8002924 <HAL_RCC_OscConfig+0x5e8>)
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	f003 030c 	and.w	r3, r3, #12
 8002690:	2b00      	cmp	r3, #0
 8002692:	d00b      	beq.n	80026ac <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002694:	4ba3      	ldr	r3, [pc, #652]	; (8002924 <HAL_RCC_OscConfig+0x5e8>)
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	f003 030c 	and.w	r3, r3, #12
 800269c:	2b08      	cmp	r3, #8
 800269e:	d172      	bne.n	8002786 <HAL_RCC_OscConfig+0x44a>
 80026a0:	4ba0      	ldr	r3, [pc, #640]	; (8002924 <HAL_RCC_OscConfig+0x5e8>)
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d16c      	bne.n	8002786 <HAL_RCC_OscConfig+0x44a>
 80026ac:	2302      	movs	r3, #2
 80026ae:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026b2:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80026b6:	fa93 f3a3 	rbit	r3, r3
 80026ba:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80026be:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026c2:	fab3 f383 	clz	r3, r3
 80026c6:	b2db      	uxtb	r3, r3
 80026c8:	095b      	lsrs	r3, r3, #5
 80026ca:	b2db      	uxtb	r3, r3
 80026cc:	f043 0301 	orr.w	r3, r3, #1
 80026d0:	b2db      	uxtb	r3, r3
 80026d2:	2b01      	cmp	r3, #1
 80026d4:	d102      	bne.n	80026dc <HAL_RCC_OscConfig+0x3a0>
 80026d6:	4b93      	ldr	r3, [pc, #588]	; (8002924 <HAL_RCC_OscConfig+0x5e8>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	e013      	b.n	8002704 <HAL_RCC_OscConfig+0x3c8>
 80026dc:	2302      	movs	r3, #2
 80026de:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026e2:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80026e6:	fa93 f3a3 	rbit	r3, r3
 80026ea:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80026ee:	2302      	movs	r3, #2
 80026f0:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80026f4:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80026f8:	fa93 f3a3 	rbit	r3, r3
 80026fc:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002700:	4b88      	ldr	r3, [pc, #544]	; (8002924 <HAL_RCC_OscConfig+0x5e8>)
 8002702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002704:	2202      	movs	r2, #2
 8002706:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 800270a:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800270e:	fa92 f2a2 	rbit	r2, r2
 8002712:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8002716:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 800271a:	fab2 f282 	clz	r2, r2
 800271e:	b2d2      	uxtb	r2, r2
 8002720:	f042 0220 	orr.w	r2, r2, #32
 8002724:	b2d2      	uxtb	r2, r2
 8002726:	f002 021f 	and.w	r2, r2, #31
 800272a:	2101      	movs	r1, #1
 800272c:	fa01 f202 	lsl.w	r2, r1, r2
 8002730:	4013      	ands	r3, r2
 8002732:	2b00      	cmp	r3, #0
 8002734:	d00a      	beq.n	800274c <HAL_RCC_OscConfig+0x410>
 8002736:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800273a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	691b      	ldr	r3, [r3, #16]
 8002742:	2b01      	cmp	r3, #1
 8002744:	d002      	beq.n	800274c <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8002746:	2301      	movs	r3, #1
 8002748:	f000 be2e 	b.w	80033a8 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800274c:	4b75      	ldr	r3, [pc, #468]	; (8002924 <HAL_RCC_OscConfig+0x5e8>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002754:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002758:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	695b      	ldr	r3, [r3, #20]
 8002760:	21f8      	movs	r1, #248	; 0xf8
 8002762:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002766:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800276a:	fa91 f1a1 	rbit	r1, r1
 800276e:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8002772:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8002776:	fab1 f181 	clz	r1, r1
 800277a:	b2c9      	uxtb	r1, r1
 800277c:	408b      	lsls	r3, r1
 800277e:	4969      	ldr	r1, [pc, #420]	; (8002924 <HAL_RCC_OscConfig+0x5e8>)
 8002780:	4313      	orrs	r3, r2
 8002782:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002784:	e0fd      	b.n	8002982 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002786:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800278a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	691b      	ldr	r3, [r3, #16]
 8002792:	2b00      	cmp	r3, #0
 8002794:	f000 8088 	beq.w	80028a8 <HAL_RCC_OscConfig+0x56c>
 8002798:	2301      	movs	r3, #1
 800279a:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800279e:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80027a2:	fa93 f3a3 	rbit	r3, r3
 80027a6:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80027aa:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80027ae:	fab3 f383 	clz	r3, r3
 80027b2:	b2db      	uxtb	r3, r3
 80027b4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80027b8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80027bc:	009b      	lsls	r3, r3, #2
 80027be:	461a      	mov	r2, r3
 80027c0:	2301      	movs	r3, #1
 80027c2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027c4:	f7fe fb84 	bl	8000ed0 <HAL_GetTick>
 80027c8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027cc:	e00a      	b.n	80027e4 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80027ce:	f7fe fb7f 	bl	8000ed0 <HAL_GetTick>
 80027d2:	4602      	mov	r2, r0
 80027d4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80027d8:	1ad3      	subs	r3, r2, r3
 80027da:	2b02      	cmp	r3, #2
 80027dc:	d902      	bls.n	80027e4 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 80027de:	2303      	movs	r3, #3
 80027e0:	f000 bde2 	b.w	80033a8 <HAL_RCC_OscConfig+0x106c>
 80027e4:	2302      	movs	r3, #2
 80027e6:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027ea:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80027ee:	fa93 f3a3 	rbit	r3, r3
 80027f2:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80027f6:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027fa:	fab3 f383 	clz	r3, r3
 80027fe:	b2db      	uxtb	r3, r3
 8002800:	095b      	lsrs	r3, r3, #5
 8002802:	b2db      	uxtb	r3, r3
 8002804:	f043 0301 	orr.w	r3, r3, #1
 8002808:	b2db      	uxtb	r3, r3
 800280a:	2b01      	cmp	r3, #1
 800280c:	d102      	bne.n	8002814 <HAL_RCC_OscConfig+0x4d8>
 800280e:	4b45      	ldr	r3, [pc, #276]	; (8002924 <HAL_RCC_OscConfig+0x5e8>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	e013      	b.n	800283c <HAL_RCC_OscConfig+0x500>
 8002814:	2302      	movs	r3, #2
 8002816:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800281a:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800281e:	fa93 f3a3 	rbit	r3, r3
 8002822:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002826:	2302      	movs	r3, #2
 8002828:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800282c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002830:	fa93 f3a3 	rbit	r3, r3
 8002834:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8002838:	4b3a      	ldr	r3, [pc, #232]	; (8002924 <HAL_RCC_OscConfig+0x5e8>)
 800283a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800283c:	2202      	movs	r2, #2
 800283e:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8002842:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002846:	fa92 f2a2 	rbit	r2, r2
 800284a:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 800284e:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8002852:	fab2 f282 	clz	r2, r2
 8002856:	b2d2      	uxtb	r2, r2
 8002858:	f042 0220 	orr.w	r2, r2, #32
 800285c:	b2d2      	uxtb	r2, r2
 800285e:	f002 021f 	and.w	r2, r2, #31
 8002862:	2101      	movs	r1, #1
 8002864:	fa01 f202 	lsl.w	r2, r1, r2
 8002868:	4013      	ands	r3, r2
 800286a:	2b00      	cmp	r3, #0
 800286c:	d0af      	beq.n	80027ce <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800286e:	4b2d      	ldr	r3, [pc, #180]	; (8002924 <HAL_RCC_OscConfig+0x5e8>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002876:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800287a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	695b      	ldr	r3, [r3, #20]
 8002882:	21f8      	movs	r1, #248	; 0xf8
 8002884:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002888:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800288c:	fa91 f1a1 	rbit	r1, r1
 8002890:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8002894:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8002898:	fab1 f181 	clz	r1, r1
 800289c:	b2c9      	uxtb	r1, r1
 800289e:	408b      	lsls	r3, r1
 80028a0:	4920      	ldr	r1, [pc, #128]	; (8002924 <HAL_RCC_OscConfig+0x5e8>)
 80028a2:	4313      	orrs	r3, r2
 80028a4:	600b      	str	r3, [r1, #0]
 80028a6:	e06c      	b.n	8002982 <HAL_RCC_OscConfig+0x646>
 80028a8:	2301      	movs	r3, #1
 80028aa:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028ae:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80028b2:	fa93 f3a3 	rbit	r3, r3
 80028b6:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80028ba:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80028be:	fab3 f383 	clz	r3, r3
 80028c2:	b2db      	uxtb	r3, r3
 80028c4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80028c8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80028cc:	009b      	lsls	r3, r3, #2
 80028ce:	461a      	mov	r2, r3
 80028d0:	2300      	movs	r3, #0
 80028d2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028d4:	f7fe fafc 	bl	8000ed0 <HAL_GetTick>
 80028d8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028dc:	e00a      	b.n	80028f4 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80028de:	f7fe faf7 	bl	8000ed0 <HAL_GetTick>
 80028e2:	4602      	mov	r2, r0
 80028e4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80028e8:	1ad3      	subs	r3, r2, r3
 80028ea:	2b02      	cmp	r3, #2
 80028ec:	d902      	bls.n	80028f4 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 80028ee:	2303      	movs	r3, #3
 80028f0:	f000 bd5a 	b.w	80033a8 <HAL_RCC_OscConfig+0x106c>
 80028f4:	2302      	movs	r3, #2
 80028f6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028fa:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80028fe:	fa93 f3a3 	rbit	r3, r3
 8002902:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8002906:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800290a:	fab3 f383 	clz	r3, r3
 800290e:	b2db      	uxtb	r3, r3
 8002910:	095b      	lsrs	r3, r3, #5
 8002912:	b2db      	uxtb	r3, r3
 8002914:	f043 0301 	orr.w	r3, r3, #1
 8002918:	b2db      	uxtb	r3, r3
 800291a:	2b01      	cmp	r3, #1
 800291c:	d104      	bne.n	8002928 <HAL_RCC_OscConfig+0x5ec>
 800291e:	4b01      	ldr	r3, [pc, #4]	; (8002924 <HAL_RCC_OscConfig+0x5e8>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	e015      	b.n	8002950 <HAL_RCC_OscConfig+0x614>
 8002924:	40021000 	.word	0x40021000
 8002928:	2302      	movs	r3, #2
 800292a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800292e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002932:	fa93 f3a3 	rbit	r3, r3
 8002936:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800293a:	2302      	movs	r3, #2
 800293c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002940:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002944:	fa93 f3a3 	rbit	r3, r3
 8002948:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800294c:	4bc8      	ldr	r3, [pc, #800]	; (8002c70 <HAL_RCC_OscConfig+0x934>)
 800294e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002950:	2202      	movs	r2, #2
 8002952:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8002956:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800295a:	fa92 f2a2 	rbit	r2, r2
 800295e:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8002962:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8002966:	fab2 f282 	clz	r2, r2
 800296a:	b2d2      	uxtb	r2, r2
 800296c:	f042 0220 	orr.w	r2, r2, #32
 8002970:	b2d2      	uxtb	r2, r2
 8002972:	f002 021f 	and.w	r2, r2, #31
 8002976:	2101      	movs	r1, #1
 8002978:	fa01 f202 	lsl.w	r2, r1, r2
 800297c:	4013      	ands	r3, r2
 800297e:	2b00      	cmp	r3, #0
 8002980:	d1ad      	bne.n	80028de <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002982:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002986:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f003 0308 	and.w	r3, r3, #8
 8002992:	2b00      	cmp	r3, #0
 8002994:	f000 8110 	beq.w	8002bb8 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002998:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800299c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	699b      	ldr	r3, [r3, #24]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d079      	beq.n	8002a9c <HAL_RCC_OscConfig+0x760>
 80029a8:	2301      	movs	r3, #1
 80029aa:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029ae:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80029b2:	fa93 f3a3 	rbit	r3, r3
 80029b6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80029ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029be:	fab3 f383 	clz	r3, r3
 80029c2:	b2db      	uxtb	r3, r3
 80029c4:	461a      	mov	r2, r3
 80029c6:	4bab      	ldr	r3, [pc, #684]	; (8002c74 <HAL_RCC_OscConfig+0x938>)
 80029c8:	4413      	add	r3, r2
 80029ca:	009b      	lsls	r3, r3, #2
 80029cc:	461a      	mov	r2, r3
 80029ce:	2301      	movs	r3, #1
 80029d0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029d2:	f7fe fa7d 	bl	8000ed0 <HAL_GetTick>
 80029d6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029da:	e00a      	b.n	80029f2 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80029dc:	f7fe fa78 	bl	8000ed0 <HAL_GetTick>
 80029e0:	4602      	mov	r2, r0
 80029e2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80029e6:	1ad3      	subs	r3, r2, r3
 80029e8:	2b02      	cmp	r3, #2
 80029ea:	d902      	bls.n	80029f2 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 80029ec:	2303      	movs	r3, #3
 80029ee:	f000 bcdb 	b.w	80033a8 <HAL_RCC_OscConfig+0x106c>
 80029f2:	2302      	movs	r3, #2
 80029f4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029f8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80029fc:	fa93 f3a3 	rbit	r3, r3
 8002a00:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002a04:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a08:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002a0c:	2202      	movs	r2, #2
 8002a0e:	601a      	str	r2, [r3, #0]
 8002a10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a14:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	fa93 f2a3 	rbit	r2, r3
 8002a1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a22:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002a26:	601a      	str	r2, [r3, #0]
 8002a28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a2c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002a30:	2202      	movs	r2, #2
 8002a32:	601a      	str	r2, [r3, #0]
 8002a34:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a38:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	fa93 f2a3 	rbit	r2, r3
 8002a42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a46:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002a4a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a4c:	4b88      	ldr	r3, [pc, #544]	; (8002c70 <HAL_RCC_OscConfig+0x934>)
 8002a4e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002a50:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a54:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002a58:	2102      	movs	r1, #2
 8002a5a:	6019      	str	r1, [r3, #0]
 8002a5c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a60:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	fa93 f1a3 	rbit	r1, r3
 8002a6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a6e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002a72:	6019      	str	r1, [r3, #0]
  return result;
 8002a74:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a78:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	fab3 f383 	clz	r3, r3
 8002a82:	b2db      	uxtb	r3, r3
 8002a84:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002a88:	b2db      	uxtb	r3, r3
 8002a8a:	f003 031f 	and.w	r3, r3, #31
 8002a8e:	2101      	movs	r1, #1
 8002a90:	fa01 f303 	lsl.w	r3, r1, r3
 8002a94:	4013      	ands	r3, r2
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d0a0      	beq.n	80029dc <HAL_RCC_OscConfig+0x6a0>
 8002a9a:	e08d      	b.n	8002bb8 <HAL_RCC_OscConfig+0x87c>
 8002a9c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002aa0:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002aa4:	2201      	movs	r2, #1
 8002aa6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aa8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002aac:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	fa93 f2a3 	rbit	r2, r3
 8002ab6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002aba:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002abe:	601a      	str	r2, [r3, #0]
  return result;
 8002ac0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ac4:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002ac8:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002aca:	fab3 f383 	clz	r3, r3
 8002ace:	b2db      	uxtb	r3, r3
 8002ad0:	461a      	mov	r2, r3
 8002ad2:	4b68      	ldr	r3, [pc, #416]	; (8002c74 <HAL_RCC_OscConfig+0x938>)
 8002ad4:	4413      	add	r3, r2
 8002ad6:	009b      	lsls	r3, r3, #2
 8002ad8:	461a      	mov	r2, r3
 8002ada:	2300      	movs	r3, #0
 8002adc:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ade:	f7fe f9f7 	bl	8000ed0 <HAL_GetTick>
 8002ae2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ae6:	e00a      	b.n	8002afe <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ae8:	f7fe f9f2 	bl	8000ed0 <HAL_GetTick>
 8002aec:	4602      	mov	r2, r0
 8002aee:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002af2:	1ad3      	subs	r3, r2, r3
 8002af4:	2b02      	cmp	r3, #2
 8002af6:	d902      	bls.n	8002afe <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8002af8:	2303      	movs	r3, #3
 8002afa:	f000 bc55 	b.w	80033a8 <HAL_RCC_OscConfig+0x106c>
 8002afe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b02:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002b06:	2202      	movs	r2, #2
 8002b08:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b0e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	fa93 f2a3 	rbit	r2, r3
 8002b18:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b1c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002b20:	601a      	str	r2, [r3, #0]
 8002b22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b26:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002b2a:	2202      	movs	r2, #2
 8002b2c:	601a      	str	r2, [r3, #0]
 8002b2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b32:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	fa93 f2a3 	rbit	r2, r3
 8002b3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b40:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002b44:	601a      	str	r2, [r3, #0]
 8002b46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b4a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002b4e:	2202      	movs	r2, #2
 8002b50:	601a      	str	r2, [r3, #0]
 8002b52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b56:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	fa93 f2a3 	rbit	r2, r3
 8002b60:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b64:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002b68:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b6a:	4b41      	ldr	r3, [pc, #260]	; (8002c70 <HAL_RCC_OscConfig+0x934>)
 8002b6c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002b6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b72:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002b76:	2102      	movs	r1, #2
 8002b78:	6019      	str	r1, [r3, #0]
 8002b7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b7e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	fa93 f1a3 	rbit	r1, r3
 8002b88:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b8c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002b90:	6019      	str	r1, [r3, #0]
  return result;
 8002b92:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b96:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	fab3 f383 	clz	r3, r3
 8002ba0:	b2db      	uxtb	r3, r3
 8002ba2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002ba6:	b2db      	uxtb	r3, r3
 8002ba8:	f003 031f 	and.w	r3, r3, #31
 8002bac:	2101      	movs	r1, #1
 8002bae:	fa01 f303 	lsl.w	r3, r1, r3
 8002bb2:	4013      	ands	r3, r2
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d197      	bne.n	8002ae8 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002bb8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bbc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f003 0304 	and.w	r3, r3, #4
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	f000 81a1 	beq.w	8002f10 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002bce:	2300      	movs	r3, #0
 8002bd0:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002bd4:	4b26      	ldr	r3, [pc, #152]	; (8002c70 <HAL_RCC_OscConfig+0x934>)
 8002bd6:	69db      	ldr	r3, [r3, #28]
 8002bd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d116      	bne.n	8002c0e <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002be0:	4b23      	ldr	r3, [pc, #140]	; (8002c70 <HAL_RCC_OscConfig+0x934>)
 8002be2:	69db      	ldr	r3, [r3, #28]
 8002be4:	4a22      	ldr	r2, [pc, #136]	; (8002c70 <HAL_RCC_OscConfig+0x934>)
 8002be6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bea:	61d3      	str	r3, [r2, #28]
 8002bec:	4b20      	ldr	r3, [pc, #128]	; (8002c70 <HAL_RCC_OscConfig+0x934>)
 8002bee:	69db      	ldr	r3, [r3, #28]
 8002bf0:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002bf4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bf8:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002bfc:	601a      	str	r2, [r3, #0]
 8002bfe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c02:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002c06:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002c08:	2301      	movs	r3, #1
 8002c0a:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c0e:	4b1a      	ldr	r3, [pc, #104]	; (8002c78 <HAL_RCC_OscConfig+0x93c>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d11a      	bne.n	8002c50 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c1a:	4b17      	ldr	r3, [pc, #92]	; (8002c78 <HAL_RCC_OscConfig+0x93c>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4a16      	ldr	r2, [pc, #88]	; (8002c78 <HAL_RCC_OscConfig+0x93c>)
 8002c20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c24:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c26:	f7fe f953 	bl	8000ed0 <HAL_GetTick>
 8002c2a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c2e:	e009      	b.n	8002c44 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c30:	f7fe f94e 	bl	8000ed0 <HAL_GetTick>
 8002c34:	4602      	mov	r2, r0
 8002c36:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002c3a:	1ad3      	subs	r3, r2, r3
 8002c3c:	2b64      	cmp	r3, #100	; 0x64
 8002c3e:	d901      	bls.n	8002c44 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8002c40:	2303      	movs	r3, #3
 8002c42:	e3b1      	b.n	80033a8 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c44:	4b0c      	ldr	r3, [pc, #48]	; (8002c78 <HAL_RCC_OscConfig+0x93c>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d0ef      	beq.n	8002c30 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c50:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c54:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	68db      	ldr	r3, [r3, #12]
 8002c5c:	2b01      	cmp	r3, #1
 8002c5e:	d10d      	bne.n	8002c7c <HAL_RCC_OscConfig+0x940>
 8002c60:	4b03      	ldr	r3, [pc, #12]	; (8002c70 <HAL_RCC_OscConfig+0x934>)
 8002c62:	6a1b      	ldr	r3, [r3, #32]
 8002c64:	4a02      	ldr	r2, [pc, #8]	; (8002c70 <HAL_RCC_OscConfig+0x934>)
 8002c66:	f043 0301 	orr.w	r3, r3, #1
 8002c6a:	6213      	str	r3, [r2, #32]
 8002c6c:	e03c      	b.n	8002ce8 <HAL_RCC_OscConfig+0x9ac>
 8002c6e:	bf00      	nop
 8002c70:	40021000 	.word	0x40021000
 8002c74:	10908120 	.word	0x10908120
 8002c78:	40007000 	.word	0x40007000
 8002c7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c80:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	68db      	ldr	r3, [r3, #12]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d10c      	bne.n	8002ca6 <HAL_RCC_OscConfig+0x96a>
 8002c8c:	4bc1      	ldr	r3, [pc, #772]	; (8002f94 <HAL_RCC_OscConfig+0xc58>)
 8002c8e:	6a1b      	ldr	r3, [r3, #32]
 8002c90:	4ac0      	ldr	r2, [pc, #768]	; (8002f94 <HAL_RCC_OscConfig+0xc58>)
 8002c92:	f023 0301 	bic.w	r3, r3, #1
 8002c96:	6213      	str	r3, [r2, #32]
 8002c98:	4bbe      	ldr	r3, [pc, #760]	; (8002f94 <HAL_RCC_OscConfig+0xc58>)
 8002c9a:	6a1b      	ldr	r3, [r3, #32]
 8002c9c:	4abd      	ldr	r2, [pc, #756]	; (8002f94 <HAL_RCC_OscConfig+0xc58>)
 8002c9e:	f023 0304 	bic.w	r3, r3, #4
 8002ca2:	6213      	str	r3, [r2, #32]
 8002ca4:	e020      	b.n	8002ce8 <HAL_RCC_OscConfig+0x9ac>
 8002ca6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002caa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	68db      	ldr	r3, [r3, #12]
 8002cb2:	2b05      	cmp	r3, #5
 8002cb4:	d10c      	bne.n	8002cd0 <HAL_RCC_OscConfig+0x994>
 8002cb6:	4bb7      	ldr	r3, [pc, #732]	; (8002f94 <HAL_RCC_OscConfig+0xc58>)
 8002cb8:	6a1b      	ldr	r3, [r3, #32]
 8002cba:	4ab6      	ldr	r2, [pc, #728]	; (8002f94 <HAL_RCC_OscConfig+0xc58>)
 8002cbc:	f043 0304 	orr.w	r3, r3, #4
 8002cc0:	6213      	str	r3, [r2, #32]
 8002cc2:	4bb4      	ldr	r3, [pc, #720]	; (8002f94 <HAL_RCC_OscConfig+0xc58>)
 8002cc4:	6a1b      	ldr	r3, [r3, #32]
 8002cc6:	4ab3      	ldr	r2, [pc, #716]	; (8002f94 <HAL_RCC_OscConfig+0xc58>)
 8002cc8:	f043 0301 	orr.w	r3, r3, #1
 8002ccc:	6213      	str	r3, [r2, #32]
 8002cce:	e00b      	b.n	8002ce8 <HAL_RCC_OscConfig+0x9ac>
 8002cd0:	4bb0      	ldr	r3, [pc, #704]	; (8002f94 <HAL_RCC_OscConfig+0xc58>)
 8002cd2:	6a1b      	ldr	r3, [r3, #32]
 8002cd4:	4aaf      	ldr	r2, [pc, #700]	; (8002f94 <HAL_RCC_OscConfig+0xc58>)
 8002cd6:	f023 0301 	bic.w	r3, r3, #1
 8002cda:	6213      	str	r3, [r2, #32]
 8002cdc:	4bad      	ldr	r3, [pc, #692]	; (8002f94 <HAL_RCC_OscConfig+0xc58>)
 8002cde:	6a1b      	ldr	r3, [r3, #32]
 8002ce0:	4aac      	ldr	r2, [pc, #688]	; (8002f94 <HAL_RCC_OscConfig+0xc58>)
 8002ce2:	f023 0304 	bic.w	r3, r3, #4
 8002ce6:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002ce8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cec:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	68db      	ldr	r3, [r3, #12]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	f000 8081 	beq.w	8002dfc <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cfa:	f7fe f8e9 	bl	8000ed0 <HAL_GetTick>
 8002cfe:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d02:	e00b      	b.n	8002d1c <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d04:	f7fe f8e4 	bl	8000ed0 <HAL_GetTick>
 8002d08:	4602      	mov	r2, r0
 8002d0a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002d0e:	1ad3      	subs	r3, r2, r3
 8002d10:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d14:	4293      	cmp	r3, r2
 8002d16:	d901      	bls.n	8002d1c <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8002d18:	2303      	movs	r3, #3
 8002d1a:	e345      	b.n	80033a8 <HAL_RCC_OscConfig+0x106c>
 8002d1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d20:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002d24:	2202      	movs	r2, #2
 8002d26:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d2c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	fa93 f2a3 	rbit	r2, r3
 8002d36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d3a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002d3e:	601a      	str	r2, [r3, #0]
 8002d40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d44:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002d48:	2202      	movs	r2, #2
 8002d4a:	601a      	str	r2, [r3, #0]
 8002d4c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d50:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	fa93 f2a3 	rbit	r2, r3
 8002d5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d5e:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002d62:	601a      	str	r2, [r3, #0]
  return result;
 8002d64:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d68:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002d6c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d6e:	fab3 f383 	clz	r3, r3
 8002d72:	b2db      	uxtb	r3, r3
 8002d74:	095b      	lsrs	r3, r3, #5
 8002d76:	b2db      	uxtb	r3, r3
 8002d78:	f043 0302 	orr.w	r3, r3, #2
 8002d7c:	b2db      	uxtb	r3, r3
 8002d7e:	2b02      	cmp	r3, #2
 8002d80:	d102      	bne.n	8002d88 <HAL_RCC_OscConfig+0xa4c>
 8002d82:	4b84      	ldr	r3, [pc, #528]	; (8002f94 <HAL_RCC_OscConfig+0xc58>)
 8002d84:	6a1b      	ldr	r3, [r3, #32]
 8002d86:	e013      	b.n	8002db0 <HAL_RCC_OscConfig+0xa74>
 8002d88:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d8c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002d90:	2202      	movs	r2, #2
 8002d92:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d94:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d98:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	fa93 f2a3 	rbit	r2, r3
 8002da2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002da6:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8002daa:	601a      	str	r2, [r3, #0]
 8002dac:	4b79      	ldr	r3, [pc, #484]	; (8002f94 <HAL_RCC_OscConfig+0xc58>)
 8002dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002db0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002db4:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002db8:	2102      	movs	r1, #2
 8002dba:	6011      	str	r1, [r2, #0]
 8002dbc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002dc0:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002dc4:	6812      	ldr	r2, [r2, #0]
 8002dc6:	fa92 f1a2 	rbit	r1, r2
 8002dca:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002dce:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002dd2:	6011      	str	r1, [r2, #0]
  return result;
 8002dd4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002dd8:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002ddc:	6812      	ldr	r2, [r2, #0]
 8002dde:	fab2 f282 	clz	r2, r2
 8002de2:	b2d2      	uxtb	r2, r2
 8002de4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002de8:	b2d2      	uxtb	r2, r2
 8002dea:	f002 021f 	and.w	r2, r2, #31
 8002dee:	2101      	movs	r1, #1
 8002df0:	fa01 f202 	lsl.w	r2, r1, r2
 8002df4:	4013      	ands	r3, r2
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d084      	beq.n	8002d04 <HAL_RCC_OscConfig+0x9c8>
 8002dfa:	e07f      	b.n	8002efc <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dfc:	f7fe f868 	bl	8000ed0 <HAL_GetTick>
 8002e00:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e04:	e00b      	b.n	8002e1e <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e06:	f7fe f863 	bl	8000ed0 <HAL_GetTick>
 8002e0a:	4602      	mov	r2, r0
 8002e0c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002e10:	1ad3      	subs	r3, r2, r3
 8002e12:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d901      	bls.n	8002e1e <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8002e1a:	2303      	movs	r3, #3
 8002e1c:	e2c4      	b.n	80033a8 <HAL_RCC_OscConfig+0x106c>
 8002e1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e22:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8002e26:	2202      	movs	r2, #2
 8002e28:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e2e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	fa93 f2a3 	rbit	r2, r3
 8002e38:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e3c:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8002e40:	601a      	str	r2, [r3, #0]
 8002e42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e46:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002e4a:	2202      	movs	r2, #2
 8002e4c:	601a      	str	r2, [r3, #0]
 8002e4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e52:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	fa93 f2a3 	rbit	r2, r3
 8002e5c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e60:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002e64:	601a      	str	r2, [r3, #0]
  return result;
 8002e66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e6a:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002e6e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e70:	fab3 f383 	clz	r3, r3
 8002e74:	b2db      	uxtb	r3, r3
 8002e76:	095b      	lsrs	r3, r3, #5
 8002e78:	b2db      	uxtb	r3, r3
 8002e7a:	f043 0302 	orr.w	r3, r3, #2
 8002e7e:	b2db      	uxtb	r3, r3
 8002e80:	2b02      	cmp	r3, #2
 8002e82:	d102      	bne.n	8002e8a <HAL_RCC_OscConfig+0xb4e>
 8002e84:	4b43      	ldr	r3, [pc, #268]	; (8002f94 <HAL_RCC_OscConfig+0xc58>)
 8002e86:	6a1b      	ldr	r3, [r3, #32]
 8002e88:	e013      	b.n	8002eb2 <HAL_RCC_OscConfig+0xb76>
 8002e8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e8e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002e92:	2202      	movs	r2, #2
 8002e94:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e9a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	fa93 f2a3 	rbit	r2, r3
 8002ea4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ea8:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002eac:	601a      	str	r2, [r3, #0]
 8002eae:	4b39      	ldr	r3, [pc, #228]	; (8002f94 <HAL_RCC_OscConfig+0xc58>)
 8002eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eb2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002eb6:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8002eba:	2102      	movs	r1, #2
 8002ebc:	6011      	str	r1, [r2, #0]
 8002ebe:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002ec2:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8002ec6:	6812      	ldr	r2, [r2, #0]
 8002ec8:	fa92 f1a2 	rbit	r1, r2
 8002ecc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002ed0:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002ed4:	6011      	str	r1, [r2, #0]
  return result;
 8002ed6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002eda:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002ede:	6812      	ldr	r2, [r2, #0]
 8002ee0:	fab2 f282 	clz	r2, r2
 8002ee4:	b2d2      	uxtb	r2, r2
 8002ee6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002eea:	b2d2      	uxtb	r2, r2
 8002eec:	f002 021f 	and.w	r2, r2, #31
 8002ef0:	2101      	movs	r1, #1
 8002ef2:	fa01 f202 	lsl.w	r2, r1, r2
 8002ef6:	4013      	ands	r3, r2
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d184      	bne.n	8002e06 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002efc:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8002f00:	2b01      	cmp	r3, #1
 8002f02:	d105      	bne.n	8002f10 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f04:	4b23      	ldr	r3, [pc, #140]	; (8002f94 <HAL_RCC_OscConfig+0xc58>)
 8002f06:	69db      	ldr	r3, [r3, #28]
 8002f08:	4a22      	ldr	r2, [pc, #136]	; (8002f94 <HAL_RCC_OscConfig+0xc58>)
 8002f0a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f0e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f14:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	69db      	ldr	r3, [r3, #28]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	f000 8242 	beq.w	80033a6 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f22:	4b1c      	ldr	r3, [pc, #112]	; (8002f94 <HAL_RCC_OscConfig+0xc58>)
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	f003 030c 	and.w	r3, r3, #12
 8002f2a:	2b08      	cmp	r3, #8
 8002f2c:	f000 8213 	beq.w	8003356 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f34:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	69db      	ldr	r3, [r3, #28]
 8002f3c:	2b02      	cmp	r3, #2
 8002f3e:	f040 8162 	bne.w	8003206 <HAL_RCC_OscConfig+0xeca>
 8002f42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f46:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002f4a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002f4e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f50:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f54:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	fa93 f2a3 	rbit	r2, r3
 8002f5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f62:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002f66:	601a      	str	r2, [r3, #0]
  return result;
 8002f68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f6c:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002f70:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f72:	fab3 f383 	clz	r3, r3
 8002f76:	b2db      	uxtb	r3, r3
 8002f78:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002f7c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002f80:	009b      	lsls	r3, r3, #2
 8002f82:	461a      	mov	r2, r3
 8002f84:	2300      	movs	r3, #0
 8002f86:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f88:	f7fd ffa2 	bl	8000ed0 <HAL_GetTick>
 8002f8c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f90:	e00c      	b.n	8002fac <HAL_RCC_OscConfig+0xc70>
 8002f92:	bf00      	nop
 8002f94:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f98:	f7fd ff9a 	bl	8000ed0 <HAL_GetTick>
 8002f9c:	4602      	mov	r2, r0
 8002f9e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002fa2:	1ad3      	subs	r3, r2, r3
 8002fa4:	2b02      	cmp	r3, #2
 8002fa6:	d901      	bls.n	8002fac <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8002fa8:	2303      	movs	r3, #3
 8002faa:	e1fd      	b.n	80033a8 <HAL_RCC_OscConfig+0x106c>
 8002fac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fb0:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002fb4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002fb8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fbe:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	fa93 f2a3 	rbit	r2, r3
 8002fc8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fcc:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002fd0:	601a      	str	r2, [r3, #0]
  return result;
 8002fd2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fd6:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002fda:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002fdc:	fab3 f383 	clz	r3, r3
 8002fe0:	b2db      	uxtb	r3, r3
 8002fe2:	095b      	lsrs	r3, r3, #5
 8002fe4:	b2db      	uxtb	r3, r3
 8002fe6:	f043 0301 	orr.w	r3, r3, #1
 8002fea:	b2db      	uxtb	r3, r3
 8002fec:	2b01      	cmp	r3, #1
 8002fee:	d102      	bne.n	8002ff6 <HAL_RCC_OscConfig+0xcba>
 8002ff0:	4bb0      	ldr	r3, [pc, #704]	; (80032b4 <HAL_RCC_OscConfig+0xf78>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	e027      	b.n	8003046 <HAL_RCC_OscConfig+0xd0a>
 8002ff6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ffa:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002ffe:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003002:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003004:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003008:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	fa93 f2a3 	rbit	r2, r3
 8003012:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003016:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800301a:	601a      	str	r2, [r3, #0]
 800301c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003020:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8003024:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003028:	601a      	str	r2, [r3, #0]
 800302a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800302e:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	fa93 f2a3 	rbit	r2, r3
 8003038:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800303c:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8003040:	601a      	str	r2, [r3, #0]
 8003042:	4b9c      	ldr	r3, [pc, #624]	; (80032b4 <HAL_RCC_OscConfig+0xf78>)
 8003044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003046:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800304a:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 800304e:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003052:	6011      	str	r1, [r2, #0]
 8003054:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003058:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 800305c:	6812      	ldr	r2, [r2, #0]
 800305e:	fa92 f1a2 	rbit	r1, r2
 8003062:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003066:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800306a:	6011      	str	r1, [r2, #0]
  return result;
 800306c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003070:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003074:	6812      	ldr	r2, [r2, #0]
 8003076:	fab2 f282 	clz	r2, r2
 800307a:	b2d2      	uxtb	r2, r2
 800307c:	f042 0220 	orr.w	r2, r2, #32
 8003080:	b2d2      	uxtb	r2, r2
 8003082:	f002 021f 	and.w	r2, r2, #31
 8003086:	2101      	movs	r1, #1
 8003088:	fa01 f202 	lsl.w	r2, r1, r2
 800308c:	4013      	ands	r3, r2
 800308e:	2b00      	cmp	r3, #0
 8003090:	d182      	bne.n	8002f98 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003092:	4b88      	ldr	r3, [pc, #544]	; (80032b4 <HAL_RCC_OscConfig+0xf78>)
 8003094:	685b      	ldr	r3, [r3, #4]
 8003096:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800309a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800309e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80030a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030aa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	6a1b      	ldr	r3, [r3, #32]
 80030b2:	430b      	orrs	r3, r1
 80030b4:	497f      	ldr	r1, [pc, #508]	; (80032b4 <HAL_RCC_OscConfig+0xf78>)
 80030b6:	4313      	orrs	r3, r2
 80030b8:	604b      	str	r3, [r1, #4]
 80030ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030be:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80030c2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80030c6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030cc:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	fa93 f2a3 	rbit	r2, r3
 80030d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030da:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80030de:	601a      	str	r2, [r3, #0]
  return result;
 80030e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030e4:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80030e8:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80030ea:	fab3 f383 	clz	r3, r3
 80030ee:	b2db      	uxtb	r3, r3
 80030f0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80030f4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80030f8:	009b      	lsls	r3, r3, #2
 80030fa:	461a      	mov	r2, r3
 80030fc:	2301      	movs	r3, #1
 80030fe:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003100:	f7fd fee6 	bl	8000ed0 <HAL_GetTick>
 8003104:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003108:	e009      	b.n	800311e <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800310a:	f7fd fee1 	bl	8000ed0 <HAL_GetTick>
 800310e:	4602      	mov	r2, r0
 8003110:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003114:	1ad3      	subs	r3, r2, r3
 8003116:	2b02      	cmp	r3, #2
 8003118:	d901      	bls.n	800311e <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 800311a:	2303      	movs	r3, #3
 800311c:	e144      	b.n	80033a8 <HAL_RCC_OscConfig+0x106c>
 800311e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003122:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003126:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800312a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800312c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003130:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	fa93 f2a3 	rbit	r2, r3
 800313a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800313e:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003142:	601a      	str	r2, [r3, #0]
  return result;
 8003144:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003148:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800314c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800314e:	fab3 f383 	clz	r3, r3
 8003152:	b2db      	uxtb	r3, r3
 8003154:	095b      	lsrs	r3, r3, #5
 8003156:	b2db      	uxtb	r3, r3
 8003158:	f043 0301 	orr.w	r3, r3, #1
 800315c:	b2db      	uxtb	r3, r3
 800315e:	2b01      	cmp	r3, #1
 8003160:	d102      	bne.n	8003168 <HAL_RCC_OscConfig+0xe2c>
 8003162:	4b54      	ldr	r3, [pc, #336]	; (80032b4 <HAL_RCC_OscConfig+0xf78>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	e027      	b.n	80031b8 <HAL_RCC_OscConfig+0xe7c>
 8003168:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800316c:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003170:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003174:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003176:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800317a:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	fa93 f2a3 	rbit	r2, r3
 8003184:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003188:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800318c:	601a      	str	r2, [r3, #0]
 800318e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003192:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8003196:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800319a:	601a      	str	r2, [r3, #0]
 800319c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031a0:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	fa93 f2a3 	rbit	r2, r3
 80031aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031ae:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80031b2:	601a      	str	r2, [r3, #0]
 80031b4:	4b3f      	ldr	r3, [pc, #252]	; (80032b4 <HAL_RCC_OscConfig+0xf78>)
 80031b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031b8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80031bc:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80031c0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80031c4:	6011      	str	r1, [r2, #0]
 80031c6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80031ca:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80031ce:	6812      	ldr	r2, [r2, #0]
 80031d0:	fa92 f1a2 	rbit	r1, r2
 80031d4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80031d8:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80031dc:	6011      	str	r1, [r2, #0]
  return result;
 80031de:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80031e2:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80031e6:	6812      	ldr	r2, [r2, #0]
 80031e8:	fab2 f282 	clz	r2, r2
 80031ec:	b2d2      	uxtb	r2, r2
 80031ee:	f042 0220 	orr.w	r2, r2, #32
 80031f2:	b2d2      	uxtb	r2, r2
 80031f4:	f002 021f 	and.w	r2, r2, #31
 80031f8:	2101      	movs	r1, #1
 80031fa:	fa01 f202 	lsl.w	r2, r1, r2
 80031fe:	4013      	ands	r3, r2
 8003200:	2b00      	cmp	r3, #0
 8003202:	d082      	beq.n	800310a <HAL_RCC_OscConfig+0xdce>
 8003204:	e0cf      	b.n	80033a6 <HAL_RCC_OscConfig+0x106a>
 8003206:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800320a:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800320e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003212:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003214:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003218:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	fa93 f2a3 	rbit	r2, r3
 8003222:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003226:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800322a:	601a      	str	r2, [r3, #0]
  return result;
 800322c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003230:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003234:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003236:	fab3 f383 	clz	r3, r3
 800323a:	b2db      	uxtb	r3, r3
 800323c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003240:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003244:	009b      	lsls	r3, r3, #2
 8003246:	461a      	mov	r2, r3
 8003248:	2300      	movs	r3, #0
 800324a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800324c:	f7fd fe40 	bl	8000ed0 <HAL_GetTick>
 8003250:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003254:	e009      	b.n	800326a <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003256:	f7fd fe3b 	bl	8000ed0 <HAL_GetTick>
 800325a:	4602      	mov	r2, r0
 800325c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003260:	1ad3      	subs	r3, r2, r3
 8003262:	2b02      	cmp	r3, #2
 8003264:	d901      	bls.n	800326a <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8003266:	2303      	movs	r3, #3
 8003268:	e09e      	b.n	80033a8 <HAL_RCC_OscConfig+0x106c>
 800326a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800326e:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003272:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003276:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003278:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800327c:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	fa93 f2a3 	rbit	r2, r3
 8003286:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800328a:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800328e:	601a      	str	r2, [r3, #0]
  return result;
 8003290:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003294:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003298:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800329a:	fab3 f383 	clz	r3, r3
 800329e:	b2db      	uxtb	r3, r3
 80032a0:	095b      	lsrs	r3, r3, #5
 80032a2:	b2db      	uxtb	r3, r3
 80032a4:	f043 0301 	orr.w	r3, r3, #1
 80032a8:	b2db      	uxtb	r3, r3
 80032aa:	2b01      	cmp	r3, #1
 80032ac:	d104      	bne.n	80032b8 <HAL_RCC_OscConfig+0xf7c>
 80032ae:	4b01      	ldr	r3, [pc, #4]	; (80032b4 <HAL_RCC_OscConfig+0xf78>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	e029      	b.n	8003308 <HAL_RCC_OscConfig+0xfcc>
 80032b4:	40021000 	.word	0x40021000
 80032b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032bc:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80032c0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80032c4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032ca:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	fa93 f2a3 	rbit	r2, r3
 80032d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032d8:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80032dc:	601a      	str	r2, [r3, #0]
 80032de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032e2:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80032e6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80032ea:	601a      	str	r2, [r3, #0]
 80032ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032f0:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	fa93 f2a3 	rbit	r2, r3
 80032fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032fe:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8003302:	601a      	str	r2, [r3, #0]
 8003304:	4b2b      	ldr	r3, [pc, #172]	; (80033b4 <HAL_RCC_OscConfig+0x1078>)
 8003306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003308:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800330c:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8003310:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003314:	6011      	str	r1, [r2, #0]
 8003316:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800331a:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 800331e:	6812      	ldr	r2, [r2, #0]
 8003320:	fa92 f1a2 	rbit	r1, r2
 8003324:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003328:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800332c:	6011      	str	r1, [r2, #0]
  return result;
 800332e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003332:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8003336:	6812      	ldr	r2, [r2, #0]
 8003338:	fab2 f282 	clz	r2, r2
 800333c:	b2d2      	uxtb	r2, r2
 800333e:	f042 0220 	orr.w	r2, r2, #32
 8003342:	b2d2      	uxtb	r2, r2
 8003344:	f002 021f 	and.w	r2, r2, #31
 8003348:	2101      	movs	r1, #1
 800334a:	fa01 f202 	lsl.w	r2, r1, r2
 800334e:	4013      	ands	r3, r2
 8003350:	2b00      	cmp	r3, #0
 8003352:	d180      	bne.n	8003256 <HAL_RCC_OscConfig+0xf1a>
 8003354:	e027      	b.n	80033a6 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003356:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800335a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	69db      	ldr	r3, [r3, #28]
 8003362:	2b01      	cmp	r3, #1
 8003364:	d101      	bne.n	800336a <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8003366:	2301      	movs	r3, #1
 8003368:	e01e      	b.n	80033a8 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800336a:	4b12      	ldr	r3, [pc, #72]	; (80033b4 <HAL_RCC_OscConfig+0x1078>)
 800336c:	685b      	ldr	r3, [r3, #4]
 800336e:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003372:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003376:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800337a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800337e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	6a1b      	ldr	r3, [r3, #32]
 8003386:	429a      	cmp	r2, r3
 8003388:	d10b      	bne.n	80033a2 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800338a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800338e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003392:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003396:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800339e:	429a      	cmp	r2, r3
 80033a0:	d001      	beq.n	80033a6 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 80033a2:	2301      	movs	r3, #1
 80033a4:	e000      	b.n	80033a8 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 80033a6:	2300      	movs	r3, #0
}
 80033a8:	4618      	mov	r0, r3
 80033aa:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bd80      	pop	{r7, pc}
 80033b2:	bf00      	nop
 80033b4:	40021000 	.word	0x40021000

080033b8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b09e      	sub	sp, #120	; 0x78
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
 80033c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80033c2:	2300      	movs	r3, #0
 80033c4:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d101      	bne.n	80033d0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80033cc:	2301      	movs	r3, #1
 80033ce:	e162      	b.n	8003696 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80033d0:	4b90      	ldr	r3, [pc, #576]	; (8003614 <HAL_RCC_ClockConfig+0x25c>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f003 0307 	and.w	r3, r3, #7
 80033d8:	683a      	ldr	r2, [r7, #0]
 80033da:	429a      	cmp	r2, r3
 80033dc:	d910      	bls.n	8003400 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033de:	4b8d      	ldr	r3, [pc, #564]	; (8003614 <HAL_RCC_ClockConfig+0x25c>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f023 0207 	bic.w	r2, r3, #7
 80033e6:	498b      	ldr	r1, [pc, #556]	; (8003614 <HAL_RCC_ClockConfig+0x25c>)
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	4313      	orrs	r3, r2
 80033ec:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033ee:	4b89      	ldr	r3, [pc, #548]	; (8003614 <HAL_RCC_ClockConfig+0x25c>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f003 0307 	and.w	r3, r3, #7
 80033f6:	683a      	ldr	r2, [r7, #0]
 80033f8:	429a      	cmp	r2, r3
 80033fa:	d001      	beq.n	8003400 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80033fc:	2301      	movs	r3, #1
 80033fe:	e14a      	b.n	8003696 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f003 0302 	and.w	r3, r3, #2
 8003408:	2b00      	cmp	r3, #0
 800340a:	d008      	beq.n	800341e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800340c:	4b82      	ldr	r3, [pc, #520]	; (8003618 <HAL_RCC_ClockConfig+0x260>)
 800340e:	685b      	ldr	r3, [r3, #4]
 8003410:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	689b      	ldr	r3, [r3, #8]
 8003418:	497f      	ldr	r1, [pc, #508]	; (8003618 <HAL_RCC_ClockConfig+0x260>)
 800341a:	4313      	orrs	r3, r2
 800341c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f003 0301 	and.w	r3, r3, #1
 8003426:	2b00      	cmp	r3, #0
 8003428:	f000 80dc 	beq.w	80035e4 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	2b01      	cmp	r3, #1
 8003432:	d13c      	bne.n	80034ae <HAL_RCC_ClockConfig+0xf6>
 8003434:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003438:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800343a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800343c:	fa93 f3a3 	rbit	r3, r3
 8003440:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003442:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003444:	fab3 f383 	clz	r3, r3
 8003448:	b2db      	uxtb	r3, r3
 800344a:	095b      	lsrs	r3, r3, #5
 800344c:	b2db      	uxtb	r3, r3
 800344e:	f043 0301 	orr.w	r3, r3, #1
 8003452:	b2db      	uxtb	r3, r3
 8003454:	2b01      	cmp	r3, #1
 8003456:	d102      	bne.n	800345e <HAL_RCC_ClockConfig+0xa6>
 8003458:	4b6f      	ldr	r3, [pc, #444]	; (8003618 <HAL_RCC_ClockConfig+0x260>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	e00f      	b.n	800347e <HAL_RCC_ClockConfig+0xc6>
 800345e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003462:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003464:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003466:	fa93 f3a3 	rbit	r3, r3
 800346a:	667b      	str	r3, [r7, #100]	; 0x64
 800346c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003470:	663b      	str	r3, [r7, #96]	; 0x60
 8003472:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003474:	fa93 f3a3 	rbit	r3, r3
 8003478:	65fb      	str	r3, [r7, #92]	; 0x5c
 800347a:	4b67      	ldr	r3, [pc, #412]	; (8003618 <HAL_RCC_ClockConfig+0x260>)
 800347c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800347e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003482:	65ba      	str	r2, [r7, #88]	; 0x58
 8003484:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003486:	fa92 f2a2 	rbit	r2, r2
 800348a:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 800348c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800348e:	fab2 f282 	clz	r2, r2
 8003492:	b2d2      	uxtb	r2, r2
 8003494:	f042 0220 	orr.w	r2, r2, #32
 8003498:	b2d2      	uxtb	r2, r2
 800349a:	f002 021f 	and.w	r2, r2, #31
 800349e:	2101      	movs	r1, #1
 80034a0:	fa01 f202 	lsl.w	r2, r1, r2
 80034a4:	4013      	ands	r3, r2
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d17b      	bne.n	80035a2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80034aa:	2301      	movs	r3, #1
 80034ac:	e0f3      	b.n	8003696 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	685b      	ldr	r3, [r3, #4]
 80034b2:	2b02      	cmp	r3, #2
 80034b4:	d13c      	bne.n	8003530 <HAL_RCC_ClockConfig+0x178>
 80034b6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80034ba:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80034be:	fa93 f3a3 	rbit	r3, r3
 80034c2:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80034c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034c6:	fab3 f383 	clz	r3, r3
 80034ca:	b2db      	uxtb	r3, r3
 80034cc:	095b      	lsrs	r3, r3, #5
 80034ce:	b2db      	uxtb	r3, r3
 80034d0:	f043 0301 	orr.w	r3, r3, #1
 80034d4:	b2db      	uxtb	r3, r3
 80034d6:	2b01      	cmp	r3, #1
 80034d8:	d102      	bne.n	80034e0 <HAL_RCC_ClockConfig+0x128>
 80034da:	4b4f      	ldr	r3, [pc, #316]	; (8003618 <HAL_RCC_ClockConfig+0x260>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	e00f      	b.n	8003500 <HAL_RCC_ClockConfig+0x148>
 80034e0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80034e4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80034e8:	fa93 f3a3 	rbit	r3, r3
 80034ec:	647b      	str	r3, [r7, #68]	; 0x44
 80034ee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80034f2:	643b      	str	r3, [r7, #64]	; 0x40
 80034f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80034f6:	fa93 f3a3 	rbit	r3, r3
 80034fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80034fc:	4b46      	ldr	r3, [pc, #280]	; (8003618 <HAL_RCC_ClockConfig+0x260>)
 80034fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003500:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003504:	63ba      	str	r2, [r7, #56]	; 0x38
 8003506:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003508:	fa92 f2a2 	rbit	r2, r2
 800350c:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800350e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003510:	fab2 f282 	clz	r2, r2
 8003514:	b2d2      	uxtb	r2, r2
 8003516:	f042 0220 	orr.w	r2, r2, #32
 800351a:	b2d2      	uxtb	r2, r2
 800351c:	f002 021f 	and.w	r2, r2, #31
 8003520:	2101      	movs	r1, #1
 8003522:	fa01 f202 	lsl.w	r2, r1, r2
 8003526:	4013      	ands	r3, r2
 8003528:	2b00      	cmp	r3, #0
 800352a:	d13a      	bne.n	80035a2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800352c:	2301      	movs	r3, #1
 800352e:	e0b2      	b.n	8003696 <HAL_RCC_ClockConfig+0x2de>
 8003530:	2302      	movs	r3, #2
 8003532:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003534:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003536:	fa93 f3a3 	rbit	r3, r3
 800353a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800353c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800353e:	fab3 f383 	clz	r3, r3
 8003542:	b2db      	uxtb	r3, r3
 8003544:	095b      	lsrs	r3, r3, #5
 8003546:	b2db      	uxtb	r3, r3
 8003548:	f043 0301 	orr.w	r3, r3, #1
 800354c:	b2db      	uxtb	r3, r3
 800354e:	2b01      	cmp	r3, #1
 8003550:	d102      	bne.n	8003558 <HAL_RCC_ClockConfig+0x1a0>
 8003552:	4b31      	ldr	r3, [pc, #196]	; (8003618 <HAL_RCC_ClockConfig+0x260>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	e00d      	b.n	8003574 <HAL_RCC_ClockConfig+0x1bc>
 8003558:	2302      	movs	r3, #2
 800355a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800355c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800355e:	fa93 f3a3 	rbit	r3, r3
 8003562:	627b      	str	r3, [r7, #36]	; 0x24
 8003564:	2302      	movs	r3, #2
 8003566:	623b      	str	r3, [r7, #32]
 8003568:	6a3b      	ldr	r3, [r7, #32]
 800356a:	fa93 f3a3 	rbit	r3, r3
 800356e:	61fb      	str	r3, [r7, #28]
 8003570:	4b29      	ldr	r3, [pc, #164]	; (8003618 <HAL_RCC_ClockConfig+0x260>)
 8003572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003574:	2202      	movs	r2, #2
 8003576:	61ba      	str	r2, [r7, #24]
 8003578:	69ba      	ldr	r2, [r7, #24]
 800357a:	fa92 f2a2 	rbit	r2, r2
 800357e:	617a      	str	r2, [r7, #20]
  return result;
 8003580:	697a      	ldr	r2, [r7, #20]
 8003582:	fab2 f282 	clz	r2, r2
 8003586:	b2d2      	uxtb	r2, r2
 8003588:	f042 0220 	orr.w	r2, r2, #32
 800358c:	b2d2      	uxtb	r2, r2
 800358e:	f002 021f 	and.w	r2, r2, #31
 8003592:	2101      	movs	r1, #1
 8003594:	fa01 f202 	lsl.w	r2, r1, r2
 8003598:	4013      	ands	r3, r2
 800359a:	2b00      	cmp	r3, #0
 800359c:	d101      	bne.n	80035a2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800359e:	2301      	movs	r3, #1
 80035a0:	e079      	b.n	8003696 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80035a2:	4b1d      	ldr	r3, [pc, #116]	; (8003618 <HAL_RCC_ClockConfig+0x260>)
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	f023 0203 	bic.w	r2, r3, #3
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	491a      	ldr	r1, [pc, #104]	; (8003618 <HAL_RCC_ClockConfig+0x260>)
 80035b0:	4313      	orrs	r3, r2
 80035b2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80035b4:	f7fd fc8c 	bl	8000ed0 <HAL_GetTick>
 80035b8:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035ba:	e00a      	b.n	80035d2 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035bc:	f7fd fc88 	bl	8000ed0 <HAL_GetTick>
 80035c0:	4602      	mov	r2, r0
 80035c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80035c4:	1ad3      	subs	r3, r2, r3
 80035c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d901      	bls.n	80035d2 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80035ce:	2303      	movs	r3, #3
 80035d0:	e061      	b.n	8003696 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035d2:	4b11      	ldr	r3, [pc, #68]	; (8003618 <HAL_RCC_ClockConfig+0x260>)
 80035d4:	685b      	ldr	r3, [r3, #4]
 80035d6:	f003 020c 	and.w	r2, r3, #12
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	685b      	ldr	r3, [r3, #4]
 80035de:	009b      	lsls	r3, r3, #2
 80035e0:	429a      	cmp	r2, r3
 80035e2:	d1eb      	bne.n	80035bc <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80035e4:	4b0b      	ldr	r3, [pc, #44]	; (8003614 <HAL_RCC_ClockConfig+0x25c>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f003 0307 	and.w	r3, r3, #7
 80035ec:	683a      	ldr	r2, [r7, #0]
 80035ee:	429a      	cmp	r2, r3
 80035f0:	d214      	bcs.n	800361c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035f2:	4b08      	ldr	r3, [pc, #32]	; (8003614 <HAL_RCC_ClockConfig+0x25c>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f023 0207 	bic.w	r2, r3, #7
 80035fa:	4906      	ldr	r1, [pc, #24]	; (8003614 <HAL_RCC_ClockConfig+0x25c>)
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	4313      	orrs	r3, r2
 8003600:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003602:	4b04      	ldr	r3, [pc, #16]	; (8003614 <HAL_RCC_ClockConfig+0x25c>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f003 0307 	and.w	r3, r3, #7
 800360a:	683a      	ldr	r2, [r7, #0]
 800360c:	429a      	cmp	r2, r3
 800360e:	d005      	beq.n	800361c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003610:	2301      	movs	r3, #1
 8003612:	e040      	b.n	8003696 <HAL_RCC_ClockConfig+0x2de>
 8003614:	40022000 	.word	0x40022000
 8003618:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f003 0304 	and.w	r3, r3, #4
 8003624:	2b00      	cmp	r3, #0
 8003626:	d008      	beq.n	800363a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003628:	4b1d      	ldr	r3, [pc, #116]	; (80036a0 <HAL_RCC_ClockConfig+0x2e8>)
 800362a:	685b      	ldr	r3, [r3, #4]
 800362c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	68db      	ldr	r3, [r3, #12]
 8003634:	491a      	ldr	r1, [pc, #104]	; (80036a0 <HAL_RCC_ClockConfig+0x2e8>)
 8003636:	4313      	orrs	r3, r2
 8003638:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f003 0308 	and.w	r3, r3, #8
 8003642:	2b00      	cmp	r3, #0
 8003644:	d009      	beq.n	800365a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003646:	4b16      	ldr	r3, [pc, #88]	; (80036a0 <HAL_RCC_ClockConfig+0x2e8>)
 8003648:	685b      	ldr	r3, [r3, #4]
 800364a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	691b      	ldr	r3, [r3, #16]
 8003652:	00db      	lsls	r3, r3, #3
 8003654:	4912      	ldr	r1, [pc, #72]	; (80036a0 <HAL_RCC_ClockConfig+0x2e8>)
 8003656:	4313      	orrs	r3, r2
 8003658:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800365a:	f000 f829 	bl	80036b0 <HAL_RCC_GetSysClockFreq>
 800365e:	4601      	mov	r1, r0
 8003660:	4b0f      	ldr	r3, [pc, #60]	; (80036a0 <HAL_RCC_ClockConfig+0x2e8>)
 8003662:	685b      	ldr	r3, [r3, #4]
 8003664:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003668:	22f0      	movs	r2, #240	; 0xf0
 800366a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800366c:	693a      	ldr	r2, [r7, #16]
 800366e:	fa92 f2a2 	rbit	r2, r2
 8003672:	60fa      	str	r2, [r7, #12]
  return result;
 8003674:	68fa      	ldr	r2, [r7, #12]
 8003676:	fab2 f282 	clz	r2, r2
 800367a:	b2d2      	uxtb	r2, r2
 800367c:	40d3      	lsrs	r3, r2
 800367e:	4a09      	ldr	r2, [pc, #36]	; (80036a4 <HAL_RCC_ClockConfig+0x2ec>)
 8003680:	5cd3      	ldrb	r3, [r2, r3]
 8003682:	fa21 f303 	lsr.w	r3, r1, r3
 8003686:	4a08      	ldr	r2, [pc, #32]	; (80036a8 <HAL_RCC_ClockConfig+0x2f0>)
 8003688:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800368a:	4b08      	ldr	r3, [pc, #32]	; (80036ac <HAL_RCC_ClockConfig+0x2f4>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4618      	mov	r0, r3
 8003690:	f7fd faf2 	bl	8000c78 <HAL_InitTick>
  
  return HAL_OK;
 8003694:	2300      	movs	r3, #0
}
 8003696:	4618      	mov	r0, r3
 8003698:	3778      	adds	r7, #120	; 0x78
 800369a:	46bd      	mov	sp, r7
 800369c:	bd80      	pop	{r7, pc}
 800369e:	bf00      	nop
 80036a0:	40021000 	.word	0x40021000
 80036a4:	08008d04 	.word	0x08008d04
 80036a8:	20000000 	.word	0x20000000
 80036ac:	20000004 	.word	0x20000004

080036b0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80036b0:	b480      	push	{r7}
 80036b2:	b08b      	sub	sp, #44	; 0x2c
 80036b4:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80036b6:	2300      	movs	r3, #0
 80036b8:	61fb      	str	r3, [r7, #28]
 80036ba:	2300      	movs	r3, #0
 80036bc:	61bb      	str	r3, [r7, #24]
 80036be:	2300      	movs	r3, #0
 80036c0:	627b      	str	r3, [r7, #36]	; 0x24
 80036c2:	2300      	movs	r3, #0
 80036c4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80036c6:	2300      	movs	r3, #0
 80036c8:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80036ca:	4b29      	ldr	r3, [pc, #164]	; (8003770 <HAL_RCC_GetSysClockFreq+0xc0>)
 80036cc:	685b      	ldr	r3, [r3, #4]
 80036ce:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80036d0:	69fb      	ldr	r3, [r7, #28]
 80036d2:	f003 030c 	and.w	r3, r3, #12
 80036d6:	2b04      	cmp	r3, #4
 80036d8:	d002      	beq.n	80036e0 <HAL_RCC_GetSysClockFreq+0x30>
 80036da:	2b08      	cmp	r3, #8
 80036dc:	d003      	beq.n	80036e6 <HAL_RCC_GetSysClockFreq+0x36>
 80036de:	e03c      	b.n	800375a <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80036e0:	4b24      	ldr	r3, [pc, #144]	; (8003774 <HAL_RCC_GetSysClockFreq+0xc4>)
 80036e2:	623b      	str	r3, [r7, #32]
      break;
 80036e4:	e03c      	b.n	8003760 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80036e6:	69fb      	ldr	r3, [r7, #28]
 80036e8:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80036ec:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80036f0:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036f2:	68ba      	ldr	r2, [r7, #8]
 80036f4:	fa92 f2a2 	rbit	r2, r2
 80036f8:	607a      	str	r2, [r7, #4]
  return result;
 80036fa:	687a      	ldr	r2, [r7, #4]
 80036fc:	fab2 f282 	clz	r2, r2
 8003700:	b2d2      	uxtb	r2, r2
 8003702:	40d3      	lsrs	r3, r2
 8003704:	4a1c      	ldr	r2, [pc, #112]	; (8003778 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003706:	5cd3      	ldrb	r3, [r2, r3]
 8003708:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800370a:	4b19      	ldr	r3, [pc, #100]	; (8003770 <HAL_RCC_GetSysClockFreq+0xc0>)
 800370c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800370e:	f003 030f 	and.w	r3, r3, #15
 8003712:	220f      	movs	r2, #15
 8003714:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003716:	693a      	ldr	r2, [r7, #16]
 8003718:	fa92 f2a2 	rbit	r2, r2
 800371c:	60fa      	str	r2, [r7, #12]
  return result;
 800371e:	68fa      	ldr	r2, [r7, #12]
 8003720:	fab2 f282 	clz	r2, r2
 8003724:	b2d2      	uxtb	r2, r2
 8003726:	40d3      	lsrs	r3, r2
 8003728:	4a14      	ldr	r2, [pc, #80]	; (800377c <HAL_RCC_GetSysClockFreq+0xcc>)
 800372a:	5cd3      	ldrb	r3, [r2, r3]
 800372c:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800372e:	69fb      	ldr	r3, [r7, #28]
 8003730:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003734:	2b00      	cmp	r3, #0
 8003736:	d008      	beq.n	800374a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003738:	4a0e      	ldr	r2, [pc, #56]	; (8003774 <HAL_RCC_GetSysClockFreq+0xc4>)
 800373a:	69bb      	ldr	r3, [r7, #24]
 800373c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003740:	697b      	ldr	r3, [r7, #20]
 8003742:	fb02 f303 	mul.w	r3, r2, r3
 8003746:	627b      	str	r3, [r7, #36]	; 0x24
 8003748:	e004      	b.n	8003754 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800374a:	697b      	ldr	r3, [r7, #20]
 800374c:	4a0c      	ldr	r2, [pc, #48]	; (8003780 <HAL_RCC_GetSysClockFreq+0xd0>)
 800374e:	fb02 f303 	mul.w	r3, r2, r3
 8003752:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003756:	623b      	str	r3, [r7, #32]
      break;
 8003758:	e002      	b.n	8003760 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800375a:	4b06      	ldr	r3, [pc, #24]	; (8003774 <HAL_RCC_GetSysClockFreq+0xc4>)
 800375c:	623b      	str	r3, [r7, #32]
      break;
 800375e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003760:	6a3b      	ldr	r3, [r7, #32]
}
 8003762:	4618      	mov	r0, r3
 8003764:	372c      	adds	r7, #44	; 0x2c
 8003766:	46bd      	mov	sp, r7
 8003768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376c:	4770      	bx	lr
 800376e:	bf00      	nop
 8003770:	40021000 	.word	0x40021000
 8003774:	007a1200 	.word	0x007a1200
 8003778:	08008d1c 	.word	0x08008d1c
 800377c:	08008d2c 	.word	0x08008d2c
 8003780:	003d0900 	.word	0x003d0900

08003784 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003784:	b480      	push	{r7}
 8003786:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003788:	4b03      	ldr	r3, [pc, #12]	; (8003798 <HAL_RCC_GetHCLKFreq+0x14>)
 800378a:	681b      	ldr	r3, [r3, #0]
}
 800378c:	4618      	mov	r0, r3
 800378e:	46bd      	mov	sp, r7
 8003790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003794:	4770      	bx	lr
 8003796:	bf00      	nop
 8003798:	20000000 	.word	0x20000000

0800379c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b082      	sub	sp, #8
 80037a0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80037a2:	f7ff ffef 	bl	8003784 <HAL_RCC_GetHCLKFreq>
 80037a6:	4601      	mov	r1, r0
 80037a8:	4b0b      	ldr	r3, [pc, #44]	; (80037d8 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80037aa:	685b      	ldr	r3, [r3, #4]
 80037ac:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80037b0:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80037b4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037b6:	687a      	ldr	r2, [r7, #4]
 80037b8:	fa92 f2a2 	rbit	r2, r2
 80037bc:	603a      	str	r2, [r7, #0]
  return result;
 80037be:	683a      	ldr	r2, [r7, #0]
 80037c0:	fab2 f282 	clz	r2, r2
 80037c4:	b2d2      	uxtb	r2, r2
 80037c6:	40d3      	lsrs	r3, r2
 80037c8:	4a04      	ldr	r2, [pc, #16]	; (80037dc <HAL_RCC_GetPCLK1Freq+0x40>)
 80037ca:	5cd3      	ldrb	r3, [r2, r3]
 80037cc:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80037d0:	4618      	mov	r0, r3
 80037d2:	3708      	adds	r7, #8
 80037d4:	46bd      	mov	sp, r7
 80037d6:	bd80      	pop	{r7, pc}
 80037d8:	40021000 	.word	0x40021000
 80037dc:	08008d14 	.word	0x08008d14

080037e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b082      	sub	sp, #8
 80037e4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80037e6:	f7ff ffcd 	bl	8003784 <HAL_RCC_GetHCLKFreq>
 80037ea:	4601      	mov	r1, r0
 80037ec:	4b0b      	ldr	r3, [pc, #44]	; (800381c <HAL_RCC_GetPCLK2Freq+0x3c>)
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80037f4:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80037f8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037fa:	687a      	ldr	r2, [r7, #4]
 80037fc:	fa92 f2a2 	rbit	r2, r2
 8003800:	603a      	str	r2, [r7, #0]
  return result;
 8003802:	683a      	ldr	r2, [r7, #0]
 8003804:	fab2 f282 	clz	r2, r2
 8003808:	b2d2      	uxtb	r2, r2
 800380a:	40d3      	lsrs	r3, r2
 800380c:	4a04      	ldr	r2, [pc, #16]	; (8003820 <HAL_RCC_GetPCLK2Freq+0x40>)
 800380e:	5cd3      	ldrb	r3, [r2, r3]
 8003810:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003814:	4618      	mov	r0, r3
 8003816:	3708      	adds	r7, #8
 8003818:	46bd      	mov	sp, r7
 800381a:	bd80      	pop	{r7, pc}
 800381c:	40021000 	.word	0x40021000
 8003820:	08008d14 	.word	0x08008d14

08003824 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003824:	b480      	push	{r7}
 8003826:	b083      	sub	sp, #12
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
 800382c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	220f      	movs	r2, #15
 8003832:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003834:	4b12      	ldr	r3, [pc, #72]	; (8003880 <HAL_RCC_GetClockConfig+0x5c>)
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	f003 0203 	and.w	r2, r3, #3
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8003840:	4b0f      	ldr	r3, [pc, #60]	; (8003880 <HAL_RCC_GetClockConfig+0x5c>)
 8003842:	685b      	ldr	r3, [r3, #4]
 8003844:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 800384c:	4b0c      	ldr	r3, [pc, #48]	; (8003880 <HAL_RCC_GetClockConfig+0x5c>)
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003858:	4b09      	ldr	r3, [pc, #36]	; (8003880 <HAL_RCC_GetClockConfig+0x5c>)
 800385a:	685b      	ldr	r3, [r3, #4]
 800385c:	08db      	lsrs	r3, r3, #3
 800385e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 8003866:	4b07      	ldr	r3, [pc, #28]	; (8003884 <HAL_RCC_GetClockConfig+0x60>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f003 0207 	and.w	r2, r3, #7
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	601a      	str	r2, [r3, #0]
}
 8003872:	bf00      	nop
 8003874:	370c      	adds	r7, #12
 8003876:	46bd      	mov	sp, r7
 8003878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387c:	4770      	bx	lr
 800387e:	bf00      	nop
 8003880:	40021000 	.word	0x40021000
 8003884:	40022000 	.word	0x40022000

08003888 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b092      	sub	sp, #72	; 0x48
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003890:	2300      	movs	r3, #0
 8003892:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003894:	2300      	movs	r3, #0
 8003896:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003898:	2300      	movs	r3, #0
 800389a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	f000 80d4 	beq.w	8003a54 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80038ac:	4b4e      	ldr	r3, [pc, #312]	; (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038ae:	69db      	ldr	r3, [r3, #28]
 80038b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d10e      	bne.n	80038d6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80038b8:	4b4b      	ldr	r3, [pc, #300]	; (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038ba:	69db      	ldr	r3, [r3, #28]
 80038bc:	4a4a      	ldr	r2, [pc, #296]	; (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038c2:	61d3      	str	r3, [r2, #28]
 80038c4:	4b48      	ldr	r3, [pc, #288]	; (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038c6:	69db      	ldr	r3, [r3, #28]
 80038c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038cc:	60bb      	str	r3, [r7, #8]
 80038ce:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80038d0:	2301      	movs	r3, #1
 80038d2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038d6:	4b45      	ldr	r3, [pc, #276]	; (80039ec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d118      	bne.n	8003914 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80038e2:	4b42      	ldr	r3, [pc, #264]	; (80039ec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4a41      	ldr	r2, [pc, #260]	; (80039ec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80038e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038ec:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80038ee:	f7fd faef 	bl	8000ed0 <HAL_GetTick>
 80038f2:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038f4:	e008      	b.n	8003908 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038f6:	f7fd faeb 	bl	8000ed0 <HAL_GetTick>
 80038fa:	4602      	mov	r2, r0
 80038fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80038fe:	1ad3      	subs	r3, r2, r3
 8003900:	2b64      	cmp	r3, #100	; 0x64
 8003902:	d901      	bls.n	8003908 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003904:	2303      	movs	r3, #3
 8003906:	e14b      	b.n	8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x318>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003908:	4b38      	ldr	r3, [pc, #224]	; (80039ec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003910:	2b00      	cmp	r3, #0
 8003912:	d0f0      	beq.n	80038f6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003914:	4b34      	ldr	r3, [pc, #208]	; (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003916:	6a1b      	ldr	r3, [r3, #32]
 8003918:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800391c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800391e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003920:	2b00      	cmp	r3, #0
 8003922:	f000 8084 	beq.w	8003a2e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	685b      	ldr	r3, [r3, #4]
 800392a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800392e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003930:	429a      	cmp	r2, r3
 8003932:	d07c      	beq.n	8003a2e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003934:	4b2c      	ldr	r3, [pc, #176]	; (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003936:	6a1b      	ldr	r3, [r3, #32]
 8003938:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800393c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800393e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003942:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003944:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003946:	fa93 f3a3 	rbit	r3, r3
 800394a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800394c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800394e:	fab3 f383 	clz	r3, r3
 8003952:	b2db      	uxtb	r3, r3
 8003954:	461a      	mov	r2, r3
 8003956:	4b26      	ldr	r3, [pc, #152]	; (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003958:	4413      	add	r3, r2
 800395a:	009b      	lsls	r3, r3, #2
 800395c:	461a      	mov	r2, r3
 800395e:	2301      	movs	r3, #1
 8003960:	6013      	str	r3, [r2, #0]
 8003962:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003966:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003968:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800396a:	fa93 f3a3 	rbit	r3, r3
 800396e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003970:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003972:	fab3 f383 	clz	r3, r3
 8003976:	b2db      	uxtb	r3, r3
 8003978:	461a      	mov	r2, r3
 800397a:	4b1d      	ldr	r3, [pc, #116]	; (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800397c:	4413      	add	r3, r2
 800397e:	009b      	lsls	r3, r3, #2
 8003980:	461a      	mov	r2, r3
 8003982:	2300      	movs	r3, #0
 8003984:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003986:	4a18      	ldr	r2, [pc, #96]	; (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003988:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800398a:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800398c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800398e:	f003 0301 	and.w	r3, r3, #1
 8003992:	2b00      	cmp	r3, #0
 8003994:	d04b      	beq.n	8003a2e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003996:	f7fd fa9b 	bl	8000ed0 <HAL_GetTick>
 800399a:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800399c:	e00a      	b.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800399e:	f7fd fa97 	bl	8000ed0 <HAL_GetTick>
 80039a2:	4602      	mov	r2, r0
 80039a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80039a6:	1ad3      	subs	r3, r2, r3
 80039a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d901      	bls.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80039b0:	2303      	movs	r3, #3
 80039b2:	e0f5      	b.n	8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x318>
 80039b4:	2302      	movs	r3, #2
 80039b6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039ba:	fa93 f3a3 	rbit	r3, r3
 80039be:	627b      	str	r3, [r7, #36]	; 0x24
 80039c0:	2302      	movs	r3, #2
 80039c2:	623b      	str	r3, [r7, #32]
 80039c4:	6a3b      	ldr	r3, [r7, #32]
 80039c6:	fa93 f3a3 	rbit	r3, r3
 80039ca:	61fb      	str	r3, [r7, #28]
  return result;
 80039cc:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039ce:	fab3 f383 	clz	r3, r3
 80039d2:	b2db      	uxtb	r3, r3
 80039d4:	095b      	lsrs	r3, r3, #5
 80039d6:	b2db      	uxtb	r3, r3
 80039d8:	f043 0302 	orr.w	r3, r3, #2
 80039dc:	b2db      	uxtb	r3, r3
 80039de:	2b02      	cmp	r3, #2
 80039e0:	d108      	bne.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80039e2:	4b01      	ldr	r3, [pc, #4]	; (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039e4:	6a1b      	ldr	r3, [r3, #32]
 80039e6:	e00d      	b.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80039e8:	40021000 	.word	0x40021000
 80039ec:	40007000 	.word	0x40007000
 80039f0:	10908100 	.word	0x10908100
 80039f4:	2302      	movs	r3, #2
 80039f6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039f8:	69bb      	ldr	r3, [r7, #24]
 80039fa:	fa93 f3a3 	rbit	r3, r3
 80039fe:	617b      	str	r3, [r7, #20]
 8003a00:	4b69      	ldr	r3, [pc, #420]	; (8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a04:	2202      	movs	r2, #2
 8003a06:	613a      	str	r2, [r7, #16]
 8003a08:	693a      	ldr	r2, [r7, #16]
 8003a0a:	fa92 f2a2 	rbit	r2, r2
 8003a0e:	60fa      	str	r2, [r7, #12]
  return result;
 8003a10:	68fa      	ldr	r2, [r7, #12]
 8003a12:	fab2 f282 	clz	r2, r2
 8003a16:	b2d2      	uxtb	r2, r2
 8003a18:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003a1c:	b2d2      	uxtb	r2, r2
 8003a1e:	f002 021f 	and.w	r2, r2, #31
 8003a22:	2101      	movs	r1, #1
 8003a24:	fa01 f202 	lsl.w	r2, r1, r2
 8003a28:	4013      	ands	r3, r2
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d0b7      	beq.n	800399e <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003a2e:	4b5e      	ldr	r3, [pc, #376]	; (8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003a30:	6a1b      	ldr	r3, [r3, #32]
 8003a32:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	685b      	ldr	r3, [r3, #4]
 8003a3a:	495b      	ldr	r1, [pc, #364]	; (8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003a3c:	4313      	orrs	r3, r2
 8003a3e:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003a40:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003a44:	2b01      	cmp	r3, #1
 8003a46:	d105      	bne.n	8003a54 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a48:	4b57      	ldr	r3, [pc, #348]	; (8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003a4a:	69db      	ldr	r3, [r3, #28]
 8003a4c:	4a56      	ldr	r2, [pc, #344]	; (8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003a4e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a52:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f003 0301 	and.w	r3, r3, #1
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d008      	beq.n	8003a72 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003a60:	4b51      	ldr	r3, [pc, #324]	; (8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003a62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a64:	f023 0203 	bic.w	r2, r3, #3
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	689b      	ldr	r3, [r3, #8]
 8003a6c:	494e      	ldr	r1, [pc, #312]	; (8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003a6e:	4313      	orrs	r3, r2
 8003a70:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f003 0320 	and.w	r3, r3, #32
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d008      	beq.n	8003a90 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003a7e:	4b4a      	ldr	r3, [pc, #296]	; (8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a82:	f023 0210 	bic.w	r2, r3, #16
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	68db      	ldr	r3, [r3, #12]
 8003a8a:	4947      	ldr	r1, [pc, #284]	; (8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003a8c:	4313      	orrs	r3, r2
 8003a8e:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d008      	beq.n	8003aae <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003a9c:	4b42      	ldr	r3, [pc, #264]	; (8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aa8:	493f      	ldr	r1, [pc, #252]	; (8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003aaa:	4313      	orrs	r3, r2
 8003aac:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d008      	beq.n	8003acc <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003aba:	4b3b      	ldr	r3, [pc, #236]	; (8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003abe:	f023 0220 	bic.w	r2, r3, #32
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	691b      	ldr	r3, [r3, #16]
 8003ac6:	4938      	ldr	r1, [pc, #224]	; (8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003ac8:	4313      	orrs	r3, r2
 8003aca:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d008      	beq.n	8003aea <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003ad8:	4b33      	ldr	r3, [pc, #204]	; (8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003ada:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003adc:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	695b      	ldr	r3, [r3, #20]
 8003ae4:	4930      	ldr	r1, [pc, #192]	; (8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003ae6:	4313      	orrs	r3, r2
 8003ae8:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d008      	beq.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003af6:	4b2c      	ldr	r3, [pc, #176]	; (8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	69db      	ldr	r3, [r3, #28]
 8003b02:	4929      	ldr	r1, [pc, #164]	; (8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003b04:	4313      	orrs	r3, r2
 8003b06:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d008      	beq.n	8003b26 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 8003b14:	4b24      	ldr	r3, [pc, #144]	; (8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003b16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b18:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	699b      	ldr	r3, [r3, #24]
 8003b20:	4921      	ldr	r1, [pc, #132]	; (8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003b22:	4313      	orrs	r3, r2
 8003b24:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d008      	beq.n	8003b44 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003b32:	4b1d      	ldr	r3, [pc, #116]	; (8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b36:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6a1b      	ldr	r3, [r3, #32]
 8003b3e:	491a      	ldr	r1, [pc, #104]	; (8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003b40:	4313      	orrs	r3, r2
 8003b42:	630b      	str	r3, [r1, #48]	; 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d008      	beq.n	8003b62 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8003b50:	4b15      	ldr	r3, [pc, #84]	; (8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003b52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b54:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b5c:	4912      	ldr	r1, [pc, #72]	; (8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003b5e:	4313      	orrs	r3, r2
 8003b60:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d008      	beq.n	8003b80 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8003b6e:	4b0e      	ldr	r3, [pc, #56]	; (8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b72:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b7a:	490b      	ldr	r1, [pc, #44]	; (8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003b7c:	4313      	orrs	r3, r2
 8003b7e:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d008      	beq.n	8003b9e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8003b8c:	4b06      	ldr	r3, [pc, #24]	; (8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003b8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b90:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b98:	4903      	ldr	r1, [pc, #12]	; (8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003b9a:	4313      	orrs	r3, r2
 8003b9c:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003b9e:	2300      	movs	r3, #0
}
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	3748      	adds	r7, #72	; 0x48
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	bd80      	pop	{r7, pc}
 8003ba8:	40021000 	.word	0x40021000

08003bac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b082      	sub	sp, #8
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d101      	bne.n	8003bbe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003bba:	2301      	movs	r3, #1
 8003bbc:	e049      	b.n	8003c52 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bc4:	b2db      	uxtb	r3, r3
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d106      	bne.n	8003bd8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2200      	movs	r2, #0
 8003bce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003bd2:	6878      	ldr	r0, [r7, #4]
 8003bd4:	f000 f841 	bl	8003c5a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2202      	movs	r2, #2
 8003bdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681a      	ldr	r2, [r3, #0]
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	3304      	adds	r3, #4
 8003be8:	4619      	mov	r1, r3
 8003bea:	4610      	mov	r0, r2
 8003bec:	f000 f9dc 	bl	8003fa8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2201      	movs	r2, #1
 8003bf4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2201      	movs	r2, #1
 8003bfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2201      	movs	r2, #1
 8003c04:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2201      	movs	r2, #1
 8003c0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2201      	movs	r2, #1
 8003c14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2201      	movs	r2, #1
 8003c1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2201      	movs	r2, #1
 8003c24:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2201      	movs	r2, #1
 8003c2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2201      	movs	r2, #1
 8003c34:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2201      	movs	r2, #1
 8003c3c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2201      	movs	r2, #1
 8003c44:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2201      	movs	r2, #1
 8003c4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003c50:	2300      	movs	r3, #0
}
 8003c52:	4618      	mov	r0, r3
 8003c54:	3708      	adds	r7, #8
 8003c56:	46bd      	mov	sp, r7
 8003c58:	bd80      	pop	{r7, pc}

08003c5a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003c5a:	b480      	push	{r7}
 8003c5c:	b083      	sub	sp, #12
 8003c5e:	af00      	add	r7, sp, #0
 8003c60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003c62:	bf00      	nop
 8003c64:	370c      	adds	r7, #12
 8003c66:	46bd      	mov	sp, r7
 8003c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6c:	4770      	bx	lr
	...

08003c70 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003c70:	b480      	push	{r7}
 8003c72:	b085      	sub	sp, #20
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c7e:	b2db      	uxtb	r3, r3
 8003c80:	2b01      	cmp	r3, #1
 8003c82:	d001      	beq.n	8003c88 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003c84:	2301      	movs	r3, #1
 8003c86:	e03b      	b.n	8003d00 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2202      	movs	r2, #2
 8003c8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	68da      	ldr	r2, [r3, #12]
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f042 0201 	orr.w	r2, r2, #1
 8003c9e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4a19      	ldr	r2, [pc, #100]	; (8003d0c <HAL_TIM_Base_Start_IT+0x9c>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d009      	beq.n	8003cbe <HAL_TIM_Base_Start_IT+0x4e>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cb2:	d004      	beq.n	8003cbe <HAL_TIM_Base_Start_IT+0x4e>
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4a15      	ldr	r2, [pc, #84]	; (8003d10 <HAL_TIM_Base_Start_IT+0xa0>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d115      	bne.n	8003cea <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	689a      	ldr	r2, [r3, #8]
 8003cc4:	4b13      	ldr	r3, [pc, #76]	; (8003d14 <HAL_TIM_Base_Start_IT+0xa4>)
 8003cc6:	4013      	ands	r3, r2
 8003cc8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	2b06      	cmp	r3, #6
 8003cce:	d015      	beq.n	8003cfc <HAL_TIM_Base_Start_IT+0x8c>
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cd6:	d011      	beq.n	8003cfc <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	681a      	ldr	r2, [r3, #0]
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f042 0201 	orr.w	r2, r2, #1
 8003ce6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ce8:	e008      	b.n	8003cfc <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	681a      	ldr	r2, [r3, #0]
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f042 0201 	orr.w	r2, r2, #1
 8003cf8:	601a      	str	r2, [r3, #0]
 8003cfa:	e000      	b.n	8003cfe <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cfc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003cfe:	2300      	movs	r3, #0
}
 8003d00:	4618      	mov	r0, r3
 8003d02:	3714      	adds	r7, #20
 8003d04:	46bd      	mov	sp, r7
 8003d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0a:	4770      	bx	lr
 8003d0c:	40012c00 	.word	0x40012c00
 8003d10:	40014000 	.word	0x40014000
 8003d14:	00010007 	.word	0x00010007

08003d18 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b082      	sub	sp, #8
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	691b      	ldr	r3, [r3, #16]
 8003d26:	f003 0302 	and.w	r3, r3, #2
 8003d2a:	2b02      	cmp	r3, #2
 8003d2c:	d122      	bne.n	8003d74 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	68db      	ldr	r3, [r3, #12]
 8003d34:	f003 0302 	and.w	r3, r3, #2
 8003d38:	2b02      	cmp	r3, #2
 8003d3a:	d11b      	bne.n	8003d74 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f06f 0202 	mvn.w	r2, #2
 8003d44:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2201      	movs	r2, #1
 8003d4a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	699b      	ldr	r3, [r3, #24]
 8003d52:	f003 0303 	and.w	r3, r3, #3
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d003      	beq.n	8003d62 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003d5a:	6878      	ldr	r0, [r7, #4]
 8003d5c:	f000 f905 	bl	8003f6a <HAL_TIM_IC_CaptureCallback>
 8003d60:	e005      	b.n	8003d6e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d62:	6878      	ldr	r0, [r7, #4]
 8003d64:	f000 f8f7 	bl	8003f56 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d68:	6878      	ldr	r0, [r7, #4]
 8003d6a:	f000 f908 	bl	8003f7e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2200      	movs	r2, #0
 8003d72:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	691b      	ldr	r3, [r3, #16]
 8003d7a:	f003 0304 	and.w	r3, r3, #4
 8003d7e:	2b04      	cmp	r3, #4
 8003d80:	d122      	bne.n	8003dc8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	68db      	ldr	r3, [r3, #12]
 8003d88:	f003 0304 	and.w	r3, r3, #4
 8003d8c:	2b04      	cmp	r3, #4
 8003d8e:	d11b      	bne.n	8003dc8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f06f 0204 	mvn.w	r2, #4
 8003d98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2202      	movs	r2, #2
 8003d9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	699b      	ldr	r3, [r3, #24]
 8003da6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d003      	beq.n	8003db6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003dae:	6878      	ldr	r0, [r7, #4]
 8003db0:	f000 f8db 	bl	8003f6a <HAL_TIM_IC_CaptureCallback>
 8003db4:	e005      	b.n	8003dc2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003db6:	6878      	ldr	r0, [r7, #4]
 8003db8:	f000 f8cd 	bl	8003f56 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003dbc:	6878      	ldr	r0, [r7, #4]
 8003dbe:	f000 f8de 	bl	8003f7e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	691b      	ldr	r3, [r3, #16]
 8003dce:	f003 0308 	and.w	r3, r3, #8
 8003dd2:	2b08      	cmp	r3, #8
 8003dd4:	d122      	bne.n	8003e1c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	68db      	ldr	r3, [r3, #12]
 8003ddc:	f003 0308 	and.w	r3, r3, #8
 8003de0:	2b08      	cmp	r3, #8
 8003de2:	d11b      	bne.n	8003e1c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f06f 0208 	mvn.w	r2, #8
 8003dec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2204      	movs	r2, #4
 8003df2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	69db      	ldr	r3, [r3, #28]
 8003dfa:	f003 0303 	and.w	r3, r3, #3
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d003      	beq.n	8003e0a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e02:	6878      	ldr	r0, [r7, #4]
 8003e04:	f000 f8b1 	bl	8003f6a <HAL_TIM_IC_CaptureCallback>
 8003e08:	e005      	b.n	8003e16 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e0a:	6878      	ldr	r0, [r7, #4]
 8003e0c:	f000 f8a3 	bl	8003f56 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e10:	6878      	ldr	r0, [r7, #4]
 8003e12:	f000 f8b4 	bl	8003f7e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2200      	movs	r2, #0
 8003e1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	691b      	ldr	r3, [r3, #16]
 8003e22:	f003 0310 	and.w	r3, r3, #16
 8003e26:	2b10      	cmp	r3, #16
 8003e28:	d122      	bne.n	8003e70 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	68db      	ldr	r3, [r3, #12]
 8003e30:	f003 0310 	and.w	r3, r3, #16
 8003e34:	2b10      	cmp	r3, #16
 8003e36:	d11b      	bne.n	8003e70 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f06f 0210 	mvn.w	r2, #16
 8003e40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2208      	movs	r2, #8
 8003e46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	69db      	ldr	r3, [r3, #28]
 8003e4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d003      	beq.n	8003e5e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e56:	6878      	ldr	r0, [r7, #4]
 8003e58:	f000 f887 	bl	8003f6a <HAL_TIM_IC_CaptureCallback>
 8003e5c:	e005      	b.n	8003e6a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e5e:	6878      	ldr	r0, [r7, #4]
 8003e60:	f000 f879 	bl	8003f56 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e64:	6878      	ldr	r0, [r7, #4]
 8003e66:	f000 f88a 	bl	8003f7e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	691b      	ldr	r3, [r3, #16]
 8003e76:	f003 0301 	and.w	r3, r3, #1
 8003e7a:	2b01      	cmp	r3, #1
 8003e7c:	d10e      	bne.n	8003e9c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	68db      	ldr	r3, [r3, #12]
 8003e84:	f003 0301 	and.w	r3, r3, #1
 8003e88:	2b01      	cmp	r3, #1
 8003e8a:	d107      	bne.n	8003e9c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f06f 0201 	mvn.w	r2, #1
 8003e94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003e96:	6878      	ldr	r0, [r7, #4]
 8003e98:	f7fc fe03 	bl	8000aa2 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	691b      	ldr	r3, [r3, #16]
 8003ea2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ea6:	2b80      	cmp	r3, #128	; 0x80
 8003ea8:	d10e      	bne.n	8003ec8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	68db      	ldr	r3, [r3, #12]
 8003eb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003eb4:	2b80      	cmp	r3, #128	; 0x80
 8003eb6:	d107      	bne.n	8003ec8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003ec0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003ec2:	6878      	ldr	r0, [r7, #4]
 8003ec4:	f000 f8e8 	bl	8004098 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	691b      	ldr	r3, [r3, #16]
 8003ece:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ed2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ed6:	d10e      	bne.n	8003ef6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	68db      	ldr	r3, [r3, #12]
 8003ede:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ee2:	2b80      	cmp	r3, #128	; 0x80
 8003ee4:	d107      	bne.n	8003ef6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003eee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003ef0:	6878      	ldr	r0, [r7, #4]
 8003ef2:	f000 f8db 	bl	80040ac <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	691b      	ldr	r3, [r3, #16]
 8003efc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f00:	2b40      	cmp	r3, #64	; 0x40
 8003f02:	d10e      	bne.n	8003f22 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	68db      	ldr	r3, [r3, #12]
 8003f0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f0e:	2b40      	cmp	r3, #64	; 0x40
 8003f10:	d107      	bne.n	8003f22 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003f1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003f1c:	6878      	ldr	r0, [r7, #4]
 8003f1e:	f000 f838 	bl	8003f92 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	691b      	ldr	r3, [r3, #16]
 8003f28:	f003 0320 	and.w	r3, r3, #32
 8003f2c:	2b20      	cmp	r3, #32
 8003f2e:	d10e      	bne.n	8003f4e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	68db      	ldr	r3, [r3, #12]
 8003f36:	f003 0320 	and.w	r3, r3, #32
 8003f3a:	2b20      	cmp	r3, #32
 8003f3c:	d107      	bne.n	8003f4e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f06f 0220 	mvn.w	r2, #32
 8003f46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003f48:	6878      	ldr	r0, [r7, #4]
 8003f4a:	f000 f89b 	bl	8004084 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003f4e:	bf00      	nop
 8003f50:	3708      	adds	r7, #8
 8003f52:	46bd      	mov	sp, r7
 8003f54:	bd80      	pop	{r7, pc}

08003f56 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003f56:	b480      	push	{r7}
 8003f58:	b083      	sub	sp, #12
 8003f5a:	af00      	add	r7, sp, #0
 8003f5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003f5e:	bf00      	nop
 8003f60:	370c      	adds	r7, #12
 8003f62:	46bd      	mov	sp, r7
 8003f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f68:	4770      	bx	lr

08003f6a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003f6a:	b480      	push	{r7}
 8003f6c:	b083      	sub	sp, #12
 8003f6e:	af00      	add	r7, sp, #0
 8003f70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003f72:	bf00      	nop
 8003f74:	370c      	adds	r7, #12
 8003f76:	46bd      	mov	sp, r7
 8003f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7c:	4770      	bx	lr

08003f7e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003f7e:	b480      	push	{r7}
 8003f80:	b083      	sub	sp, #12
 8003f82:	af00      	add	r7, sp, #0
 8003f84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003f86:	bf00      	nop
 8003f88:	370c      	adds	r7, #12
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f90:	4770      	bx	lr

08003f92 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003f92:	b480      	push	{r7}
 8003f94:	b083      	sub	sp, #12
 8003f96:	af00      	add	r7, sp, #0
 8003f98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003f9a:	bf00      	nop
 8003f9c:	370c      	adds	r7, #12
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa4:	4770      	bx	lr
	...

08003fa8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003fa8:	b480      	push	{r7}
 8003faa:	b085      	sub	sp, #20
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
 8003fb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	4a2e      	ldr	r2, [pc, #184]	; (8004074 <TIM_Base_SetConfig+0xcc>)
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d003      	beq.n	8003fc8 <TIM_Base_SetConfig+0x20>
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fc6:	d108      	bne.n	8003fda <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	685b      	ldr	r3, [r3, #4]
 8003fd4:	68fa      	ldr	r2, [r7, #12]
 8003fd6:	4313      	orrs	r3, r2
 8003fd8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	4a25      	ldr	r2, [pc, #148]	; (8004074 <TIM_Base_SetConfig+0xcc>)
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d00f      	beq.n	8004002 <TIM_Base_SetConfig+0x5a>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fe8:	d00b      	beq.n	8004002 <TIM_Base_SetConfig+0x5a>
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	4a22      	ldr	r2, [pc, #136]	; (8004078 <TIM_Base_SetConfig+0xd0>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d007      	beq.n	8004002 <TIM_Base_SetConfig+0x5a>
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	4a21      	ldr	r2, [pc, #132]	; (800407c <TIM_Base_SetConfig+0xd4>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d003      	beq.n	8004002 <TIM_Base_SetConfig+0x5a>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	4a20      	ldr	r2, [pc, #128]	; (8004080 <TIM_Base_SetConfig+0xd8>)
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d108      	bne.n	8004014 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004008:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	68db      	ldr	r3, [r3, #12]
 800400e:	68fa      	ldr	r2, [r7, #12]
 8004010:	4313      	orrs	r3, r2
 8004012:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	695b      	ldr	r3, [r3, #20]
 800401e:	4313      	orrs	r3, r2
 8004020:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	68fa      	ldr	r2, [r7, #12]
 8004026:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	689a      	ldr	r2, [r3, #8]
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	681a      	ldr	r2, [r3, #0]
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	4a0e      	ldr	r2, [pc, #56]	; (8004074 <TIM_Base_SetConfig+0xcc>)
 800403c:	4293      	cmp	r3, r2
 800403e:	d00b      	beq.n	8004058 <TIM_Base_SetConfig+0xb0>
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	4a0d      	ldr	r2, [pc, #52]	; (8004078 <TIM_Base_SetConfig+0xd0>)
 8004044:	4293      	cmp	r3, r2
 8004046:	d007      	beq.n	8004058 <TIM_Base_SetConfig+0xb0>
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	4a0c      	ldr	r2, [pc, #48]	; (800407c <TIM_Base_SetConfig+0xd4>)
 800404c:	4293      	cmp	r3, r2
 800404e:	d003      	beq.n	8004058 <TIM_Base_SetConfig+0xb0>
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	4a0b      	ldr	r2, [pc, #44]	; (8004080 <TIM_Base_SetConfig+0xd8>)
 8004054:	4293      	cmp	r3, r2
 8004056:	d103      	bne.n	8004060 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	691a      	ldr	r2, [r3, #16]
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2201      	movs	r2, #1
 8004064:	615a      	str	r2, [r3, #20]
}
 8004066:	bf00      	nop
 8004068:	3714      	adds	r7, #20
 800406a:	46bd      	mov	sp, r7
 800406c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004070:	4770      	bx	lr
 8004072:	bf00      	nop
 8004074:	40012c00 	.word	0x40012c00
 8004078:	40014000 	.word	0x40014000
 800407c:	40014400 	.word	0x40014400
 8004080:	40014800 	.word	0x40014800

08004084 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004084:	b480      	push	{r7}
 8004086:	b083      	sub	sp, #12
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800408c:	bf00      	nop
 800408e:	370c      	adds	r7, #12
 8004090:	46bd      	mov	sp, r7
 8004092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004096:	4770      	bx	lr

08004098 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004098:	b480      	push	{r7}
 800409a:	b083      	sub	sp, #12
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80040a0:	bf00      	nop
 80040a2:	370c      	adds	r7, #12
 80040a4:	46bd      	mov	sp, r7
 80040a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040aa:	4770      	bx	lr

080040ac <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80040ac:	b480      	push	{r7}
 80040ae:	b083      	sub	sp, #12
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80040b4:	bf00      	nop
 80040b6:	370c      	adds	r7, #12
 80040b8:	46bd      	mov	sp, r7
 80040ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040be:	4770      	bx	lr

080040c0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b082      	sub	sp, #8
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d101      	bne.n	80040d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80040ce:	2301      	movs	r3, #1
 80040d0:	e040      	b.n	8004154 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d106      	bne.n	80040e8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2200      	movs	r2, #0
 80040de:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80040e2:	6878      	ldr	r0, [r7, #4]
 80040e4:	f7fc fd84 	bl	8000bf0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2224      	movs	r2, #36	; 0x24
 80040ec:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	681a      	ldr	r2, [r3, #0]
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f022 0201 	bic.w	r2, r2, #1
 80040fc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80040fe:	6878      	ldr	r0, [r7, #4]
 8004100:	f000 f8b6 	bl	8004270 <UART_SetConfig>
 8004104:	4603      	mov	r3, r0
 8004106:	2b01      	cmp	r3, #1
 8004108:	d101      	bne.n	800410e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800410a:	2301      	movs	r3, #1
 800410c:	e022      	b.n	8004154 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004112:	2b00      	cmp	r3, #0
 8004114:	d002      	beq.n	800411c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004116:	6878      	ldr	r0, [r7, #4]
 8004118:	f000 f9e0 	bl	80044dc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	685a      	ldr	r2, [r3, #4]
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800412a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	689a      	ldr	r2, [r3, #8]
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800413a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	681a      	ldr	r2, [r3, #0]
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f042 0201 	orr.w	r2, r2, #1
 800414a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800414c:	6878      	ldr	r0, [r7, #4]
 800414e:	f000 fa67 	bl	8004620 <UART_CheckIdleState>
 8004152:	4603      	mov	r3, r0
}
 8004154:	4618      	mov	r0, r3
 8004156:	3708      	adds	r7, #8
 8004158:	46bd      	mov	sp, r7
 800415a:	bd80      	pop	{r7, pc}

0800415c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b08a      	sub	sp, #40	; 0x28
 8004160:	af02      	add	r7, sp, #8
 8004162:	60f8      	str	r0, [r7, #12]
 8004164:	60b9      	str	r1, [r7, #8]
 8004166:	603b      	str	r3, [r7, #0]
 8004168:	4613      	mov	r3, r2
 800416a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004170:	2b20      	cmp	r3, #32
 8004172:	d178      	bne.n	8004266 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004174:	68bb      	ldr	r3, [r7, #8]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d002      	beq.n	8004180 <HAL_UART_Transmit+0x24>
 800417a:	88fb      	ldrh	r3, [r7, #6]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d101      	bne.n	8004184 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004180:	2301      	movs	r3, #1
 8004182:	e071      	b.n	8004268 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	2200      	movs	r2, #0
 8004188:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	2221      	movs	r2, #33	; 0x21
 8004190:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004192:	f7fc fe9d 	bl	8000ed0 <HAL_GetTick>
 8004196:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	88fa      	ldrh	r2, [r7, #6]
 800419c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	88fa      	ldrh	r2, [r7, #6]
 80041a4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	689b      	ldr	r3, [r3, #8]
 80041ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041b0:	d108      	bne.n	80041c4 <HAL_UART_Transmit+0x68>
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	691b      	ldr	r3, [r3, #16]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d104      	bne.n	80041c4 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80041ba:	2300      	movs	r3, #0
 80041bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80041be:	68bb      	ldr	r3, [r7, #8]
 80041c0:	61bb      	str	r3, [r7, #24]
 80041c2:	e003      	b.n	80041cc <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80041c4:	68bb      	ldr	r3, [r7, #8]
 80041c6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80041c8:	2300      	movs	r3, #0
 80041ca:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80041cc:	e030      	b.n	8004230 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	9300      	str	r3, [sp, #0]
 80041d2:	697b      	ldr	r3, [r7, #20]
 80041d4:	2200      	movs	r2, #0
 80041d6:	2180      	movs	r1, #128	; 0x80
 80041d8:	68f8      	ldr	r0, [r7, #12]
 80041da:	f000 fac9 	bl	8004770 <UART_WaitOnFlagUntilTimeout>
 80041de:	4603      	mov	r3, r0
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d004      	beq.n	80041ee <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	2220      	movs	r2, #32
 80041e8:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80041ea:	2303      	movs	r3, #3
 80041ec:	e03c      	b.n	8004268 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 80041ee:	69fb      	ldr	r3, [r7, #28]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d10b      	bne.n	800420c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80041f4:	69bb      	ldr	r3, [r7, #24]
 80041f6:	881a      	ldrh	r2, [r3, #0]
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004200:	b292      	uxth	r2, r2
 8004202:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004204:	69bb      	ldr	r3, [r7, #24]
 8004206:	3302      	adds	r3, #2
 8004208:	61bb      	str	r3, [r7, #24]
 800420a:	e008      	b.n	800421e <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800420c:	69fb      	ldr	r3, [r7, #28]
 800420e:	781a      	ldrb	r2, [r3, #0]
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	b292      	uxth	r2, r2
 8004216:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004218:	69fb      	ldr	r3, [r7, #28]
 800421a:	3301      	adds	r3, #1
 800421c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004224:	b29b      	uxth	r3, r3
 8004226:	3b01      	subs	r3, #1
 8004228:	b29a      	uxth	r2, r3
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004236:	b29b      	uxth	r3, r3
 8004238:	2b00      	cmp	r3, #0
 800423a:	d1c8      	bne.n	80041ce <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	9300      	str	r3, [sp, #0]
 8004240:	697b      	ldr	r3, [r7, #20]
 8004242:	2200      	movs	r2, #0
 8004244:	2140      	movs	r1, #64	; 0x40
 8004246:	68f8      	ldr	r0, [r7, #12]
 8004248:	f000 fa92 	bl	8004770 <UART_WaitOnFlagUntilTimeout>
 800424c:	4603      	mov	r3, r0
 800424e:	2b00      	cmp	r3, #0
 8004250:	d004      	beq.n	800425c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	2220      	movs	r2, #32
 8004256:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8004258:	2303      	movs	r3, #3
 800425a:	e005      	b.n	8004268 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	2220      	movs	r2, #32
 8004260:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004262:	2300      	movs	r3, #0
 8004264:	e000      	b.n	8004268 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8004266:	2302      	movs	r3, #2
  }
}
 8004268:	4618      	mov	r0, r3
 800426a:	3720      	adds	r7, #32
 800426c:	46bd      	mov	sp, r7
 800426e:	bd80      	pop	{r7, pc}

08004270 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004270:	b580      	push	{r7, lr}
 8004272:	b088      	sub	sp, #32
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004278:	2300      	movs	r3, #0
 800427a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	689a      	ldr	r2, [r3, #8]
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	691b      	ldr	r3, [r3, #16]
 8004284:	431a      	orrs	r2, r3
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	695b      	ldr	r3, [r3, #20]
 800428a:	431a      	orrs	r2, r3
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	69db      	ldr	r3, [r3, #28]
 8004290:	4313      	orrs	r3, r2
 8004292:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	681a      	ldr	r2, [r3, #0]
 800429a:	4b8a      	ldr	r3, [pc, #552]	; (80044c4 <UART_SetConfig+0x254>)
 800429c:	4013      	ands	r3, r2
 800429e:	687a      	ldr	r2, [r7, #4]
 80042a0:	6812      	ldr	r2, [r2, #0]
 80042a2:	6979      	ldr	r1, [r7, #20]
 80042a4:	430b      	orrs	r3, r1
 80042a6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	685b      	ldr	r3, [r3, #4]
 80042ae:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	68da      	ldr	r2, [r3, #12]
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	430a      	orrs	r2, r1
 80042bc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	699b      	ldr	r3, [r3, #24]
 80042c2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6a1b      	ldr	r3, [r3, #32]
 80042c8:	697a      	ldr	r2, [r7, #20]
 80042ca:	4313      	orrs	r3, r2
 80042cc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	689b      	ldr	r3, [r3, #8]
 80042d4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	697a      	ldr	r2, [r7, #20]
 80042de:	430a      	orrs	r2, r1
 80042e0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	4a78      	ldr	r2, [pc, #480]	; (80044c8 <UART_SetConfig+0x258>)
 80042e8:	4293      	cmp	r3, r2
 80042ea:	d120      	bne.n	800432e <UART_SetConfig+0xbe>
 80042ec:	4b77      	ldr	r3, [pc, #476]	; (80044cc <UART_SetConfig+0x25c>)
 80042ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042f0:	f003 0303 	and.w	r3, r3, #3
 80042f4:	2b03      	cmp	r3, #3
 80042f6:	d817      	bhi.n	8004328 <UART_SetConfig+0xb8>
 80042f8:	a201      	add	r2, pc, #4	; (adr r2, 8004300 <UART_SetConfig+0x90>)
 80042fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042fe:	bf00      	nop
 8004300:	08004311 	.word	0x08004311
 8004304:	0800431d 	.word	0x0800431d
 8004308:	08004323 	.word	0x08004323
 800430c:	08004317 	.word	0x08004317
 8004310:	2300      	movs	r3, #0
 8004312:	77fb      	strb	r3, [r7, #31]
 8004314:	e01d      	b.n	8004352 <UART_SetConfig+0xe2>
 8004316:	2302      	movs	r3, #2
 8004318:	77fb      	strb	r3, [r7, #31]
 800431a:	e01a      	b.n	8004352 <UART_SetConfig+0xe2>
 800431c:	2304      	movs	r3, #4
 800431e:	77fb      	strb	r3, [r7, #31]
 8004320:	e017      	b.n	8004352 <UART_SetConfig+0xe2>
 8004322:	2308      	movs	r3, #8
 8004324:	77fb      	strb	r3, [r7, #31]
 8004326:	e014      	b.n	8004352 <UART_SetConfig+0xe2>
 8004328:	2310      	movs	r3, #16
 800432a:	77fb      	strb	r3, [r7, #31]
 800432c:	e011      	b.n	8004352 <UART_SetConfig+0xe2>
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	4a67      	ldr	r2, [pc, #412]	; (80044d0 <UART_SetConfig+0x260>)
 8004334:	4293      	cmp	r3, r2
 8004336:	d102      	bne.n	800433e <UART_SetConfig+0xce>
 8004338:	2300      	movs	r3, #0
 800433a:	77fb      	strb	r3, [r7, #31]
 800433c:	e009      	b.n	8004352 <UART_SetConfig+0xe2>
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	4a64      	ldr	r2, [pc, #400]	; (80044d4 <UART_SetConfig+0x264>)
 8004344:	4293      	cmp	r3, r2
 8004346:	d102      	bne.n	800434e <UART_SetConfig+0xde>
 8004348:	2300      	movs	r3, #0
 800434a:	77fb      	strb	r3, [r7, #31]
 800434c:	e001      	b.n	8004352 <UART_SetConfig+0xe2>
 800434e:	2310      	movs	r3, #16
 8004350:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	69db      	ldr	r3, [r3, #28]
 8004356:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800435a:	d15a      	bne.n	8004412 <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 800435c:	7ffb      	ldrb	r3, [r7, #31]
 800435e:	2b08      	cmp	r3, #8
 8004360:	d827      	bhi.n	80043b2 <UART_SetConfig+0x142>
 8004362:	a201      	add	r2, pc, #4	; (adr r2, 8004368 <UART_SetConfig+0xf8>)
 8004364:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004368:	0800438d 	.word	0x0800438d
 800436c:	08004395 	.word	0x08004395
 8004370:	0800439d 	.word	0x0800439d
 8004374:	080043b3 	.word	0x080043b3
 8004378:	080043a3 	.word	0x080043a3
 800437c:	080043b3 	.word	0x080043b3
 8004380:	080043b3 	.word	0x080043b3
 8004384:	080043b3 	.word	0x080043b3
 8004388:	080043ab 	.word	0x080043ab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800438c:	f7ff fa06 	bl	800379c <HAL_RCC_GetPCLK1Freq>
 8004390:	61b8      	str	r0, [r7, #24]
        break;
 8004392:	e013      	b.n	80043bc <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004394:	f7ff fa24 	bl	80037e0 <HAL_RCC_GetPCLK2Freq>
 8004398:	61b8      	str	r0, [r7, #24]
        break;
 800439a:	e00f      	b.n	80043bc <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800439c:	4b4e      	ldr	r3, [pc, #312]	; (80044d8 <UART_SetConfig+0x268>)
 800439e:	61bb      	str	r3, [r7, #24]
        break;
 80043a0:	e00c      	b.n	80043bc <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80043a2:	f7ff f985 	bl	80036b0 <HAL_RCC_GetSysClockFreq>
 80043a6:	61b8      	str	r0, [r7, #24]
        break;
 80043a8:	e008      	b.n	80043bc <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80043aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80043ae:	61bb      	str	r3, [r7, #24]
        break;
 80043b0:	e004      	b.n	80043bc <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 80043b2:	2300      	movs	r3, #0
 80043b4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80043b6:	2301      	movs	r3, #1
 80043b8:	77bb      	strb	r3, [r7, #30]
        break;
 80043ba:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80043bc:	69bb      	ldr	r3, [r7, #24]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d074      	beq.n	80044ac <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80043c2:	69bb      	ldr	r3, [r7, #24]
 80043c4:	005a      	lsls	r2, r3, #1
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	685b      	ldr	r3, [r3, #4]
 80043ca:	085b      	lsrs	r3, r3, #1
 80043cc:	441a      	add	r2, r3
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	685b      	ldr	r3, [r3, #4]
 80043d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80043d6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80043d8:	693b      	ldr	r3, [r7, #16]
 80043da:	2b0f      	cmp	r3, #15
 80043dc:	d916      	bls.n	800440c <UART_SetConfig+0x19c>
 80043de:	693b      	ldr	r3, [r7, #16]
 80043e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043e4:	d212      	bcs.n	800440c <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80043e6:	693b      	ldr	r3, [r7, #16]
 80043e8:	b29b      	uxth	r3, r3
 80043ea:	f023 030f 	bic.w	r3, r3, #15
 80043ee:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80043f0:	693b      	ldr	r3, [r7, #16]
 80043f2:	085b      	lsrs	r3, r3, #1
 80043f4:	b29b      	uxth	r3, r3
 80043f6:	f003 0307 	and.w	r3, r3, #7
 80043fa:	b29a      	uxth	r2, r3
 80043fc:	89fb      	ldrh	r3, [r7, #14]
 80043fe:	4313      	orrs	r3, r2
 8004400:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	89fa      	ldrh	r2, [r7, #14]
 8004408:	60da      	str	r2, [r3, #12]
 800440a:	e04f      	b.n	80044ac <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 800440c:	2301      	movs	r3, #1
 800440e:	77bb      	strb	r3, [r7, #30]
 8004410:	e04c      	b.n	80044ac <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004412:	7ffb      	ldrb	r3, [r7, #31]
 8004414:	2b08      	cmp	r3, #8
 8004416:	d828      	bhi.n	800446a <UART_SetConfig+0x1fa>
 8004418:	a201      	add	r2, pc, #4	; (adr r2, 8004420 <UART_SetConfig+0x1b0>)
 800441a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800441e:	bf00      	nop
 8004420:	08004445 	.word	0x08004445
 8004424:	0800444d 	.word	0x0800444d
 8004428:	08004455 	.word	0x08004455
 800442c:	0800446b 	.word	0x0800446b
 8004430:	0800445b 	.word	0x0800445b
 8004434:	0800446b 	.word	0x0800446b
 8004438:	0800446b 	.word	0x0800446b
 800443c:	0800446b 	.word	0x0800446b
 8004440:	08004463 	.word	0x08004463
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004444:	f7ff f9aa 	bl	800379c <HAL_RCC_GetPCLK1Freq>
 8004448:	61b8      	str	r0, [r7, #24]
        break;
 800444a:	e013      	b.n	8004474 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800444c:	f7ff f9c8 	bl	80037e0 <HAL_RCC_GetPCLK2Freq>
 8004450:	61b8      	str	r0, [r7, #24]
        break;
 8004452:	e00f      	b.n	8004474 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004454:	4b20      	ldr	r3, [pc, #128]	; (80044d8 <UART_SetConfig+0x268>)
 8004456:	61bb      	str	r3, [r7, #24]
        break;
 8004458:	e00c      	b.n	8004474 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800445a:	f7ff f929 	bl	80036b0 <HAL_RCC_GetSysClockFreq>
 800445e:	61b8      	str	r0, [r7, #24]
        break;
 8004460:	e008      	b.n	8004474 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004462:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004466:	61bb      	str	r3, [r7, #24]
        break;
 8004468:	e004      	b.n	8004474 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 800446a:	2300      	movs	r3, #0
 800446c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800446e:	2301      	movs	r3, #1
 8004470:	77bb      	strb	r3, [r7, #30]
        break;
 8004472:	bf00      	nop
    }

    if (pclk != 0U)
 8004474:	69bb      	ldr	r3, [r7, #24]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d018      	beq.n	80044ac <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	685b      	ldr	r3, [r3, #4]
 800447e:	085a      	lsrs	r2, r3, #1
 8004480:	69bb      	ldr	r3, [r7, #24]
 8004482:	441a      	add	r2, r3
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	685b      	ldr	r3, [r3, #4]
 8004488:	fbb2 f3f3 	udiv	r3, r2, r3
 800448c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800448e:	693b      	ldr	r3, [r7, #16]
 8004490:	2b0f      	cmp	r3, #15
 8004492:	d909      	bls.n	80044a8 <UART_SetConfig+0x238>
 8004494:	693b      	ldr	r3, [r7, #16]
 8004496:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800449a:	d205      	bcs.n	80044a8 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800449c:	693b      	ldr	r3, [r7, #16]
 800449e:	b29a      	uxth	r2, r3
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	60da      	str	r2, [r3, #12]
 80044a6:	e001      	b.n	80044ac <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80044a8:	2301      	movs	r3, #1
 80044aa:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2200      	movs	r2, #0
 80044b0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	2200      	movs	r2, #0
 80044b6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80044b8:	7fbb      	ldrb	r3, [r7, #30]
}
 80044ba:	4618      	mov	r0, r3
 80044bc:	3720      	adds	r7, #32
 80044be:	46bd      	mov	sp, r7
 80044c0:	bd80      	pop	{r7, pc}
 80044c2:	bf00      	nop
 80044c4:	efff69f3 	.word	0xefff69f3
 80044c8:	40013800 	.word	0x40013800
 80044cc:	40021000 	.word	0x40021000
 80044d0:	40004400 	.word	0x40004400
 80044d4:	40004800 	.word	0x40004800
 80044d8:	007a1200 	.word	0x007a1200

080044dc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80044dc:	b480      	push	{r7}
 80044de:	b083      	sub	sp, #12
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044e8:	f003 0301 	and.w	r3, r3, #1
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d00a      	beq.n	8004506 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	685b      	ldr	r3, [r3, #4]
 80044f6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	430a      	orrs	r2, r1
 8004504:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800450a:	f003 0302 	and.w	r3, r3, #2
 800450e:	2b00      	cmp	r3, #0
 8004510:	d00a      	beq.n	8004528 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	685b      	ldr	r3, [r3, #4]
 8004518:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	430a      	orrs	r2, r1
 8004526:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800452c:	f003 0304 	and.w	r3, r3, #4
 8004530:	2b00      	cmp	r3, #0
 8004532:	d00a      	beq.n	800454a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	685b      	ldr	r3, [r3, #4]
 800453a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	430a      	orrs	r2, r1
 8004548:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800454e:	f003 0308 	and.w	r3, r3, #8
 8004552:	2b00      	cmp	r3, #0
 8004554:	d00a      	beq.n	800456c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	685b      	ldr	r3, [r3, #4]
 800455c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	430a      	orrs	r2, r1
 800456a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004570:	f003 0310 	and.w	r3, r3, #16
 8004574:	2b00      	cmp	r3, #0
 8004576:	d00a      	beq.n	800458e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	689b      	ldr	r3, [r3, #8]
 800457e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	430a      	orrs	r2, r1
 800458c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004592:	f003 0320 	and.w	r3, r3, #32
 8004596:	2b00      	cmp	r3, #0
 8004598:	d00a      	beq.n	80045b0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	689b      	ldr	r3, [r3, #8]
 80045a0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	430a      	orrs	r2, r1
 80045ae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d01a      	beq.n	80045f2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	685b      	ldr	r3, [r3, #4]
 80045c2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	430a      	orrs	r2, r1
 80045d0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80045da:	d10a      	bne.n	80045f2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	685b      	ldr	r3, [r3, #4]
 80045e2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	430a      	orrs	r2, r1
 80045f0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d00a      	beq.n	8004614 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	685b      	ldr	r3, [r3, #4]
 8004604:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	430a      	orrs	r2, r1
 8004612:	605a      	str	r2, [r3, #4]
  }
}
 8004614:	bf00      	nop
 8004616:	370c      	adds	r7, #12
 8004618:	46bd      	mov	sp, r7
 800461a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461e:	4770      	bx	lr

08004620 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004620:	b580      	push	{r7, lr}
 8004622:	b098      	sub	sp, #96	; 0x60
 8004624:	af02      	add	r7, sp, #8
 8004626:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2200      	movs	r2, #0
 800462c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004630:	f7fc fc4e 	bl	8000ed0 <HAL_GetTick>
 8004634:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f003 0308 	and.w	r3, r3, #8
 8004640:	2b08      	cmp	r3, #8
 8004642:	d12e      	bne.n	80046a2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004644:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004648:	9300      	str	r3, [sp, #0]
 800464a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800464c:	2200      	movs	r2, #0
 800464e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004652:	6878      	ldr	r0, [r7, #4]
 8004654:	f000 f88c 	bl	8004770 <UART_WaitOnFlagUntilTimeout>
 8004658:	4603      	mov	r3, r0
 800465a:	2b00      	cmp	r3, #0
 800465c:	d021      	beq.n	80046a2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004664:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004666:	e853 3f00 	ldrex	r3, [r3]
 800466a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800466c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800466e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004672:	653b      	str	r3, [r7, #80]	; 0x50
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	461a      	mov	r2, r3
 800467a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800467c:	647b      	str	r3, [r7, #68]	; 0x44
 800467e:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004680:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004682:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004684:	e841 2300 	strex	r3, r2, [r1]
 8004688:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800468a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800468c:	2b00      	cmp	r3, #0
 800468e:	d1e6      	bne.n	800465e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2220      	movs	r2, #32
 8004694:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2200      	movs	r2, #0
 800469a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800469e:	2303      	movs	r3, #3
 80046a0:	e062      	b.n	8004768 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f003 0304 	and.w	r3, r3, #4
 80046ac:	2b04      	cmp	r3, #4
 80046ae:	d149      	bne.n	8004744 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80046b0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80046b4:	9300      	str	r3, [sp, #0]
 80046b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80046b8:	2200      	movs	r2, #0
 80046ba:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80046be:	6878      	ldr	r0, [r7, #4]
 80046c0:	f000 f856 	bl	8004770 <UART_WaitOnFlagUntilTimeout>
 80046c4:	4603      	mov	r3, r0
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d03c      	beq.n	8004744 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046d2:	e853 3f00 	ldrex	r3, [r3]
 80046d6:	623b      	str	r3, [r7, #32]
   return(result);
 80046d8:	6a3b      	ldr	r3, [r7, #32]
 80046da:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80046de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	461a      	mov	r2, r3
 80046e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80046e8:	633b      	str	r3, [r7, #48]	; 0x30
 80046ea:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046ec:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80046ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80046f0:	e841 2300 	strex	r3, r2, [r1]
 80046f4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80046f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d1e6      	bne.n	80046ca <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	3308      	adds	r3, #8
 8004702:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004704:	693b      	ldr	r3, [r7, #16]
 8004706:	e853 3f00 	ldrex	r3, [r3]
 800470a:	60fb      	str	r3, [r7, #12]
   return(result);
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	f023 0301 	bic.w	r3, r3, #1
 8004712:	64bb      	str	r3, [r7, #72]	; 0x48
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	3308      	adds	r3, #8
 800471a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800471c:	61fa      	str	r2, [r7, #28]
 800471e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004720:	69b9      	ldr	r1, [r7, #24]
 8004722:	69fa      	ldr	r2, [r7, #28]
 8004724:	e841 2300 	strex	r3, r2, [r1]
 8004728:	617b      	str	r3, [r7, #20]
   return(result);
 800472a:	697b      	ldr	r3, [r7, #20]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d1e5      	bne.n	80046fc <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2220      	movs	r2, #32
 8004734:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2200      	movs	r2, #0
 800473c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004740:	2303      	movs	r3, #3
 8004742:	e011      	b.n	8004768 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2220      	movs	r2, #32
 8004748:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2220      	movs	r2, #32
 800474e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	2200      	movs	r2, #0
 8004756:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2200      	movs	r2, #0
 800475c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	2200      	movs	r2, #0
 8004762:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004766:	2300      	movs	r3, #0
}
 8004768:	4618      	mov	r0, r3
 800476a:	3758      	adds	r7, #88	; 0x58
 800476c:	46bd      	mov	sp, r7
 800476e:	bd80      	pop	{r7, pc}

08004770 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004770:	b580      	push	{r7, lr}
 8004772:	b084      	sub	sp, #16
 8004774:	af00      	add	r7, sp, #0
 8004776:	60f8      	str	r0, [r7, #12]
 8004778:	60b9      	str	r1, [r7, #8]
 800477a:	603b      	str	r3, [r7, #0]
 800477c:	4613      	mov	r3, r2
 800477e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004780:	e049      	b.n	8004816 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004782:	69bb      	ldr	r3, [r7, #24]
 8004784:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004788:	d045      	beq.n	8004816 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800478a:	f7fc fba1 	bl	8000ed0 <HAL_GetTick>
 800478e:	4602      	mov	r2, r0
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	1ad3      	subs	r3, r2, r3
 8004794:	69ba      	ldr	r2, [r7, #24]
 8004796:	429a      	cmp	r2, r3
 8004798:	d302      	bcc.n	80047a0 <UART_WaitOnFlagUntilTimeout+0x30>
 800479a:	69bb      	ldr	r3, [r7, #24]
 800479c:	2b00      	cmp	r3, #0
 800479e:	d101      	bne.n	80047a4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80047a0:	2303      	movs	r3, #3
 80047a2:	e048      	b.n	8004836 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f003 0304 	and.w	r3, r3, #4
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d031      	beq.n	8004816 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	69db      	ldr	r3, [r3, #28]
 80047b8:	f003 0308 	and.w	r3, r3, #8
 80047bc:	2b08      	cmp	r3, #8
 80047be:	d110      	bne.n	80047e2 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	2208      	movs	r2, #8
 80047c6:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80047c8:	68f8      	ldr	r0, [r7, #12]
 80047ca:	f000 f838 	bl	800483e <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	2208      	movs	r2, #8
 80047d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	2200      	movs	r2, #0
 80047da:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 80047de:	2301      	movs	r3, #1
 80047e0:	e029      	b.n	8004836 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	69db      	ldr	r3, [r3, #28]
 80047e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80047ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80047f0:	d111      	bne.n	8004816 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80047fa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80047fc:	68f8      	ldr	r0, [r7, #12]
 80047fe:	f000 f81e 	bl	800483e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	2220      	movs	r2, #32
 8004806:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	2200      	movs	r2, #0
 800480e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004812:	2303      	movs	r3, #3
 8004814:	e00f      	b.n	8004836 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	69da      	ldr	r2, [r3, #28]
 800481c:	68bb      	ldr	r3, [r7, #8]
 800481e:	4013      	ands	r3, r2
 8004820:	68ba      	ldr	r2, [r7, #8]
 8004822:	429a      	cmp	r2, r3
 8004824:	bf0c      	ite	eq
 8004826:	2301      	moveq	r3, #1
 8004828:	2300      	movne	r3, #0
 800482a:	b2db      	uxtb	r3, r3
 800482c:	461a      	mov	r2, r3
 800482e:	79fb      	ldrb	r3, [r7, #7]
 8004830:	429a      	cmp	r2, r3
 8004832:	d0a6      	beq.n	8004782 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004834:	2300      	movs	r3, #0
}
 8004836:	4618      	mov	r0, r3
 8004838:	3710      	adds	r7, #16
 800483a:	46bd      	mov	sp, r7
 800483c:	bd80      	pop	{r7, pc}

0800483e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800483e:	b480      	push	{r7}
 8004840:	b095      	sub	sp, #84	; 0x54
 8004842:	af00      	add	r7, sp, #0
 8004844:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800484c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800484e:	e853 3f00 	ldrex	r3, [r3]
 8004852:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004854:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004856:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800485a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	461a      	mov	r2, r3
 8004862:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004864:	643b      	str	r3, [r7, #64]	; 0x40
 8004866:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004868:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800486a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800486c:	e841 2300 	strex	r3, r2, [r1]
 8004870:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004872:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004874:	2b00      	cmp	r3, #0
 8004876:	d1e6      	bne.n	8004846 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	3308      	adds	r3, #8
 800487e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004880:	6a3b      	ldr	r3, [r7, #32]
 8004882:	e853 3f00 	ldrex	r3, [r3]
 8004886:	61fb      	str	r3, [r7, #28]
   return(result);
 8004888:	69fb      	ldr	r3, [r7, #28]
 800488a:	f023 0301 	bic.w	r3, r3, #1
 800488e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	3308      	adds	r3, #8
 8004896:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004898:	62fa      	str	r2, [r7, #44]	; 0x2c
 800489a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800489c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800489e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80048a0:	e841 2300 	strex	r3, r2, [r1]
 80048a4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80048a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d1e5      	bne.n	8004878 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048b0:	2b01      	cmp	r3, #1
 80048b2:	d118      	bne.n	80048e6 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	e853 3f00 	ldrex	r3, [r3]
 80048c0:	60bb      	str	r3, [r7, #8]
   return(result);
 80048c2:	68bb      	ldr	r3, [r7, #8]
 80048c4:	f023 0310 	bic.w	r3, r3, #16
 80048c8:	647b      	str	r3, [r7, #68]	; 0x44
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	461a      	mov	r2, r3
 80048d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80048d2:	61bb      	str	r3, [r7, #24]
 80048d4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048d6:	6979      	ldr	r1, [r7, #20]
 80048d8:	69ba      	ldr	r2, [r7, #24]
 80048da:	e841 2300 	strex	r3, r2, [r1]
 80048de:	613b      	str	r3, [r7, #16]
   return(result);
 80048e0:	693b      	ldr	r3, [r7, #16]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d1e6      	bne.n	80048b4 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	2220      	movs	r2, #32
 80048ea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2200      	movs	r2, #0
 80048f2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2200      	movs	r2, #0
 80048f8:	669a      	str	r2, [r3, #104]	; 0x68
}
 80048fa:	bf00      	nop
 80048fc:	3754      	adds	r7, #84	; 0x54
 80048fe:	46bd      	mov	sp, r7
 8004900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004904:	4770      	bx	lr

08004906 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8004906:	b480      	push	{r7}
 8004908:	b085      	sub	sp, #20
 800490a:	af00      	add	r7, sp, #0
 800490c:	4603      	mov	r3, r0
 800490e:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8004910:	2300      	movs	r3, #0
 8004912:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8004914:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004918:	2b84      	cmp	r3, #132	; 0x84
 800491a:	d005      	beq.n	8004928 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800491c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	4413      	add	r3, r2
 8004924:	3303      	adds	r3, #3
 8004926:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8004928:	68fb      	ldr	r3, [r7, #12]
}
 800492a:	4618      	mov	r0, r3
 800492c:	3714      	adds	r7, #20
 800492e:	46bd      	mov	sp, r7
 8004930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004934:	4770      	bx	lr

08004936 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004936:	b580      	push	{r7, lr}
 8004938:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800493a:	f001 fbd1 	bl	80060e0 <vTaskStartScheduler>
  
  return osOK;
 800493e:	2300      	movs	r3, #0
}
 8004940:	4618      	mov	r0, r3
 8004942:	bd80      	pop	{r7, pc}

08004944 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8004944:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004946:	b089      	sub	sp, #36	; 0x24
 8004948:	af04      	add	r7, sp, #16
 800494a:	6078      	str	r0, [r7, #4]
 800494c:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	695b      	ldr	r3, [r3, #20]
 8004952:	2b00      	cmp	r3, #0
 8004954:	d020      	beq.n	8004998 <osThreadCreate+0x54>
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	699b      	ldr	r3, [r3, #24]
 800495a:	2b00      	cmp	r3, #0
 800495c:	d01c      	beq.n	8004998 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	685c      	ldr	r4, [r3, #4]
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681d      	ldr	r5, [r3, #0]
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	691e      	ldr	r6, [r3, #16]
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004970:	4618      	mov	r0, r3
 8004972:	f7ff ffc8 	bl	8004906 <makeFreeRtosPriority>
 8004976:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	695b      	ldr	r3, [r3, #20]
 800497c:	687a      	ldr	r2, [r7, #4]
 800497e:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004980:	9202      	str	r2, [sp, #8]
 8004982:	9301      	str	r3, [sp, #4]
 8004984:	9100      	str	r1, [sp, #0]
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	4632      	mov	r2, r6
 800498a:	4629      	mov	r1, r5
 800498c:	4620      	mov	r0, r4
 800498e:	f001 f941 	bl	8005c14 <xTaskCreateStatic>
 8004992:	4603      	mov	r3, r0
 8004994:	60fb      	str	r3, [r7, #12]
 8004996:	e01c      	b.n	80049d2 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	685c      	ldr	r4, [r3, #4]
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80049a4:	b29e      	uxth	r6, r3
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80049ac:	4618      	mov	r0, r3
 80049ae:	f7ff ffaa 	bl	8004906 <makeFreeRtosPriority>
 80049b2:	4602      	mov	r2, r0
 80049b4:	f107 030c 	add.w	r3, r7, #12
 80049b8:	9301      	str	r3, [sp, #4]
 80049ba:	9200      	str	r2, [sp, #0]
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	4632      	mov	r2, r6
 80049c0:	4629      	mov	r1, r5
 80049c2:	4620      	mov	r0, r4
 80049c4:	f001 f982 	bl	8005ccc <xTaskCreate>
 80049c8:	4603      	mov	r3, r0
 80049ca:	2b01      	cmp	r3, #1
 80049cc:	d001      	beq.n	80049d2 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80049ce:	2300      	movs	r3, #0
 80049d0:	e000      	b.n	80049d4 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80049d2:	68fb      	ldr	r3, [r7, #12]
}
 80049d4:	4618      	mov	r0, r3
 80049d6:	3714      	adds	r7, #20
 80049d8:	46bd      	mov	sp, r7
 80049da:	bdf0      	pop	{r4, r5, r6, r7, pc}

080049dc <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 80049dc:	b580      	push	{r7, lr}
 80049de:	b082      	sub	sp, #8
 80049e0:	af00      	add	r7, sp, #0
	EventGroup_t *pxEventBits;

		/* Allocate the event group. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) );
 80049e2:	201c      	movs	r0, #28
 80049e4:	f003 fa18 	bl	8007e18 <pvPortMalloc>
 80049e8:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d00a      	beq.n	8004a06 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2200      	movs	r2, #0
 80049f4:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	3304      	adds	r3, #4
 80049fa:	4618      	mov	r0, r3
 80049fc:	f000 f983 	bl	8004d06 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2200      	movs	r2, #0
 8004a04:	761a      	strb	r2, [r3, #24]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return ( EventGroupHandle_t ) pxEventBits;
 8004a06:	687b      	ldr	r3, [r7, #4]
	}
 8004a08:	4618      	mov	r0, r3
 8004a0a:	3708      	adds	r7, #8
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	bd80      	pop	{r7, pc}

08004a10 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	b090      	sub	sp, #64	; 0x40
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	60f8      	str	r0, [r7, #12]
 8004a18:	60b9      	str	r1, [r7, #8]
 8004a1a:	607a      	str	r2, [r7, #4]
 8004a1c:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 8004a22:	2300      	movs	r3, #0
 8004a24:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 8004a26:	2300      	movs	r3, #0
 8004a28:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d10a      	bne.n	8004a46 <xEventGroupWaitBits+0x36>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004a30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a34:	f383 8811 	msr	BASEPRI, r3
 8004a38:	f3bf 8f6f 	isb	sy
 8004a3c:	f3bf 8f4f 	dsb	sy
 8004a40:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004a42:	bf00      	nop
 8004a44:	e7fe      	b.n	8004a44 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8004a46:	68bb      	ldr	r3, [r7, #8]
 8004a48:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d00a      	beq.n	8004a66 <xEventGroupWaitBits+0x56>
	__asm volatile
 8004a50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a54:	f383 8811 	msr	BASEPRI, r3
 8004a58:	f3bf 8f6f 	isb	sy
 8004a5c:	f3bf 8f4f 	dsb	sy
 8004a60:	61fb      	str	r3, [r7, #28]
}
 8004a62:	bf00      	nop
 8004a64:	e7fe      	b.n	8004a64 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 8004a66:	68bb      	ldr	r3, [r7, #8]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d10a      	bne.n	8004a82 <xEventGroupWaitBits+0x72>
	__asm volatile
 8004a6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a70:	f383 8811 	msr	BASEPRI, r3
 8004a74:	f3bf 8f6f 	isb	sy
 8004a78:	f3bf 8f4f 	dsb	sy
 8004a7c:	61bb      	str	r3, [r7, #24]
}
 8004a7e:	bf00      	nop
 8004a80:	e7fe      	b.n	8004a80 <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004a82:	f002 f901 	bl	8006c88 <xTaskGetSchedulerState>
 8004a86:	4603      	mov	r3, r0
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d102      	bne.n	8004a92 <xEventGroupWaitBits+0x82>
 8004a8c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d101      	bne.n	8004a96 <xEventGroupWaitBits+0x86>
 8004a92:	2301      	movs	r3, #1
 8004a94:	e000      	b.n	8004a98 <xEventGroupWaitBits+0x88>
 8004a96:	2300      	movs	r3, #0
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d10a      	bne.n	8004ab2 <xEventGroupWaitBits+0xa2>
	__asm volatile
 8004a9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aa0:	f383 8811 	msr	BASEPRI, r3
 8004aa4:	f3bf 8f6f 	isb	sy
 8004aa8:	f3bf 8f4f 	dsb	sy
 8004aac:	617b      	str	r3, [r7, #20]
}
 8004aae:	bf00      	nop
 8004ab0:	e7fe      	b.n	8004ab0 <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 8004ab2:	f001 fb85 	bl	80061c0 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 8004ab6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 8004abc:	683a      	ldr	r2, [r7, #0]
 8004abe:	68b9      	ldr	r1, [r7, #8]
 8004ac0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004ac2:	f000 f8fe 	bl	8004cc2 <prvTestWaitCondition>
 8004ac6:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 8004ac8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d00e      	beq.n	8004aec <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 8004ace:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ad0:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d028      	beq.n	8004b2e <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8004adc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ade:	681a      	ldr	r2, [r3, #0]
 8004ae0:	68bb      	ldr	r3, [r7, #8]
 8004ae2:	43db      	mvns	r3, r3
 8004ae4:	401a      	ands	r2, r3
 8004ae6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ae8:	601a      	str	r2, [r3, #0]
 8004aea:	e020      	b.n	8004b2e <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 8004aec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d104      	bne.n	8004afc <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 8004af2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004af4:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 8004af6:	2301      	movs	r3, #1
 8004af8:	633b      	str	r3, [r7, #48]	; 0x30
 8004afa:	e018      	b.n	8004b2e <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d003      	beq.n	8004b0a <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 8004b02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b04:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004b08:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d003      	beq.n	8004b18 <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8004b10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b12:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004b16:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8004b18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b1a:	1d18      	adds	r0, r3, #4
 8004b1c:	68ba      	ldr	r2, [r7, #8]
 8004b1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b20:	4313      	orrs	r3, r2
 8004b22:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004b24:	4619      	mov	r1, r3
 8004b26:	f001 fe1d 	bl	8006764 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 8004b2e:	f001 fb55 	bl	80061dc <xTaskResumeAll>
 8004b32:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 8004b34:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d031      	beq.n	8004b9e <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 8004b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d107      	bne.n	8004b50 <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 8004b40:	4b19      	ldr	r3, [pc, #100]	; (8004ba8 <xEventGroupWaitBits+0x198>)
 8004b42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b46:	601a      	str	r2, [r3, #0]
 8004b48:	f3bf 8f4f 	dsb	sy
 8004b4c:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 8004b50:	f002 fa64 	bl	800701c <uxTaskResetEventItemValue>
 8004b54:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8004b56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d11a      	bne.n	8004b96 <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 8004b60:	f003 f838 	bl	8007bd4 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 8004b64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 8004b6a:	683a      	ldr	r2, [r7, #0]
 8004b6c:	68b9      	ldr	r1, [r7, #8]
 8004b6e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8004b70:	f000 f8a7 	bl	8004cc2 <prvTestWaitCondition>
 8004b74:	4603      	mov	r3, r0
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d009      	beq.n	8004b8e <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d006      	beq.n	8004b8e <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8004b80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b82:	681a      	ldr	r2, [r3, #0]
 8004b84:	68bb      	ldr	r3, [r7, #8]
 8004b86:	43db      	mvns	r3, r3
 8004b88:	401a      	ands	r2, r3
 8004b8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b8c:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 8004b8e:	2301      	movs	r3, #1
 8004b90:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 8004b92:	f003 f84f 	bl	8007c34 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 8004b96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b98:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004b9c:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 8004b9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	3740      	adds	r7, #64	; 0x40
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	bd80      	pop	{r7, pc}
 8004ba8:	e000ed04 	.word	0xe000ed04

08004bac <xEventGroupSetBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b08e      	sub	sp, #56	; 0x38
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
 8004bb4:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t *pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d10a      	bne.n	8004bde <xEventGroupSetBits+0x32>
	__asm volatile
 8004bc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bcc:	f383 8811 	msr	BASEPRI, r3
 8004bd0:	f3bf 8f6f 	isb	sy
 8004bd4:	f3bf 8f4f 	dsb	sy
 8004bd8:	613b      	str	r3, [r7, #16]
}
 8004bda:	bf00      	nop
 8004bdc:	e7fe      	b.n	8004bdc <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8004bde:	683b      	ldr	r3, [r7, #0]
 8004be0:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d00a      	beq.n	8004bfe <xEventGroupSetBits+0x52>
	__asm volatile
 8004be8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bec:	f383 8811 	msr	BASEPRI, r3
 8004bf0:	f3bf 8f6f 	isb	sy
 8004bf4:	f3bf 8f4f 	dsb	sy
 8004bf8:	60fb      	str	r3, [r7, #12]
}
 8004bfa:	bf00      	nop
 8004bfc:	e7fe      	b.n	8004bfc <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 8004bfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c00:	3304      	adds	r3, #4
 8004c02:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c06:	3308      	adds	r3, #8
 8004c08:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 8004c0a:	f001 fad9 	bl	80061c0 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 8004c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c10:	68db      	ldr	r3, [r3, #12]
 8004c12:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 8004c14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c16:	681a      	ldr	r2, [r3, #0]
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	431a      	orrs	r2, r3
 8004c1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c1e:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 8004c20:	e03c      	b.n	8004c9c <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 8004c22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c24:	685b      	ldr	r3, [r3, #4]
 8004c26:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8004c28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 8004c2e:	2300      	movs	r3, #0
 8004c30:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 8004c32:	69bb      	ldr	r3, [r7, #24]
 8004c34:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8004c38:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8004c3a:	69bb      	ldr	r3, [r7, #24]
 8004c3c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004c40:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8004c42:	697b      	ldr	r3, [r7, #20]
 8004c44:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d108      	bne.n	8004c5e <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8004c4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c4e:	681a      	ldr	r2, [r3, #0]
 8004c50:	69bb      	ldr	r3, [r7, #24]
 8004c52:	4013      	ands	r3, r2
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d00b      	beq.n	8004c70 <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 8004c58:	2301      	movs	r3, #1
 8004c5a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004c5c:	e008      	b.n	8004c70 <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8004c5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c60:	681a      	ldr	r2, [r3, #0]
 8004c62:	69bb      	ldr	r3, [r7, #24]
 8004c64:	4013      	ands	r3, r2
 8004c66:	69ba      	ldr	r2, [r7, #24]
 8004c68:	429a      	cmp	r2, r3
 8004c6a:	d101      	bne.n	8004c70 <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 8004c6c:	2301      	movs	r3, #1
 8004c6e:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 8004c70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d010      	beq.n	8004c98 <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8004c76:	697b      	ldr	r3, [r7, #20]
 8004c78:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d003      	beq.n	8004c88 <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 8004c80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c82:	69bb      	ldr	r3, [r7, #24]
 8004c84:	4313      	orrs	r3, r2
 8004c86:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8004c88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004c90:	4619      	mov	r1, r3
 8004c92:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004c94:	f001 fe30 	bl	80068f8 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 8004c98:	69fb      	ldr	r3, [r7, #28]
 8004c9a:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 8004c9c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004c9e:	6a3b      	ldr	r3, [r7, #32]
 8004ca0:	429a      	cmp	r2, r3
 8004ca2:	d1be      	bne.n	8004c22 <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8004ca4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ca6:	681a      	ldr	r2, [r3, #0]
 8004ca8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004caa:	43db      	mvns	r3, r3
 8004cac:	401a      	ands	r2, r3
 8004cae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cb0:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 8004cb2:	f001 fa93 	bl	80061dc <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 8004cb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cb8:	681b      	ldr	r3, [r3, #0]
}
 8004cba:	4618      	mov	r0, r3
 8004cbc:	3738      	adds	r7, #56	; 0x38
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	bd80      	pop	{r7, pc}

08004cc2 <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear );
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 8004cc2:	b480      	push	{r7}
 8004cc4:	b087      	sub	sp, #28
 8004cc6:	af00      	add	r7, sp, #0
 8004cc8:	60f8      	str	r0, [r7, #12]
 8004cca:	60b9      	str	r1, [r7, #8]
 8004ccc:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 8004cce:	2300      	movs	r3, #0
 8004cd0:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d107      	bne.n	8004ce8 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8004cd8:	68fa      	ldr	r2, [r7, #12]
 8004cda:	68bb      	ldr	r3, [r7, #8]
 8004cdc:	4013      	ands	r3, r2
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d00a      	beq.n	8004cf8 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8004ce2:	2301      	movs	r3, #1
 8004ce4:	617b      	str	r3, [r7, #20]
 8004ce6:	e007      	b.n	8004cf8 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8004ce8:	68fa      	ldr	r2, [r7, #12]
 8004cea:	68bb      	ldr	r3, [r7, #8]
 8004cec:	4013      	ands	r3, r2
 8004cee:	68ba      	ldr	r2, [r7, #8]
 8004cf0:	429a      	cmp	r2, r3
 8004cf2:	d101      	bne.n	8004cf8 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8004cf4:	2301      	movs	r3, #1
 8004cf6:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 8004cf8:	697b      	ldr	r3, [r7, #20]
}
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	371c      	adds	r7, #28
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d04:	4770      	bx	lr

08004d06 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004d06:	b480      	push	{r7}
 8004d08:	b083      	sub	sp, #12
 8004d0a:	af00      	add	r7, sp, #0
 8004d0c:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	f103 0208 	add.w	r2, r3, #8
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	f04f 32ff 	mov.w	r2, #4294967295
 8004d1e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	f103 0208 	add.w	r2, r3, #8
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	f103 0208 	add.w	r2, r3, #8
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2200      	movs	r2, #0
 8004d38:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004d3a:	bf00      	nop
 8004d3c:	370c      	adds	r7, #12
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d44:	4770      	bx	lr

08004d46 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004d46:	b480      	push	{r7}
 8004d48:	b083      	sub	sp, #12
 8004d4a:	af00      	add	r7, sp, #0
 8004d4c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	2200      	movs	r2, #0
 8004d52:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004d54:	bf00      	nop
 8004d56:	370c      	adds	r7, #12
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5e:	4770      	bx	lr

08004d60 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004d60:	b480      	push	{r7}
 8004d62:	b085      	sub	sp, #20
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
 8004d68:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	685b      	ldr	r3, [r3, #4]
 8004d6e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	68fa      	ldr	r2, [r7, #12]
 8004d74:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	689a      	ldr	r2, [r3, #8]
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	689b      	ldr	r3, [r3, #8]
 8004d82:	683a      	ldr	r2, [r7, #0]
 8004d84:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	683a      	ldr	r2, [r7, #0]
 8004d8a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	687a      	ldr	r2, [r7, #4]
 8004d90:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	1c5a      	adds	r2, r3, #1
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	601a      	str	r2, [r3, #0]
}
 8004d9c:	bf00      	nop
 8004d9e:	3714      	adds	r7, #20
 8004da0:	46bd      	mov	sp, r7
 8004da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da6:	4770      	bx	lr

08004da8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004da8:	b480      	push	{r7}
 8004daa:	b085      	sub	sp, #20
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
 8004db0:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004db8:	68bb      	ldr	r3, [r7, #8]
 8004dba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dbe:	d103      	bne.n	8004dc8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	691b      	ldr	r3, [r3, #16]
 8004dc4:	60fb      	str	r3, [r7, #12]
 8004dc6:	e00c      	b.n	8004de2 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	3308      	adds	r3, #8
 8004dcc:	60fb      	str	r3, [r7, #12]
 8004dce:	e002      	b.n	8004dd6 <vListInsert+0x2e>
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	685b      	ldr	r3, [r3, #4]
 8004dd4:	60fb      	str	r3, [r7, #12]
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	685b      	ldr	r3, [r3, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	68ba      	ldr	r2, [r7, #8]
 8004dde:	429a      	cmp	r2, r3
 8004de0:	d2f6      	bcs.n	8004dd0 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	685a      	ldr	r2, [r3, #4]
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	685b      	ldr	r3, [r3, #4]
 8004dee:	683a      	ldr	r2, [r7, #0]
 8004df0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004df2:	683b      	ldr	r3, [r7, #0]
 8004df4:	68fa      	ldr	r2, [r7, #12]
 8004df6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	683a      	ldr	r2, [r7, #0]
 8004dfc:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004dfe:	683b      	ldr	r3, [r7, #0]
 8004e00:	687a      	ldr	r2, [r7, #4]
 8004e02:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	1c5a      	adds	r2, r3, #1
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	601a      	str	r2, [r3, #0]
}
 8004e0e:	bf00      	nop
 8004e10:	3714      	adds	r7, #20
 8004e12:	46bd      	mov	sp, r7
 8004e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e18:	4770      	bx	lr

08004e1a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004e1a:	b480      	push	{r7}
 8004e1c:	b085      	sub	sp, #20
 8004e1e:	af00      	add	r7, sp, #0
 8004e20:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	691b      	ldr	r3, [r3, #16]
 8004e26:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	685b      	ldr	r3, [r3, #4]
 8004e2c:	687a      	ldr	r2, [r7, #4]
 8004e2e:	6892      	ldr	r2, [r2, #8]
 8004e30:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	689b      	ldr	r3, [r3, #8]
 8004e36:	687a      	ldr	r2, [r7, #4]
 8004e38:	6852      	ldr	r2, [r2, #4]
 8004e3a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	685b      	ldr	r3, [r3, #4]
 8004e40:	687a      	ldr	r2, [r7, #4]
 8004e42:	429a      	cmp	r2, r3
 8004e44:	d103      	bne.n	8004e4e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	689a      	ldr	r2, [r3, #8]
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	2200      	movs	r2, #0
 8004e52:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	1e5a      	subs	r2, r3, #1
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	681b      	ldr	r3, [r3, #0]
}
 8004e62:	4618      	mov	r0, r3
 8004e64:	3714      	adds	r7, #20
 8004e66:	46bd      	mov	sp, r7
 8004e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6c:	4770      	bx	lr
	...

08004e70 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004e70:	b580      	push	{r7, lr}
 8004e72:	b084      	sub	sp, #16
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
 8004e78:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d10a      	bne.n	8004e9a <xQueueGenericReset+0x2a>
	__asm volatile
 8004e84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e88:	f383 8811 	msr	BASEPRI, r3
 8004e8c:	f3bf 8f6f 	isb	sy
 8004e90:	f3bf 8f4f 	dsb	sy
 8004e94:	60bb      	str	r3, [r7, #8]
}
 8004e96:	bf00      	nop
 8004e98:	e7fe      	b.n	8004e98 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004e9a:	f002 fe9b 	bl	8007bd4 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	681a      	ldr	r2, [r3, #0]
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ea6:	68f9      	ldr	r1, [r7, #12]
 8004ea8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004eaa:	fb01 f303 	mul.w	r3, r1, r3
 8004eae:	441a      	add	r2, r3
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	681a      	ldr	r2, [r3, #0]
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	681a      	ldr	r2, [r3, #0]
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004eca:	3b01      	subs	r3, #1
 8004ecc:	68f9      	ldr	r1, [r7, #12]
 8004ece:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004ed0:	fb01 f303 	mul.w	r3, r1, r3
 8004ed4:	441a      	add	r2, r3
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	22ff      	movs	r2, #255	; 0xff
 8004ede:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	22ff      	movs	r2, #255	; 0xff
 8004ee6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004eea:	683b      	ldr	r3, [r7, #0]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d114      	bne.n	8004f1a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	691b      	ldr	r3, [r3, #16]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d01a      	beq.n	8004f2e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	3310      	adds	r3, #16
 8004efc:	4618      	mov	r0, r3
 8004efe:	f001 fc99 	bl	8006834 <xTaskRemoveFromEventList>
 8004f02:	4603      	mov	r3, r0
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d012      	beq.n	8004f2e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004f08:	4b0c      	ldr	r3, [pc, #48]	; (8004f3c <xQueueGenericReset+0xcc>)
 8004f0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f0e:	601a      	str	r2, [r3, #0]
 8004f10:	f3bf 8f4f 	dsb	sy
 8004f14:	f3bf 8f6f 	isb	sy
 8004f18:	e009      	b.n	8004f2e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	3310      	adds	r3, #16
 8004f1e:	4618      	mov	r0, r3
 8004f20:	f7ff fef1 	bl	8004d06 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	3324      	adds	r3, #36	; 0x24
 8004f28:	4618      	mov	r0, r3
 8004f2a:	f7ff feec 	bl	8004d06 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004f2e:	f002 fe81 	bl	8007c34 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004f32:	2301      	movs	r3, #1
}
 8004f34:	4618      	mov	r0, r3
 8004f36:	3710      	adds	r7, #16
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	bd80      	pop	{r7, pc}
 8004f3c:	e000ed04 	.word	0xe000ed04

08004f40 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004f40:	b580      	push	{r7, lr}
 8004f42:	b08e      	sub	sp, #56	; 0x38
 8004f44:	af02      	add	r7, sp, #8
 8004f46:	60f8      	str	r0, [r7, #12]
 8004f48:	60b9      	str	r1, [r7, #8]
 8004f4a:	607a      	str	r2, [r7, #4]
 8004f4c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d10a      	bne.n	8004f6a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8004f54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f58:	f383 8811 	msr	BASEPRI, r3
 8004f5c:	f3bf 8f6f 	isb	sy
 8004f60:	f3bf 8f4f 	dsb	sy
 8004f64:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004f66:	bf00      	nop
 8004f68:	e7fe      	b.n	8004f68 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d10a      	bne.n	8004f86 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8004f70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f74:	f383 8811 	msr	BASEPRI, r3
 8004f78:	f3bf 8f6f 	isb	sy
 8004f7c:	f3bf 8f4f 	dsb	sy
 8004f80:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004f82:	bf00      	nop
 8004f84:	e7fe      	b.n	8004f84 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d002      	beq.n	8004f92 <xQueueGenericCreateStatic+0x52>
 8004f8c:	68bb      	ldr	r3, [r7, #8]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d001      	beq.n	8004f96 <xQueueGenericCreateStatic+0x56>
 8004f92:	2301      	movs	r3, #1
 8004f94:	e000      	b.n	8004f98 <xQueueGenericCreateStatic+0x58>
 8004f96:	2300      	movs	r3, #0
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d10a      	bne.n	8004fb2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8004f9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fa0:	f383 8811 	msr	BASEPRI, r3
 8004fa4:	f3bf 8f6f 	isb	sy
 8004fa8:	f3bf 8f4f 	dsb	sy
 8004fac:	623b      	str	r3, [r7, #32]
}
 8004fae:	bf00      	nop
 8004fb0:	e7fe      	b.n	8004fb0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d102      	bne.n	8004fbe <xQueueGenericCreateStatic+0x7e>
 8004fb8:	68bb      	ldr	r3, [r7, #8]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d101      	bne.n	8004fc2 <xQueueGenericCreateStatic+0x82>
 8004fbe:	2301      	movs	r3, #1
 8004fc0:	e000      	b.n	8004fc4 <xQueueGenericCreateStatic+0x84>
 8004fc2:	2300      	movs	r3, #0
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d10a      	bne.n	8004fde <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8004fc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fcc:	f383 8811 	msr	BASEPRI, r3
 8004fd0:	f3bf 8f6f 	isb	sy
 8004fd4:	f3bf 8f4f 	dsb	sy
 8004fd8:	61fb      	str	r3, [r7, #28]
}
 8004fda:	bf00      	nop
 8004fdc:	e7fe      	b.n	8004fdc <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004fde:	2348      	movs	r3, #72	; 0x48
 8004fe0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004fe2:	697b      	ldr	r3, [r7, #20]
 8004fe4:	2b48      	cmp	r3, #72	; 0x48
 8004fe6:	d00a      	beq.n	8004ffe <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8004fe8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fec:	f383 8811 	msr	BASEPRI, r3
 8004ff0:	f3bf 8f6f 	isb	sy
 8004ff4:	f3bf 8f4f 	dsb	sy
 8004ff8:	61bb      	str	r3, [r7, #24]
}
 8004ffa:	bf00      	nop
 8004ffc:	e7fe      	b.n	8004ffc <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005002:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005004:	2b00      	cmp	r3, #0
 8005006:	d00d      	beq.n	8005024 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005008:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800500a:	2201      	movs	r2, #1
 800500c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005010:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005014:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005016:	9300      	str	r3, [sp, #0]
 8005018:	4613      	mov	r3, r2
 800501a:	687a      	ldr	r2, [r7, #4]
 800501c:	68b9      	ldr	r1, [r7, #8]
 800501e:	68f8      	ldr	r0, [r7, #12]
 8005020:	f000 f843 	bl	80050aa <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8005024:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005026:	4618      	mov	r0, r3
 8005028:	3730      	adds	r7, #48	; 0x30
 800502a:	46bd      	mov	sp, r7
 800502c:	bd80      	pop	{r7, pc}

0800502e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800502e:	b580      	push	{r7, lr}
 8005030:	b08a      	sub	sp, #40	; 0x28
 8005032:	af02      	add	r7, sp, #8
 8005034:	60f8      	str	r0, [r7, #12]
 8005036:	60b9      	str	r1, [r7, #8]
 8005038:	4613      	mov	r3, r2
 800503a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	2b00      	cmp	r3, #0
 8005040:	d10a      	bne.n	8005058 <xQueueGenericCreate+0x2a>
	__asm volatile
 8005042:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005046:	f383 8811 	msr	BASEPRI, r3
 800504a:	f3bf 8f6f 	isb	sy
 800504e:	f3bf 8f4f 	dsb	sy
 8005052:	613b      	str	r3, [r7, #16]
}
 8005054:	bf00      	nop
 8005056:	e7fe      	b.n	8005056 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8005058:	68bb      	ldr	r3, [r7, #8]
 800505a:	2b00      	cmp	r3, #0
 800505c:	d102      	bne.n	8005064 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800505e:	2300      	movs	r3, #0
 8005060:	61fb      	str	r3, [r7, #28]
 8005062:	e004      	b.n	800506e <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	68ba      	ldr	r2, [r7, #8]
 8005068:	fb02 f303 	mul.w	r3, r2, r3
 800506c:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800506e:	69fb      	ldr	r3, [r7, #28]
 8005070:	3348      	adds	r3, #72	; 0x48
 8005072:	4618      	mov	r0, r3
 8005074:	f002 fed0 	bl	8007e18 <pvPortMalloc>
 8005078:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800507a:	69bb      	ldr	r3, [r7, #24]
 800507c:	2b00      	cmp	r3, #0
 800507e:	d00f      	beq.n	80050a0 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8005080:	69bb      	ldr	r3, [r7, #24]
 8005082:	3348      	adds	r3, #72	; 0x48
 8005084:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005086:	69bb      	ldr	r3, [r7, #24]
 8005088:	2200      	movs	r2, #0
 800508a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800508e:	79fa      	ldrb	r2, [r7, #7]
 8005090:	69bb      	ldr	r3, [r7, #24]
 8005092:	9300      	str	r3, [sp, #0]
 8005094:	4613      	mov	r3, r2
 8005096:	697a      	ldr	r2, [r7, #20]
 8005098:	68b9      	ldr	r1, [r7, #8]
 800509a:	68f8      	ldr	r0, [r7, #12]
 800509c:	f000 f805 	bl	80050aa <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80050a0:	69bb      	ldr	r3, [r7, #24]
	}
 80050a2:	4618      	mov	r0, r3
 80050a4:	3720      	adds	r7, #32
 80050a6:	46bd      	mov	sp, r7
 80050a8:	bd80      	pop	{r7, pc}

080050aa <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80050aa:	b580      	push	{r7, lr}
 80050ac:	b084      	sub	sp, #16
 80050ae:	af00      	add	r7, sp, #0
 80050b0:	60f8      	str	r0, [r7, #12]
 80050b2:	60b9      	str	r1, [r7, #8]
 80050b4:	607a      	str	r2, [r7, #4]
 80050b6:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80050b8:	68bb      	ldr	r3, [r7, #8]
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d103      	bne.n	80050c6 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80050be:	69bb      	ldr	r3, [r7, #24]
 80050c0:	69ba      	ldr	r2, [r7, #24]
 80050c2:	601a      	str	r2, [r3, #0]
 80050c4:	e002      	b.n	80050cc <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80050c6:	69bb      	ldr	r3, [r7, #24]
 80050c8:	687a      	ldr	r2, [r7, #4]
 80050ca:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80050cc:	69bb      	ldr	r3, [r7, #24]
 80050ce:	68fa      	ldr	r2, [r7, #12]
 80050d0:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80050d2:	69bb      	ldr	r3, [r7, #24]
 80050d4:	68ba      	ldr	r2, [r7, #8]
 80050d6:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80050d8:	2101      	movs	r1, #1
 80050da:	69b8      	ldr	r0, [r7, #24]
 80050dc:	f7ff fec8 	bl	8004e70 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80050e0:	bf00      	nop
 80050e2:	3710      	adds	r7, #16
 80050e4:	46bd      	mov	sp, r7
 80050e6:	bd80      	pop	{r7, pc}

080050e8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80050e8:	b580      	push	{r7, lr}
 80050ea:	b08e      	sub	sp, #56	; 0x38
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	60f8      	str	r0, [r7, #12]
 80050f0:	60b9      	str	r1, [r7, #8]
 80050f2:	607a      	str	r2, [r7, #4]
 80050f4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80050f6:	2300      	movs	r3, #0
 80050f8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80050fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005100:	2b00      	cmp	r3, #0
 8005102:	d10a      	bne.n	800511a <xQueueGenericSend+0x32>
	__asm volatile
 8005104:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005108:	f383 8811 	msr	BASEPRI, r3
 800510c:	f3bf 8f6f 	isb	sy
 8005110:	f3bf 8f4f 	dsb	sy
 8005114:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005116:	bf00      	nop
 8005118:	e7fe      	b.n	8005118 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800511a:	68bb      	ldr	r3, [r7, #8]
 800511c:	2b00      	cmp	r3, #0
 800511e:	d103      	bne.n	8005128 <xQueueGenericSend+0x40>
 8005120:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005122:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005124:	2b00      	cmp	r3, #0
 8005126:	d101      	bne.n	800512c <xQueueGenericSend+0x44>
 8005128:	2301      	movs	r3, #1
 800512a:	e000      	b.n	800512e <xQueueGenericSend+0x46>
 800512c:	2300      	movs	r3, #0
 800512e:	2b00      	cmp	r3, #0
 8005130:	d10a      	bne.n	8005148 <xQueueGenericSend+0x60>
	__asm volatile
 8005132:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005136:	f383 8811 	msr	BASEPRI, r3
 800513a:	f3bf 8f6f 	isb	sy
 800513e:	f3bf 8f4f 	dsb	sy
 8005142:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005144:	bf00      	nop
 8005146:	e7fe      	b.n	8005146 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	2b02      	cmp	r3, #2
 800514c:	d103      	bne.n	8005156 <xQueueGenericSend+0x6e>
 800514e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005150:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005152:	2b01      	cmp	r3, #1
 8005154:	d101      	bne.n	800515a <xQueueGenericSend+0x72>
 8005156:	2301      	movs	r3, #1
 8005158:	e000      	b.n	800515c <xQueueGenericSend+0x74>
 800515a:	2300      	movs	r3, #0
 800515c:	2b00      	cmp	r3, #0
 800515e:	d10a      	bne.n	8005176 <xQueueGenericSend+0x8e>
	__asm volatile
 8005160:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005164:	f383 8811 	msr	BASEPRI, r3
 8005168:	f3bf 8f6f 	isb	sy
 800516c:	f3bf 8f4f 	dsb	sy
 8005170:	623b      	str	r3, [r7, #32]
}
 8005172:	bf00      	nop
 8005174:	e7fe      	b.n	8005174 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005176:	f001 fd87 	bl	8006c88 <xTaskGetSchedulerState>
 800517a:	4603      	mov	r3, r0
 800517c:	2b00      	cmp	r3, #0
 800517e:	d102      	bne.n	8005186 <xQueueGenericSend+0x9e>
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2b00      	cmp	r3, #0
 8005184:	d101      	bne.n	800518a <xQueueGenericSend+0xa2>
 8005186:	2301      	movs	r3, #1
 8005188:	e000      	b.n	800518c <xQueueGenericSend+0xa4>
 800518a:	2300      	movs	r3, #0
 800518c:	2b00      	cmp	r3, #0
 800518e:	d10a      	bne.n	80051a6 <xQueueGenericSend+0xbe>
	__asm volatile
 8005190:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005194:	f383 8811 	msr	BASEPRI, r3
 8005198:	f3bf 8f6f 	isb	sy
 800519c:	f3bf 8f4f 	dsb	sy
 80051a0:	61fb      	str	r3, [r7, #28]
}
 80051a2:	bf00      	nop
 80051a4:	e7fe      	b.n	80051a4 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80051a6:	f002 fd15 	bl	8007bd4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80051aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80051ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051b2:	429a      	cmp	r2, r3
 80051b4:	d302      	bcc.n	80051bc <xQueueGenericSend+0xd4>
 80051b6:	683b      	ldr	r3, [r7, #0]
 80051b8:	2b02      	cmp	r3, #2
 80051ba:	d129      	bne.n	8005210 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80051bc:	683a      	ldr	r2, [r7, #0]
 80051be:	68b9      	ldr	r1, [r7, #8]
 80051c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80051c2:	f000 fbb9 	bl	8005938 <prvCopyDataToQueue>
 80051c6:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80051c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d010      	beq.n	80051f2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80051d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051d2:	3324      	adds	r3, #36	; 0x24
 80051d4:	4618      	mov	r0, r3
 80051d6:	f001 fb2d 	bl	8006834 <xTaskRemoveFromEventList>
 80051da:	4603      	mov	r3, r0
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d013      	beq.n	8005208 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80051e0:	4b3f      	ldr	r3, [pc, #252]	; (80052e0 <xQueueGenericSend+0x1f8>)
 80051e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80051e6:	601a      	str	r2, [r3, #0]
 80051e8:	f3bf 8f4f 	dsb	sy
 80051ec:	f3bf 8f6f 	isb	sy
 80051f0:	e00a      	b.n	8005208 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80051f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d007      	beq.n	8005208 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80051f8:	4b39      	ldr	r3, [pc, #228]	; (80052e0 <xQueueGenericSend+0x1f8>)
 80051fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80051fe:	601a      	str	r2, [r3, #0]
 8005200:	f3bf 8f4f 	dsb	sy
 8005204:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005208:	f002 fd14 	bl	8007c34 <vPortExitCritical>
				return pdPASS;
 800520c:	2301      	movs	r3, #1
 800520e:	e063      	b.n	80052d8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2b00      	cmp	r3, #0
 8005214:	d103      	bne.n	800521e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005216:	f002 fd0d 	bl	8007c34 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800521a:	2300      	movs	r3, #0
 800521c:	e05c      	b.n	80052d8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800521e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005220:	2b00      	cmp	r3, #0
 8005222:	d106      	bne.n	8005232 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005224:	f107 0314 	add.w	r3, r7, #20
 8005228:	4618      	mov	r0, r3
 800522a:	f001 fbc7 	bl	80069bc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800522e:	2301      	movs	r3, #1
 8005230:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005232:	f002 fcff 	bl	8007c34 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005236:	f000 ffc3 	bl	80061c0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800523a:	f002 fccb 	bl	8007bd4 <vPortEnterCritical>
 800523e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005240:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005244:	b25b      	sxtb	r3, r3
 8005246:	f1b3 3fff 	cmp.w	r3, #4294967295
 800524a:	d103      	bne.n	8005254 <xQueueGenericSend+0x16c>
 800524c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800524e:	2200      	movs	r2, #0
 8005250:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005254:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005256:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800525a:	b25b      	sxtb	r3, r3
 800525c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005260:	d103      	bne.n	800526a <xQueueGenericSend+0x182>
 8005262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005264:	2200      	movs	r2, #0
 8005266:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800526a:	f002 fce3 	bl	8007c34 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800526e:	1d3a      	adds	r2, r7, #4
 8005270:	f107 0314 	add.w	r3, r7, #20
 8005274:	4611      	mov	r1, r2
 8005276:	4618      	mov	r0, r3
 8005278:	f001 fbb6 	bl	80069e8 <xTaskCheckForTimeOut>
 800527c:	4603      	mov	r3, r0
 800527e:	2b00      	cmp	r3, #0
 8005280:	d124      	bne.n	80052cc <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005282:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005284:	f000 fc50 	bl	8005b28 <prvIsQueueFull>
 8005288:	4603      	mov	r3, r0
 800528a:	2b00      	cmp	r3, #0
 800528c:	d018      	beq.n	80052c0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800528e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005290:	3310      	adds	r3, #16
 8005292:	687a      	ldr	r2, [r7, #4]
 8005294:	4611      	mov	r1, r2
 8005296:	4618      	mov	r0, r3
 8005298:	f001 fa40 	bl	800671c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800529c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800529e:	f000 fbdb 	bl	8005a58 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80052a2:	f000 ff9b 	bl	80061dc <xTaskResumeAll>
 80052a6:	4603      	mov	r3, r0
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	f47f af7c 	bne.w	80051a6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80052ae:	4b0c      	ldr	r3, [pc, #48]	; (80052e0 <xQueueGenericSend+0x1f8>)
 80052b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80052b4:	601a      	str	r2, [r3, #0]
 80052b6:	f3bf 8f4f 	dsb	sy
 80052ba:	f3bf 8f6f 	isb	sy
 80052be:	e772      	b.n	80051a6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80052c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80052c2:	f000 fbc9 	bl	8005a58 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80052c6:	f000 ff89 	bl	80061dc <xTaskResumeAll>
 80052ca:	e76c      	b.n	80051a6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80052cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80052ce:	f000 fbc3 	bl	8005a58 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80052d2:	f000 ff83 	bl	80061dc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80052d6:	2300      	movs	r3, #0
		}
	}
}
 80052d8:	4618      	mov	r0, r3
 80052da:	3738      	adds	r7, #56	; 0x38
 80052dc:	46bd      	mov	sp, r7
 80052de:	bd80      	pop	{r7, pc}
 80052e0:	e000ed04 	.word	0xe000ed04

080052e4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80052e4:	b580      	push	{r7, lr}
 80052e6:	b08e      	sub	sp, #56	; 0x38
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	60f8      	str	r0, [r7, #12]
 80052ec:	60b9      	str	r1, [r7, #8]
 80052ee:	607a      	str	r2, [r7, #4]
 80052f0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80052f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d10a      	bne.n	8005312 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80052fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005300:	f383 8811 	msr	BASEPRI, r3
 8005304:	f3bf 8f6f 	isb	sy
 8005308:	f3bf 8f4f 	dsb	sy
 800530c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800530e:	bf00      	nop
 8005310:	e7fe      	b.n	8005310 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005312:	68bb      	ldr	r3, [r7, #8]
 8005314:	2b00      	cmp	r3, #0
 8005316:	d103      	bne.n	8005320 <xQueueGenericSendFromISR+0x3c>
 8005318:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800531a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800531c:	2b00      	cmp	r3, #0
 800531e:	d101      	bne.n	8005324 <xQueueGenericSendFromISR+0x40>
 8005320:	2301      	movs	r3, #1
 8005322:	e000      	b.n	8005326 <xQueueGenericSendFromISR+0x42>
 8005324:	2300      	movs	r3, #0
 8005326:	2b00      	cmp	r3, #0
 8005328:	d10a      	bne.n	8005340 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800532a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800532e:	f383 8811 	msr	BASEPRI, r3
 8005332:	f3bf 8f6f 	isb	sy
 8005336:	f3bf 8f4f 	dsb	sy
 800533a:	623b      	str	r3, [r7, #32]
}
 800533c:	bf00      	nop
 800533e:	e7fe      	b.n	800533e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	2b02      	cmp	r3, #2
 8005344:	d103      	bne.n	800534e <xQueueGenericSendFromISR+0x6a>
 8005346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005348:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800534a:	2b01      	cmp	r3, #1
 800534c:	d101      	bne.n	8005352 <xQueueGenericSendFromISR+0x6e>
 800534e:	2301      	movs	r3, #1
 8005350:	e000      	b.n	8005354 <xQueueGenericSendFromISR+0x70>
 8005352:	2300      	movs	r3, #0
 8005354:	2b00      	cmp	r3, #0
 8005356:	d10a      	bne.n	800536e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8005358:	f04f 0350 	mov.w	r3, #80	; 0x50
 800535c:	f383 8811 	msr	BASEPRI, r3
 8005360:	f3bf 8f6f 	isb	sy
 8005364:	f3bf 8f4f 	dsb	sy
 8005368:	61fb      	str	r3, [r7, #28]
}
 800536a:	bf00      	nop
 800536c:	e7fe      	b.n	800536c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800536e:	f002 fd13 	bl	8007d98 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005372:	f3ef 8211 	mrs	r2, BASEPRI
 8005376:	f04f 0350 	mov.w	r3, #80	; 0x50
 800537a:	f383 8811 	msr	BASEPRI, r3
 800537e:	f3bf 8f6f 	isb	sy
 8005382:	f3bf 8f4f 	dsb	sy
 8005386:	61ba      	str	r2, [r7, #24]
 8005388:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800538a:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800538c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800538e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005390:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005392:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005394:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005396:	429a      	cmp	r2, r3
 8005398:	d302      	bcc.n	80053a0 <xQueueGenericSendFromISR+0xbc>
 800539a:	683b      	ldr	r3, [r7, #0]
 800539c:	2b02      	cmp	r3, #2
 800539e:	d12c      	bne.n	80053fa <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80053a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053a2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80053a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80053aa:	683a      	ldr	r2, [r7, #0]
 80053ac:	68b9      	ldr	r1, [r7, #8]
 80053ae:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80053b0:	f000 fac2 	bl	8005938 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80053b4:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80053b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053bc:	d112      	bne.n	80053e4 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80053be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d016      	beq.n	80053f4 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80053c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053c8:	3324      	adds	r3, #36	; 0x24
 80053ca:	4618      	mov	r0, r3
 80053cc:	f001 fa32 	bl	8006834 <xTaskRemoveFromEventList>
 80053d0:	4603      	mov	r3, r0
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d00e      	beq.n	80053f4 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d00b      	beq.n	80053f4 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2201      	movs	r2, #1
 80053e0:	601a      	str	r2, [r3, #0]
 80053e2:	e007      	b.n	80053f4 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80053e4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80053e8:	3301      	adds	r3, #1
 80053ea:	b2db      	uxtb	r3, r3
 80053ec:	b25a      	sxtb	r2, r3
 80053ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80053f4:	2301      	movs	r3, #1
 80053f6:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80053f8:	e001      	b.n	80053fe <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80053fa:	2300      	movs	r3, #0
 80053fc:	637b      	str	r3, [r7, #52]	; 0x34
 80053fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005400:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005402:	693b      	ldr	r3, [r7, #16]
 8005404:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005408:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800540a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800540c:	4618      	mov	r0, r3
 800540e:	3738      	adds	r7, #56	; 0x38
 8005410:	46bd      	mov	sp, r7
 8005412:	bd80      	pop	{r7, pc}

08005414 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005414:	b580      	push	{r7, lr}
 8005416:	b08e      	sub	sp, #56	; 0x38
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
 800541c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8005422:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005424:	2b00      	cmp	r3, #0
 8005426:	d10a      	bne.n	800543e <xQueueGiveFromISR+0x2a>
	__asm volatile
 8005428:	f04f 0350 	mov.w	r3, #80	; 0x50
 800542c:	f383 8811 	msr	BASEPRI, r3
 8005430:	f3bf 8f6f 	isb	sy
 8005434:	f3bf 8f4f 	dsb	sy
 8005438:	623b      	str	r3, [r7, #32]
}
 800543a:	bf00      	nop
 800543c:	e7fe      	b.n	800543c <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800543e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005442:	2b00      	cmp	r3, #0
 8005444:	d00a      	beq.n	800545c <xQueueGiveFromISR+0x48>
	__asm volatile
 8005446:	f04f 0350 	mov.w	r3, #80	; 0x50
 800544a:	f383 8811 	msr	BASEPRI, r3
 800544e:	f3bf 8f6f 	isb	sy
 8005452:	f3bf 8f4f 	dsb	sy
 8005456:	61fb      	str	r3, [r7, #28]
}
 8005458:	bf00      	nop
 800545a:	e7fe      	b.n	800545a <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 800545c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	2b00      	cmp	r3, #0
 8005462:	d103      	bne.n	800546c <xQueueGiveFromISR+0x58>
 8005464:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005466:	685b      	ldr	r3, [r3, #4]
 8005468:	2b00      	cmp	r3, #0
 800546a:	d101      	bne.n	8005470 <xQueueGiveFromISR+0x5c>
 800546c:	2301      	movs	r3, #1
 800546e:	e000      	b.n	8005472 <xQueueGiveFromISR+0x5e>
 8005470:	2300      	movs	r3, #0
 8005472:	2b00      	cmp	r3, #0
 8005474:	d10a      	bne.n	800548c <xQueueGiveFromISR+0x78>
	__asm volatile
 8005476:	f04f 0350 	mov.w	r3, #80	; 0x50
 800547a:	f383 8811 	msr	BASEPRI, r3
 800547e:	f3bf 8f6f 	isb	sy
 8005482:	f3bf 8f4f 	dsb	sy
 8005486:	61bb      	str	r3, [r7, #24]
}
 8005488:	bf00      	nop
 800548a:	e7fe      	b.n	800548a <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800548c:	f002 fc84 	bl	8007d98 <vPortValidateInterruptPriority>
	__asm volatile
 8005490:	f3ef 8211 	mrs	r2, BASEPRI
 8005494:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005498:	f383 8811 	msr	BASEPRI, r3
 800549c:	f3bf 8f6f 	isb	sy
 80054a0:	f3bf 8f4f 	dsb	sy
 80054a4:	617a      	str	r2, [r7, #20]
 80054a6:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80054a8:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80054aa:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80054ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054b0:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80054b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80054b8:	429a      	cmp	r2, r3
 80054ba:	d22b      	bcs.n	8005514 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80054bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054be:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80054c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80054c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054c8:	1c5a      	adds	r2, r3, #1
 80054ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054cc:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80054ce:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80054d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054d6:	d112      	bne.n	80054fe <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80054d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d016      	beq.n	800550e <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80054e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054e2:	3324      	adds	r3, #36	; 0x24
 80054e4:	4618      	mov	r0, r3
 80054e6:	f001 f9a5 	bl	8006834 <xTaskRemoveFromEventList>
 80054ea:	4603      	mov	r3, r0
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d00e      	beq.n	800550e <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80054f0:	683b      	ldr	r3, [r7, #0]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d00b      	beq.n	800550e <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80054f6:	683b      	ldr	r3, [r7, #0]
 80054f8:	2201      	movs	r2, #1
 80054fa:	601a      	str	r2, [r3, #0]
 80054fc:	e007      	b.n	800550e <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80054fe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005502:	3301      	adds	r3, #1
 8005504:	b2db      	uxtb	r3, r3
 8005506:	b25a      	sxtb	r2, r3
 8005508:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800550a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800550e:	2301      	movs	r3, #1
 8005510:	637b      	str	r3, [r7, #52]	; 0x34
 8005512:	e001      	b.n	8005518 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005514:	2300      	movs	r3, #0
 8005516:	637b      	str	r3, [r7, #52]	; 0x34
 8005518:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800551a:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	f383 8811 	msr	BASEPRI, r3
}
 8005522:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005524:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005526:	4618      	mov	r0, r3
 8005528:	3738      	adds	r7, #56	; 0x38
 800552a:	46bd      	mov	sp, r7
 800552c:	bd80      	pop	{r7, pc}
	...

08005530 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005530:	b580      	push	{r7, lr}
 8005532:	b08c      	sub	sp, #48	; 0x30
 8005534:	af00      	add	r7, sp, #0
 8005536:	60f8      	str	r0, [r7, #12]
 8005538:	60b9      	str	r1, [r7, #8]
 800553a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800553c:	2300      	movs	r3, #0
 800553e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005544:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005546:	2b00      	cmp	r3, #0
 8005548:	d10a      	bne.n	8005560 <xQueueReceive+0x30>
	__asm volatile
 800554a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800554e:	f383 8811 	msr	BASEPRI, r3
 8005552:	f3bf 8f6f 	isb	sy
 8005556:	f3bf 8f4f 	dsb	sy
 800555a:	623b      	str	r3, [r7, #32]
}
 800555c:	bf00      	nop
 800555e:	e7fe      	b.n	800555e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005560:	68bb      	ldr	r3, [r7, #8]
 8005562:	2b00      	cmp	r3, #0
 8005564:	d103      	bne.n	800556e <xQueueReceive+0x3e>
 8005566:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800556a:	2b00      	cmp	r3, #0
 800556c:	d101      	bne.n	8005572 <xQueueReceive+0x42>
 800556e:	2301      	movs	r3, #1
 8005570:	e000      	b.n	8005574 <xQueueReceive+0x44>
 8005572:	2300      	movs	r3, #0
 8005574:	2b00      	cmp	r3, #0
 8005576:	d10a      	bne.n	800558e <xQueueReceive+0x5e>
	__asm volatile
 8005578:	f04f 0350 	mov.w	r3, #80	; 0x50
 800557c:	f383 8811 	msr	BASEPRI, r3
 8005580:	f3bf 8f6f 	isb	sy
 8005584:	f3bf 8f4f 	dsb	sy
 8005588:	61fb      	str	r3, [r7, #28]
}
 800558a:	bf00      	nop
 800558c:	e7fe      	b.n	800558c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800558e:	f001 fb7b 	bl	8006c88 <xTaskGetSchedulerState>
 8005592:	4603      	mov	r3, r0
 8005594:	2b00      	cmp	r3, #0
 8005596:	d102      	bne.n	800559e <xQueueReceive+0x6e>
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2b00      	cmp	r3, #0
 800559c:	d101      	bne.n	80055a2 <xQueueReceive+0x72>
 800559e:	2301      	movs	r3, #1
 80055a0:	e000      	b.n	80055a4 <xQueueReceive+0x74>
 80055a2:	2300      	movs	r3, #0
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d10a      	bne.n	80055be <xQueueReceive+0x8e>
	__asm volatile
 80055a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055ac:	f383 8811 	msr	BASEPRI, r3
 80055b0:	f3bf 8f6f 	isb	sy
 80055b4:	f3bf 8f4f 	dsb	sy
 80055b8:	61bb      	str	r3, [r7, #24]
}
 80055ba:	bf00      	nop
 80055bc:	e7fe      	b.n	80055bc <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80055be:	f002 fb09 	bl	8007bd4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80055c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055c6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80055c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d01f      	beq.n	800560e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80055ce:	68b9      	ldr	r1, [r7, #8]
 80055d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80055d2:	f000 fa1b 	bl	8005a0c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80055d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055d8:	1e5a      	subs	r2, r3, #1
 80055da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055dc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80055de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055e0:	691b      	ldr	r3, [r3, #16]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d00f      	beq.n	8005606 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80055e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055e8:	3310      	adds	r3, #16
 80055ea:	4618      	mov	r0, r3
 80055ec:	f001 f922 	bl	8006834 <xTaskRemoveFromEventList>
 80055f0:	4603      	mov	r3, r0
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d007      	beq.n	8005606 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80055f6:	4b3d      	ldr	r3, [pc, #244]	; (80056ec <xQueueReceive+0x1bc>)
 80055f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80055fc:	601a      	str	r2, [r3, #0]
 80055fe:	f3bf 8f4f 	dsb	sy
 8005602:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005606:	f002 fb15 	bl	8007c34 <vPortExitCritical>
				return pdPASS;
 800560a:	2301      	movs	r3, #1
 800560c:	e069      	b.n	80056e2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	2b00      	cmp	r3, #0
 8005612:	d103      	bne.n	800561c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005614:	f002 fb0e 	bl	8007c34 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005618:	2300      	movs	r3, #0
 800561a:	e062      	b.n	80056e2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800561c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800561e:	2b00      	cmp	r3, #0
 8005620:	d106      	bne.n	8005630 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005622:	f107 0310 	add.w	r3, r7, #16
 8005626:	4618      	mov	r0, r3
 8005628:	f001 f9c8 	bl	80069bc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800562c:	2301      	movs	r3, #1
 800562e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005630:	f002 fb00 	bl	8007c34 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005634:	f000 fdc4 	bl	80061c0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005638:	f002 facc 	bl	8007bd4 <vPortEnterCritical>
 800563c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800563e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005642:	b25b      	sxtb	r3, r3
 8005644:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005648:	d103      	bne.n	8005652 <xQueueReceive+0x122>
 800564a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800564c:	2200      	movs	r2, #0
 800564e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005652:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005654:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005658:	b25b      	sxtb	r3, r3
 800565a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800565e:	d103      	bne.n	8005668 <xQueueReceive+0x138>
 8005660:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005662:	2200      	movs	r2, #0
 8005664:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005668:	f002 fae4 	bl	8007c34 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800566c:	1d3a      	adds	r2, r7, #4
 800566e:	f107 0310 	add.w	r3, r7, #16
 8005672:	4611      	mov	r1, r2
 8005674:	4618      	mov	r0, r3
 8005676:	f001 f9b7 	bl	80069e8 <xTaskCheckForTimeOut>
 800567a:	4603      	mov	r3, r0
 800567c:	2b00      	cmp	r3, #0
 800567e:	d123      	bne.n	80056c8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005680:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005682:	f000 fa3b 	bl	8005afc <prvIsQueueEmpty>
 8005686:	4603      	mov	r3, r0
 8005688:	2b00      	cmp	r3, #0
 800568a:	d017      	beq.n	80056bc <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800568c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800568e:	3324      	adds	r3, #36	; 0x24
 8005690:	687a      	ldr	r2, [r7, #4]
 8005692:	4611      	mov	r1, r2
 8005694:	4618      	mov	r0, r3
 8005696:	f001 f841 	bl	800671c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800569a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800569c:	f000 f9dc 	bl	8005a58 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80056a0:	f000 fd9c 	bl	80061dc <xTaskResumeAll>
 80056a4:	4603      	mov	r3, r0
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d189      	bne.n	80055be <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80056aa:	4b10      	ldr	r3, [pc, #64]	; (80056ec <xQueueReceive+0x1bc>)
 80056ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80056b0:	601a      	str	r2, [r3, #0]
 80056b2:	f3bf 8f4f 	dsb	sy
 80056b6:	f3bf 8f6f 	isb	sy
 80056ba:	e780      	b.n	80055be <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80056bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80056be:	f000 f9cb 	bl	8005a58 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80056c2:	f000 fd8b 	bl	80061dc <xTaskResumeAll>
 80056c6:	e77a      	b.n	80055be <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80056c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80056ca:	f000 f9c5 	bl	8005a58 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80056ce:	f000 fd85 	bl	80061dc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80056d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80056d4:	f000 fa12 	bl	8005afc <prvIsQueueEmpty>
 80056d8:	4603      	mov	r3, r0
 80056da:	2b00      	cmp	r3, #0
 80056dc:	f43f af6f 	beq.w	80055be <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80056e0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80056e2:	4618      	mov	r0, r3
 80056e4:	3730      	adds	r7, #48	; 0x30
 80056e6:	46bd      	mov	sp, r7
 80056e8:	bd80      	pop	{r7, pc}
 80056ea:	bf00      	nop
 80056ec:	e000ed04 	.word	0xe000ed04

080056f0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80056f0:	b580      	push	{r7, lr}
 80056f2:	b08e      	sub	sp, #56	; 0x38
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]
 80056f8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80056fa:	2300      	movs	r3, #0
 80056fc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8005702:	2300      	movs	r3, #0
 8005704:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005706:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005708:	2b00      	cmp	r3, #0
 800570a:	d10a      	bne.n	8005722 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800570c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005710:	f383 8811 	msr	BASEPRI, r3
 8005714:	f3bf 8f6f 	isb	sy
 8005718:	f3bf 8f4f 	dsb	sy
 800571c:	623b      	str	r3, [r7, #32]
}
 800571e:	bf00      	nop
 8005720:	e7fe      	b.n	8005720 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005722:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005726:	2b00      	cmp	r3, #0
 8005728:	d00a      	beq.n	8005740 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800572a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800572e:	f383 8811 	msr	BASEPRI, r3
 8005732:	f3bf 8f6f 	isb	sy
 8005736:	f3bf 8f4f 	dsb	sy
 800573a:	61fb      	str	r3, [r7, #28]
}
 800573c:	bf00      	nop
 800573e:	e7fe      	b.n	800573e <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005740:	f001 faa2 	bl	8006c88 <xTaskGetSchedulerState>
 8005744:	4603      	mov	r3, r0
 8005746:	2b00      	cmp	r3, #0
 8005748:	d102      	bne.n	8005750 <xQueueSemaphoreTake+0x60>
 800574a:	683b      	ldr	r3, [r7, #0]
 800574c:	2b00      	cmp	r3, #0
 800574e:	d101      	bne.n	8005754 <xQueueSemaphoreTake+0x64>
 8005750:	2301      	movs	r3, #1
 8005752:	e000      	b.n	8005756 <xQueueSemaphoreTake+0x66>
 8005754:	2300      	movs	r3, #0
 8005756:	2b00      	cmp	r3, #0
 8005758:	d10a      	bne.n	8005770 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800575a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800575e:	f383 8811 	msr	BASEPRI, r3
 8005762:	f3bf 8f6f 	isb	sy
 8005766:	f3bf 8f4f 	dsb	sy
 800576a:	61bb      	str	r3, [r7, #24]
}
 800576c:	bf00      	nop
 800576e:	e7fe      	b.n	800576e <xQueueSemaphoreTake+0x7e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8005770:	f002 fa30 	bl	8007bd4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8005774:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005776:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005778:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800577a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800577c:	2b00      	cmp	r3, #0
 800577e:	d024      	beq.n	80057ca <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8005780:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005782:	1e5a      	subs	r2, r3, #1
 8005784:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005786:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005788:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d104      	bne.n	800579a <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8005790:	f001 fc5c 	bl	800704c <pvTaskIncrementMutexHeldCount>
 8005794:	4602      	mov	r2, r0
 8005796:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005798:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800579a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800579c:	691b      	ldr	r3, [r3, #16]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d00f      	beq.n	80057c2 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80057a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057a4:	3310      	adds	r3, #16
 80057a6:	4618      	mov	r0, r3
 80057a8:	f001 f844 	bl	8006834 <xTaskRemoveFromEventList>
 80057ac:	4603      	mov	r3, r0
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d007      	beq.n	80057c2 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80057b2:	4b54      	ldr	r3, [pc, #336]	; (8005904 <xQueueSemaphoreTake+0x214>)
 80057b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80057b8:	601a      	str	r2, [r3, #0]
 80057ba:	f3bf 8f4f 	dsb	sy
 80057be:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80057c2:	f002 fa37 	bl	8007c34 <vPortExitCritical>
				return pdPASS;
 80057c6:	2301      	movs	r3, #1
 80057c8:	e097      	b.n	80058fa <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80057ca:	683b      	ldr	r3, [r7, #0]
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d111      	bne.n	80057f4 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80057d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d00a      	beq.n	80057ec <xQueueSemaphoreTake+0xfc>
	__asm volatile
 80057d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057da:	f383 8811 	msr	BASEPRI, r3
 80057de:	f3bf 8f6f 	isb	sy
 80057e2:	f3bf 8f4f 	dsb	sy
 80057e6:	617b      	str	r3, [r7, #20]
}
 80057e8:	bf00      	nop
 80057ea:	e7fe      	b.n	80057ea <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80057ec:	f002 fa22 	bl	8007c34 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80057f0:	2300      	movs	r3, #0
 80057f2:	e082      	b.n	80058fa <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80057f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d106      	bne.n	8005808 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80057fa:	f107 030c 	add.w	r3, r7, #12
 80057fe:	4618      	mov	r0, r3
 8005800:	f001 f8dc 	bl	80069bc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005804:	2301      	movs	r3, #1
 8005806:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005808:	f002 fa14 	bl	8007c34 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800580c:	f000 fcd8 	bl	80061c0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005810:	f002 f9e0 	bl	8007bd4 <vPortEnterCritical>
 8005814:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005816:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800581a:	b25b      	sxtb	r3, r3
 800581c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005820:	d103      	bne.n	800582a <xQueueSemaphoreTake+0x13a>
 8005822:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005824:	2200      	movs	r2, #0
 8005826:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800582a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800582c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005830:	b25b      	sxtb	r3, r3
 8005832:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005836:	d103      	bne.n	8005840 <xQueueSemaphoreTake+0x150>
 8005838:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800583a:	2200      	movs	r2, #0
 800583c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005840:	f002 f9f8 	bl	8007c34 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005844:	463a      	mov	r2, r7
 8005846:	f107 030c 	add.w	r3, r7, #12
 800584a:	4611      	mov	r1, r2
 800584c:	4618      	mov	r0, r3
 800584e:	f001 f8cb 	bl	80069e8 <xTaskCheckForTimeOut>
 8005852:	4603      	mov	r3, r0
 8005854:	2b00      	cmp	r3, #0
 8005856:	d132      	bne.n	80058be <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005858:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800585a:	f000 f94f 	bl	8005afc <prvIsQueueEmpty>
 800585e:	4603      	mov	r3, r0
 8005860:	2b00      	cmp	r3, #0
 8005862:	d026      	beq.n	80058b2 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005864:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	2b00      	cmp	r3, #0
 800586a:	d109      	bne.n	8005880 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800586c:	f002 f9b2 	bl	8007bd4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8005870:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005872:	685b      	ldr	r3, [r3, #4]
 8005874:	4618      	mov	r0, r3
 8005876:	f001 fa25 	bl	8006cc4 <xTaskPriorityInherit>
 800587a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800587c:	f002 f9da 	bl	8007c34 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005880:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005882:	3324      	adds	r3, #36	; 0x24
 8005884:	683a      	ldr	r2, [r7, #0]
 8005886:	4611      	mov	r1, r2
 8005888:	4618      	mov	r0, r3
 800588a:	f000 ff47 	bl	800671c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800588e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005890:	f000 f8e2 	bl	8005a58 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005894:	f000 fca2 	bl	80061dc <xTaskResumeAll>
 8005898:	4603      	mov	r3, r0
 800589a:	2b00      	cmp	r3, #0
 800589c:	f47f af68 	bne.w	8005770 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 80058a0:	4b18      	ldr	r3, [pc, #96]	; (8005904 <xQueueSemaphoreTake+0x214>)
 80058a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80058a6:	601a      	str	r2, [r3, #0]
 80058a8:	f3bf 8f4f 	dsb	sy
 80058ac:	f3bf 8f6f 	isb	sy
 80058b0:	e75e      	b.n	8005770 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80058b2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80058b4:	f000 f8d0 	bl	8005a58 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80058b8:	f000 fc90 	bl	80061dc <xTaskResumeAll>
 80058bc:	e758      	b.n	8005770 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80058be:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80058c0:	f000 f8ca 	bl	8005a58 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80058c4:	f000 fc8a 	bl	80061dc <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80058c8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80058ca:	f000 f917 	bl	8005afc <prvIsQueueEmpty>
 80058ce:	4603      	mov	r3, r0
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	f43f af4d 	beq.w	8005770 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80058d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d00d      	beq.n	80058f8 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 80058dc:	f002 f97a 	bl	8007bd4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80058e0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80058e2:	f000 f811 	bl	8005908 <prvGetDisinheritPriorityAfterTimeout>
 80058e6:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 80058e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058ea:	685b      	ldr	r3, [r3, #4]
 80058ec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80058ee:	4618      	mov	r0, r3
 80058f0:	f001 faf4 	bl	8006edc <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80058f4:	f002 f99e 	bl	8007c34 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80058f8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80058fa:	4618      	mov	r0, r3
 80058fc:	3738      	adds	r7, #56	; 0x38
 80058fe:	46bd      	mov	sp, r7
 8005900:	bd80      	pop	{r7, pc}
 8005902:	bf00      	nop
 8005904:	e000ed04 	.word	0xe000ed04

08005908 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8005908:	b480      	push	{r7}
 800590a:	b085      	sub	sp, #20
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005914:	2b00      	cmp	r3, #0
 8005916:	d006      	beq.n	8005926 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f1c3 0307 	rsb	r3, r3, #7
 8005922:	60fb      	str	r3, [r7, #12]
 8005924:	e001      	b.n	800592a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8005926:	2300      	movs	r3, #0
 8005928:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800592a:	68fb      	ldr	r3, [r7, #12]
	}
 800592c:	4618      	mov	r0, r3
 800592e:	3714      	adds	r7, #20
 8005930:	46bd      	mov	sp, r7
 8005932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005936:	4770      	bx	lr

08005938 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005938:	b580      	push	{r7, lr}
 800593a:	b086      	sub	sp, #24
 800593c:	af00      	add	r7, sp, #0
 800593e:	60f8      	str	r0, [r7, #12]
 8005940:	60b9      	str	r1, [r7, #8]
 8005942:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005944:	2300      	movs	r3, #0
 8005946:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800594c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005952:	2b00      	cmp	r3, #0
 8005954:	d10d      	bne.n	8005972 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	2b00      	cmp	r3, #0
 800595c:	d14d      	bne.n	80059fa <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	685b      	ldr	r3, [r3, #4]
 8005962:	4618      	mov	r0, r3
 8005964:	f001 fa34 	bl	8006dd0 <xTaskPriorityDisinherit>
 8005968:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	2200      	movs	r2, #0
 800596e:	605a      	str	r2, [r3, #4]
 8005970:	e043      	b.n	80059fa <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	2b00      	cmp	r3, #0
 8005976:	d119      	bne.n	80059ac <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	6898      	ldr	r0, [r3, #8]
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005980:	461a      	mov	r2, r3
 8005982:	68b9      	ldr	r1, [r7, #8]
 8005984:	f002 fc7e 	bl	8008284 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	689a      	ldr	r2, [r3, #8]
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005990:	441a      	add	r2, r3
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	689a      	ldr	r2, [r3, #8]
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	685b      	ldr	r3, [r3, #4]
 800599e:	429a      	cmp	r2, r3
 80059a0:	d32b      	bcc.n	80059fa <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	681a      	ldr	r2, [r3, #0]
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	609a      	str	r2, [r3, #8]
 80059aa:	e026      	b.n	80059fa <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	68d8      	ldr	r0, [r3, #12]
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059b4:	461a      	mov	r2, r3
 80059b6:	68b9      	ldr	r1, [r7, #8]
 80059b8:	f002 fc64 	bl	8008284 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	68da      	ldr	r2, [r3, #12]
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059c4:	425b      	negs	r3, r3
 80059c6:	441a      	add	r2, r3
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	68da      	ldr	r2, [r3, #12]
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	429a      	cmp	r2, r3
 80059d6:	d207      	bcs.n	80059e8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	685a      	ldr	r2, [r3, #4]
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059e0:	425b      	negs	r3, r3
 80059e2:	441a      	add	r2, r3
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2b02      	cmp	r3, #2
 80059ec:	d105      	bne.n	80059fa <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80059ee:	693b      	ldr	r3, [r7, #16]
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d002      	beq.n	80059fa <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80059f4:	693b      	ldr	r3, [r7, #16]
 80059f6:	3b01      	subs	r3, #1
 80059f8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80059fa:	693b      	ldr	r3, [r7, #16]
 80059fc:	1c5a      	adds	r2, r3, #1
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005a02:	697b      	ldr	r3, [r7, #20]
}
 8005a04:	4618      	mov	r0, r3
 8005a06:	3718      	adds	r7, #24
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	bd80      	pop	{r7, pc}

08005a0c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005a0c:	b580      	push	{r7, lr}
 8005a0e:	b082      	sub	sp, #8
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]
 8005a14:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d018      	beq.n	8005a50 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	68da      	ldr	r2, [r3, #12]
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a26:	441a      	add	r2, r3
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	68da      	ldr	r2, [r3, #12]
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	685b      	ldr	r3, [r3, #4]
 8005a34:	429a      	cmp	r2, r3
 8005a36:	d303      	bcc.n	8005a40 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681a      	ldr	r2, [r3, #0]
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	68d9      	ldr	r1, [r3, #12]
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a48:	461a      	mov	r2, r3
 8005a4a:	6838      	ldr	r0, [r7, #0]
 8005a4c:	f002 fc1a 	bl	8008284 <memcpy>
	}
}
 8005a50:	bf00      	nop
 8005a52:	3708      	adds	r7, #8
 8005a54:	46bd      	mov	sp, r7
 8005a56:	bd80      	pop	{r7, pc}

08005a58 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005a58:	b580      	push	{r7, lr}
 8005a5a:	b084      	sub	sp, #16
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005a60:	f002 f8b8 	bl	8007bd4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005a6a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005a6c:	e011      	b.n	8005a92 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d012      	beq.n	8005a9c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	3324      	adds	r3, #36	; 0x24
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	f000 feda 	bl	8006834 <xTaskRemoveFromEventList>
 8005a80:	4603      	mov	r3, r0
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d001      	beq.n	8005a8a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005a86:	f001 f811 	bl	8006aac <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005a8a:	7bfb      	ldrb	r3, [r7, #15]
 8005a8c:	3b01      	subs	r3, #1
 8005a8e:	b2db      	uxtb	r3, r3
 8005a90:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005a92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	dce9      	bgt.n	8005a6e <prvUnlockQueue+0x16>
 8005a9a:	e000      	b.n	8005a9e <prvUnlockQueue+0x46>
					break;
 8005a9c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	22ff      	movs	r2, #255	; 0xff
 8005aa2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005aa6:	f002 f8c5 	bl	8007c34 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005aaa:	f002 f893 	bl	8007bd4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005ab4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005ab6:	e011      	b.n	8005adc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	691b      	ldr	r3, [r3, #16]
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d012      	beq.n	8005ae6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	3310      	adds	r3, #16
 8005ac4:	4618      	mov	r0, r3
 8005ac6:	f000 feb5 	bl	8006834 <xTaskRemoveFromEventList>
 8005aca:	4603      	mov	r3, r0
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d001      	beq.n	8005ad4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005ad0:	f000 ffec 	bl	8006aac <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005ad4:	7bbb      	ldrb	r3, [r7, #14]
 8005ad6:	3b01      	subs	r3, #1
 8005ad8:	b2db      	uxtb	r3, r3
 8005ada:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005adc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	dce9      	bgt.n	8005ab8 <prvUnlockQueue+0x60>
 8005ae4:	e000      	b.n	8005ae8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005ae6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	22ff      	movs	r2, #255	; 0xff
 8005aec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005af0:	f002 f8a0 	bl	8007c34 <vPortExitCritical>
}
 8005af4:	bf00      	nop
 8005af6:	3710      	adds	r7, #16
 8005af8:	46bd      	mov	sp, r7
 8005afa:	bd80      	pop	{r7, pc}

08005afc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005afc:	b580      	push	{r7, lr}
 8005afe:	b084      	sub	sp, #16
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005b04:	f002 f866 	bl	8007bd4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d102      	bne.n	8005b16 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005b10:	2301      	movs	r3, #1
 8005b12:	60fb      	str	r3, [r7, #12]
 8005b14:	e001      	b.n	8005b1a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005b16:	2300      	movs	r3, #0
 8005b18:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005b1a:	f002 f88b 	bl	8007c34 <vPortExitCritical>

	return xReturn;
 8005b1e:	68fb      	ldr	r3, [r7, #12]
}
 8005b20:	4618      	mov	r0, r3
 8005b22:	3710      	adds	r7, #16
 8005b24:	46bd      	mov	sp, r7
 8005b26:	bd80      	pop	{r7, pc}

08005b28 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005b28:	b580      	push	{r7, lr}
 8005b2a:	b084      	sub	sp, #16
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005b30:	f002 f850 	bl	8007bd4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b3c:	429a      	cmp	r2, r3
 8005b3e:	d102      	bne.n	8005b46 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005b40:	2301      	movs	r3, #1
 8005b42:	60fb      	str	r3, [r7, #12]
 8005b44:	e001      	b.n	8005b4a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005b46:	2300      	movs	r3, #0
 8005b48:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005b4a:	f002 f873 	bl	8007c34 <vPortExitCritical>

	return xReturn;
 8005b4e:	68fb      	ldr	r3, [r7, #12]
}
 8005b50:	4618      	mov	r0, r3
 8005b52:	3710      	adds	r7, #16
 8005b54:	46bd      	mov	sp, r7
 8005b56:	bd80      	pop	{r7, pc}

08005b58 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005b58:	b480      	push	{r7}
 8005b5a:	b085      	sub	sp, #20
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]
 8005b60:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005b62:	2300      	movs	r3, #0
 8005b64:	60fb      	str	r3, [r7, #12]
 8005b66:	e014      	b.n	8005b92 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005b68:	4a0f      	ldr	r2, [pc, #60]	; (8005ba8 <vQueueAddToRegistry+0x50>)
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d10b      	bne.n	8005b8c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005b74:	490c      	ldr	r1, [pc, #48]	; (8005ba8 <vQueueAddToRegistry+0x50>)
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	683a      	ldr	r2, [r7, #0]
 8005b7a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005b7e:	4a0a      	ldr	r2, [pc, #40]	; (8005ba8 <vQueueAddToRegistry+0x50>)
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	00db      	lsls	r3, r3, #3
 8005b84:	4413      	add	r3, r2
 8005b86:	687a      	ldr	r2, [r7, #4]
 8005b88:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005b8a:	e006      	b.n	8005b9a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	3301      	adds	r3, #1
 8005b90:	60fb      	str	r3, [r7, #12]
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	2b07      	cmp	r3, #7
 8005b96:	d9e7      	bls.n	8005b68 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005b98:	bf00      	nop
 8005b9a:	bf00      	nop
 8005b9c:	3714      	adds	r7, #20
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba4:	4770      	bx	lr
 8005ba6:	bf00      	nop
 8005ba8:	20000654 	.word	0x20000654

08005bac <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005bac:	b580      	push	{r7, lr}
 8005bae:	b086      	sub	sp, #24
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	60f8      	str	r0, [r7, #12]
 8005bb4:	60b9      	str	r1, [r7, #8]
 8005bb6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005bbc:	f002 f80a 	bl	8007bd4 <vPortEnterCritical>
 8005bc0:	697b      	ldr	r3, [r7, #20]
 8005bc2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005bc6:	b25b      	sxtb	r3, r3
 8005bc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bcc:	d103      	bne.n	8005bd6 <vQueueWaitForMessageRestricted+0x2a>
 8005bce:	697b      	ldr	r3, [r7, #20]
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005bd6:	697b      	ldr	r3, [r7, #20]
 8005bd8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005bdc:	b25b      	sxtb	r3, r3
 8005bde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005be2:	d103      	bne.n	8005bec <vQueueWaitForMessageRestricted+0x40>
 8005be4:	697b      	ldr	r3, [r7, #20]
 8005be6:	2200      	movs	r2, #0
 8005be8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005bec:	f002 f822 	bl	8007c34 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005bf0:	697b      	ldr	r3, [r7, #20]
 8005bf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d106      	bne.n	8005c06 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005bf8:	697b      	ldr	r3, [r7, #20]
 8005bfa:	3324      	adds	r3, #36	; 0x24
 8005bfc:	687a      	ldr	r2, [r7, #4]
 8005bfe:	68b9      	ldr	r1, [r7, #8]
 8005c00:	4618      	mov	r0, r3
 8005c02:	f000 fdeb 	bl	80067dc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005c06:	6978      	ldr	r0, [r7, #20]
 8005c08:	f7ff ff26 	bl	8005a58 <prvUnlockQueue>
	}
 8005c0c:	bf00      	nop
 8005c0e:	3718      	adds	r7, #24
 8005c10:	46bd      	mov	sp, r7
 8005c12:	bd80      	pop	{r7, pc}

08005c14 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005c14:	b580      	push	{r7, lr}
 8005c16:	b08e      	sub	sp, #56	; 0x38
 8005c18:	af04      	add	r7, sp, #16
 8005c1a:	60f8      	str	r0, [r7, #12]
 8005c1c:	60b9      	str	r1, [r7, #8]
 8005c1e:	607a      	str	r2, [r7, #4]
 8005c20:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005c22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d10a      	bne.n	8005c3e <xTaskCreateStatic+0x2a>
	__asm volatile
 8005c28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c2c:	f383 8811 	msr	BASEPRI, r3
 8005c30:	f3bf 8f6f 	isb	sy
 8005c34:	f3bf 8f4f 	dsb	sy
 8005c38:	623b      	str	r3, [r7, #32]
}
 8005c3a:	bf00      	nop
 8005c3c:	e7fe      	b.n	8005c3c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005c3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d10a      	bne.n	8005c5a <xTaskCreateStatic+0x46>
	__asm volatile
 8005c44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c48:	f383 8811 	msr	BASEPRI, r3
 8005c4c:	f3bf 8f6f 	isb	sy
 8005c50:	f3bf 8f4f 	dsb	sy
 8005c54:	61fb      	str	r3, [r7, #28]
}
 8005c56:	bf00      	nop
 8005c58:	e7fe      	b.n	8005c58 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005c5a:	23b8      	movs	r3, #184	; 0xb8
 8005c5c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005c5e:	693b      	ldr	r3, [r7, #16]
 8005c60:	2bb8      	cmp	r3, #184	; 0xb8
 8005c62:	d00a      	beq.n	8005c7a <xTaskCreateStatic+0x66>
	__asm volatile
 8005c64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c68:	f383 8811 	msr	BASEPRI, r3
 8005c6c:	f3bf 8f6f 	isb	sy
 8005c70:	f3bf 8f4f 	dsb	sy
 8005c74:	61bb      	str	r3, [r7, #24]
}
 8005c76:	bf00      	nop
 8005c78:	e7fe      	b.n	8005c78 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005c7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d01e      	beq.n	8005cbe <xTaskCreateStatic+0xaa>
 8005c80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d01b      	beq.n	8005cbe <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005c86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c88:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c8c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005c8e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c92:	2202      	movs	r2, #2
 8005c94:	f883 20b5 	strb.w	r2, [r3, #181]	; 0xb5
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005c98:	2300      	movs	r3, #0
 8005c9a:	9303      	str	r3, [sp, #12]
 8005c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c9e:	9302      	str	r3, [sp, #8]
 8005ca0:	f107 0314 	add.w	r3, r7, #20
 8005ca4:	9301      	str	r3, [sp, #4]
 8005ca6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ca8:	9300      	str	r3, [sp, #0]
 8005caa:	683b      	ldr	r3, [r7, #0]
 8005cac:	687a      	ldr	r2, [r7, #4]
 8005cae:	68b9      	ldr	r1, [r7, #8]
 8005cb0:	68f8      	ldr	r0, [r7, #12]
 8005cb2:	f000 f851 	bl	8005d58 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005cb6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005cb8:	f000 f8e4 	bl	8005e84 <prvAddNewTaskToReadyList>
 8005cbc:	e001      	b.n	8005cc2 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8005cbe:	2300      	movs	r3, #0
 8005cc0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005cc2:	697b      	ldr	r3, [r7, #20]
	}
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	3728      	adds	r7, #40	; 0x28
 8005cc8:	46bd      	mov	sp, r7
 8005cca:	bd80      	pop	{r7, pc}

08005ccc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005ccc:	b580      	push	{r7, lr}
 8005cce:	b08c      	sub	sp, #48	; 0x30
 8005cd0:	af04      	add	r7, sp, #16
 8005cd2:	60f8      	str	r0, [r7, #12]
 8005cd4:	60b9      	str	r1, [r7, #8]
 8005cd6:	603b      	str	r3, [r7, #0]
 8005cd8:	4613      	mov	r3, r2
 8005cda:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005cdc:	88fb      	ldrh	r3, [r7, #6]
 8005cde:	009b      	lsls	r3, r3, #2
 8005ce0:	4618      	mov	r0, r3
 8005ce2:	f002 f899 	bl	8007e18 <pvPortMalloc>
 8005ce6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005ce8:	697b      	ldr	r3, [r7, #20]
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d00e      	beq.n	8005d0c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8005cee:	20b8      	movs	r0, #184	; 0xb8
 8005cf0:	f002 f892 	bl	8007e18 <pvPortMalloc>
 8005cf4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005cf6:	69fb      	ldr	r3, [r7, #28]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d003      	beq.n	8005d04 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005cfc:	69fb      	ldr	r3, [r7, #28]
 8005cfe:	697a      	ldr	r2, [r7, #20]
 8005d00:	631a      	str	r2, [r3, #48]	; 0x30
 8005d02:	e005      	b.n	8005d10 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005d04:	6978      	ldr	r0, [r7, #20]
 8005d06:	f002 f94b 	bl	8007fa0 <vPortFree>
 8005d0a:	e001      	b.n	8005d10 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005d0c:	2300      	movs	r3, #0
 8005d0e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005d10:	69fb      	ldr	r3, [r7, #28]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d017      	beq.n	8005d46 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005d16:	69fb      	ldr	r3, [r7, #28]
 8005d18:	2200      	movs	r2, #0
 8005d1a:	f883 20b5 	strb.w	r2, [r3, #181]	; 0xb5
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005d1e:	88fa      	ldrh	r2, [r7, #6]
 8005d20:	2300      	movs	r3, #0
 8005d22:	9303      	str	r3, [sp, #12]
 8005d24:	69fb      	ldr	r3, [r7, #28]
 8005d26:	9302      	str	r3, [sp, #8]
 8005d28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d2a:	9301      	str	r3, [sp, #4]
 8005d2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d2e:	9300      	str	r3, [sp, #0]
 8005d30:	683b      	ldr	r3, [r7, #0]
 8005d32:	68b9      	ldr	r1, [r7, #8]
 8005d34:	68f8      	ldr	r0, [r7, #12]
 8005d36:	f000 f80f 	bl	8005d58 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005d3a:	69f8      	ldr	r0, [r7, #28]
 8005d3c:	f000 f8a2 	bl	8005e84 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005d40:	2301      	movs	r3, #1
 8005d42:	61bb      	str	r3, [r7, #24]
 8005d44:	e002      	b.n	8005d4c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005d46:	f04f 33ff 	mov.w	r3, #4294967295
 8005d4a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005d4c:	69bb      	ldr	r3, [r7, #24]
	}
 8005d4e:	4618      	mov	r0, r3
 8005d50:	3720      	adds	r7, #32
 8005d52:	46bd      	mov	sp, r7
 8005d54:	bd80      	pop	{r7, pc}
	...

08005d58 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005d58:	b580      	push	{r7, lr}
 8005d5a:	b088      	sub	sp, #32
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	60f8      	str	r0, [r7, #12]
 8005d60:	60b9      	str	r1, [r7, #8]
 8005d62:	607a      	str	r2, [r7, #4]
 8005d64:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8005d66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d68:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005d70:	3b01      	subs	r3, #1
 8005d72:	009b      	lsls	r3, r3, #2
 8005d74:	4413      	add	r3, r2
 8005d76:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8005d78:	69bb      	ldr	r3, [r7, #24]
 8005d7a:	f023 0307 	bic.w	r3, r3, #7
 8005d7e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005d80:	69bb      	ldr	r3, [r7, #24]
 8005d82:	f003 0307 	and.w	r3, r3, #7
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d00a      	beq.n	8005da0 <prvInitialiseNewTask+0x48>
	__asm volatile
 8005d8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d8e:	f383 8811 	msr	BASEPRI, r3
 8005d92:	f3bf 8f6f 	isb	sy
 8005d96:	f3bf 8f4f 	dsb	sy
 8005d9a:	617b      	str	r3, [r7, #20]
}
 8005d9c:	bf00      	nop
 8005d9e:	e7fe      	b.n	8005d9e <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005da0:	2300      	movs	r3, #0
 8005da2:	61fb      	str	r3, [r7, #28]
 8005da4:	e012      	b.n	8005dcc <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005da6:	68ba      	ldr	r2, [r7, #8]
 8005da8:	69fb      	ldr	r3, [r7, #28]
 8005daa:	4413      	add	r3, r2
 8005dac:	7819      	ldrb	r1, [r3, #0]
 8005dae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005db0:	69fb      	ldr	r3, [r7, #28]
 8005db2:	4413      	add	r3, r2
 8005db4:	3334      	adds	r3, #52	; 0x34
 8005db6:	460a      	mov	r2, r1
 8005db8:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8005dba:	68ba      	ldr	r2, [r7, #8]
 8005dbc:	69fb      	ldr	r3, [r7, #28]
 8005dbe:	4413      	add	r3, r2
 8005dc0:	781b      	ldrb	r3, [r3, #0]
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d006      	beq.n	8005dd4 <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005dc6:	69fb      	ldr	r3, [r7, #28]
 8005dc8:	3301      	adds	r3, #1
 8005dca:	61fb      	str	r3, [r7, #28]
 8005dcc:	69fb      	ldr	r3, [r7, #28]
 8005dce:	2b11      	cmp	r3, #17
 8005dd0:	d9e9      	bls.n	8005da6 <prvInitialiseNewTask+0x4e>
 8005dd2:	e000      	b.n	8005dd6 <prvInitialiseNewTask+0x7e>
		{
			break;
 8005dd4:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005dd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dd8:	2200      	movs	r2, #0
 8005dda:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005dde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005de0:	2b06      	cmp	r3, #6
 8005de2:	d901      	bls.n	8005de8 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005de4:	2306      	movs	r3, #6
 8005de6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005de8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005dec:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005dee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005df0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005df2:	649a      	str	r2, [r3, #72]	; 0x48
		pxNewTCB->uxMutexesHeld = 0;
 8005df4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005df6:	2200      	movs	r2, #0
 8005df8:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005dfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dfc:	3304      	adds	r3, #4
 8005dfe:	4618      	mov	r0, r3
 8005e00:	f7fe ffa1 	bl	8004d46 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005e04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e06:	3318      	adds	r3, #24
 8005e08:	4618      	mov	r0, r3
 8005e0a:	f7fe ff9c 	bl	8004d46 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005e0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005e12:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005e14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e16:	f1c3 0207 	rsb	r2, r3, #7
 8005e1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e1c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005e1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005e22:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005e24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e26:	2200      	movs	r2, #0
 8005e28:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005e2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e2e:	2200      	movs	r2, #0
 8005e30:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005e34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e36:	3350      	adds	r3, #80	; 0x50
 8005e38:	2260      	movs	r2, #96	; 0x60
 8005e3a:	2100      	movs	r1, #0
 8005e3c:	4618      	mov	r0, r3
 8005e3e:	f002 fa2f 	bl	80082a0 <memset>
 8005e42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e44:	4a0c      	ldr	r2, [pc, #48]	; (8005e78 <prvInitialiseNewTask+0x120>)
 8005e46:	655a      	str	r2, [r3, #84]	; 0x54
 8005e48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e4a:	4a0c      	ldr	r2, [pc, #48]	; (8005e7c <prvInitialiseNewTask+0x124>)
 8005e4c:	659a      	str	r2, [r3, #88]	; 0x58
 8005e4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e50:	4a0b      	ldr	r2, [pc, #44]	; (8005e80 <prvInitialiseNewTask+0x128>)
 8005e52:	65da      	str	r2, [r3, #92]	; 0x5c
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005e54:	683a      	ldr	r2, [r7, #0]
 8005e56:	68f9      	ldr	r1, [r7, #12]
 8005e58:	69b8      	ldr	r0, [r7, #24]
 8005e5a:	f001 fd8d 	bl	8007978 <pxPortInitialiseStack>
 8005e5e:	4602      	mov	r2, r0
 8005e60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e62:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8005e64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d002      	beq.n	8005e70 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005e6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005e6e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005e70:	bf00      	nop
 8005e72:	3720      	adds	r7, #32
 8005e74:	46bd      	mov	sp, r7
 8005e76:	bd80      	pop	{r7, pc}
 8005e78:	08008d5c 	.word	0x08008d5c
 8005e7c:	08008d7c 	.word	0x08008d7c
 8005e80:	08008d3c 	.word	0x08008d3c

08005e84 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005e84:	b580      	push	{r7, lr}
 8005e86:	b082      	sub	sp, #8
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005e8c:	f001 fea2 	bl	8007bd4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005e90:	4b2a      	ldr	r3, [pc, #168]	; (8005f3c <prvAddNewTaskToReadyList+0xb8>)
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	3301      	adds	r3, #1
 8005e96:	4a29      	ldr	r2, [pc, #164]	; (8005f3c <prvAddNewTaskToReadyList+0xb8>)
 8005e98:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005e9a:	4b29      	ldr	r3, [pc, #164]	; (8005f40 <prvAddNewTaskToReadyList+0xbc>)
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d109      	bne.n	8005eb6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005ea2:	4a27      	ldr	r2, [pc, #156]	; (8005f40 <prvAddNewTaskToReadyList+0xbc>)
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005ea8:	4b24      	ldr	r3, [pc, #144]	; (8005f3c <prvAddNewTaskToReadyList+0xb8>)
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	2b01      	cmp	r3, #1
 8005eae:	d110      	bne.n	8005ed2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005eb0:	f000 fe22 	bl	8006af8 <prvInitialiseTaskLists>
 8005eb4:	e00d      	b.n	8005ed2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005eb6:	4b23      	ldr	r3, [pc, #140]	; (8005f44 <prvAddNewTaskToReadyList+0xc0>)
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d109      	bne.n	8005ed2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005ebe:	4b20      	ldr	r3, [pc, #128]	; (8005f40 <prvAddNewTaskToReadyList+0xbc>)
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ec8:	429a      	cmp	r2, r3
 8005eca:	d802      	bhi.n	8005ed2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005ecc:	4a1c      	ldr	r2, [pc, #112]	; (8005f40 <prvAddNewTaskToReadyList+0xbc>)
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005ed2:	4b1d      	ldr	r3, [pc, #116]	; (8005f48 <prvAddNewTaskToReadyList+0xc4>)
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	3301      	adds	r3, #1
 8005ed8:	4a1b      	ldr	r2, [pc, #108]	; (8005f48 <prvAddNewTaskToReadyList+0xc4>)
 8005eda:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ee0:	2201      	movs	r2, #1
 8005ee2:	409a      	lsls	r2, r3
 8005ee4:	4b19      	ldr	r3, [pc, #100]	; (8005f4c <prvAddNewTaskToReadyList+0xc8>)
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	4313      	orrs	r3, r2
 8005eea:	4a18      	ldr	r2, [pc, #96]	; (8005f4c <prvAddNewTaskToReadyList+0xc8>)
 8005eec:	6013      	str	r3, [r2, #0]
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ef2:	4613      	mov	r3, r2
 8005ef4:	009b      	lsls	r3, r3, #2
 8005ef6:	4413      	add	r3, r2
 8005ef8:	009b      	lsls	r3, r3, #2
 8005efa:	4a15      	ldr	r2, [pc, #84]	; (8005f50 <prvAddNewTaskToReadyList+0xcc>)
 8005efc:	441a      	add	r2, r3
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	3304      	adds	r3, #4
 8005f02:	4619      	mov	r1, r3
 8005f04:	4610      	mov	r0, r2
 8005f06:	f7fe ff2b 	bl	8004d60 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005f0a:	f001 fe93 	bl	8007c34 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005f0e:	4b0d      	ldr	r3, [pc, #52]	; (8005f44 <prvAddNewTaskToReadyList+0xc0>)
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d00e      	beq.n	8005f34 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005f16:	4b0a      	ldr	r3, [pc, #40]	; (8005f40 <prvAddNewTaskToReadyList+0xbc>)
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f20:	429a      	cmp	r2, r3
 8005f22:	d207      	bcs.n	8005f34 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005f24:	4b0b      	ldr	r3, [pc, #44]	; (8005f54 <prvAddNewTaskToReadyList+0xd0>)
 8005f26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f2a:	601a      	str	r2, [r3, #0]
 8005f2c:	f3bf 8f4f 	dsb	sy
 8005f30:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005f34:	bf00      	nop
 8005f36:	3708      	adds	r7, #8
 8005f38:	46bd      	mov	sp, r7
 8005f3a:	bd80      	pop	{r7, pc}
 8005f3c:	20000794 	.word	0x20000794
 8005f40:	20000694 	.word	0x20000694
 8005f44:	200007a0 	.word	0x200007a0
 8005f48:	200007b0 	.word	0x200007b0
 8005f4c:	2000079c 	.word	0x2000079c
 8005f50:	20000698 	.word	0x20000698
 8005f54:	e000ed04 	.word	0xe000ed04

08005f58 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8005f58:	b580      	push	{r7, lr}
 8005f5a:	b084      	sub	sp, #16
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8005f60:	f001 fe38 	bl	8007bd4 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d102      	bne.n	8005f70 <vTaskDelete+0x18>
 8005f6a:	4b39      	ldr	r3, [pc, #228]	; (8006050 <vTaskDelete+0xf8>)
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	e000      	b.n	8005f72 <vTaskDelete+0x1a>
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	3304      	adds	r3, #4
 8005f78:	4618      	mov	r0, r3
 8005f7a:	f7fe ff4e 	bl	8004e1a <uxListRemove>
 8005f7e:	4603      	mov	r3, r0
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d115      	bne.n	8005fb0 <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f88:	4932      	ldr	r1, [pc, #200]	; (8006054 <vTaskDelete+0xfc>)
 8005f8a:	4613      	mov	r3, r2
 8005f8c:	009b      	lsls	r3, r3, #2
 8005f8e:	4413      	add	r3, r2
 8005f90:	009b      	lsls	r3, r3, #2
 8005f92:	440b      	add	r3, r1
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d10a      	bne.n	8005fb0 <vTaskDelete+0x58>
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f9e:	2201      	movs	r2, #1
 8005fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8005fa4:	43da      	mvns	r2, r3
 8005fa6:	4b2c      	ldr	r3, [pc, #176]	; (8006058 <vTaskDelete+0x100>)
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	4013      	ands	r3, r2
 8005fac:	4a2a      	ldr	r2, [pc, #168]	; (8006058 <vTaskDelete+0x100>)
 8005fae:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d004      	beq.n	8005fc2 <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	3318      	adds	r3, #24
 8005fbc:	4618      	mov	r0, r3
 8005fbe:	f7fe ff2c 	bl	8004e1a <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8005fc2:	4b26      	ldr	r3, [pc, #152]	; (800605c <vTaskDelete+0x104>)
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	3301      	adds	r3, #1
 8005fc8:	4a24      	ldr	r2, [pc, #144]	; (800605c <vTaskDelete+0x104>)
 8005fca:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8005fcc:	4b20      	ldr	r3, [pc, #128]	; (8006050 <vTaskDelete+0xf8>)
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	68fa      	ldr	r2, [r7, #12]
 8005fd2:	429a      	cmp	r2, r3
 8005fd4:	d10b      	bne.n	8005fee <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	3304      	adds	r3, #4
 8005fda:	4619      	mov	r1, r3
 8005fdc:	4820      	ldr	r0, [pc, #128]	; (8006060 <vTaskDelete+0x108>)
 8005fde:	f7fe febf 	bl	8004d60 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8005fe2:	4b20      	ldr	r3, [pc, #128]	; (8006064 <vTaskDelete+0x10c>)
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	3301      	adds	r3, #1
 8005fe8:	4a1e      	ldr	r2, [pc, #120]	; (8006064 <vTaskDelete+0x10c>)
 8005fea:	6013      	str	r3, [r2, #0]
 8005fec:	e009      	b.n	8006002 <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8005fee:	4b1e      	ldr	r3, [pc, #120]	; (8006068 <vTaskDelete+0x110>)
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	3b01      	subs	r3, #1
 8005ff4:	4a1c      	ldr	r2, [pc, #112]	; (8006068 <vTaskDelete+0x110>)
 8005ff6:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 8005ff8:	68f8      	ldr	r0, [r7, #12]
 8005ffa:	f000 fdeb 	bl	8006bd4 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8005ffe:	f000 fe1d 	bl	8006c3c <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 8006002:	f001 fe17 	bl	8007c34 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8006006:	4b19      	ldr	r3, [pc, #100]	; (800606c <vTaskDelete+0x114>)
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	2b00      	cmp	r3, #0
 800600c:	d01b      	beq.n	8006046 <vTaskDelete+0xee>
		{
			if( pxTCB == pxCurrentTCB )
 800600e:	4b10      	ldr	r3, [pc, #64]	; (8006050 <vTaskDelete+0xf8>)
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	68fa      	ldr	r2, [r7, #12]
 8006014:	429a      	cmp	r2, r3
 8006016:	d116      	bne.n	8006046 <vTaskDelete+0xee>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8006018:	4b15      	ldr	r3, [pc, #84]	; (8006070 <vTaskDelete+0x118>)
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	2b00      	cmp	r3, #0
 800601e:	d00a      	beq.n	8006036 <vTaskDelete+0xde>
	__asm volatile
 8006020:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006024:	f383 8811 	msr	BASEPRI, r3
 8006028:	f3bf 8f6f 	isb	sy
 800602c:	f3bf 8f4f 	dsb	sy
 8006030:	60bb      	str	r3, [r7, #8]
}
 8006032:	bf00      	nop
 8006034:	e7fe      	b.n	8006034 <vTaskDelete+0xdc>
				portYIELD_WITHIN_API();
 8006036:	4b0f      	ldr	r3, [pc, #60]	; (8006074 <vTaskDelete+0x11c>)
 8006038:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800603c:	601a      	str	r2, [r3, #0]
 800603e:	f3bf 8f4f 	dsb	sy
 8006042:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006046:	bf00      	nop
 8006048:	3710      	adds	r7, #16
 800604a:	46bd      	mov	sp, r7
 800604c:	bd80      	pop	{r7, pc}
 800604e:	bf00      	nop
 8006050:	20000694 	.word	0x20000694
 8006054:	20000698 	.word	0x20000698
 8006058:	2000079c 	.word	0x2000079c
 800605c:	200007b0 	.word	0x200007b0
 8006060:	20000768 	.word	0x20000768
 8006064:	2000077c 	.word	0x2000077c
 8006068:	20000794 	.word	0x20000794
 800606c:	200007a0 	.word	0x200007a0
 8006070:	200007bc 	.word	0x200007bc
 8006074:	e000ed04 	.word	0xe000ed04

08006078 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006078:	b580      	push	{r7, lr}
 800607a:	b084      	sub	sp, #16
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006080:	2300      	movs	r3, #0
 8006082:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	2b00      	cmp	r3, #0
 8006088:	d017      	beq.n	80060ba <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800608a:	4b13      	ldr	r3, [pc, #76]	; (80060d8 <vTaskDelay+0x60>)
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	2b00      	cmp	r3, #0
 8006090:	d00a      	beq.n	80060a8 <vTaskDelay+0x30>
	__asm volatile
 8006092:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006096:	f383 8811 	msr	BASEPRI, r3
 800609a:	f3bf 8f6f 	isb	sy
 800609e:	f3bf 8f4f 	dsb	sy
 80060a2:	60bb      	str	r3, [r7, #8]
}
 80060a4:	bf00      	nop
 80060a6:	e7fe      	b.n	80060a6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80060a8:	f000 f88a 	bl	80061c0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80060ac:	2100      	movs	r1, #0
 80060ae:	6878      	ldr	r0, [r7, #4]
 80060b0:	f001 f8ea 	bl	8007288 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80060b4:	f000 f892 	bl	80061dc <xTaskResumeAll>
 80060b8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d107      	bne.n	80060d0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80060c0:	4b06      	ldr	r3, [pc, #24]	; (80060dc <vTaskDelay+0x64>)
 80060c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80060c6:	601a      	str	r2, [r3, #0]
 80060c8:	f3bf 8f4f 	dsb	sy
 80060cc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80060d0:	bf00      	nop
 80060d2:	3710      	adds	r7, #16
 80060d4:	46bd      	mov	sp, r7
 80060d6:	bd80      	pop	{r7, pc}
 80060d8:	200007bc 	.word	0x200007bc
 80060dc:	e000ed04 	.word	0xe000ed04

080060e0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80060e0:	b580      	push	{r7, lr}
 80060e2:	b08a      	sub	sp, #40	; 0x28
 80060e4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80060e6:	2300      	movs	r3, #0
 80060e8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80060ea:	2300      	movs	r3, #0
 80060ec:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80060ee:	463a      	mov	r2, r7
 80060f0:	1d39      	adds	r1, r7, #4
 80060f2:	f107 0308 	add.w	r3, r7, #8
 80060f6:	4618      	mov	r0, r3
 80060f8:	f7fa f8d0 	bl	800029c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80060fc:	6839      	ldr	r1, [r7, #0]
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	68ba      	ldr	r2, [r7, #8]
 8006102:	9202      	str	r2, [sp, #8]
 8006104:	9301      	str	r3, [sp, #4]
 8006106:	2300      	movs	r3, #0
 8006108:	9300      	str	r3, [sp, #0]
 800610a:	2300      	movs	r3, #0
 800610c:	460a      	mov	r2, r1
 800610e:	4924      	ldr	r1, [pc, #144]	; (80061a0 <vTaskStartScheduler+0xc0>)
 8006110:	4824      	ldr	r0, [pc, #144]	; (80061a4 <vTaskStartScheduler+0xc4>)
 8006112:	f7ff fd7f 	bl	8005c14 <xTaskCreateStatic>
 8006116:	4603      	mov	r3, r0
 8006118:	4a23      	ldr	r2, [pc, #140]	; (80061a8 <vTaskStartScheduler+0xc8>)
 800611a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800611c:	4b22      	ldr	r3, [pc, #136]	; (80061a8 <vTaskStartScheduler+0xc8>)
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	2b00      	cmp	r3, #0
 8006122:	d002      	beq.n	800612a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006124:	2301      	movs	r3, #1
 8006126:	617b      	str	r3, [r7, #20]
 8006128:	e001      	b.n	800612e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800612a:	2300      	movs	r3, #0
 800612c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800612e:	697b      	ldr	r3, [r7, #20]
 8006130:	2b01      	cmp	r3, #1
 8006132:	d102      	bne.n	800613a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006134:	f001 f90e 	bl	8007354 <xTimerCreateTimerTask>
 8006138:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800613a:	697b      	ldr	r3, [r7, #20]
 800613c:	2b01      	cmp	r3, #1
 800613e:	d11b      	bne.n	8006178 <vTaskStartScheduler+0x98>
	__asm volatile
 8006140:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006144:	f383 8811 	msr	BASEPRI, r3
 8006148:	f3bf 8f6f 	isb	sy
 800614c:	f3bf 8f4f 	dsb	sy
 8006150:	613b      	str	r3, [r7, #16]
}
 8006152:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006154:	4b15      	ldr	r3, [pc, #84]	; (80061ac <vTaskStartScheduler+0xcc>)
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	3350      	adds	r3, #80	; 0x50
 800615a:	4a15      	ldr	r2, [pc, #84]	; (80061b0 <vTaskStartScheduler+0xd0>)
 800615c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800615e:	4b15      	ldr	r3, [pc, #84]	; (80061b4 <vTaskStartScheduler+0xd4>)
 8006160:	f04f 32ff 	mov.w	r2, #4294967295
 8006164:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006166:	4b14      	ldr	r3, [pc, #80]	; (80061b8 <vTaskStartScheduler+0xd8>)
 8006168:	2201      	movs	r2, #1
 800616a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800616c:	4b13      	ldr	r3, [pc, #76]	; (80061bc <vTaskStartScheduler+0xdc>)
 800616e:	2200      	movs	r2, #0
 8006170:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006172:	f001 fc8d 	bl	8007a90 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006176:	e00e      	b.n	8006196 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006178:	697b      	ldr	r3, [r7, #20]
 800617a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800617e:	d10a      	bne.n	8006196 <vTaskStartScheduler+0xb6>
	__asm volatile
 8006180:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006184:	f383 8811 	msr	BASEPRI, r3
 8006188:	f3bf 8f6f 	isb	sy
 800618c:	f3bf 8f4f 	dsb	sy
 8006190:	60fb      	str	r3, [r7, #12]
}
 8006192:	bf00      	nop
 8006194:	e7fe      	b.n	8006194 <vTaskStartScheduler+0xb4>
}
 8006196:	bf00      	nop
 8006198:	3718      	adds	r7, #24
 800619a:	46bd      	mov	sp, r7
 800619c:	bd80      	pop	{r7, pc}
 800619e:	bf00      	nop
 80061a0:	08008cec 	.word	0x08008cec
 80061a4:	08006ac5 	.word	0x08006ac5
 80061a8:	200007b8 	.word	0x200007b8
 80061ac:	20000694 	.word	0x20000694
 80061b0:	20000010 	.word	0x20000010
 80061b4:	200007b4 	.word	0x200007b4
 80061b8:	200007a0 	.word	0x200007a0
 80061bc:	20000798 	.word	0x20000798

080061c0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80061c0:	b480      	push	{r7}
 80061c2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80061c4:	4b04      	ldr	r3, [pc, #16]	; (80061d8 <vTaskSuspendAll+0x18>)
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	3301      	adds	r3, #1
 80061ca:	4a03      	ldr	r2, [pc, #12]	; (80061d8 <vTaskSuspendAll+0x18>)
 80061cc:	6013      	str	r3, [r2, #0]
}
 80061ce:	bf00      	nop
 80061d0:	46bd      	mov	sp, r7
 80061d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d6:	4770      	bx	lr
 80061d8:	200007bc 	.word	0x200007bc

080061dc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80061dc:	b580      	push	{r7, lr}
 80061de:	b084      	sub	sp, #16
 80061e0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80061e2:	2300      	movs	r3, #0
 80061e4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80061e6:	2300      	movs	r3, #0
 80061e8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80061ea:	4b41      	ldr	r3, [pc, #260]	; (80062f0 <xTaskResumeAll+0x114>)
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d10a      	bne.n	8006208 <xTaskResumeAll+0x2c>
	__asm volatile
 80061f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061f6:	f383 8811 	msr	BASEPRI, r3
 80061fa:	f3bf 8f6f 	isb	sy
 80061fe:	f3bf 8f4f 	dsb	sy
 8006202:	603b      	str	r3, [r7, #0]
}
 8006204:	bf00      	nop
 8006206:	e7fe      	b.n	8006206 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006208:	f001 fce4 	bl	8007bd4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800620c:	4b38      	ldr	r3, [pc, #224]	; (80062f0 <xTaskResumeAll+0x114>)
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	3b01      	subs	r3, #1
 8006212:	4a37      	ldr	r2, [pc, #220]	; (80062f0 <xTaskResumeAll+0x114>)
 8006214:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006216:	4b36      	ldr	r3, [pc, #216]	; (80062f0 <xTaskResumeAll+0x114>)
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	2b00      	cmp	r3, #0
 800621c:	d161      	bne.n	80062e2 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800621e:	4b35      	ldr	r3, [pc, #212]	; (80062f4 <xTaskResumeAll+0x118>)
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	2b00      	cmp	r3, #0
 8006224:	d05d      	beq.n	80062e2 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006226:	e02e      	b.n	8006286 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8006228:	4b33      	ldr	r3, [pc, #204]	; (80062f8 <xTaskResumeAll+0x11c>)
 800622a:	68db      	ldr	r3, [r3, #12]
 800622c:	68db      	ldr	r3, [r3, #12]
 800622e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	3318      	adds	r3, #24
 8006234:	4618      	mov	r0, r3
 8006236:	f7fe fdf0 	bl	8004e1a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	3304      	adds	r3, #4
 800623e:	4618      	mov	r0, r3
 8006240:	f7fe fdeb 	bl	8004e1a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006248:	2201      	movs	r2, #1
 800624a:	409a      	lsls	r2, r3
 800624c:	4b2b      	ldr	r3, [pc, #172]	; (80062fc <xTaskResumeAll+0x120>)
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	4313      	orrs	r3, r2
 8006252:	4a2a      	ldr	r2, [pc, #168]	; (80062fc <xTaskResumeAll+0x120>)
 8006254:	6013      	str	r3, [r2, #0]
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800625a:	4613      	mov	r3, r2
 800625c:	009b      	lsls	r3, r3, #2
 800625e:	4413      	add	r3, r2
 8006260:	009b      	lsls	r3, r3, #2
 8006262:	4a27      	ldr	r2, [pc, #156]	; (8006300 <xTaskResumeAll+0x124>)
 8006264:	441a      	add	r2, r3
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	3304      	adds	r3, #4
 800626a:	4619      	mov	r1, r3
 800626c:	4610      	mov	r0, r2
 800626e:	f7fe fd77 	bl	8004d60 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006276:	4b23      	ldr	r3, [pc, #140]	; (8006304 <xTaskResumeAll+0x128>)
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800627c:	429a      	cmp	r2, r3
 800627e:	d302      	bcc.n	8006286 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8006280:	4b21      	ldr	r3, [pc, #132]	; (8006308 <xTaskResumeAll+0x12c>)
 8006282:	2201      	movs	r2, #1
 8006284:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006286:	4b1c      	ldr	r3, [pc, #112]	; (80062f8 <xTaskResumeAll+0x11c>)
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	2b00      	cmp	r3, #0
 800628c:	d1cc      	bne.n	8006228 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	2b00      	cmp	r3, #0
 8006292:	d001      	beq.n	8006298 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006294:	f000 fcd2 	bl	8006c3c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8006298:	4b1c      	ldr	r3, [pc, #112]	; (800630c <xTaskResumeAll+0x130>)
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d010      	beq.n	80062c6 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80062a4:	f000 f912 	bl	80064cc <xTaskIncrementTick>
 80062a8:	4603      	mov	r3, r0
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d002      	beq.n	80062b4 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80062ae:	4b16      	ldr	r3, [pc, #88]	; (8006308 <xTaskResumeAll+0x12c>)
 80062b0:	2201      	movs	r2, #1
 80062b2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	3b01      	subs	r3, #1
 80062b8:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d1f1      	bne.n	80062a4 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 80062c0:	4b12      	ldr	r3, [pc, #72]	; (800630c <xTaskResumeAll+0x130>)
 80062c2:	2200      	movs	r2, #0
 80062c4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80062c6:	4b10      	ldr	r3, [pc, #64]	; (8006308 <xTaskResumeAll+0x12c>)
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d009      	beq.n	80062e2 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80062ce:	2301      	movs	r3, #1
 80062d0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80062d2:	4b0f      	ldr	r3, [pc, #60]	; (8006310 <xTaskResumeAll+0x134>)
 80062d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80062d8:	601a      	str	r2, [r3, #0]
 80062da:	f3bf 8f4f 	dsb	sy
 80062de:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80062e2:	f001 fca7 	bl	8007c34 <vPortExitCritical>

	return xAlreadyYielded;
 80062e6:	68bb      	ldr	r3, [r7, #8]
}
 80062e8:	4618      	mov	r0, r3
 80062ea:	3710      	adds	r7, #16
 80062ec:	46bd      	mov	sp, r7
 80062ee:	bd80      	pop	{r7, pc}
 80062f0:	200007bc 	.word	0x200007bc
 80062f4:	20000794 	.word	0x20000794
 80062f8:	20000754 	.word	0x20000754
 80062fc:	2000079c 	.word	0x2000079c
 8006300:	20000698 	.word	0x20000698
 8006304:	20000694 	.word	0x20000694
 8006308:	200007a8 	.word	0x200007a8
 800630c:	200007a4 	.word	0x200007a4
 8006310:	e000ed04 	.word	0xe000ed04

08006314 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006314:	b480      	push	{r7}
 8006316:	b083      	sub	sp, #12
 8006318:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800631a:	4b05      	ldr	r3, [pc, #20]	; (8006330 <xTaskGetTickCount+0x1c>)
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006320:	687b      	ldr	r3, [r7, #4]
}
 8006322:	4618      	mov	r0, r3
 8006324:	370c      	adds	r7, #12
 8006326:	46bd      	mov	sp, r7
 8006328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632c:	4770      	bx	lr
 800632e:	bf00      	nop
 8006330:	20000798 	.word	0x20000798

08006334 <prvSearchForNameWithinSingleList>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_xTaskGetHandle == 1 )

	static TCB_t *prvSearchForNameWithinSingleList( List_t *pxList, const char pcNameToQuery[] )
	{
 8006334:	b480      	push	{r7}
 8006336:	b08b      	sub	sp, #44	; 0x2c
 8006338:	af00      	add	r7, sp, #0
 800633a:	6078      	str	r0, [r7, #4]
 800633c:	6039      	str	r1, [r7, #0]
	TCB_t *pxNextTCB, *pxFirstTCB, *pxReturn = NULL;
 800633e:	2300      	movs	r3, #0
 8006340:	627b      	str	r3, [r7, #36]	; 0x24
	UBaseType_t x;
	char cNextChar;

		/* This function is called with the scheduler suspended. */

		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	2b00      	cmp	r3, #0
 8006348:	d052      	beq.n	80063f0 <prvSearchForNameWithinSingleList+0xbc>
		{
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	61fb      	str	r3, [r7, #28]
 800634e:	69fb      	ldr	r3, [r7, #28]
 8006350:	685b      	ldr	r3, [r3, #4]
 8006352:	685a      	ldr	r2, [r3, #4]
 8006354:	69fb      	ldr	r3, [r7, #28]
 8006356:	605a      	str	r2, [r3, #4]
 8006358:	69fb      	ldr	r3, [r7, #28]
 800635a:	685a      	ldr	r2, [r3, #4]
 800635c:	69fb      	ldr	r3, [r7, #28]
 800635e:	3308      	adds	r3, #8
 8006360:	429a      	cmp	r2, r3
 8006362:	d104      	bne.n	800636e <prvSearchForNameWithinSingleList+0x3a>
 8006364:	69fb      	ldr	r3, [r7, #28]
 8006366:	685b      	ldr	r3, [r3, #4]
 8006368:	685a      	ldr	r2, [r3, #4]
 800636a:	69fb      	ldr	r3, [r7, #28]
 800636c:	605a      	str	r2, [r3, #4]
 800636e:	69fb      	ldr	r3, [r7, #28]
 8006370:	685b      	ldr	r3, [r3, #4]
 8006372:	68db      	ldr	r3, [r3, #12]
 8006374:	61bb      	str	r3, [r7, #24]

			do
			{
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	617b      	str	r3, [r7, #20]
 800637a:	697b      	ldr	r3, [r7, #20]
 800637c:	685b      	ldr	r3, [r3, #4]
 800637e:	685a      	ldr	r2, [r3, #4]
 8006380:	697b      	ldr	r3, [r7, #20]
 8006382:	605a      	str	r2, [r3, #4]
 8006384:	697b      	ldr	r3, [r7, #20]
 8006386:	685a      	ldr	r2, [r3, #4]
 8006388:	697b      	ldr	r3, [r7, #20]
 800638a:	3308      	adds	r3, #8
 800638c:	429a      	cmp	r2, r3
 800638e:	d104      	bne.n	800639a <prvSearchForNameWithinSingleList+0x66>
 8006390:	697b      	ldr	r3, [r7, #20]
 8006392:	685b      	ldr	r3, [r3, #4]
 8006394:	685a      	ldr	r2, [r3, #4]
 8006396:	697b      	ldr	r3, [r7, #20]
 8006398:	605a      	str	r2, [r3, #4]
 800639a:	697b      	ldr	r3, [r7, #20]
 800639c:	685b      	ldr	r3, [r3, #4]
 800639e:	68db      	ldr	r3, [r3, #12]
 80063a0:	613b      	str	r3, [r7, #16]

				/* Check each character in the name looking for a match or
				mismatch. */
				for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80063a2:	2300      	movs	r3, #0
 80063a4:	623b      	str	r3, [r7, #32]
 80063a6:	e015      	b.n	80063d4 <prvSearchForNameWithinSingleList+0xa0>
				{
					cNextChar = pxNextTCB->pcTaskName[ x ];
 80063a8:	693a      	ldr	r2, [r7, #16]
 80063aa:	6a3b      	ldr	r3, [r7, #32]
 80063ac:	4413      	add	r3, r2
 80063ae:	3334      	adds	r3, #52	; 0x34
 80063b0:	781b      	ldrb	r3, [r3, #0]
 80063b2:	73fb      	strb	r3, [r7, #15]

					if( cNextChar != pcNameToQuery[ x ] )
 80063b4:	683a      	ldr	r2, [r7, #0]
 80063b6:	6a3b      	ldr	r3, [r7, #32]
 80063b8:	4413      	add	r3, r2
 80063ba:	781b      	ldrb	r3, [r3, #0]
 80063bc:	7bfa      	ldrb	r2, [r7, #15]
 80063be:	429a      	cmp	r2, r3
 80063c0:	d10c      	bne.n	80063dc <prvSearchForNameWithinSingleList+0xa8>
					{
						/* Characters didn't match. */
						break;
					}
					else if( cNextChar == 0x00 )
 80063c2:	7bfb      	ldrb	r3, [r7, #15]
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d102      	bne.n	80063ce <prvSearchForNameWithinSingleList+0x9a>
					{
						/* Both strings terminated, a match must have been
						found. */
						pxReturn = pxNextTCB;
 80063c8:	693b      	ldr	r3, [r7, #16]
 80063ca:	627b      	str	r3, [r7, #36]	; 0x24
						break;
 80063cc:	e007      	b.n	80063de <prvSearchForNameWithinSingleList+0xaa>
				for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80063ce:	6a3b      	ldr	r3, [r7, #32]
 80063d0:	3301      	adds	r3, #1
 80063d2:	623b      	str	r3, [r7, #32]
 80063d4:	6a3b      	ldr	r3, [r7, #32]
 80063d6:	2b11      	cmp	r3, #17
 80063d8:	d9e6      	bls.n	80063a8 <prvSearchForNameWithinSingleList+0x74>
 80063da:	e000      	b.n	80063de <prvSearchForNameWithinSingleList+0xaa>
						break;
 80063dc:	bf00      	nop
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxReturn != NULL )
 80063de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d104      	bne.n	80063ee <prvSearchForNameWithinSingleList+0xba>
				{
					/* The handle has been found. */
					break;
				}

			} while( pxNextTCB != pxFirstTCB );
 80063e4:	693a      	ldr	r2, [r7, #16]
 80063e6:	69bb      	ldr	r3, [r7, #24]
 80063e8:	429a      	cmp	r2, r3
 80063ea:	d1c4      	bne.n	8006376 <prvSearchForNameWithinSingleList+0x42>
 80063ec:	e000      	b.n	80063f0 <prvSearchForNameWithinSingleList+0xbc>
					break;
 80063ee:	bf00      	nop
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return pxReturn;
 80063f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 80063f2:	4618      	mov	r0, r3
 80063f4:	372c      	adds	r7, #44	; 0x2c
 80063f6:	46bd      	mov	sp, r7
 80063f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fc:	4770      	bx	lr
	...

08006400 <xTaskGetHandle>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_xTaskGetHandle == 1 )

	TaskHandle_t xTaskGetHandle( const char *pcNameToQuery ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006400:	b580      	push	{r7, lr}
 8006402:	b086      	sub	sp, #24
 8006404:	af00      	add	r7, sp, #0
 8006406:	6078      	str	r0, [r7, #4]
	UBaseType_t uxQueue = configMAX_PRIORITIES;
 8006408:	2307      	movs	r3, #7
 800640a:	617b      	str	r3, [r7, #20]
	TCB_t* pxTCB;

		/* Task names will be truncated to configMAX_TASK_NAME_LEN - 1 bytes. */
		configASSERT( strlen( pcNameToQuery ) < configMAX_TASK_NAME_LEN );
 800640c:	6878      	ldr	r0, [r7, #4]
 800640e:	f7f9 fedf 	bl	80001d0 <strlen>
 8006412:	4603      	mov	r3, r0
 8006414:	2b11      	cmp	r3, #17
 8006416:	d90a      	bls.n	800642e <xTaskGetHandle+0x2e>
	__asm volatile
 8006418:	f04f 0350 	mov.w	r3, #80	; 0x50
 800641c:	f383 8811 	msr	BASEPRI, r3
 8006420:	f3bf 8f6f 	isb	sy
 8006424:	f3bf 8f4f 	dsb	sy
 8006428:	60fb      	str	r3, [r7, #12]
}
 800642a:	bf00      	nop
 800642c:	e7fe      	b.n	800642c <xTaskGetHandle+0x2c>

		vTaskSuspendAll();
 800642e:	f7ff fec7 	bl	80061c0 <vTaskSuspendAll>
		{
			/* Search the ready lists. */
			do
			{
				uxQueue--;
 8006432:	697b      	ldr	r3, [r7, #20]
 8006434:	3b01      	subs	r3, #1
 8006436:	617b      	str	r3, [r7, #20]
				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) &( pxReadyTasksLists[ uxQueue ] ), pcNameToQuery );
 8006438:	697a      	ldr	r2, [r7, #20]
 800643a:	4613      	mov	r3, r2
 800643c:	009b      	lsls	r3, r3, #2
 800643e:	4413      	add	r3, r2
 8006440:	009b      	lsls	r3, r3, #2
 8006442:	4a1d      	ldr	r2, [pc, #116]	; (80064b8 <xTaskGetHandle+0xb8>)
 8006444:	4413      	add	r3, r2
 8006446:	6879      	ldr	r1, [r7, #4]
 8006448:	4618      	mov	r0, r3
 800644a:	f7ff ff73 	bl	8006334 <prvSearchForNameWithinSingleList>
 800644e:	6138      	str	r0, [r7, #16]

				if( pxTCB != NULL )
 8006450:	693b      	ldr	r3, [r7, #16]
 8006452:	2b00      	cmp	r3, #0
 8006454:	d103      	bne.n	800645e <xTaskGetHandle+0x5e>
				{
					/* Found the handle. */
					break;
				}

			} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006456:	697b      	ldr	r3, [r7, #20]
 8006458:	2b00      	cmp	r3, #0
 800645a:	d1ea      	bne.n	8006432 <xTaskGetHandle+0x32>
 800645c:	e000      	b.n	8006460 <xTaskGetHandle+0x60>
					break;
 800645e:	bf00      	nop

			/* Search the delayed lists. */
			if( pxTCB == NULL )
 8006460:	693b      	ldr	r3, [r7, #16]
 8006462:	2b00      	cmp	r3, #0
 8006464:	d106      	bne.n	8006474 <xTaskGetHandle+0x74>
			{
				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxDelayedTaskList, pcNameToQuery );
 8006466:	4b15      	ldr	r3, [pc, #84]	; (80064bc <xTaskGetHandle+0xbc>)
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	6879      	ldr	r1, [r7, #4]
 800646c:	4618      	mov	r0, r3
 800646e:	f7ff ff61 	bl	8006334 <prvSearchForNameWithinSingleList>
 8006472:	6138      	str	r0, [r7, #16]
			}

			if( pxTCB == NULL )
 8006474:	693b      	ldr	r3, [r7, #16]
 8006476:	2b00      	cmp	r3, #0
 8006478:	d106      	bne.n	8006488 <xTaskGetHandle+0x88>
			{
				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxOverflowDelayedTaskList, pcNameToQuery );
 800647a:	4b11      	ldr	r3, [pc, #68]	; (80064c0 <xTaskGetHandle+0xc0>)
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	6879      	ldr	r1, [r7, #4]
 8006480:	4618      	mov	r0, r3
 8006482:	f7ff ff57 	bl	8006334 <prvSearchForNameWithinSingleList>
 8006486:	6138      	str	r0, [r7, #16]
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
			{
				if( pxTCB == NULL )
 8006488:	693b      	ldr	r3, [r7, #16]
 800648a:	2b00      	cmp	r3, #0
 800648c:	d104      	bne.n	8006498 <xTaskGetHandle+0x98>
				{
					/* Search the suspended list. */
					pxTCB = prvSearchForNameWithinSingleList( &xSuspendedTaskList, pcNameToQuery );
 800648e:	6879      	ldr	r1, [r7, #4]
 8006490:	480c      	ldr	r0, [pc, #48]	; (80064c4 <xTaskGetHandle+0xc4>)
 8006492:	f7ff ff4f 	bl	8006334 <prvSearchForNameWithinSingleList>
 8006496:	6138      	str	r0, [r7, #16]
			}
			#endif

			#if( INCLUDE_vTaskDelete == 1 )
			{
				if( pxTCB == NULL )
 8006498:	693b      	ldr	r3, [r7, #16]
 800649a:	2b00      	cmp	r3, #0
 800649c:	d104      	bne.n	80064a8 <xTaskGetHandle+0xa8>
				{
					/* Search the deleted list. */
					pxTCB = prvSearchForNameWithinSingleList( &xTasksWaitingTermination, pcNameToQuery );
 800649e:	6879      	ldr	r1, [r7, #4]
 80064a0:	4809      	ldr	r0, [pc, #36]	; (80064c8 <xTaskGetHandle+0xc8>)
 80064a2:	f7ff ff47 	bl	8006334 <prvSearchForNameWithinSingleList>
 80064a6:	6138      	str	r0, [r7, #16]
				}
			}
			#endif
		}
		( void ) xTaskResumeAll();
 80064a8:	f7ff fe98 	bl	80061dc <xTaskResumeAll>

		return ( TaskHandle_t ) pxTCB;
 80064ac:	693b      	ldr	r3, [r7, #16]
	}
 80064ae:	4618      	mov	r0, r3
 80064b0:	3718      	adds	r7, #24
 80064b2:	46bd      	mov	sp, r7
 80064b4:	bd80      	pop	{r7, pc}
 80064b6:	bf00      	nop
 80064b8:	20000698 	.word	0x20000698
 80064bc:	2000074c 	.word	0x2000074c
 80064c0:	20000750 	.word	0x20000750
 80064c4:	20000780 	.word	0x20000780
 80064c8:	20000768 	.word	0x20000768

080064cc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80064cc:	b580      	push	{r7, lr}
 80064ce:	b086      	sub	sp, #24
 80064d0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80064d2:	2300      	movs	r3, #0
 80064d4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80064d6:	4b55      	ldr	r3, [pc, #340]	; (800662c <xTaskIncrementTick+0x160>)
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	2b00      	cmp	r3, #0
 80064dc:	f040 8093 	bne.w	8006606 <xTaskIncrementTick+0x13a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80064e0:	4b53      	ldr	r3, [pc, #332]	; (8006630 <xTaskIncrementTick+0x164>)
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	3301      	adds	r3, #1
 80064e6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80064e8:	4a51      	ldr	r2, [pc, #324]	; (8006630 <xTaskIncrementTick+0x164>)
 80064ea:	693b      	ldr	r3, [r7, #16]
 80064ec:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80064ee:	693b      	ldr	r3, [r7, #16]
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d120      	bne.n	8006536 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80064f4:	4b4f      	ldr	r3, [pc, #316]	; (8006634 <xTaskIncrementTick+0x168>)
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d00a      	beq.n	8006514 <xTaskIncrementTick+0x48>
	__asm volatile
 80064fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006502:	f383 8811 	msr	BASEPRI, r3
 8006506:	f3bf 8f6f 	isb	sy
 800650a:	f3bf 8f4f 	dsb	sy
 800650e:	603b      	str	r3, [r7, #0]
}
 8006510:	bf00      	nop
 8006512:	e7fe      	b.n	8006512 <xTaskIncrementTick+0x46>
 8006514:	4b47      	ldr	r3, [pc, #284]	; (8006634 <xTaskIncrementTick+0x168>)
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	60fb      	str	r3, [r7, #12]
 800651a:	4b47      	ldr	r3, [pc, #284]	; (8006638 <xTaskIncrementTick+0x16c>)
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	4a45      	ldr	r2, [pc, #276]	; (8006634 <xTaskIncrementTick+0x168>)
 8006520:	6013      	str	r3, [r2, #0]
 8006522:	4a45      	ldr	r2, [pc, #276]	; (8006638 <xTaskIncrementTick+0x16c>)
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	6013      	str	r3, [r2, #0]
 8006528:	4b44      	ldr	r3, [pc, #272]	; (800663c <xTaskIncrementTick+0x170>)
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	3301      	adds	r3, #1
 800652e:	4a43      	ldr	r2, [pc, #268]	; (800663c <xTaskIncrementTick+0x170>)
 8006530:	6013      	str	r3, [r2, #0]
 8006532:	f000 fb83 	bl	8006c3c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006536:	4b42      	ldr	r3, [pc, #264]	; (8006640 <xTaskIncrementTick+0x174>)
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	693a      	ldr	r2, [r7, #16]
 800653c:	429a      	cmp	r2, r3
 800653e:	d34d      	bcc.n	80065dc <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006540:	4b3c      	ldr	r3, [pc, #240]	; (8006634 <xTaskIncrementTick+0x168>)
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	2b00      	cmp	r3, #0
 8006548:	d101      	bne.n	800654e <xTaskIncrementTick+0x82>
 800654a:	2301      	movs	r3, #1
 800654c:	e000      	b.n	8006550 <xTaskIncrementTick+0x84>
 800654e:	2300      	movs	r3, #0
 8006550:	2b00      	cmp	r3, #0
 8006552:	d004      	beq.n	800655e <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006554:	4b3a      	ldr	r3, [pc, #232]	; (8006640 <xTaskIncrementTick+0x174>)
 8006556:	f04f 32ff 	mov.w	r2, #4294967295
 800655a:	601a      	str	r2, [r3, #0]
					break;
 800655c:	e03e      	b.n	80065dc <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800655e:	4b35      	ldr	r3, [pc, #212]	; (8006634 <xTaskIncrementTick+0x168>)
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	68db      	ldr	r3, [r3, #12]
 8006564:	68db      	ldr	r3, [r3, #12]
 8006566:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006568:	68bb      	ldr	r3, [r7, #8]
 800656a:	685b      	ldr	r3, [r3, #4]
 800656c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800656e:	693a      	ldr	r2, [r7, #16]
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	429a      	cmp	r2, r3
 8006574:	d203      	bcs.n	800657e <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006576:	4a32      	ldr	r2, [pc, #200]	; (8006640 <xTaskIncrementTick+0x174>)
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	6013      	str	r3, [r2, #0]
						break;
 800657c:	e02e      	b.n	80065dc <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800657e:	68bb      	ldr	r3, [r7, #8]
 8006580:	3304      	adds	r3, #4
 8006582:	4618      	mov	r0, r3
 8006584:	f7fe fc49 	bl	8004e1a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006588:	68bb      	ldr	r3, [r7, #8]
 800658a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800658c:	2b00      	cmp	r3, #0
 800658e:	d004      	beq.n	800659a <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006590:	68bb      	ldr	r3, [r7, #8]
 8006592:	3318      	adds	r3, #24
 8006594:	4618      	mov	r0, r3
 8006596:	f7fe fc40 	bl	8004e1a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800659a:	68bb      	ldr	r3, [r7, #8]
 800659c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800659e:	2201      	movs	r2, #1
 80065a0:	409a      	lsls	r2, r3
 80065a2:	4b28      	ldr	r3, [pc, #160]	; (8006644 <xTaskIncrementTick+0x178>)
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	4313      	orrs	r3, r2
 80065a8:	4a26      	ldr	r2, [pc, #152]	; (8006644 <xTaskIncrementTick+0x178>)
 80065aa:	6013      	str	r3, [r2, #0]
 80065ac:	68bb      	ldr	r3, [r7, #8]
 80065ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065b0:	4613      	mov	r3, r2
 80065b2:	009b      	lsls	r3, r3, #2
 80065b4:	4413      	add	r3, r2
 80065b6:	009b      	lsls	r3, r3, #2
 80065b8:	4a23      	ldr	r2, [pc, #140]	; (8006648 <xTaskIncrementTick+0x17c>)
 80065ba:	441a      	add	r2, r3
 80065bc:	68bb      	ldr	r3, [r7, #8]
 80065be:	3304      	adds	r3, #4
 80065c0:	4619      	mov	r1, r3
 80065c2:	4610      	mov	r0, r2
 80065c4:	f7fe fbcc 	bl	8004d60 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80065c8:	68bb      	ldr	r3, [r7, #8]
 80065ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065cc:	4b1f      	ldr	r3, [pc, #124]	; (800664c <xTaskIncrementTick+0x180>)
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065d2:	429a      	cmp	r2, r3
 80065d4:	d3b4      	bcc.n	8006540 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80065d6:	2301      	movs	r3, #1
 80065d8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80065da:	e7b1      	b.n	8006540 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80065dc:	4b1b      	ldr	r3, [pc, #108]	; (800664c <xTaskIncrementTick+0x180>)
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065e2:	4919      	ldr	r1, [pc, #100]	; (8006648 <xTaskIncrementTick+0x17c>)
 80065e4:	4613      	mov	r3, r2
 80065e6:	009b      	lsls	r3, r3, #2
 80065e8:	4413      	add	r3, r2
 80065ea:	009b      	lsls	r3, r3, #2
 80065ec:	440b      	add	r3, r1
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	2b01      	cmp	r3, #1
 80065f2:	d901      	bls.n	80065f8 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 80065f4:	2301      	movs	r3, #1
 80065f6:	617b      	str	r3, [r7, #20]

		#if ( configUSE_TICK_HOOK == 1 )
		{
			/* Guard against the tick hook being called when the pended tick
			count is being unwound (when the scheduler is being unlocked). */
			if( uxPendedTicks == ( UBaseType_t ) 0U )
 80065f8:	4b15      	ldr	r3, [pc, #84]	; (8006650 <xTaskIncrementTick+0x184>)
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d109      	bne.n	8006614 <xTaskIncrementTick+0x148>
			{
				vApplicationTickHook();
 8006600:	f7f9 fe45 	bl	800028e <vApplicationTickHook>
 8006604:	e006      	b.n	8006614 <xTaskIncrementTick+0x148>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8006606:	4b12      	ldr	r3, [pc, #72]	; (8006650 <xTaskIncrementTick+0x184>)
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	3301      	adds	r3, #1
 800660c:	4a10      	ldr	r2, [pc, #64]	; (8006650 <xTaskIncrementTick+0x184>)
 800660e:	6013      	str	r3, [r2, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
 8006610:	f7f9 fe3d 	bl	800028e <vApplicationTickHook>
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8006614:	4b0f      	ldr	r3, [pc, #60]	; (8006654 <xTaskIncrementTick+0x188>)
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	2b00      	cmp	r3, #0
 800661a:	d001      	beq.n	8006620 <xTaskIncrementTick+0x154>
		{
			xSwitchRequired = pdTRUE;
 800661c:	2301      	movs	r3, #1
 800661e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8006620:	697b      	ldr	r3, [r7, #20]
}
 8006622:	4618      	mov	r0, r3
 8006624:	3718      	adds	r7, #24
 8006626:	46bd      	mov	sp, r7
 8006628:	bd80      	pop	{r7, pc}
 800662a:	bf00      	nop
 800662c:	200007bc 	.word	0x200007bc
 8006630:	20000798 	.word	0x20000798
 8006634:	2000074c 	.word	0x2000074c
 8006638:	20000750 	.word	0x20000750
 800663c:	200007ac 	.word	0x200007ac
 8006640:	200007b4 	.word	0x200007b4
 8006644:	2000079c 	.word	0x2000079c
 8006648:	20000698 	.word	0x20000698
 800664c:	20000694 	.word	0x20000694
 8006650:	200007a4 	.word	0x200007a4
 8006654:	200007a8 	.word	0x200007a8

08006658 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006658:	b480      	push	{r7}
 800665a:	b087      	sub	sp, #28
 800665c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800665e:	4b29      	ldr	r3, [pc, #164]	; (8006704 <vTaskSwitchContext+0xac>)
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	2b00      	cmp	r3, #0
 8006664:	d003      	beq.n	800666e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006666:	4b28      	ldr	r3, [pc, #160]	; (8006708 <vTaskSwitchContext+0xb0>)
 8006668:	2201      	movs	r2, #1
 800666a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800666c:	e044      	b.n	80066f8 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800666e:	4b26      	ldr	r3, [pc, #152]	; (8006708 <vTaskSwitchContext+0xb0>)
 8006670:	2200      	movs	r2, #0
 8006672:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8006674:	4b25      	ldr	r3, [pc, #148]	; (800670c <vTaskSwitchContext+0xb4>)
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	fab3 f383 	clz	r3, r3
 8006680:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8006682:	7afb      	ldrb	r3, [r7, #11]
 8006684:	f1c3 031f 	rsb	r3, r3, #31
 8006688:	617b      	str	r3, [r7, #20]
 800668a:	4921      	ldr	r1, [pc, #132]	; (8006710 <vTaskSwitchContext+0xb8>)
 800668c:	697a      	ldr	r2, [r7, #20]
 800668e:	4613      	mov	r3, r2
 8006690:	009b      	lsls	r3, r3, #2
 8006692:	4413      	add	r3, r2
 8006694:	009b      	lsls	r3, r3, #2
 8006696:	440b      	add	r3, r1
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	2b00      	cmp	r3, #0
 800669c:	d10a      	bne.n	80066b4 <vTaskSwitchContext+0x5c>
	__asm volatile
 800669e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066a2:	f383 8811 	msr	BASEPRI, r3
 80066a6:	f3bf 8f6f 	isb	sy
 80066aa:	f3bf 8f4f 	dsb	sy
 80066ae:	607b      	str	r3, [r7, #4]
}
 80066b0:	bf00      	nop
 80066b2:	e7fe      	b.n	80066b2 <vTaskSwitchContext+0x5a>
 80066b4:	697a      	ldr	r2, [r7, #20]
 80066b6:	4613      	mov	r3, r2
 80066b8:	009b      	lsls	r3, r3, #2
 80066ba:	4413      	add	r3, r2
 80066bc:	009b      	lsls	r3, r3, #2
 80066be:	4a14      	ldr	r2, [pc, #80]	; (8006710 <vTaskSwitchContext+0xb8>)
 80066c0:	4413      	add	r3, r2
 80066c2:	613b      	str	r3, [r7, #16]
 80066c4:	693b      	ldr	r3, [r7, #16]
 80066c6:	685b      	ldr	r3, [r3, #4]
 80066c8:	685a      	ldr	r2, [r3, #4]
 80066ca:	693b      	ldr	r3, [r7, #16]
 80066cc:	605a      	str	r2, [r3, #4]
 80066ce:	693b      	ldr	r3, [r7, #16]
 80066d0:	685a      	ldr	r2, [r3, #4]
 80066d2:	693b      	ldr	r3, [r7, #16]
 80066d4:	3308      	adds	r3, #8
 80066d6:	429a      	cmp	r2, r3
 80066d8:	d104      	bne.n	80066e4 <vTaskSwitchContext+0x8c>
 80066da:	693b      	ldr	r3, [r7, #16]
 80066dc:	685b      	ldr	r3, [r3, #4]
 80066de:	685a      	ldr	r2, [r3, #4]
 80066e0:	693b      	ldr	r3, [r7, #16]
 80066e2:	605a      	str	r2, [r3, #4]
 80066e4:	693b      	ldr	r3, [r7, #16]
 80066e6:	685b      	ldr	r3, [r3, #4]
 80066e8:	68db      	ldr	r3, [r3, #12]
 80066ea:	4a0a      	ldr	r2, [pc, #40]	; (8006714 <vTaskSwitchContext+0xbc>)
 80066ec:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80066ee:	4b09      	ldr	r3, [pc, #36]	; (8006714 <vTaskSwitchContext+0xbc>)
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	3350      	adds	r3, #80	; 0x50
 80066f4:	4a08      	ldr	r2, [pc, #32]	; (8006718 <vTaskSwitchContext+0xc0>)
 80066f6:	6013      	str	r3, [r2, #0]
}
 80066f8:	bf00      	nop
 80066fa:	371c      	adds	r7, #28
 80066fc:	46bd      	mov	sp, r7
 80066fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006702:	4770      	bx	lr
 8006704:	200007bc 	.word	0x200007bc
 8006708:	200007a8 	.word	0x200007a8
 800670c:	2000079c 	.word	0x2000079c
 8006710:	20000698 	.word	0x20000698
 8006714:	20000694 	.word	0x20000694
 8006718:	20000010 	.word	0x20000010

0800671c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800671c:	b580      	push	{r7, lr}
 800671e:	b084      	sub	sp, #16
 8006720:	af00      	add	r7, sp, #0
 8006722:	6078      	str	r0, [r7, #4]
 8006724:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	2b00      	cmp	r3, #0
 800672a:	d10a      	bne.n	8006742 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800672c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006730:	f383 8811 	msr	BASEPRI, r3
 8006734:	f3bf 8f6f 	isb	sy
 8006738:	f3bf 8f4f 	dsb	sy
 800673c:	60fb      	str	r3, [r7, #12]
}
 800673e:	bf00      	nop
 8006740:	e7fe      	b.n	8006740 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006742:	4b07      	ldr	r3, [pc, #28]	; (8006760 <vTaskPlaceOnEventList+0x44>)
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	3318      	adds	r3, #24
 8006748:	4619      	mov	r1, r3
 800674a:	6878      	ldr	r0, [r7, #4]
 800674c:	f7fe fb2c 	bl	8004da8 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006750:	2101      	movs	r1, #1
 8006752:	6838      	ldr	r0, [r7, #0]
 8006754:	f000 fd98 	bl	8007288 <prvAddCurrentTaskToDelayedList>
}
 8006758:	bf00      	nop
 800675a:	3710      	adds	r7, #16
 800675c:	46bd      	mov	sp, r7
 800675e:	bd80      	pop	{r7, pc}
 8006760:	20000694 	.word	0x20000694

08006764 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 8006764:	b580      	push	{r7, lr}
 8006766:	b086      	sub	sp, #24
 8006768:	af00      	add	r7, sp, #0
 800676a:	60f8      	str	r0, [r7, #12]
 800676c:	60b9      	str	r1, [r7, #8]
 800676e:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	2b00      	cmp	r3, #0
 8006774:	d10a      	bne.n	800678c <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 8006776:	f04f 0350 	mov.w	r3, #80	; 0x50
 800677a:	f383 8811 	msr	BASEPRI, r3
 800677e:	f3bf 8f6f 	isb	sy
 8006782:	f3bf 8f4f 	dsb	sy
 8006786:	617b      	str	r3, [r7, #20]
}
 8006788:	bf00      	nop
 800678a:	e7fe      	b.n	800678a <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 800678c:	4b11      	ldr	r3, [pc, #68]	; (80067d4 <vTaskPlaceOnUnorderedEventList+0x70>)
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	2b00      	cmp	r3, #0
 8006792:	d10a      	bne.n	80067aa <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 8006794:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006798:	f383 8811 	msr	BASEPRI, r3
 800679c:	f3bf 8f6f 	isb	sy
 80067a0:	f3bf 8f4f 	dsb	sy
 80067a4:	613b      	str	r3, [r7, #16]
}
 80067a6:	bf00      	nop
 80067a8:	e7fe      	b.n	80067a8 <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 80067aa:	4b0b      	ldr	r3, [pc, #44]	; (80067d8 <vTaskPlaceOnUnorderedEventList+0x74>)
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	68ba      	ldr	r2, [r7, #8]
 80067b0:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80067b4:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80067b6:	4b08      	ldr	r3, [pc, #32]	; (80067d8 <vTaskPlaceOnUnorderedEventList+0x74>)
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	3318      	adds	r3, #24
 80067bc:	4619      	mov	r1, r3
 80067be:	68f8      	ldr	r0, [r7, #12]
 80067c0:	f7fe face 	bl	8004d60 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80067c4:	2101      	movs	r1, #1
 80067c6:	6878      	ldr	r0, [r7, #4]
 80067c8:	f000 fd5e 	bl	8007288 <prvAddCurrentTaskToDelayedList>
}
 80067cc:	bf00      	nop
 80067ce:	3718      	adds	r7, #24
 80067d0:	46bd      	mov	sp, r7
 80067d2:	bd80      	pop	{r7, pc}
 80067d4:	200007bc 	.word	0x200007bc
 80067d8:	20000694 	.word	0x20000694

080067dc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80067dc:	b580      	push	{r7, lr}
 80067de:	b086      	sub	sp, #24
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	60f8      	str	r0, [r7, #12]
 80067e4:	60b9      	str	r1, [r7, #8]
 80067e6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d10a      	bne.n	8006804 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80067ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067f2:	f383 8811 	msr	BASEPRI, r3
 80067f6:	f3bf 8f6f 	isb	sy
 80067fa:	f3bf 8f4f 	dsb	sy
 80067fe:	617b      	str	r3, [r7, #20]
}
 8006800:	bf00      	nop
 8006802:	e7fe      	b.n	8006802 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006804:	4b0a      	ldr	r3, [pc, #40]	; (8006830 <vTaskPlaceOnEventListRestricted+0x54>)
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	3318      	adds	r3, #24
 800680a:	4619      	mov	r1, r3
 800680c:	68f8      	ldr	r0, [r7, #12]
 800680e:	f7fe faa7 	bl	8004d60 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	2b00      	cmp	r3, #0
 8006816:	d002      	beq.n	800681e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8006818:	f04f 33ff 	mov.w	r3, #4294967295
 800681c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800681e:	6879      	ldr	r1, [r7, #4]
 8006820:	68b8      	ldr	r0, [r7, #8]
 8006822:	f000 fd31 	bl	8007288 <prvAddCurrentTaskToDelayedList>
	}
 8006826:	bf00      	nop
 8006828:	3718      	adds	r7, #24
 800682a:	46bd      	mov	sp, r7
 800682c:	bd80      	pop	{r7, pc}
 800682e:	bf00      	nop
 8006830:	20000694 	.word	0x20000694

08006834 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006834:	b580      	push	{r7, lr}
 8006836:	b086      	sub	sp, #24
 8006838:	af00      	add	r7, sp, #0
 800683a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	68db      	ldr	r3, [r3, #12]
 8006840:	68db      	ldr	r3, [r3, #12]
 8006842:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006844:	693b      	ldr	r3, [r7, #16]
 8006846:	2b00      	cmp	r3, #0
 8006848:	d10a      	bne.n	8006860 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800684a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800684e:	f383 8811 	msr	BASEPRI, r3
 8006852:	f3bf 8f6f 	isb	sy
 8006856:	f3bf 8f4f 	dsb	sy
 800685a:	60fb      	str	r3, [r7, #12]
}
 800685c:	bf00      	nop
 800685e:	e7fe      	b.n	800685e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006860:	693b      	ldr	r3, [r7, #16]
 8006862:	3318      	adds	r3, #24
 8006864:	4618      	mov	r0, r3
 8006866:	f7fe fad8 	bl	8004e1a <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800686a:	4b1d      	ldr	r3, [pc, #116]	; (80068e0 <xTaskRemoveFromEventList+0xac>)
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	2b00      	cmp	r3, #0
 8006870:	d11c      	bne.n	80068ac <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006872:	693b      	ldr	r3, [r7, #16]
 8006874:	3304      	adds	r3, #4
 8006876:	4618      	mov	r0, r3
 8006878:	f7fe facf 	bl	8004e1a <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800687c:	693b      	ldr	r3, [r7, #16]
 800687e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006880:	2201      	movs	r2, #1
 8006882:	409a      	lsls	r2, r3
 8006884:	4b17      	ldr	r3, [pc, #92]	; (80068e4 <xTaskRemoveFromEventList+0xb0>)
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	4313      	orrs	r3, r2
 800688a:	4a16      	ldr	r2, [pc, #88]	; (80068e4 <xTaskRemoveFromEventList+0xb0>)
 800688c:	6013      	str	r3, [r2, #0]
 800688e:	693b      	ldr	r3, [r7, #16]
 8006890:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006892:	4613      	mov	r3, r2
 8006894:	009b      	lsls	r3, r3, #2
 8006896:	4413      	add	r3, r2
 8006898:	009b      	lsls	r3, r3, #2
 800689a:	4a13      	ldr	r2, [pc, #76]	; (80068e8 <xTaskRemoveFromEventList+0xb4>)
 800689c:	441a      	add	r2, r3
 800689e:	693b      	ldr	r3, [r7, #16]
 80068a0:	3304      	adds	r3, #4
 80068a2:	4619      	mov	r1, r3
 80068a4:	4610      	mov	r0, r2
 80068a6:	f7fe fa5b 	bl	8004d60 <vListInsertEnd>
 80068aa:	e005      	b.n	80068b8 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80068ac:	693b      	ldr	r3, [r7, #16]
 80068ae:	3318      	adds	r3, #24
 80068b0:	4619      	mov	r1, r3
 80068b2:	480e      	ldr	r0, [pc, #56]	; (80068ec <xTaskRemoveFromEventList+0xb8>)
 80068b4:	f7fe fa54 	bl	8004d60 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80068b8:	693b      	ldr	r3, [r7, #16]
 80068ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068bc:	4b0c      	ldr	r3, [pc, #48]	; (80068f0 <xTaskRemoveFromEventList+0xbc>)
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068c2:	429a      	cmp	r2, r3
 80068c4:	d905      	bls.n	80068d2 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80068c6:	2301      	movs	r3, #1
 80068c8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80068ca:	4b0a      	ldr	r3, [pc, #40]	; (80068f4 <xTaskRemoveFromEventList+0xc0>)
 80068cc:	2201      	movs	r2, #1
 80068ce:	601a      	str	r2, [r3, #0]
 80068d0:	e001      	b.n	80068d6 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80068d2:	2300      	movs	r3, #0
 80068d4:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80068d6:	697b      	ldr	r3, [r7, #20]
}
 80068d8:	4618      	mov	r0, r3
 80068da:	3718      	adds	r7, #24
 80068dc:	46bd      	mov	sp, r7
 80068de:	bd80      	pop	{r7, pc}
 80068e0:	200007bc 	.word	0x200007bc
 80068e4:	2000079c 	.word	0x2000079c
 80068e8:	20000698 	.word	0x20000698
 80068ec:	20000754 	.word	0x20000754
 80068f0:	20000694 	.word	0x20000694
 80068f4:	200007a8 	.word	0x200007a8

080068f8 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 80068f8:	b580      	push	{r7, lr}
 80068fa:	b086      	sub	sp, #24
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	6078      	str	r0, [r7, #4]
 8006900:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 8006902:	4b29      	ldr	r3, [pc, #164]	; (80069a8 <vTaskRemoveFromUnorderedEventList+0xb0>)
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	2b00      	cmp	r3, #0
 8006908:	d10a      	bne.n	8006920 <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 800690a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800690e:	f383 8811 	msr	BASEPRI, r3
 8006912:	f3bf 8f6f 	isb	sy
 8006916:	f3bf 8f4f 	dsb	sy
 800691a:	613b      	str	r3, [r7, #16]
}
 800691c:	bf00      	nop
 800691e:	e7fe      	b.n	800691e <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8006920:	683b      	ldr	r3, [r7, #0]
 8006922:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = ( TCB_t * ) listGET_LIST_ITEM_OWNER( pxEventListItem );
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	68db      	ldr	r3, [r3, #12]
 800692e:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 8006930:	697b      	ldr	r3, [r7, #20]
 8006932:	2b00      	cmp	r3, #0
 8006934:	d10a      	bne.n	800694c <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 8006936:	f04f 0350 	mov.w	r3, #80	; 0x50
 800693a:	f383 8811 	msr	BASEPRI, r3
 800693e:	f3bf 8f6f 	isb	sy
 8006942:	f3bf 8f4f 	dsb	sy
 8006946:	60fb      	str	r3, [r7, #12]
}
 8006948:	bf00      	nop
 800694a:	e7fe      	b.n	800694a <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 800694c:	6878      	ldr	r0, [r7, #4]
 800694e:	f7fe fa64 	bl	8004e1a <uxListRemove>

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006952:	697b      	ldr	r3, [r7, #20]
 8006954:	3304      	adds	r3, #4
 8006956:	4618      	mov	r0, r3
 8006958:	f7fe fa5f 	bl	8004e1a <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 800695c:	697b      	ldr	r3, [r7, #20]
 800695e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006960:	2201      	movs	r2, #1
 8006962:	409a      	lsls	r2, r3
 8006964:	4b11      	ldr	r3, [pc, #68]	; (80069ac <vTaskRemoveFromUnorderedEventList+0xb4>)
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	4313      	orrs	r3, r2
 800696a:	4a10      	ldr	r2, [pc, #64]	; (80069ac <vTaskRemoveFromUnorderedEventList+0xb4>)
 800696c:	6013      	str	r3, [r2, #0]
 800696e:	697b      	ldr	r3, [r7, #20]
 8006970:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006972:	4613      	mov	r3, r2
 8006974:	009b      	lsls	r3, r3, #2
 8006976:	4413      	add	r3, r2
 8006978:	009b      	lsls	r3, r3, #2
 800697a:	4a0d      	ldr	r2, [pc, #52]	; (80069b0 <vTaskRemoveFromUnorderedEventList+0xb8>)
 800697c:	441a      	add	r2, r3
 800697e:	697b      	ldr	r3, [r7, #20]
 8006980:	3304      	adds	r3, #4
 8006982:	4619      	mov	r1, r3
 8006984:	4610      	mov	r0, r2
 8006986:	f7fe f9eb 	bl	8004d60 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800698a:	697b      	ldr	r3, [r7, #20]
 800698c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800698e:	4b09      	ldr	r3, [pc, #36]	; (80069b4 <vTaskRemoveFromUnorderedEventList+0xbc>)
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006994:	429a      	cmp	r2, r3
 8006996:	d902      	bls.n	800699e <vTaskRemoveFromUnorderedEventList+0xa6>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 8006998:	4b07      	ldr	r3, [pc, #28]	; (80069b8 <vTaskRemoveFromUnorderedEventList+0xc0>)
 800699a:	2201      	movs	r2, #1
 800699c:	601a      	str	r2, [r3, #0]
	}
}
 800699e:	bf00      	nop
 80069a0:	3718      	adds	r7, #24
 80069a2:	46bd      	mov	sp, r7
 80069a4:	bd80      	pop	{r7, pc}
 80069a6:	bf00      	nop
 80069a8:	200007bc 	.word	0x200007bc
 80069ac:	2000079c 	.word	0x2000079c
 80069b0:	20000698 	.word	0x20000698
 80069b4:	20000694 	.word	0x20000694
 80069b8:	200007a8 	.word	0x200007a8

080069bc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80069bc:	b480      	push	{r7}
 80069be:	b083      	sub	sp, #12
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80069c4:	4b06      	ldr	r3, [pc, #24]	; (80069e0 <vTaskInternalSetTimeOutState+0x24>)
 80069c6:	681a      	ldr	r2, [r3, #0]
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80069cc:	4b05      	ldr	r3, [pc, #20]	; (80069e4 <vTaskInternalSetTimeOutState+0x28>)
 80069ce:	681a      	ldr	r2, [r3, #0]
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	605a      	str	r2, [r3, #4]
}
 80069d4:	bf00      	nop
 80069d6:	370c      	adds	r7, #12
 80069d8:	46bd      	mov	sp, r7
 80069da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069de:	4770      	bx	lr
 80069e0:	200007ac 	.word	0x200007ac
 80069e4:	20000798 	.word	0x20000798

080069e8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80069e8:	b580      	push	{r7, lr}
 80069ea:	b088      	sub	sp, #32
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	6078      	str	r0, [r7, #4]
 80069f0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d10a      	bne.n	8006a0e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80069f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069fc:	f383 8811 	msr	BASEPRI, r3
 8006a00:	f3bf 8f6f 	isb	sy
 8006a04:	f3bf 8f4f 	dsb	sy
 8006a08:	613b      	str	r3, [r7, #16]
}
 8006a0a:	bf00      	nop
 8006a0c:	e7fe      	b.n	8006a0c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006a0e:	683b      	ldr	r3, [r7, #0]
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d10a      	bne.n	8006a2a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006a14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a18:	f383 8811 	msr	BASEPRI, r3
 8006a1c:	f3bf 8f6f 	isb	sy
 8006a20:	f3bf 8f4f 	dsb	sy
 8006a24:	60fb      	str	r3, [r7, #12]
}
 8006a26:	bf00      	nop
 8006a28:	e7fe      	b.n	8006a28 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8006a2a:	f001 f8d3 	bl	8007bd4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006a2e:	4b1d      	ldr	r3, [pc, #116]	; (8006aa4 <xTaskCheckForTimeOut+0xbc>)
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	685b      	ldr	r3, [r3, #4]
 8006a38:	69ba      	ldr	r2, [r7, #24]
 8006a3a:	1ad3      	subs	r3, r2, r3
 8006a3c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006a3e:	683b      	ldr	r3, [r7, #0]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a46:	d102      	bne.n	8006a4e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006a48:	2300      	movs	r3, #0
 8006a4a:	61fb      	str	r3, [r7, #28]
 8006a4c:	e023      	b.n	8006a96 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681a      	ldr	r2, [r3, #0]
 8006a52:	4b15      	ldr	r3, [pc, #84]	; (8006aa8 <xTaskCheckForTimeOut+0xc0>)
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	429a      	cmp	r2, r3
 8006a58:	d007      	beq.n	8006a6a <xTaskCheckForTimeOut+0x82>
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	685b      	ldr	r3, [r3, #4]
 8006a5e:	69ba      	ldr	r2, [r7, #24]
 8006a60:	429a      	cmp	r2, r3
 8006a62:	d302      	bcc.n	8006a6a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006a64:	2301      	movs	r3, #1
 8006a66:	61fb      	str	r3, [r7, #28]
 8006a68:	e015      	b.n	8006a96 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006a6a:	683b      	ldr	r3, [r7, #0]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	697a      	ldr	r2, [r7, #20]
 8006a70:	429a      	cmp	r2, r3
 8006a72:	d20b      	bcs.n	8006a8c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006a74:	683b      	ldr	r3, [r7, #0]
 8006a76:	681a      	ldr	r2, [r3, #0]
 8006a78:	697b      	ldr	r3, [r7, #20]
 8006a7a:	1ad2      	subs	r2, r2, r3
 8006a7c:	683b      	ldr	r3, [r7, #0]
 8006a7e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006a80:	6878      	ldr	r0, [r7, #4]
 8006a82:	f7ff ff9b 	bl	80069bc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006a86:	2300      	movs	r3, #0
 8006a88:	61fb      	str	r3, [r7, #28]
 8006a8a:	e004      	b.n	8006a96 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8006a8c:	683b      	ldr	r3, [r7, #0]
 8006a8e:	2200      	movs	r2, #0
 8006a90:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006a92:	2301      	movs	r3, #1
 8006a94:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006a96:	f001 f8cd 	bl	8007c34 <vPortExitCritical>

	return xReturn;
 8006a9a:	69fb      	ldr	r3, [r7, #28]
}
 8006a9c:	4618      	mov	r0, r3
 8006a9e:	3720      	adds	r7, #32
 8006aa0:	46bd      	mov	sp, r7
 8006aa2:	bd80      	pop	{r7, pc}
 8006aa4:	20000798 	.word	0x20000798
 8006aa8:	200007ac 	.word	0x200007ac

08006aac <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006aac:	b480      	push	{r7}
 8006aae:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006ab0:	4b03      	ldr	r3, [pc, #12]	; (8006ac0 <vTaskMissedYield+0x14>)
 8006ab2:	2201      	movs	r2, #1
 8006ab4:	601a      	str	r2, [r3, #0]
}
 8006ab6:	bf00      	nop
 8006ab8:	46bd      	mov	sp, r7
 8006aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006abe:	4770      	bx	lr
 8006ac0:	200007a8 	.word	0x200007a8

08006ac4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006ac4:	b580      	push	{r7, lr}
 8006ac6:	b082      	sub	sp, #8
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006acc:	f000 f854 	bl	8006b78 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006ad0:	4b07      	ldr	r3, [pc, #28]	; (8006af0 <prvIdleTask+0x2c>)
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	2b01      	cmp	r3, #1
 8006ad6:	d907      	bls.n	8006ae8 <prvIdleTask+0x24>
			{
				taskYIELD();
 8006ad8:	4b06      	ldr	r3, [pc, #24]	; (8006af4 <prvIdleTask+0x30>)
 8006ada:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ade:	601a      	str	r2, [r3, #0]
 8006ae0:	f3bf 8f4f 	dsb	sy
 8006ae4:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 8006ae8:	f7f9 fbca 	bl	8000280 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8006aec:	e7ee      	b.n	8006acc <prvIdleTask+0x8>
 8006aee:	bf00      	nop
 8006af0:	20000698 	.word	0x20000698
 8006af4:	e000ed04 	.word	0xe000ed04

08006af8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006af8:	b580      	push	{r7, lr}
 8006afa:	b082      	sub	sp, #8
 8006afc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006afe:	2300      	movs	r3, #0
 8006b00:	607b      	str	r3, [r7, #4]
 8006b02:	e00c      	b.n	8006b1e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006b04:	687a      	ldr	r2, [r7, #4]
 8006b06:	4613      	mov	r3, r2
 8006b08:	009b      	lsls	r3, r3, #2
 8006b0a:	4413      	add	r3, r2
 8006b0c:	009b      	lsls	r3, r3, #2
 8006b0e:	4a12      	ldr	r2, [pc, #72]	; (8006b58 <prvInitialiseTaskLists+0x60>)
 8006b10:	4413      	add	r3, r2
 8006b12:	4618      	mov	r0, r3
 8006b14:	f7fe f8f7 	bl	8004d06 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	3301      	adds	r3, #1
 8006b1c:	607b      	str	r3, [r7, #4]
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	2b06      	cmp	r3, #6
 8006b22:	d9ef      	bls.n	8006b04 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006b24:	480d      	ldr	r0, [pc, #52]	; (8006b5c <prvInitialiseTaskLists+0x64>)
 8006b26:	f7fe f8ee 	bl	8004d06 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006b2a:	480d      	ldr	r0, [pc, #52]	; (8006b60 <prvInitialiseTaskLists+0x68>)
 8006b2c:	f7fe f8eb 	bl	8004d06 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006b30:	480c      	ldr	r0, [pc, #48]	; (8006b64 <prvInitialiseTaskLists+0x6c>)
 8006b32:	f7fe f8e8 	bl	8004d06 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006b36:	480c      	ldr	r0, [pc, #48]	; (8006b68 <prvInitialiseTaskLists+0x70>)
 8006b38:	f7fe f8e5 	bl	8004d06 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006b3c:	480b      	ldr	r0, [pc, #44]	; (8006b6c <prvInitialiseTaskLists+0x74>)
 8006b3e:	f7fe f8e2 	bl	8004d06 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006b42:	4b0b      	ldr	r3, [pc, #44]	; (8006b70 <prvInitialiseTaskLists+0x78>)
 8006b44:	4a05      	ldr	r2, [pc, #20]	; (8006b5c <prvInitialiseTaskLists+0x64>)
 8006b46:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006b48:	4b0a      	ldr	r3, [pc, #40]	; (8006b74 <prvInitialiseTaskLists+0x7c>)
 8006b4a:	4a05      	ldr	r2, [pc, #20]	; (8006b60 <prvInitialiseTaskLists+0x68>)
 8006b4c:	601a      	str	r2, [r3, #0]
}
 8006b4e:	bf00      	nop
 8006b50:	3708      	adds	r7, #8
 8006b52:	46bd      	mov	sp, r7
 8006b54:	bd80      	pop	{r7, pc}
 8006b56:	bf00      	nop
 8006b58:	20000698 	.word	0x20000698
 8006b5c:	20000724 	.word	0x20000724
 8006b60:	20000738 	.word	0x20000738
 8006b64:	20000754 	.word	0x20000754
 8006b68:	20000768 	.word	0x20000768
 8006b6c:	20000780 	.word	0x20000780
 8006b70:	2000074c 	.word	0x2000074c
 8006b74:	20000750 	.word	0x20000750

08006b78 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006b78:	b580      	push	{r7, lr}
 8006b7a:	b082      	sub	sp, #8
 8006b7c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006b7e:	e019      	b.n	8006bb4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006b80:	f001 f828 	bl	8007bd4 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8006b84:	4b10      	ldr	r3, [pc, #64]	; (8006bc8 <prvCheckTasksWaitingTermination+0x50>)
 8006b86:	68db      	ldr	r3, [r3, #12]
 8006b88:	68db      	ldr	r3, [r3, #12]
 8006b8a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	3304      	adds	r3, #4
 8006b90:	4618      	mov	r0, r3
 8006b92:	f7fe f942 	bl	8004e1a <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006b96:	4b0d      	ldr	r3, [pc, #52]	; (8006bcc <prvCheckTasksWaitingTermination+0x54>)
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	3b01      	subs	r3, #1
 8006b9c:	4a0b      	ldr	r2, [pc, #44]	; (8006bcc <prvCheckTasksWaitingTermination+0x54>)
 8006b9e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006ba0:	4b0b      	ldr	r3, [pc, #44]	; (8006bd0 <prvCheckTasksWaitingTermination+0x58>)
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	3b01      	subs	r3, #1
 8006ba6:	4a0a      	ldr	r2, [pc, #40]	; (8006bd0 <prvCheckTasksWaitingTermination+0x58>)
 8006ba8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006baa:	f001 f843 	bl	8007c34 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006bae:	6878      	ldr	r0, [r7, #4]
 8006bb0:	f000 f810 	bl	8006bd4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006bb4:	4b06      	ldr	r3, [pc, #24]	; (8006bd0 <prvCheckTasksWaitingTermination+0x58>)
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d1e1      	bne.n	8006b80 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006bbc:	bf00      	nop
 8006bbe:	bf00      	nop
 8006bc0:	3708      	adds	r7, #8
 8006bc2:	46bd      	mov	sp, r7
 8006bc4:	bd80      	pop	{r7, pc}
 8006bc6:	bf00      	nop
 8006bc8:	20000768 	.word	0x20000768
 8006bcc:	20000794 	.word	0x20000794
 8006bd0:	2000077c 	.word	0x2000077c

08006bd4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006bd4:	b580      	push	{r7, lr}
 8006bd6:	b084      	sub	sp, #16
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	3350      	adds	r3, #80	; 0x50
 8006be0:	4618      	mov	r0, r3
 8006be2:	f001 fc07 	bl	80083f4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	f893 30b5 	ldrb.w	r3, [r3, #181]	; 0xb5
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d108      	bne.n	8006c02 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bf4:	4618      	mov	r0, r3
 8006bf6:	f001 f9d3 	bl	8007fa0 <vPortFree>
				vPortFree( pxTCB );
 8006bfa:	6878      	ldr	r0, [r7, #4]
 8006bfc:	f001 f9d0 	bl	8007fa0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006c00:	e018      	b.n	8006c34 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	f893 30b5 	ldrb.w	r3, [r3, #181]	; 0xb5
 8006c08:	2b01      	cmp	r3, #1
 8006c0a:	d103      	bne.n	8006c14 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006c0c:	6878      	ldr	r0, [r7, #4]
 8006c0e:	f001 f9c7 	bl	8007fa0 <vPortFree>
	}
 8006c12:	e00f      	b.n	8006c34 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	f893 30b5 	ldrb.w	r3, [r3, #181]	; 0xb5
 8006c1a:	2b02      	cmp	r3, #2
 8006c1c:	d00a      	beq.n	8006c34 <prvDeleteTCB+0x60>
	__asm volatile
 8006c1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c22:	f383 8811 	msr	BASEPRI, r3
 8006c26:	f3bf 8f6f 	isb	sy
 8006c2a:	f3bf 8f4f 	dsb	sy
 8006c2e:	60fb      	str	r3, [r7, #12]
}
 8006c30:	bf00      	nop
 8006c32:	e7fe      	b.n	8006c32 <prvDeleteTCB+0x5e>
	}
 8006c34:	bf00      	nop
 8006c36:	3710      	adds	r7, #16
 8006c38:	46bd      	mov	sp, r7
 8006c3a:	bd80      	pop	{r7, pc}

08006c3c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006c3c:	b480      	push	{r7}
 8006c3e:	b083      	sub	sp, #12
 8006c40:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006c42:	4b0f      	ldr	r3, [pc, #60]	; (8006c80 <prvResetNextTaskUnblockTime+0x44>)
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d101      	bne.n	8006c50 <prvResetNextTaskUnblockTime+0x14>
 8006c4c:	2301      	movs	r3, #1
 8006c4e:	e000      	b.n	8006c52 <prvResetNextTaskUnblockTime+0x16>
 8006c50:	2300      	movs	r3, #0
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d004      	beq.n	8006c60 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006c56:	4b0b      	ldr	r3, [pc, #44]	; (8006c84 <prvResetNextTaskUnblockTime+0x48>)
 8006c58:	f04f 32ff 	mov.w	r2, #4294967295
 8006c5c:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006c5e:	e008      	b.n	8006c72 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006c60:	4b07      	ldr	r3, [pc, #28]	; (8006c80 <prvResetNextTaskUnblockTime+0x44>)
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	68db      	ldr	r3, [r3, #12]
 8006c66:	68db      	ldr	r3, [r3, #12]
 8006c68:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	685b      	ldr	r3, [r3, #4]
 8006c6e:	4a05      	ldr	r2, [pc, #20]	; (8006c84 <prvResetNextTaskUnblockTime+0x48>)
 8006c70:	6013      	str	r3, [r2, #0]
}
 8006c72:	bf00      	nop
 8006c74:	370c      	adds	r7, #12
 8006c76:	46bd      	mov	sp, r7
 8006c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c7c:	4770      	bx	lr
 8006c7e:	bf00      	nop
 8006c80:	2000074c 	.word	0x2000074c
 8006c84:	200007b4 	.word	0x200007b4

08006c88 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006c88:	b480      	push	{r7}
 8006c8a:	b083      	sub	sp, #12
 8006c8c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006c8e:	4b0b      	ldr	r3, [pc, #44]	; (8006cbc <xTaskGetSchedulerState+0x34>)
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d102      	bne.n	8006c9c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006c96:	2301      	movs	r3, #1
 8006c98:	607b      	str	r3, [r7, #4]
 8006c9a:	e008      	b.n	8006cae <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006c9c:	4b08      	ldr	r3, [pc, #32]	; (8006cc0 <xTaskGetSchedulerState+0x38>)
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d102      	bne.n	8006caa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006ca4:	2302      	movs	r3, #2
 8006ca6:	607b      	str	r3, [r7, #4]
 8006ca8:	e001      	b.n	8006cae <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006caa:	2300      	movs	r3, #0
 8006cac:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006cae:	687b      	ldr	r3, [r7, #4]
	}
 8006cb0:	4618      	mov	r0, r3
 8006cb2:	370c      	adds	r7, #12
 8006cb4:	46bd      	mov	sp, r7
 8006cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cba:	4770      	bx	lr
 8006cbc:	200007a0 	.word	0x200007a0
 8006cc0:	200007bc 	.word	0x200007bc

08006cc4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8006cc4:	b580      	push	{r7, lr}
 8006cc6:	b084      	sub	sp, #16
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8006cd0:	2300      	movs	r3, #0
 8006cd2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d06e      	beq.n	8006db8 <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8006cda:	68bb      	ldr	r3, [r7, #8]
 8006cdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cde:	4b39      	ldr	r3, [pc, #228]	; (8006dc4 <xTaskPriorityInherit+0x100>)
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ce4:	429a      	cmp	r2, r3
 8006ce6:	d25e      	bcs.n	8006da6 <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006ce8:	68bb      	ldr	r3, [r7, #8]
 8006cea:	699b      	ldr	r3, [r3, #24]
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	db06      	blt.n	8006cfe <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006cf0:	4b34      	ldr	r3, [pc, #208]	; (8006dc4 <xTaskPriorityInherit+0x100>)
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cf6:	f1c3 0207 	rsb	r2, r3, #7
 8006cfa:	68bb      	ldr	r3, [r7, #8]
 8006cfc:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8006cfe:	68bb      	ldr	r3, [r7, #8]
 8006d00:	6959      	ldr	r1, [r3, #20]
 8006d02:	68bb      	ldr	r3, [r7, #8]
 8006d04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d06:	4613      	mov	r3, r2
 8006d08:	009b      	lsls	r3, r3, #2
 8006d0a:	4413      	add	r3, r2
 8006d0c:	009b      	lsls	r3, r3, #2
 8006d0e:	4a2e      	ldr	r2, [pc, #184]	; (8006dc8 <xTaskPriorityInherit+0x104>)
 8006d10:	4413      	add	r3, r2
 8006d12:	4299      	cmp	r1, r3
 8006d14:	d101      	bne.n	8006d1a <xTaskPriorityInherit+0x56>
 8006d16:	2301      	movs	r3, #1
 8006d18:	e000      	b.n	8006d1c <xTaskPriorityInherit+0x58>
 8006d1a:	2300      	movs	r3, #0
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d03a      	beq.n	8006d96 <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006d20:	68bb      	ldr	r3, [r7, #8]
 8006d22:	3304      	adds	r3, #4
 8006d24:	4618      	mov	r0, r3
 8006d26:	f7fe f878 	bl	8004e1a <uxListRemove>
 8006d2a:	4603      	mov	r3, r0
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d115      	bne.n	8006d5c <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8006d30:	68bb      	ldr	r3, [r7, #8]
 8006d32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d34:	4924      	ldr	r1, [pc, #144]	; (8006dc8 <xTaskPriorityInherit+0x104>)
 8006d36:	4613      	mov	r3, r2
 8006d38:	009b      	lsls	r3, r3, #2
 8006d3a:	4413      	add	r3, r2
 8006d3c:	009b      	lsls	r3, r3, #2
 8006d3e:	440b      	add	r3, r1
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d10a      	bne.n	8006d5c <xTaskPriorityInherit+0x98>
 8006d46:	68bb      	ldr	r3, [r7, #8]
 8006d48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d4a:	2201      	movs	r2, #1
 8006d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8006d50:	43da      	mvns	r2, r3
 8006d52:	4b1e      	ldr	r3, [pc, #120]	; (8006dcc <xTaskPriorityInherit+0x108>)
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	4013      	ands	r3, r2
 8006d58:	4a1c      	ldr	r2, [pc, #112]	; (8006dcc <xTaskPriorityInherit+0x108>)
 8006d5a:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006d5c:	4b19      	ldr	r3, [pc, #100]	; (8006dc4 <xTaskPriorityInherit+0x100>)
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d62:	68bb      	ldr	r3, [r7, #8]
 8006d64:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8006d66:	68bb      	ldr	r3, [r7, #8]
 8006d68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d6a:	2201      	movs	r2, #1
 8006d6c:	409a      	lsls	r2, r3
 8006d6e:	4b17      	ldr	r3, [pc, #92]	; (8006dcc <xTaskPriorityInherit+0x108>)
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	4313      	orrs	r3, r2
 8006d74:	4a15      	ldr	r2, [pc, #84]	; (8006dcc <xTaskPriorityInherit+0x108>)
 8006d76:	6013      	str	r3, [r2, #0]
 8006d78:	68bb      	ldr	r3, [r7, #8]
 8006d7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d7c:	4613      	mov	r3, r2
 8006d7e:	009b      	lsls	r3, r3, #2
 8006d80:	4413      	add	r3, r2
 8006d82:	009b      	lsls	r3, r3, #2
 8006d84:	4a10      	ldr	r2, [pc, #64]	; (8006dc8 <xTaskPriorityInherit+0x104>)
 8006d86:	441a      	add	r2, r3
 8006d88:	68bb      	ldr	r3, [r7, #8]
 8006d8a:	3304      	adds	r3, #4
 8006d8c:	4619      	mov	r1, r3
 8006d8e:	4610      	mov	r0, r2
 8006d90:	f7fd ffe6 	bl	8004d60 <vListInsertEnd>
 8006d94:	e004      	b.n	8006da0 <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006d96:	4b0b      	ldr	r3, [pc, #44]	; (8006dc4 <xTaskPriorityInherit+0x100>)
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d9c:	68bb      	ldr	r3, [r7, #8]
 8006d9e:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8006da0:	2301      	movs	r3, #1
 8006da2:	60fb      	str	r3, [r7, #12]
 8006da4:	e008      	b.n	8006db8 <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8006da6:	68bb      	ldr	r3, [r7, #8]
 8006da8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006daa:	4b06      	ldr	r3, [pc, #24]	; (8006dc4 <xTaskPriorityInherit+0x100>)
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006db0:	429a      	cmp	r2, r3
 8006db2:	d201      	bcs.n	8006db8 <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8006db4:	2301      	movs	r3, #1
 8006db6:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006db8:	68fb      	ldr	r3, [r7, #12]
	}
 8006dba:	4618      	mov	r0, r3
 8006dbc:	3710      	adds	r7, #16
 8006dbe:	46bd      	mov	sp, r7
 8006dc0:	bd80      	pop	{r7, pc}
 8006dc2:	bf00      	nop
 8006dc4:	20000694 	.word	0x20000694
 8006dc8:	20000698 	.word	0x20000698
 8006dcc:	2000079c 	.word	0x2000079c

08006dd0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006dd0:	b580      	push	{r7, lr}
 8006dd2:	b086      	sub	sp, #24
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006ddc:	2300      	movs	r3, #0
 8006dde:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d06e      	beq.n	8006ec4 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006de6:	4b3a      	ldr	r3, [pc, #232]	; (8006ed0 <xTaskPriorityDisinherit+0x100>)
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	693a      	ldr	r2, [r7, #16]
 8006dec:	429a      	cmp	r2, r3
 8006dee:	d00a      	beq.n	8006e06 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006df0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006df4:	f383 8811 	msr	BASEPRI, r3
 8006df8:	f3bf 8f6f 	isb	sy
 8006dfc:	f3bf 8f4f 	dsb	sy
 8006e00:	60fb      	str	r3, [r7, #12]
}
 8006e02:	bf00      	nop
 8006e04:	e7fe      	b.n	8006e04 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006e06:	693b      	ldr	r3, [r7, #16]
 8006e08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d10a      	bne.n	8006e24 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8006e0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e12:	f383 8811 	msr	BASEPRI, r3
 8006e16:	f3bf 8f6f 	isb	sy
 8006e1a:	f3bf 8f4f 	dsb	sy
 8006e1e:	60bb      	str	r3, [r7, #8]
}
 8006e20:	bf00      	nop
 8006e22:	e7fe      	b.n	8006e22 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006e24:	693b      	ldr	r3, [r7, #16]
 8006e26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e28:	1e5a      	subs	r2, r3, #1
 8006e2a:	693b      	ldr	r3, [r7, #16]
 8006e2c:	64da      	str	r2, [r3, #76]	; 0x4c

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006e2e:	693b      	ldr	r3, [r7, #16]
 8006e30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e32:	693b      	ldr	r3, [r7, #16]
 8006e34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e36:	429a      	cmp	r2, r3
 8006e38:	d044      	beq.n	8006ec4 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006e3a:	693b      	ldr	r3, [r7, #16]
 8006e3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d140      	bne.n	8006ec4 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006e42:	693b      	ldr	r3, [r7, #16]
 8006e44:	3304      	adds	r3, #4
 8006e46:	4618      	mov	r0, r3
 8006e48:	f7fd ffe7 	bl	8004e1a <uxListRemove>
 8006e4c:	4603      	mov	r3, r0
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d115      	bne.n	8006e7e <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8006e52:	693b      	ldr	r3, [r7, #16]
 8006e54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e56:	491f      	ldr	r1, [pc, #124]	; (8006ed4 <xTaskPriorityDisinherit+0x104>)
 8006e58:	4613      	mov	r3, r2
 8006e5a:	009b      	lsls	r3, r3, #2
 8006e5c:	4413      	add	r3, r2
 8006e5e:	009b      	lsls	r3, r3, #2
 8006e60:	440b      	add	r3, r1
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d10a      	bne.n	8006e7e <xTaskPriorityDisinherit+0xae>
 8006e68:	693b      	ldr	r3, [r7, #16]
 8006e6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e6c:	2201      	movs	r2, #1
 8006e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8006e72:	43da      	mvns	r2, r3
 8006e74:	4b18      	ldr	r3, [pc, #96]	; (8006ed8 <xTaskPriorityDisinherit+0x108>)
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	4013      	ands	r3, r2
 8006e7a:	4a17      	ldr	r2, [pc, #92]	; (8006ed8 <xTaskPriorityDisinherit+0x108>)
 8006e7c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006e7e:	693b      	ldr	r3, [r7, #16]
 8006e80:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006e82:	693b      	ldr	r3, [r7, #16]
 8006e84:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006e86:	693b      	ldr	r3, [r7, #16]
 8006e88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e8a:	f1c3 0207 	rsb	r2, r3, #7
 8006e8e:	693b      	ldr	r3, [r7, #16]
 8006e90:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006e92:	693b      	ldr	r3, [r7, #16]
 8006e94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e96:	2201      	movs	r2, #1
 8006e98:	409a      	lsls	r2, r3
 8006e9a:	4b0f      	ldr	r3, [pc, #60]	; (8006ed8 <xTaskPriorityDisinherit+0x108>)
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	4313      	orrs	r3, r2
 8006ea0:	4a0d      	ldr	r2, [pc, #52]	; (8006ed8 <xTaskPriorityDisinherit+0x108>)
 8006ea2:	6013      	str	r3, [r2, #0]
 8006ea4:	693b      	ldr	r3, [r7, #16]
 8006ea6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ea8:	4613      	mov	r3, r2
 8006eaa:	009b      	lsls	r3, r3, #2
 8006eac:	4413      	add	r3, r2
 8006eae:	009b      	lsls	r3, r3, #2
 8006eb0:	4a08      	ldr	r2, [pc, #32]	; (8006ed4 <xTaskPriorityDisinherit+0x104>)
 8006eb2:	441a      	add	r2, r3
 8006eb4:	693b      	ldr	r3, [r7, #16]
 8006eb6:	3304      	adds	r3, #4
 8006eb8:	4619      	mov	r1, r3
 8006eba:	4610      	mov	r0, r2
 8006ebc:	f7fd ff50 	bl	8004d60 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006ec0:	2301      	movs	r3, #1
 8006ec2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006ec4:	697b      	ldr	r3, [r7, #20]
	}
 8006ec6:	4618      	mov	r0, r3
 8006ec8:	3718      	adds	r7, #24
 8006eca:	46bd      	mov	sp, r7
 8006ecc:	bd80      	pop	{r7, pc}
 8006ece:	bf00      	nop
 8006ed0:	20000694 	.word	0x20000694
 8006ed4:	20000698 	.word	0x20000698
 8006ed8:	2000079c 	.word	0x2000079c

08006edc <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8006edc:	b580      	push	{r7, lr}
 8006ede:	b088      	sub	sp, #32
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	6078      	str	r0, [r7, #4]
 8006ee4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8006eea:	2301      	movs	r3, #1
 8006eec:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	f000 8088 	beq.w	8007006 <vTaskPriorityDisinheritAfterTimeout+0x12a>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8006ef6:	69bb      	ldr	r3, [r7, #24]
 8006ef8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d10a      	bne.n	8006f14 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8006efe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f02:	f383 8811 	msr	BASEPRI, r3
 8006f06:	f3bf 8f6f 	isb	sy
 8006f0a:	f3bf 8f4f 	dsb	sy
 8006f0e:	60fb      	str	r3, [r7, #12]
}
 8006f10:	bf00      	nop
 8006f12:	e7fe      	b.n	8006f12 <vTaskPriorityDisinheritAfterTimeout+0x36>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8006f14:	69bb      	ldr	r3, [r7, #24]
 8006f16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f18:	683a      	ldr	r2, [r7, #0]
 8006f1a:	429a      	cmp	r2, r3
 8006f1c:	d902      	bls.n	8006f24 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8006f1e:	683b      	ldr	r3, [r7, #0]
 8006f20:	61fb      	str	r3, [r7, #28]
 8006f22:	e002      	b.n	8006f2a <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8006f24:	69bb      	ldr	r3, [r7, #24]
 8006f26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f28:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8006f2a:	69bb      	ldr	r3, [r7, #24]
 8006f2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f2e:	69fa      	ldr	r2, [r7, #28]
 8006f30:	429a      	cmp	r2, r3
 8006f32:	d068      	beq.n	8007006 <vTaskPriorityDisinheritAfterTimeout+0x12a>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8006f34:	69bb      	ldr	r3, [r7, #24]
 8006f36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f38:	697a      	ldr	r2, [r7, #20]
 8006f3a:	429a      	cmp	r2, r3
 8006f3c:	d163      	bne.n	8007006 <vTaskPriorityDisinheritAfterTimeout+0x12a>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8006f3e:	4b34      	ldr	r3, [pc, #208]	; (8007010 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	69ba      	ldr	r2, [r7, #24]
 8006f44:	429a      	cmp	r2, r3
 8006f46:	d10a      	bne.n	8006f5e <vTaskPriorityDisinheritAfterTimeout+0x82>
	__asm volatile
 8006f48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f4c:	f383 8811 	msr	BASEPRI, r3
 8006f50:	f3bf 8f6f 	isb	sy
 8006f54:	f3bf 8f4f 	dsb	sy
 8006f58:	60bb      	str	r3, [r7, #8]
}
 8006f5a:	bf00      	nop
 8006f5c:	e7fe      	b.n	8006f5c <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8006f5e:	69bb      	ldr	r3, [r7, #24]
 8006f60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f62:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8006f64:	69bb      	ldr	r3, [r7, #24]
 8006f66:	69fa      	ldr	r2, [r7, #28]
 8006f68:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006f6a:	69bb      	ldr	r3, [r7, #24]
 8006f6c:	699b      	ldr	r3, [r3, #24]
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	db04      	blt.n	8006f7c <vTaskPriorityDisinheritAfterTimeout+0xa0>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006f72:	69fb      	ldr	r3, [r7, #28]
 8006f74:	f1c3 0207 	rsb	r2, r3, #7
 8006f78:	69bb      	ldr	r3, [r7, #24]
 8006f7a:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8006f7c:	69bb      	ldr	r3, [r7, #24]
 8006f7e:	6959      	ldr	r1, [r3, #20]
 8006f80:	693a      	ldr	r2, [r7, #16]
 8006f82:	4613      	mov	r3, r2
 8006f84:	009b      	lsls	r3, r3, #2
 8006f86:	4413      	add	r3, r2
 8006f88:	009b      	lsls	r3, r3, #2
 8006f8a:	4a22      	ldr	r2, [pc, #136]	; (8007014 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8006f8c:	4413      	add	r3, r2
 8006f8e:	4299      	cmp	r1, r3
 8006f90:	d101      	bne.n	8006f96 <vTaskPriorityDisinheritAfterTimeout+0xba>
 8006f92:	2301      	movs	r3, #1
 8006f94:	e000      	b.n	8006f98 <vTaskPriorityDisinheritAfterTimeout+0xbc>
 8006f96:	2300      	movs	r3, #0
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d034      	beq.n	8007006 <vTaskPriorityDisinheritAfterTimeout+0x12a>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006f9c:	69bb      	ldr	r3, [r7, #24]
 8006f9e:	3304      	adds	r3, #4
 8006fa0:	4618      	mov	r0, r3
 8006fa2:	f7fd ff3a 	bl	8004e1a <uxListRemove>
 8006fa6:	4603      	mov	r3, r0
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d115      	bne.n	8006fd8 <vTaskPriorityDisinheritAfterTimeout+0xfc>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8006fac:	69bb      	ldr	r3, [r7, #24]
 8006fae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fb0:	4918      	ldr	r1, [pc, #96]	; (8007014 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8006fb2:	4613      	mov	r3, r2
 8006fb4:	009b      	lsls	r3, r3, #2
 8006fb6:	4413      	add	r3, r2
 8006fb8:	009b      	lsls	r3, r3, #2
 8006fba:	440b      	add	r3, r1
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d10a      	bne.n	8006fd8 <vTaskPriorityDisinheritAfterTimeout+0xfc>
 8006fc2:	69bb      	ldr	r3, [r7, #24]
 8006fc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fc6:	2201      	movs	r2, #1
 8006fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8006fcc:	43da      	mvns	r2, r3
 8006fce:	4b12      	ldr	r3, [pc, #72]	; (8007018 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	4013      	ands	r3, r2
 8006fd4:	4a10      	ldr	r2, [pc, #64]	; (8007018 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8006fd6:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8006fd8:	69bb      	ldr	r3, [r7, #24]
 8006fda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fdc:	2201      	movs	r2, #1
 8006fde:	409a      	lsls	r2, r3
 8006fe0:	4b0d      	ldr	r3, [pc, #52]	; (8007018 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	4313      	orrs	r3, r2
 8006fe6:	4a0c      	ldr	r2, [pc, #48]	; (8007018 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8006fe8:	6013      	str	r3, [r2, #0]
 8006fea:	69bb      	ldr	r3, [r7, #24]
 8006fec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fee:	4613      	mov	r3, r2
 8006ff0:	009b      	lsls	r3, r3, #2
 8006ff2:	4413      	add	r3, r2
 8006ff4:	009b      	lsls	r3, r3, #2
 8006ff6:	4a07      	ldr	r2, [pc, #28]	; (8007014 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8006ff8:	441a      	add	r2, r3
 8006ffa:	69bb      	ldr	r3, [r7, #24]
 8006ffc:	3304      	adds	r3, #4
 8006ffe:	4619      	mov	r1, r3
 8007000:	4610      	mov	r0, r2
 8007002:	f7fd fead 	bl	8004d60 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007006:	bf00      	nop
 8007008:	3720      	adds	r7, #32
 800700a:	46bd      	mov	sp, r7
 800700c:	bd80      	pop	{r7, pc}
 800700e:	bf00      	nop
 8007010:	20000694 	.word	0x20000694
 8007014:	20000698 	.word	0x20000698
 8007018:	2000079c 	.word	0x2000079c

0800701c <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 800701c:	b480      	push	{r7}
 800701e:	b083      	sub	sp, #12
 8007020:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 8007022:	4b09      	ldr	r3, [pc, #36]	; (8007048 <uxTaskResetEventItemValue+0x2c>)
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	699b      	ldr	r3, [r3, #24]
 8007028:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800702a:	4b07      	ldr	r3, [pc, #28]	; (8007048 <uxTaskResetEventItemValue+0x2c>)
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007030:	4b05      	ldr	r3, [pc, #20]	; (8007048 <uxTaskResetEventItemValue+0x2c>)
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	f1c2 0207 	rsb	r2, r2, #7
 8007038:	619a      	str	r2, [r3, #24]

	return uxReturn;
 800703a:	687b      	ldr	r3, [r7, #4]
}
 800703c:	4618      	mov	r0, r3
 800703e:	370c      	adds	r7, #12
 8007040:	46bd      	mov	sp, r7
 8007042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007046:	4770      	bx	lr
 8007048:	20000694 	.word	0x20000694

0800704c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 800704c:	b480      	push	{r7}
 800704e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8007050:	4b07      	ldr	r3, [pc, #28]	; (8007070 <pvTaskIncrementMutexHeldCount+0x24>)
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	2b00      	cmp	r3, #0
 8007056:	d004      	beq.n	8007062 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8007058:	4b05      	ldr	r3, [pc, #20]	; (8007070 <pvTaskIncrementMutexHeldCount+0x24>)
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800705e:	3201      	adds	r2, #1
 8007060:	64da      	str	r2, [r3, #76]	; 0x4c
		}

		return pxCurrentTCB;
 8007062:	4b03      	ldr	r3, [pc, #12]	; (8007070 <pvTaskIncrementMutexHeldCount+0x24>)
 8007064:	681b      	ldr	r3, [r3, #0]
	}
 8007066:	4618      	mov	r0, r3
 8007068:	46bd      	mov	sp, r7
 800706a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800706e:	4770      	bx	lr
 8007070:	20000694 	.word	0x20000694

08007074 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8007074:	b580      	push	{r7, lr}
 8007076:	b086      	sub	sp, #24
 8007078:	af00      	add	r7, sp, #0
 800707a:	60f8      	str	r0, [r7, #12]
 800707c:	60b9      	str	r1, [r7, #8]
 800707e:	607a      	str	r2, [r7, #4]
 8007080:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8007082:	f000 fda7 	bl	8007bd4 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8007086:	4b29      	ldr	r3, [pc, #164]	; (800712c <xTaskNotifyWait+0xb8>)
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	f893 30b4 	ldrb.w	r3, [r3, #180]	; 0xb4
 800708e:	b2db      	uxtb	r3, r3
 8007090:	2b02      	cmp	r3, #2
 8007092:	d01c      	beq.n	80070ce <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8007094:	4b25      	ldr	r3, [pc, #148]	; (800712c <xTaskNotifyWait+0xb8>)
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 800709c:	68fa      	ldr	r2, [r7, #12]
 800709e:	43d2      	mvns	r2, r2
 80070a0:	400a      	ands	r2, r1
 80070a2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 80070a6:	4b21      	ldr	r3, [pc, #132]	; (800712c <xTaskNotifyWait+0xb8>)
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	2201      	movs	r2, #1
 80070ac:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4

				if( xTicksToWait > ( TickType_t ) 0 )
 80070b0:	683b      	ldr	r3, [r7, #0]
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d00b      	beq.n	80070ce <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80070b6:	2101      	movs	r1, #1
 80070b8:	6838      	ldr	r0, [r7, #0]
 80070ba:	f000 f8e5 	bl	8007288 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 80070be:	4b1c      	ldr	r3, [pc, #112]	; (8007130 <xTaskNotifyWait+0xbc>)
 80070c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80070c4:	601a      	str	r2, [r3, #0]
 80070c6:	f3bf 8f4f 	dsb	sy
 80070ca:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80070ce:	f000 fdb1 	bl	8007c34 <vPortExitCritical>

		taskENTER_CRITICAL();
 80070d2:	f000 fd7f 	bl	8007bd4 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d005      	beq.n	80070e8 <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 80070dc:	4b13      	ldr	r3, [pc, #76]	; (800712c <xTaskNotifyWait+0xb8>)
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 80070e8:	4b10      	ldr	r3, [pc, #64]	; (800712c <xTaskNotifyWait+0xb8>)
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	f893 30b4 	ldrb.w	r3, [r3, #180]	; 0xb4
 80070f0:	b2db      	uxtb	r3, r3
 80070f2:	2b02      	cmp	r3, #2
 80070f4:	d002      	beq.n	80070fc <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 80070f6:	2300      	movs	r3, #0
 80070f8:	617b      	str	r3, [r7, #20]
 80070fa:	e00a      	b.n	8007112 <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 80070fc:	4b0b      	ldr	r3, [pc, #44]	; (800712c <xTaskNotifyWait+0xb8>)
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8007104:	68ba      	ldr	r2, [r7, #8]
 8007106:	43d2      	mvns	r2, r2
 8007108:	400a      	ands	r2, r1
 800710a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
				xReturn = pdTRUE;
 800710e:	2301      	movs	r3, #1
 8007110:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007112:	4b06      	ldr	r3, [pc, #24]	; (800712c <xTaskNotifyWait+0xb8>)
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	2200      	movs	r2, #0
 8007118:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
		}
		taskEXIT_CRITICAL();
 800711c:	f000 fd8a 	bl	8007c34 <vPortExitCritical>

		return xReturn;
 8007120:	697b      	ldr	r3, [r7, #20]
	}
 8007122:	4618      	mov	r0, r3
 8007124:	3718      	adds	r7, #24
 8007126:	46bd      	mov	sp, r7
 8007128:	bd80      	pop	{r7, pc}
 800712a:	bf00      	nop
 800712c:	20000694 	.word	0x20000694
 8007130:	e000ed04 	.word	0xe000ed04

08007134 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8007134:	b580      	push	{r7, lr}
 8007136:	b08a      	sub	sp, #40	; 0x28
 8007138:	af00      	add	r7, sp, #0
 800713a:	60f8      	str	r0, [r7, #12]
 800713c:	60b9      	str	r1, [r7, #8]
 800713e:	603b      	str	r3, [r7, #0]
 8007140:	4613      	mov	r3, r2
 8007142:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8007144:	2301      	movs	r3, #1
 8007146:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	2b00      	cmp	r3, #0
 800714c:	d10a      	bne.n	8007164 <xTaskGenericNotify+0x30>
	__asm volatile
 800714e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007152:	f383 8811 	msr	BASEPRI, r3
 8007156:	f3bf 8f6f 	isb	sy
 800715a:	f3bf 8f4f 	dsb	sy
 800715e:	61bb      	str	r3, [r7, #24]
}
 8007160:	bf00      	nop
 8007162:	e7fe      	b.n	8007162 <xTaskGenericNotify+0x2e>
		pxTCB = ( TCB_t * ) xTaskToNotify;
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8007168:	f000 fd34 	bl	8007bd4 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800716c:	683b      	ldr	r3, [r7, #0]
 800716e:	2b00      	cmp	r3, #0
 8007170:	d004      	beq.n	800717c <xTaskGenericNotify+0x48>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8007172:	6a3b      	ldr	r3, [r7, #32]
 8007174:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8007178:	683b      	ldr	r3, [r7, #0]
 800717a:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800717c:	6a3b      	ldr	r3, [r7, #32]
 800717e:	f893 30b4 	ldrb.w	r3, [r3, #180]	; 0xb4
 8007182:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8007184:	6a3b      	ldr	r3, [r7, #32]
 8007186:	2202      	movs	r2, #2
 8007188:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4

			switch( eAction )
 800718c:	79fb      	ldrb	r3, [r7, #7]
 800718e:	2b04      	cmp	r3, #4
 8007190:	d82d      	bhi.n	80071ee <xTaskGenericNotify+0xba>
 8007192:	a201      	add	r2, pc, #4	; (adr r2, 8007198 <xTaskGenericNotify+0x64>)
 8007194:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007198:	080071ef 	.word	0x080071ef
 800719c:	080071ad 	.word	0x080071ad
 80071a0:	080071bf 	.word	0x080071bf
 80071a4:	080071cf 	.word	0x080071cf
 80071a8:	080071d9 	.word	0x080071d9
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 80071ac:	6a3b      	ldr	r3, [r7, #32]
 80071ae:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80071b2:	68bb      	ldr	r3, [r7, #8]
 80071b4:	431a      	orrs	r2, r3
 80071b6:	6a3b      	ldr	r3, [r7, #32]
 80071b8:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
					break;
 80071bc:	e017      	b.n	80071ee <xTaskGenericNotify+0xba>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 80071be:	6a3b      	ldr	r3, [r7, #32]
 80071c0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80071c4:	1c5a      	adds	r2, r3, #1
 80071c6:	6a3b      	ldr	r3, [r7, #32]
 80071c8:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
					break;
 80071cc:	e00f      	b.n	80071ee <xTaskGenericNotify+0xba>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 80071ce:	6a3b      	ldr	r3, [r7, #32]
 80071d0:	68ba      	ldr	r2, [r7, #8]
 80071d2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
					break;
 80071d6:	e00a      	b.n	80071ee <xTaskGenericNotify+0xba>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80071d8:	7ffb      	ldrb	r3, [r7, #31]
 80071da:	2b02      	cmp	r3, #2
 80071dc:	d004      	beq.n	80071e8 <xTaskGenericNotify+0xb4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 80071de:	6a3b      	ldr	r3, [r7, #32]
 80071e0:	68ba      	ldr	r2, [r7, #8]
 80071e2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 80071e6:	e001      	b.n	80071ec <xTaskGenericNotify+0xb8>
						xReturn = pdFAIL;
 80071e8:	2300      	movs	r3, #0
 80071ea:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 80071ec:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80071ee:	7ffb      	ldrb	r3, [r7, #31]
 80071f0:	2b01      	cmp	r3, #1
 80071f2:	d139      	bne.n	8007268 <xTaskGenericNotify+0x134>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80071f4:	6a3b      	ldr	r3, [r7, #32]
 80071f6:	3304      	adds	r3, #4
 80071f8:	4618      	mov	r0, r3
 80071fa:	f7fd fe0e 	bl	8004e1a <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 80071fe:	6a3b      	ldr	r3, [r7, #32]
 8007200:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007202:	2201      	movs	r2, #1
 8007204:	409a      	lsls	r2, r3
 8007206:	4b1c      	ldr	r3, [pc, #112]	; (8007278 <xTaskGenericNotify+0x144>)
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	4313      	orrs	r3, r2
 800720c:	4a1a      	ldr	r2, [pc, #104]	; (8007278 <xTaskGenericNotify+0x144>)
 800720e:	6013      	str	r3, [r2, #0]
 8007210:	6a3b      	ldr	r3, [r7, #32]
 8007212:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007214:	4613      	mov	r3, r2
 8007216:	009b      	lsls	r3, r3, #2
 8007218:	4413      	add	r3, r2
 800721a:	009b      	lsls	r3, r3, #2
 800721c:	4a17      	ldr	r2, [pc, #92]	; (800727c <xTaskGenericNotify+0x148>)
 800721e:	441a      	add	r2, r3
 8007220:	6a3b      	ldr	r3, [r7, #32]
 8007222:	3304      	adds	r3, #4
 8007224:	4619      	mov	r1, r3
 8007226:	4610      	mov	r0, r2
 8007228:	f7fd fd9a 	bl	8004d60 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800722c:	6a3b      	ldr	r3, [r7, #32]
 800722e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007230:	2b00      	cmp	r3, #0
 8007232:	d00a      	beq.n	800724a <xTaskGenericNotify+0x116>
	__asm volatile
 8007234:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007238:	f383 8811 	msr	BASEPRI, r3
 800723c:	f3bf 8f6f 	isb	sy
 8007240:	f3bf 8f4f 	dsb	sy
 8007244:	617b      	str	r3, [r7, #20]
}
 8007246:	bf00      	nop
 8007248:	e7fe      	b.n	8007248 <xTaskGenericNotify+0x114>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800724a:	6a3b      	ldr	r3, [r7, #32]
 800724c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800724e:	4b0c      	ldr	r3, [pc, #48]	; (8007280 <xTaskGenericNotify+0x14c>)
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007254:	429a      	cmp	r2, r3
 8007256:	d907      	bls.n	8007268 <xTaskGenericNotify+0x134>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8007258:	4b0a      	ldr	r3, [pc, #40]	; (8007284 <xTaskGenericNotify+0x150>)
 800725a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800725e:	601a      	str	r2, [r3, #0]
 8007260:	f3bf 8f4f 	dsb	sy
 8007264:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8007268:	f000 fce4 	bl	8007c34 <vPortExitCritical>

		return xReturn;
 800726c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800726e:	4618      	mov	r0, r3
 8007270:	3728      	adds	r7, #40	; 0x28
 8007272:	46bd      	mov	sp, r7
 8007274:	bd80      	pop	{r7, pc}
 8007276:	bf00      	nop
 8007278:	2000079c 	.word	0x2000079c
 800727c:	20000698 	.word	0x20000698
 8007280:	20000694 	.word	0x20000694
 8007284:	e000ed04 	.word	0xe000ed04

08007288 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007288:	b580      	push	{r7, lr}
 800728a:	b084      	sub	sp, #16
 800728c:	af00      	add	r7, sp, #0
 800728e:	6078      	str	r0, [r7, #4]
 8007290:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007292:	4b29      	ldr	r3, [pc, #164]	; (8007338 <prvAddCurrentTaskToDelayedList+0xb0>)
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007298:	4b28      	ldr	r3, [pc, #160]	; (800733c <prvAddCurrentTaskToDelayedList+0xb4>)
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	3304      	adds	r3, #4
 800729e:	4618      	mov	r0, r3
 80072a0:	f7fd fdbb 	bl	8004e1a <uxListRemove>
 80072a4:	4603      	mov	r3, r0
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d10b      	bne.n	80072c2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80072aa:	4b24      	ldr	r3, [pc, #144]	; (800733c <prvAddCurrentTaskToDelayedList+0xb4>)
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072b0:	2201      	movs	r2, #1
 80072b2:	fa02 f303 	lsl.w	r3, r2, r3
 80072b6:	43da      	mvns	r2, r3
 80072b8:	4b21      	ldr	r3, [pc, #132]	; (8007340 <prvAddCurrentTaskToDelayedList+0xb8>)
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	4013      	ands	r3, r2
 80072be:	4a20      	ldr	r2, [pc, #128]	; (8007340 <prvAddCurrentTaskToDelayedList+0xb8>)
 80072c0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072c8:	d10a      	bne.n	80072e0 <prvAddCurrentTaskToDelayedList+0x58>
 80072ca:	683b      	ldr	r3, [r7, #0]
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d007      	beq.n	80072e0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80072d0:	4b1a      	ldr	r3, [pc, #104]	; (800733c <prvAddCurrentTaskToDelayedList+0xb4>)
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	3304      	adds	r3, #4
 80072d6:	4619      	mov	r1, r3
 80072d8:	481a      	ldr	r0, [pc, #104]	; (8007344 <prvAddCurrentTaskToDelayedList+0xbc>)
 80072da:	f7fd fd41 	bl	8004d60 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80072de:	e026      	b.n	800732e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80072e0:	68fa      	ldr	r2, [r7, #12]
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	4413      	add	r3, r2
 80072e6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80072e8:	4b14      	ldr	r3, [pc, #80]	; (800733c <prvAddCurrentTaskToDelayedList+0xb4>)
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	68ba      	ldr	r2, [r7, #8]
 80072ee:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80072f0:	68ba      	ldr	r2, [r7, #8]
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	429a      	cmp	r2, r3
 80072f6:	d209      	bcs.n	800730c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80072f8:	4b13      	ldr	r3, [pc, #76]	; (8007348 <prvAddCurrentTaskToDelayedList+0xc0>)
 80072fa:	681a      	ldr	r2, [r3, #0]
 80072fc:	4b0f      	ldr	r3, [pc, #60]	; (800733c <prvAddCurrentTaskToDelayedList+0xb4>)
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	3304      	adds	r3, #4
 8007302:	4619      	mov	r1, r3
 8007304:	4610      	mov	r0, r2
 8007306:	f7fd fd4f 	bl	8004da8 <vListInsert>
}
 800730a:	e010      	b.n	800732e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800730c:	4b0f      	ldr	r3, [pc, #60]	; (800734c <prvAddCurrentTaskToDelayedList+0xc4>)
 800730e:	681a      	ldr	r2, [r3, #0]
 8007310:	4b0a      	ldr	r3, [pc, #40]	; (800733c <prvAddCurrentTaskToDelayedList+0xb4>)
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	3304      	adds	r3, #4
 8007316:	4619      	mov	r1, r3
 8007318:	4610      	mov	r0, r2
 800731a:	f7fd fd45 	bl	8004da8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800731e:	4b0c      	ldr	r3, [pc, #48]	; (8007350 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	68ba      	ldr	r2, [r7, #8]
 8007324:	429a      	cmp	r2, r3
 8007326:	d202      	bcs.n	800732e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8007328:	4a09      	ldr	r2, [pc, #36]	; (8007350 <prvAddCurrentTaskToDelayedList+0xc8>)
 800732a:	68bb      	ldr	r3, [r7, #8]
 800732c:	6013      	str	r3, [r2, #0]
}
 800732e:	bf00      	nop
 8007330:	3710      	adds	r7, #16
 8007332:	46bd      	mov	sp, r7
 8007334:	bd80      	pop	{r7, pc}
 8007336:	bf00      	nop
 8007338:	20000798 	.word	0x20000798
 800733c:	20000694 	.word	0x20000694
 8007340:	2000079c 	.word	0x2000079c
 8007344:	20000780 	.word	0x20000780
 8007348:	20000750 	.word	0x20000750
 800734c:	2000074c 	.word	0x2000074c
 8007350:	200007b4 	.word	0x200007b4

08007354 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007354:	b580      	push	{r7, lr}
 8007356:	b08a      	sub	sp, #40	; 0x28
 8007358:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800735a:	2300      	movs	r3, #0
 800735c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800735e:	f000 facb 	bl	80078f8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007362:	4b1c      	ldr	r3, [pc, #112]	; (80073d4 <xTimerCreateTimerTask+0x80>)
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	2b00      	cmp	r3, #0
 8007368:	d021      	beq.n	80073ae <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800736a:	2300      	movs	r3, #0
 800736c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800736e:	2300      	movs	r3, #0
 8007370:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007372:	1d3a      	adds	r2, r7, #4
 8007374:	f107 0108 	add.w	r1, r7, #8
 8007378:	f107 030c 	add.w	r3, r7, #12
 800737c:	4618      	mov	r0, r3
 800737e:	f7f8 ffa7 	bl	80002d0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007382:	6879      	ldr	r1, [r7, #4]
 8007384:	68bb      	ldr	r3, [r7, #8]
 8007386:	68fa      	ldr	r2, [r7, #12]
 8007388:	9202      	str	r2, [sp, #8]
 800738a:	9301      	str	r3, [sp, #4]
 800738c:	2302      	movs	r3, #2
 800738e:	9300      	str	r3, [sp, #0]
 8007390:	2300      	movs	r3, #0
 8007392:	460a      	mov	r2, r1
 8007394:	4910      	ldr	r1, [pc, #64]	; (80073d8 <xTimerCreateTimerTask+0x84>)
 8007396:	4811      	ldr	r0, [pc, #68]	; (80073dc <xTimerCreateTimerTask+0x88>)
 8007398:	f7fe fc3c 	bl	8005c14 <xTaskCreateStatic>
 800739c:	4603      	mov	r3, r0
 800739e:	4a10      	ldr	r2, [pc, #64]	; (80073e0 <xTimerCreateTimerTask+0x8c>)
 80073a0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80073a2:	4b0f      	ldr	r3, [pc, #60]	; (80073e0 <xTimerCreateTimerTask+0x8c>)
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d001      	beq.n	80073ae <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80073aa:	2301      	movs	r3, #1
 80073ac:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80073ae:	697b      	ldr	r3, [r7, #20]
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d10a      	bne.n	80073ca <xTimerCreateTimerTask+0x76>
	__asm volatile
 80073b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073b8:	f383 8811 	msr	BASEPRI, r3
 80073bc:	f3bf 8f6f 	isb	sy
 80073c0:	f3bf 8f4f 	dsb	sy
 80073c4:	613b      	str	r3, [r7, #16]
}
 80073c6:	bf00      	nop
 80073c8:	e7fe      	b.n	80073c8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80073ca:	697b      	ldr	r3, [r7, #20]
}
 80073cc:	4618      	mov	r0, r3
 80073ce:	3718      	adds	r7, #24
 80073d0:	46bd      	mov	sp, r7
 80073d2:	bd80      	pop	{r7, pc}
 80073d4:	200007f0 	.word	0x200007f0
 80073d8:	08008cf4 	.word	0x08008cf4
 80073dc:	08007501 	.word	0x08007501
 80073e0:	200007f4 	.word	0x200007f4

080073e4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80073e4:	b580      	push	{r7, lr}
 80073e6:	b08a      	sub	sp, #40	; 0x28
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	60f8      	str	r0, [r7, #12]
 80073ec:	60b9      	str	r1, [r7, #8]
 80073ee:	607a      	str	r2, [r7, #4]
 80073f0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80073f2:	2300      	movs	r3, #0
 80073f4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d10a      	bne.n	8007412 <xTimerGenericCommand+0x2e>
	__asm volatile
 80073fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007400:	f383 8811 	msr	BASEPRI, r3
 8007404:	f3bf 8f6f 	isb	sy
 8007408:	f3bf 8f4f 	dsb	sy
 800740c:	623b      	str	r3, [r7, #32]
}
 800740e:	bf00      	nop
 8007410:	e7fe      	b.n	8007410 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007412:	4b1a      	ldr	r3, [pc, #104]	; (800747c <xTimerGenericCommand+0x98>)
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	2b00      	cmp	r3, #0
 8007418:	d02a      	beq.n	8007470 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800741a:	68bb      	ldr	r3, [r7, #8]
 800741c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007426:	68bb      	ldr	r3, [r7, #8]
 8007428:	2b05      	cmp	r3, #5
 800742a:	dc18      	bgt.n	800745e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800742c:	f7ff fc2c 	bl	8006c88 <xTaskGetSchedulerState>
 8007430:	4603      	mov	r3, r0
 8007432:	2b02      	cmp	r3, #2
 8007434:	d109      	bne.n	800744a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007436:	4b11      	ldr	r3, [pc, #68]	; (800747c <xTimerGenericCommand+0x98>)
 8007438:	6818      	ldr	r0, [r3, #0]
 800743a:	f107 0110 	add.w	r1, r7, #16
 800743e:	2300      	movs	r3, #0
 8007440:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007442:	f7fd fe51 	bl	80050e8 <xQueueGenericSend>
 8007446:	6278      	str	r0, [r7, #36]	; 0x24
 8007448:	e012      	b.n	8007470 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800744a:	4b0c      	ldr	r3, [pc, #48]	; (800747c <xTimerGenericCommand+0x98>)
 800744c:	6818      	ldr	r0, [r3, #0]
 800744e:	f107 0110 	add.w	r1, r7, #16
 8007452:	2300      	movs	r3, #0
 8007454:	2200      	movs	r2, #0
 8007456:	f7fd fe47 	bl	80050e8 <xQueueGenericSend>
 800745a:	6278      	str	r0, [r7, #36]	; 0x24
 800745c:	e008      	b.n	8007470 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800745e:	4b07      	ldr	r3, [pc, #28]	; (800747c <xTimerGenericCommand+0x98>)
 8007460:	6818      	ldr	r0, [r3, #0]
 8007462:	f107 0110 	add.w	r1, r7, #16
 8007466:	2300      	movs	r3, #0
 8007468:	683a      	ldr	r2, [r7, #0]
 800746a:	f7fd ff3b 	bl	80052e4 <xQueueGenericSendFromISR>
 800746e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007472:	4618      	mov	r0, r3
 8007474:	3728      	adds	r7, #40	; 0x28
 8007476:	46bd      	mov	sp, r7
 8007478:	bd80      	pop	{r7, pc}
 800747a:	bf00      	nop
 800747c:	200007f0 	.word	0x200007f0

08007480 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007480:	b580      	push	{r7, lr}
 8007482:	b088      	sub	sp, #32
 8007484:	af02      	add	r7, sp, #8
 8007486:	6078      	str	r0, [r7, #4]
 8007488:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800748a:	4b1c      	ldr	r3, [pc, #112]	; (80074fc <prvProcessExpiredTimer+0x7c>)
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	68db      	ldr	r3, [r3, #12]
 8007490:	68db      	ldr	r3, [r3, #12]
 8007492:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007494:	697b      	ldr	r3, [r7, #20]
 8007496:	3304      	adds	r3, #4
 8007498:	4618      	mov	r0, r3
 800749a:	f7fd fcbe 	bl	8004e1a <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800749e:	697b      	ldr	r3, [r7, #20]
 80074a0:	69db      	ldr	r3, [r3, #28]
 80074a2:	2b01      	cmp	r3, #1
 80074a4:	d122      	bne.n	80074ec <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80074a6:	697b      	ldr	r3, [r7, #20]
 80074a8:	699a      	ldr	r2, [r3, #24]
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	18d1      	adds	r1, r2, r3
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	683a      	ldr	r2, [r7, #0]
 80074b2:	6978      	ldr	r0, [r7, #20]
 80074b4:	f000 f8c8 	bl	8007648 <prvInsertTimerInActiveList>
 80074b8:	4603      	mov	r3, r0
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d016      	beq.n	80074ec <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80074be:	2300      	movs	r3, #0
 80074c0:	9300      	str	r3, [sp, #0]
 80074c2:	2300      	movs	r3, #0
 80074c4:	687a      	ldr	r2, [r7, #4]
 80074c6:	2100      	movs	r1, #0
 80074c8:	6978      	ldr	r0, [r7, #20]
 80074ca:	f7ff ff8b 	bl	80073e4 <xTimerGenericCommand>
 80074ce:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80074d0:	693b      	ldr	r3, [r7, #16]
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d10a      	bne.n	80074ec <prvProcessExpiredTimer+0x6c>
	__asm volatile
 80074d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074da:	f383 8811 	msr	BASEPRI, r3
 80074de:	f3bf 8f6f 	isb	sy
 80074e2:	f3bf 8f4f 	dsb	sy
 80074e6:	60fb      	str	r3, [r7, #12]
}
 80074e8:	bf00      	nop
 80074ea:	e7fe      	b.n	80074ea <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80074ec:	697b      	ldr	r3, [r7, #20]
 80074ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074f0:	6978      	ldr	r0, [r7, #20]
 80074f2:	4798      	blx	r3
}
 80074f4:	bf00      	nop
 80074f6:	3718      	adds	r7, #24
 80074f8:	46bd      	mov	sp, r7
 80074fa:	bd80      	pop	{r7, pc}
 80074fc:	200007e8 	.word	0x200007e8

08007500 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8007500:	b580      	push	{r7, lr}
 8007502:	b084      	sub	sp, #16
 8007504:	af00      	add	r7, sp, #0
 8007506:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007508:	f107 0308 	add.w	r3, r7, #8
 800750c:	4618      	mov	r0, r3
 800750e:	f000 f857 	bl	80075c0 <prvGetNextExpireTime>
 8007512:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007514:	68bb      	ldr	r3, [r7, #8]
 8007516:	4619      	mov	r1, r3
 8007518:	68f8      	ldr	r0, [r7, #12]
 800751a:	f000 f803 	bl	8007524 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800751e:	f000 f8d5 	bl	80076cc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007522:	e7f1      	b.n	8007508 <prvTimerTask+0x8>

08007524 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007524:	b580      	push	{r7, lr}
 8007526:	b084      	sub	sp, #16
 8007528:	af00      	add	r7, sp, #0
 800752a:	6078      	str	r0, [r7, #4]
 800752c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800752e:	f7fe fe47 	bl	80061c0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007532:	f107 0308 	add.w	r3, r7, #8
 8007536:	4618      	mov	r0, r3
 8007538:	f000 f866 	bl	8007608 <prvSampleTimeNow>
 800753c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800753e:	68bb      	ldr	r3, [r7, #8]
 8007540:	2b00      	cmp	r3, #0
 8007542:	d130      	bne.n	80075a6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007544:	683b      	ldr	r3, [r7, #0]
 8007546:	2b00      	cmp	r3, #0
 8007548:	d10a      	bne.n	8007560 <prvProcessTimerOrBlockTask+0x3c>
 800754a:	687a      	ldr	r2, [r7, #4]
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	429a      	cmp	r2, r3
 8007550:	d806      	bhi.n	8007560 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007552:	f7fe fe43 	bl	80061dc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007556:	68f9      	ldr	r1, [r7, #12]
 8007558:	6878      	ldr	r0, [r7, #4]
 800755a:	f7ff ff91 	bl	8007480 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800755e:	e024      	b.n	80075aa <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007560:	683b      	ldr	r3, [r7, #0]
 8007562:	2b00      	cmp	r3, #0
 8007564:	d008      	beq.n	8007578 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007566:	4b13      	ldr	r3, [pc, #76]	; (80075b4 <prvProcessTimerOrBlockTask+0x90>)
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	2b00      	cmp	r3, #0
 800756e:	bf0c      	ite	eq
 8007570:	2301      	moveq	r3, #1
 8007572:	2300      	movne	r3, #0
 8007574:	b2db      	uxtb	r3, r3
 8007576:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007578:	4b0f      	ldr	r3, [pc, #60]	; (80075b8 <prvProcessTimerOrBlockTask+0x94>)
 800757a:	6818      	ldr	r0, [r3, #0]
 800757c:	687a      	ldr	r2, [r7, #4]
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	1ad3      	subs	r3, r2, r3
 8007582:	683a      	ldr	r2, [r7, #0]
 8007584:	4619      	mov	r1, r3
 8007586:	f7fe fb11 	bl	8005bac <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800758a:	f7fe fe27 	bl	80061dc <xTaskResumeAll>
 800758e:	4603      	mov	r3, r0
 8007590:	2b00      	cmp	r3, #0
 8007592:	d10a      	bne.n	80075aa <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007594:	4b09      	ldr	r3, [pc, #36]	; (80075bc <prvProcessTimerOrBlockTask+0x98>)
 8007596:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800759a:	601a      	str	r2, [r3, #0]
 800759c:	f3bf 8f4f 	dsb	sy
 80075a0:	f3bf 8f6f 	isb	sy
}
 80075a4:	e001      	b.n	80075aa <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80075a6:	f7fe fe19 	bl	80061dc <xTaskResumeAll>
}
 80075aa:	bf00      	nop
 80075ac:	3710      	adds	r7, #16
 80075ae:	46bd      	mov	sp, r7
 80075b0:	bd80      	pop	{r7, pc}
 80075b2:	bf00      	nop
 80075b4:	200007ec 	.word	0x200007ec
 80075b8:	200007f0 	.word	0x200007f0
 80075bc:	e000ed04 	.word	0xe000ed04

080075c0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80075c0:	b480      	push	{r7}
 80075c2:	b085      	sub	sp, #20
 80075c4:	af00      	add	r7, sp, #0
 80075c6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80075c8:	4b0e      	ldr	r3, [pc, #56]	; (8007604 <prvGetNextExpireTime+0x44>)
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	bf0c      	ite	eq
 80075d2:	2301      	moveq	r3, #1
 80075d4:	2300      	movne	r3, #0
 80075d6:	b2db      	uxtb	r3, r3
 80075d8:	461a      	mov	r2, r3
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d105      	bne.n	80075f2 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80075e6:	4b07      	ldr	r3, [pc, #28]	; (8007604 <prvGetNextExpireTime+0x44>)
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	68db      	ldr	r3, [r3, #12]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	60fb      	str	r3, [r7, #12]
 80075f0:	e001      	b.n	80075f6 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80075f2:	2300      	movs	r3, #0
 80075f4:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80075f6:	68fb      	ldr	r3, [r7, #12]
}
 80075f8:	4618      	mov	r0, r3
 80075fa:	3714      	adds	r7, #20
 80075fc:	46bd      	mov	sp, r7
 80075fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007602:	4770      	bx	lr
 8007604:	200007e8 	.word	0x200007e8

08007608 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007608:	b580      	push	{r7, lr}
 800760a:	b084      	sub	sp, #16
 800760c:	af00      	add	r7, sp, #0
 800760e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007610:	f7fe fe80 	bl	8006314 <xTaskGetTickCount>
 8007614:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007616:	4b0b      	ldr	r3, [pc, #44]	; (8007644 <prvSampleTimeNow+0x3c>)
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	68fa      	ldr	r2, [r7, #12]
 800761c:	429a      	cmp	r2, r3
 800761e:	d205      	bcs.n	800762c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007620:	f000 f908 	bl	8007834 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	2201      	movs	r2, #1
 8007628:	601a      	str	r2, [r3, #0]
 800762a:	e002      	b.n	8007632 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	2200      	movs	r2, #0
 8007630:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007632:	4a04      	ldr	r2, [pc, #16]	; (8007644 <prvSampleTimeNow+0x3c>)
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007638:	68fb      	ldr	r3, [r7, #12]
}
 800763a:	4618      	mov	r0, r3
 800763c:	3710      	adds	r7, #16
 800763e:	46bd      	mov	sp, r7
 8007640:	bd80      	pop	{r7, pc}
 8007642:	bf00      	nop
 8007644:	200007f8 	.word	0x200007f8

08007648 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007648:	b580      	push	{r7, lr}
 800764a:	b086      	sub	sp, #24
 800764c:	af00      	add	r7, sp, #0
 800764e:	60f8      	str	r0, [r7, #12]
 8007650:	60b9      	str	r1, [r7, #8]
 8007652:	607a      	str	r2, [r7, #4]
 8007654:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007656:	2300      	movs	r3, #0
 8007658:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	68ba      	ldr	r2, [r7, #8]
 800765e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	68fa      	ldr	r2, [r7, #12]
 8007664:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007666:	68ba      	ldr	r2, [r7, #8]
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	429a      	cmp	r2, r3
 800766c:	d812      	bhi.n	8007694 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800766e:	687a      	ldr	r2, [r7, #4]
 8007670:	683b      	ldr	r3, [r7, #0]
 8007672:	1ad2      	subs	r2, r2, r3
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	699b      	ldr	r3, [r3, #24]
 8007678:	429a      	cmp	r2, r3
 800767a:	d302      	bcc.n	8007682 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800767c:	2301      	movs	r3, #1
 800767e:	617b      	str	r3, [r7, #20]
 8007680:	e01b      	b.n	80076ba <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007682:	4b10      	ldr	r3, [pc, #64]	; (80076c4 <prvInsertTimerInActiveList+0x7c>)
 8007684:	681a      	ldr	r2, [r3, #0]
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	3304      	adds	r3, #4
 800768a:	4619      	mov	r1, r3
 800768c:	4610      	mov	r0, r2
 800768e:	f7fd fb8b 	bl	8004da8 <vListInsert>
 8007692:	e012      	b.n	80076ba <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007694:	687a      	ldr	r2, [r7, #4]
 8007696:	683b      	ldr	r3, [r7, #0]
 8007698:	429a      	cmp	r2, r3
 800769a:	d206      	bcs.n	80076aa <prvInsertTimerInActiveList+0x62>
 800769c:	68ba      	ldr	r2, [r7, #8]
 800769e:	683b      	ldr	r3, [r7, #0]
 80076a0:	429a      	cmp	r2, r3
 80076a2:	d302      	bcc.n	80076aa <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80076a4:	2301      	movs	r3, #1
 80076a6:	617b      	str	r3, [r7, #20]
 80076a8:	e007      	b.n	80076ba <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80076aa:	4b07      	ldr	r3, [pc, #28]	; (80076c8 <prvInsertTimerInActiveList+0x80>)
 80076ac:	681a      	ldr	r2, [r3, #0]
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	3304      	adds	r3, #4
 80076b2:	4619      	mov	r1, r3
 80076b4:	4610      	mov	r0, r2
 80076b6:	f7fd fb77 	bl	8004da8 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80076ba:	697b      	ldr	r3, [r7, #20]
}
 80076bc:	4618      	mov	r0, r3
 80076be:	3718      	adds	r7, #24
 80076c0:	46bd      	mov	sp, r7
 80076c2:	bd80      	pop	{r7, pc}
 80076c4:	200007ec 	.word	0x200007ec
 80076c8:	200007e8 	.word	0x200007e8

080076cc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80076cc:	b580      	push	{r7, lr}
 80076ce:	b08e      	sub	sp, #56	; 0x38
 80076d0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80076d2:	e09d      	b.n	8007810 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	da18      	bge.n	800770c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80076da:	1d3b      	adds	r3, r7, #4
 80076dc:	3304      	adds	r3, #4
 80076de:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80076e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d10a      	bne.n	80076fc <prvProcessReceivedCommands+0x30>
	__asm volatile
 80076e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076ea:	f383 8811 	msr	BASEPRI, r3
 80076ee:	f3bf 8f6f 	isb	sy
 80076f2:	f3bf 8f4f 	dsb	sy
 80076f6:	61fb      	str	r3, [r7, #28]
}
 80076f8:	bf00      	nop
 80076fa:	e7fe      	b.n	80076fa <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80076fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007702:	6850      	ldr	r0, [r2, #4]
 8007704:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007706:	6892      	ldr	r2, [r2, #8]
 8007708:	4611      	mov	r1, r2
 800770a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	2b00      	cmp	r3, #0
 8007710:	db7d      	blt.n	800780e <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007716:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007718:	695b      	ldr	r3, [r3, #20]
 800771a:	2b00      	cmp	r3, #0
 800771c:	d004      	beq.n	8007728 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800771e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007720:	3304      	adds	r3, #4
 8007722:	4618      	mov	r0, r3
 8007724:	f7fd fb79 	bl	8004e1a <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007728:	463b      	mov	r3, r7
 800772a:	4618      	mov	r0, r3
 800772c:	f7ff ff6c 	bl	8007608 <prvSampleTimeNow>
 8007730:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	2b09      	cmp	r3, #9
 8007736:	d86b      	bhi.n	8007810 <prvProcessReceivedCommands+0x144>
 8007738:	a201      	add	r2, pc, #4	; (adr r2, 8007740 <prvProcessReceivedCommands+0x74>)
 800773a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800773e:	bf00      	nop
 8007740:	08007769 	.word	0x08007769
 8007744:	08007769 	.word	0x08007769
 8007748:	08007769 	.word	0x08007769
 800774c:	08007811 	.word	0x08007811
 8007750:	080077c5 	.word	0x080077c5
 8007754:	080077fd 	.word	0x080077fd
 8007758:	08007769 	.word	0x08007769
 800775c:	08007769 	.word	0x08007769
 8007760:	08007811 	.word	0x08007811
 8007764:	080077c5 	.word	0x080077c5
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007768:	68ba      	ldr	r2, [r7, #8]
 800776a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800776c:	699b      	ldr	r3, [r3, #24]
 800776e:	18d1      	adds	r1, r2, r3
 8007770:	68bb      	ldr	r3, [r7, #8]
 8007772:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007774:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007776:	f7ff ff67 	bl	8007648 <prvInsertTimerInActiveList>
 800777a:	4603      	mov	r3, r0
 800777c:	2b00      	cmp	r3, #0
 800777e:	d047      	beq.n	8007810 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007780:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007784:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007786:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8007788:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800778a:	69db      	ldr	r3, [r3, #28]
 800778c:	2b01      	cmp	r3, #1
 800778e:	d13f      	bne.n	8007810 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007790:	68ba      	ldr	r2, [r7, #8]
 8007792:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007794:	699b      	ldr	r3, [r3, #24]
 8007796:	441a      	add	r2, r3
 8007798:	2300      	movs	r3, #0
 800779a:	9300      	str	r3, [sp, #0]
 800779c:	2300      	movs	r3, #0
 800779e:	2100      	movs	r1, #0
 80077a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80077a2:	f7ff fe1f 	bl	80073e4 <xTimerGenericCommand>
 80077a6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80077a8:	6a3b      	ldr	r3, [r7, #32]
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d130      	bne.n	8007810 <prvProcessReceivedCommands+0x144>
	__asm volatile
 80077ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077b2:	f383 8811 	msr	BASEPRI, r3
 80077b6:	f3bf 8f6f 	isb	sy
 80077ba:	f3bf 8f4f 	dsb	sy
 80077be:	61bb      	str	r3, [r7, #24]
}
 80077c0:	bf00      	nop
 80077c2:	e7fe      	b.n	80077c2 <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80077c4:	68ba      	ldr	r2, [r7, #8]
 80077c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077c8:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80077ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077cc:	699b      	ldr	r3, [r3, #24]
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d10a      	bne.n	80077e8 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 80077d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077d6:	f383 8811 	msr	BASEPRI, r3
 80077da:	f3bf 8f6f 	isb	sy
 80077de:	f3bf 8f4f 	dsb	sy
 80077e2:	617b      	str	r3, [r7, #20]
}
 80077e4:	bf00      	nop
 80077e6:	e7fe      	b.n	80077e6 <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80077e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077ea:	699a      	ldr	r2, [r3, #24]
 80077ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077ee:	18d1      	adds	r1, r2, r3
 80077f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80077f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80077f6:	f7ff ff27 	bl	8007648 <prvInsertTimerInActiveList>
					break;
 80077fa:	e009      	b.n	8007810 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80077fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077fe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007802:	2b00      	cmp	r3, #0
 8007804:	d104      	bne.n	8007810 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 8007806:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007808:	f000 fbca 	bl	8007fa0 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800780c:	e000      	b.n	8007810 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800780e:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007810:	4b07      	ldr	r3, [pc, #28]	; (8007830 <prvProcessReceivedCommands+0x164>)
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	1d39      	adds	r1, r7, #4
 8007816:	2200      	movs	r2, #0
 8007818:	4618      	mov	r0, r3
 800781a:	f7fd fe89 	bl	8005530 <xQueueReceive>
 800781e:	4603      	mov	r3, r0
 8007820:	2b00      	cmp	r3, #0
 8007822:	f47f af57 	bne.w	80076d4 <prvProcessReceivedCommands+0x8>
	}
}
 8007826:	bf00      	nop
 8007828:	bf00      	nop
 800782a:	3730      	adds	r7, #48	; 0x30
 800782c:	46bd      	mov	sp, r7
 800782e:	bd80      	pop	{r7, pc}
 8007830:	200007f0 	.word	0x200007f0

08007834 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007834:	b580      	push	{r7, lr}
 8007836:	b088      	sub	sp, #32
 8007838:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800783a:	e045      	b.n	80078c8 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800783c:	4b2c      	ldr	r3, [pc, #176]	; (80078f0 <prvSwitchTimerLists+0xbc>)
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	68db      	ldr	r3, [r3, #12]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007846:	4b2a      	ldr	r3, [pc, #168]	; (80078f0 <prvSwitchTimerLists+0xbc>)
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	68db      	ldr	r3, [r3, #12]
 800784c:	68db      	ldr	r3, [r3, #12]
 800784e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	3304      	adds	r3, #4
 8007854:	4618      	mov	r0, r3
 8007856:	f7fd fae0 	bl	8004e1a <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800785e:	68f8      	ldr	r0, [r7, #12]
 8007860:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	69db      	ldr	r3, [r3, #28]
 8007866:	2b01      	cmp	r3, #1
 8007868:	d12e      	bne.n	80078c8 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	699b      	ldr	r3, [r3, #24]
 800786e:	693a      	ldr	r2, [r7, #16]
 8007870:	4413      	add	r3, r2
 8007872:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007874:	68ba      	ldr	r2, [r7, #8]
 8007876:	693b      	ldr	r3, [r7, #16]
 8007878:	429a      	cmp	r2, r3
 800787a:	d90e      	bls.n	800789a <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	68ba      	ldr	r2, [r7, #8]
 8007880:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	68fa      	ldr	r2, [r7, #12]
 8007886:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007888:	4b19      	ldr	r3, [pc, #100]	; (80078f0 <prvSwitchTimerLists+0xbc>)
 800788a:	681a      	ldr	r2, [r3, #0]
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	3304      	adds	r3, #4
 8007890:	4619      	mov	r1, r3
 8007892:	4610      	mov	r0, r2
 8007894:	f7fd fa88 	bl	8004da8 <vListInsert>
 8007898:	e016      	b.n	80078c8 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800789a:	2300      	movs	r3, #0
 800789c:	9300      	str	r3, [sp, #0]
 800789e:	2300      	movs	r3, #0
 80078a0:	693a      	ldr	r2, [r7, #16]
 80078a2:	2100      	movs	r1, #0
 80078a4:	68f8      	ldr	r0, [r7, #12]
 80078a6:	f7ff fd9d 	bl	80073e4 <xTimerGenericCommand>
 80078aa:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d10a      	bne.n	80078c8 <prvSwitchTimerLists+0x94>
	__asm volatile
 80078b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078b6:	f383 8811 	msr	BASEPRI, r3
 80078ba:	f3bf 8f6f 	isb	sy
 80078be:	f3bf 8f4f 	dsb	sy
 80078c2:	603b      	str	r3, [r7, #0]
}
 80078c4:	bf00      	nop
 80078c6:	e7fe      	b.n	80078c6 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80078c8:	4b09      	ldr	r3, [pc, #36]	; (80078f0 <prvSwitchTimerLists+0xbc>)
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d1b4      	bne.n	800783c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80078d2:	4b07      	ldr	r3, [pc, #28]	; (80078f0 <prvSwitchTimerLists+0xbc>)
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80078d8:	4b06      	ldr	r3, [pc, #24]	; (80078f4 <prvSwitchTimerLists+0xc0>)
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	4a04      	ldr	r2, [pc, #16]	; (80078f0 <prvSwitchTimerLists+0xbc>)
 80078de:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80078e0:	4a04      	ldr	r2, [pc, #16]	; (80078f4 <prvSwitchTimerLists+0xc0>)
 80078e2:	697b      	ldr	r3, [r7, #20]
 80078e4:	6013      	str	r3, [r2, #0]
}
 80078e6:	bf00      	nop
 80078e8:	3718      	adds	r7, #24
 80078ea:	46bd      	mov	sp, r7
 80078ec:	bd80      	pop	{r7, pc}
 80078ee:	bf00      	nop
 80078f0:	200007e8 	.word	0x200007e8
 80078f4:	200007ec 	.word	0x200007ec

080078f8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80078f8:	b580      	push	{r7, lr}
 80078fa:	b082      	sub	sp, #8
 80078fc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80078fe:	f000 f969 	bl	8007bd4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007902:	4b15      	ldr	r3, [pc, #84]	; (8007958 <prvCheckForValidListAndQueue+0x60>)
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	2b00      	cmp	r3, #0
 8007908:	d120      	bne.n	800794c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800790a:	4814      	ldr	r0, [pc, #80]	; (800795c <prvCheckForValidListAndQueue+0x64>)
 800790c:	f7fd f9fb 	bl	8004d06 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007910:	4813      	ldr	r0, [pc, #76]	; (8007960 <prvCheckForValidListAndQueue+0x68>)
 8007912:	f7fd f9f8 	bl	8004d06 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007916:	4b13      	ldr	r3, [pc, #76]	; (8007964 <prvCheckForValidListAndQueue+0x6c>)
 8007918:	4a10      	ldr	r2, [pc, #64]	; (800795c <prvCheckForValidListAndQueue+0x64>)
 800791a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800791c:	4b12      	ldr	r3, [pc, #72]	; (8007968 <prvCheckForValidListAndQueue+0x70>)
 800791e:	4a10      	ldr	r2, [pc, #64]	; (8007960 <prvCheckForValidListAndQueue+0x68>)
 8007920:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007922:	2300      	movs	r3, #0
 8007924:	9300      	str	r3, [sp, #0]
 8007926:	4b11      	ldr	r3, [pc, #68]	; (800796c <prvCheckForValidListAndQueue+0x74>)
 8007928:	4a11      	ldr	r2, [pc, #68]	; (8007970 <prvCheckForValidListAndQueue+0x78>)
 800792a:	2110      	movs	r1, #16
 800792c:	200a      	movs	r0, #10
 800792e:	f7fd fb07 	bl	8004f40 <xQueueGenericCreateStatic>
 8007932:	4603      	mov	r3, r0
 8007934:	4a08      	ldr	r2, [pc, #32]	; (8007958 <prvCheckForValidListAndQueue+0x60>)
 8007936:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007938:	4b07      	ldr	r3, [pc, #28]	; (8007958 <prvCheckForValidListAndQueue+0x60>)
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	2b00      	cmp	r3, #0
 800793e:	d005      	beq.n	800794c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007940:	4b05      	ldr	r3, [pc, #20]	; (8007958 <prvCheckForValidListAndQueue+0x60>)
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	490b      	ldr	r1, [pc, #44]	; (8007974 <prvCheckForValidListAndQueue+0x7c>)
 8007946:	4618      	mov	r0, r3
 8007948:	f7fe f906 	bl	8005b58 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800794c:	f000 f972 	bl	8007c34 <vPortExitCritical>
}
 8007950:	bf00      	nop
 8007952:	46bd      	mov	sp, r7
 8007954:	bd80      	pop	{r7, pc}
 8007956:	bf00      	nop
 8007958:	200007f0 	.word	0x200007f0
 800795c:	200007c0 	.word	0x200007c0
 8007960:	200007d4 	.word	0x200007d4
 8007964:	200007e8 	.word	0x200007e8
 8007968:	200007ec 	.word	0x200007ec
 800796c:	2000089c 	.word	0x2000089c
 8007970:	200007fc 	.word	0x200007fc
 8007974:	08008cfc 	.word	0x08008cfc

08007978 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007978:	b480      	push	{r7}
 800797a:	b085      	sub	sp, #20
 800797c:	af00      	add	r7, sp, #0
 800797e:	60f8      	str	r0, [r7, #12]
 8007980:	60b9      	str	r1, [r7, #8]
 8007982:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	3b04      	subs	r3, #4
 8007988:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007990:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	3b04      	subs	r3, #4
 8007996:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007998:	68bb      	ldr	r3, [r7, #8]
 800799a:	f023 0201 	bic.w	r2, r3, #1
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	3b04      	subs	r3, #4
 80079a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80079a8:	4a0c      	ldr	r2, [pc, #48]	; (80079dc <pxPortInitialiseStack+0x64>)
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	3b14      	subs	r3, #20
 80079b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80079b4:	687a      	ldr	r2, [r7, #4]
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	3b04      	subs	r3, #4
 80079be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	f06f 0202 	mvn.w	r2, #2
 80079c6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	3b20      	subs	r3, #32
 80079cc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80079ce:	68fb      	ldr	r3, [r7, #12]
}
 80079d0:	4618      	mov	r0, r3
 80079d2:	3714      	adds	r7, #20
 80079d4:	46bd      	mov	sp, r7
 80079d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079da:	4770      	bx	lr
 80079dc:	080079e1 	.word	0x080079e1

080079e0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80079e0:	b480      	push	{r7}
 80079e2:	b085      	sub	sp, #20
 80079e4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80079e6:	2300      	movs	r3, #0
 80079e8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80079ea:	4b12      	ldr	r3, [pc, #72]	; (8007a34 <prvTaskExitError+0x54>)
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079f2:	d00a      	beq.n	8007a0a <prvTaskExitError+0x2a>
	__asm volatile
 80079f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079f8:	f383 8811 	msr	BASEPRI, r3
 80079fc:	f3bf 8f6f 	isb	sy
 8007a00:	f3bf 8f4f 	dsb	sy
 8007a04:	60fb      	str	r3, [r7, #12]
}
 8007a06:	bf00      	nop
 8007a08:	e7fe      	b.n	8007a08 <prvTaskExitError+0x28>
	__asm volatile
 8007a0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a0e:	f383 8811 	msr	BASEPRI, r3
 8007a12:	f3bf 8f6f 	isb	sy
 8007a16:	f3bf 8f4f 	dsb	sy
 8007a1a:	60bb      	str	r3, [r7, #8]
}
 8007a1c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007a1e:	bf00      	nop
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d0fc      	beq.n	8007a20 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007a26:	bf00      	nop
 8007a28:	bf00      	nop
 8007a2a:	3714      	adds	r7, #20
 8007a2c:	46bd      	mov	sp, r7
 8007a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a32:	4770      	bx	lr
 8007a34:	2000000c 	.word	0x2000000c
	...

08007a40 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007a40:	4b07      	ldr	r3, [pc, #28]	; (8007a60 <pxCurrentTCBConst2>)
 8007a42:	6819      	ldr	r1, [r3, #0]
 8007a44:	6808      	ldr	r0, [r1, #0]
 8007a46:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a4a:	f380 8809 	msr	PSP, r0
 8007a4e:	f3bf 8f6f 	isb	sy
 8007a52:	f04f 0000 	mov.w	r0, #0
 8007a56:	f380 8811 	msr	BASEPRI, r0
 8007a5a:	4770      	bx	lr
 8007a5c:	f3af 8000 	nop.w

08007a60 <pxCurrentTCBConst2>:
 8007a60:	20000694 	.word	0x20000694
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007a64:	bf00      	nop
 8007a66:	bf00      	nop

08007a68 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007a68:	4808      	ldr	r0, [pc, #32]	; (8007a8c <prvPortStartFirstTask+0x24>)
 8007a6a:	6800      	ldr	r0, [r0, #0]
 8007a6c:	6800      	ldr	r0, [r0, #0]
 8007a6e:	f380 8808 	msr	MSP, r0
 8007a72:	f04f 0000 	mov.w	r0, #0
 8007a76:	f380 8814 	msr	CONTROL, r0
 8007a7a:	b662      	cpsie	i
 8007a7c:	b661      	cpsie	f
 8007a7e:	f3bf 8f4f 	dsb	sy
 8007a82:	f3bf 8f6f 	isb	sy
 8007a86:	df00      	svc	0
 8007a88:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007a8a:	bf00      	nop
 8007a8c:	e000ed08 	.word	0xe000ed08

08007a90 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007a90:	b580      	push	{r7, lr}
 8007a92:	b086      	sub	sp, #24
 8007a94:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007a96:	4b46      	ldr	r3, [pc, #280]	; (8007bb0 <xPortStartScheduler+0x120>)
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	4a46      	ldr	r2, [pc, #280]	; (8007bb4 <xPortStartScheduler+0x124>)
 8007a9c:	4293      	cmp	r3, r2
 8007a9e:	d10a      	bne.n	8007ab6 <xPortStartScheduler+0x26>
	__asm volatile
 8007aa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007aa4:	f383 8811 	msr	BASEPRI, r3
 8007aa8:	f3bf 8f6f 	isb	sy
 8007aac:	f3bf 8f4f 	dsb	sy
 8007ab0:	613b      	str	r3, [r7, #16]
}
 8007ab2:	bf00      	nop
 8007ab4:	e7fe      	b.n	8007ab4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007ab6:	4b3e      	ldr	r3, [pc, #248]	; (8007bb0 <xPortStartScheduler+0x120>)
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	4a3f      	ldr	r2, [pc, #252]	; (8007bb8 <xPortStartScheduler+0x128>)
 8007abc:	4293      	cmp	r3, r2
 8007abe:	d10a      	bne.n	8007ad6 <xPortStartScheduler+0x46>
	__asm volatile
 8007ac0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ac4:	f383 8811 	msr	BASEPRI, r3
 8007ac8:	f3bf 8f6f 	isb	sy
 8007acc:	f3bf 8f4f 	dsb	sy
 8007ad0:	60fb      	str	r3, [r7, #12]
}
 8007ad2:	bf00      	nop
 8007ad4:	e7fe      	b.n	8007ad4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007ad6:	4b39      	ldr	r3, [pc, #228]	; (8007bbc <xPortStartScheduler+0x12c>)
 8007ad8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007ada:	697b      	ldr	r3, [r7, #20]
 8007adc:	781b      	ldrb	r3, [r3, #0]
 8007ade:	b2db      	uxtb	r3, r3
 8007ae0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007ae2:	697b      	ldr	r3, [r7, #20]
 8007ae4:	22ff      	movs	r2, #255	; 0xff
 8007ae6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007ae8:	697b      	ldr	r3, [r7, #20]
 8007aea:	781b      	ldrb	r3, [r3, #0]
 8007aec:	b2db      	uxtb	r3, r3
 8007aee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007af0:	78fb      	ldrb	r3, [r7, #3]
 8007af2:	b2db      	uxtb	r3, r3
 8007af4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007af8:	b2da      	uxtb	r2, r3
 8007afa:	4b31      	ldr	r3, [pc, #196]	; (8007bc0 <xPortStartScheduler+0x130>)
 8007afc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007afe:	4b31      	ldr	r3, [pc, #196]	; (8007bc4 <xPortStartScheduler+0x134>)
 8007b00:	2207      	movs	r2, #7
 8007b02:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007b04:	e009      	b.n	8007b1a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007b06:	4b2f      	ldr	r3, [pc, #188]	; (8007bc4 <xPortStartScheduler+0x134>)
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	3b01      	subs	r3, #1
 8007b0c:	4a2d      	ldr	r2, [pc, #180]	; (8007bc4 <xPortStartScheduler+0x134>)
 8007b0e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007b10:	78fb      	ldrb	r3, [r7, #3]
 8007b12:	b2db      	uxtb	r3, r3
 8007b14:	005b      	lsls	r3, r3, #1
 8007b16:	b2db      	uxtb	r3, r3
 8007b18:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007b1a:	78fb      	ldrb	r3, [r7, #3]
 8007b1c:	b2db      	uxtb	r3, r3
 8007b1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b22:	2b80      	cmp	r3, #128	; 0x80
 8007b24:	d0ef      	beq.n	8007b06 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007b26:	4b27      	ldr	r3, [pc, #156]	; (8007bc4 <xPortStartScheduler+0x134>)
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	f1c3 0307 	rsb	r3, r3, #7
 8007b2e:	2b04      	cmp	r3, #4
 8007b30:	d00a      	beq.n	8007b48 <xPortStartScheduler+0xb8>
	__asm volatile
 8007b32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b36:	f383 8811 	msr	BASEPRI, r3
 8007b3a:	f3bf 8f6f 	isb	sy
 8007b3e:	f3bf 8f4f 	dsb	sy
 8007b42:	60bb      	str	r3, [r7, #8]
}
 8007b44:	bf00      	nop
 8007b46:	e7fe      	b.n	8007b46 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007b48:	4b1e      	ldr	r3, [pc, #120]	; (8007bc4 <xPortStartScheduler+0x134>)
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	021b      	lsls	r3, r3, #8
 8007b4e:	4a1d      	ldr	r2, [pc, #116]	; (8007bc4 <xPortStartScheduler+0x134>)
 8007b50:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007b52:	4b1c      	ldr	r3, [pc, #112]	; (8007bc4 <xPortStartScheduler+0x134>)
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007b5a:	4a1a      	ldr	r2, [pc, #104]	; (8007bc4 <xPortStartScheduler+0x134>)
 8007b5c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	b2da      	uxtb	r2, r3
 8007b62:	697b      	ldr	r3, [r7, #20]
 8007b64:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007b66:	4b18      	ldr	r3, [pc, #96]	; (8007bc8 <xPortStartScheduler+0x138>)
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	4a17      	ldr	r2, [pc, #92]	; (8007bc8 <xPortStartScheduler+0x138>)
 8007b6c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007b70:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007b72:	4b15      	ldr	r3, [pc, #84]	; (8007bc8 <xPortStartScheduler+0x138>)
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	4a14      	ldr	r2, [pc, #80]	; (8007bc8 <xPortStartScheduler+0x138>)
 8007b78:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007b7c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007b7e:	f000 f8dd 	bl	8007d3c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007b82:	4b12      	ldr	r3, [pc, #72]	; (8007bcc <xPortStartScheduler+0x13c>)
 8007b84:	2200      	movs	r2, #0
 8007b86:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007b88:	f000 f8fc 	bl	8007d84 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007b8c:	4b10      	ldr	r3, [pc, #64]	; (8007bd0 <xPortStartScheduler+0x140>)
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	4a0f      	ldr	r2, [pc, #60]	; (8007bd0 <xPortStartScheduler+0x140>)
 8007b92:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007b96:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007b98:	f7ff ff66 	bl	8007a68 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007b9c:	f7fe fd5c 	bl	8006658 <vTaskSwitchContext>
	prvTaskExitError();
 8007ba0:	f7ff ff1e 	bl	80079e0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007ba4:	2300      	movs	r3, #0
}
 8007ba6:	4618      	mov	r0, r3
 8007ba8:	3718      	adds	r7, #24
 8007baa:	46bd      	mov	sp, r7
 8007bac:	bd80      	pop	{r7, pc}
 8007bae:	bf00      	nop
 8007bb0:	e000ed00 	.word	0xe000ed00
 8007bb4:	410fc271 	.word	0x410fc271
 8007bb8:	410fc270 	.word	0x410fc270
 8007bbc:	e000e400 	.word	0xe000e400
 8007bc0:	200008e4 	.word	0x200008e4
 8007bc4:	200008e8 	.word	0x200008e8
 8007bc8:	e000ed20 	.word	0xe000ed20
 8007bcc:	2000000c 	.word	0x2000000c
 8007bd0:	e000ef34 	.word	0xe000ef34

08007bd4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007bd4:	b480      	push	{r7}
 8007bd6:	b083      	sub	sp, #12
 8007bd8:	af00      	add	r7, sp, #0
	__asm volatile
 8007bda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bde:	f383 8811 	msr	BASEPRI, r3
 8007be2:	f3bf 8f6f 	isb	sy
 8007be6:	f3bf 8f4f 	dsb	sy
 8007bea:	607b      	str	r3, [r7, #4]
}
 8007bec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007bee:	4b0f      	ldr	r3, [pc, #60]	; (8007c2c <vPortEnterCritical+0x58>)
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	3301      	adds	r3, #1
 8007bf4:	4a0d      	ldr	r2, [pc, #52]	; (8007c2c <vPortEnterCritical+0x58>)
 8007bf6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007bf8:	4b0c      	ldr	r3, [pc, #48]	; (8007c2c <vPortEnterCritical+0x58>)
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	2b01      	cmp	r3, #1
 8007bfe:	d10f      	bne.n	8007c20 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007c00:	4b0b      	ldr	r3, [pc, #44]	; (8007c30 <vPortEnterCritical+0x5c>)
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	b2db      	uxtb	r3, r3
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d00a      	beq.n	8007c20 <vPortEnterCritical+0x4c>
	__asm volatile
 8007c0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c0e:	f383 8811 	msr	BASEPRI, r3
 8007c12:	f3bf 8f6f 	isb	sy
 8007c16:	f3bf 8f4f 	dsb	sy
 8007c1a:	603b      	str	r3, [r7, #0]
}
 8007c1c:	bf00      	nop
 8007c1e:	e7fe      	b.n	8007c1e <vPortEnterCritical+0x4a>
	}
}
 8007c20:	bf00      	nop
 8007c22:	370c      	adds	r7, #12
 8007c24:	46bd      	mov	sp, r7
 8007c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c2a:	4770      	bx	lr
 8007c2c:	2000000c 	.word	0x2000000c
 8007c30:	e000ed04 	.word	0xe000ed04

08007c34 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007c34:	b480      	push	{r7}
 8007c36:	b083      	sub	sp, #12
 8007c38:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007c3a:	4b12      	ldr	r3, [pc, #72]	; (8007c84 <vPortExitCritical+0x50>)
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d10a      	bne.n	8007c58 <vPortExitCritical+0x24>
	__asm volatile
 8007c42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c46:	f383 8811 	msr	BASEPRI, r3
 8007c4a:	f3bf 8f6f 	isb	sy
 8007c4e:	f3bf 8f4f 	dsb	sy
 8007c52:	607b      	str	r3, [r7, #4]
}
 8007c54:	bf00      	nop
 8007c56:	e7fe      	b.n	8007c56 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007c58:	4b0a      	ldr	r3, [pc, #40]	; (8007c84 <vPortExitCritical+0x50>)
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	3b01      	subs	r3, #1
 8007c5e:	4a09      	ldr	r2, [pc, #36]	; (8007c84 <vPortExitCritical+0x50>)
 8007c60:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007c62:	4b08      	ldr	r3, [pc, #32]	; (8007c84 <vPortExitCritical+0x50>)
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d105      	bne.n	8007c76 <vPortExitCritical+0x42>
 8007c6a:	2300      	movs	r3, #0
 8007c6c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007c6e:	683b      	ldr	r3, [r7, #0]
 8007c70:	f383 8811 	msr	BASEPRI, r3
}
 8007c74:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007c76:	bf00      	nop
 8007c78:	370c      	adds	r7, #12
 8007c7a:	46bd      	mov	sp, r7
 8007c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c80:	4770      	bx	lr
 8007c82:	bf00      	nop
 8007c84:	2000000c 	.word	0x2000000c
	...

08007c90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007c90:	f3ef 8009 	mrs	r0, PSP
 8007c94:	f3bf 8f6f 	isb	sy
 8007c98:	4b15      	ldr	r3, [pc, #84]	; (8007cf0 <pxCurrentTCBConst>)
 8007c9a:	681a      	ldr	r2, [r3, #0]
 8007c9c:	f01e 0f10 	tst.w	lr, #16
 8007ca0:	bf08      	it	eq
 8007ca2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007ca6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007caa:	6010      	str	r0, [r2, #0]
 8007cac:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007cb0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007cb4:	f380 8811 	msr	BASEPRI, r0
 8007cb8:	f3bf 8f4f 	dsb	sy
 8007cbc:	f3bf 8f6f 	isb	sy
 8007cc0:	f7fe fcca 	bl	8006658 <vTaskSwitchContext>
 8007cc4:	f04f 0000 	mov.w	r0, #0
 8007cc8:	f380 8811 	msr	BASEPRI, r0
 8007ccc:	bc09      	pop	{r0, r3}
 8007cce:	6819      	ldr	r1, [r3, #0]
 8007cd0:	6808      	ldr	r0, [r1, #0]
 8007cd2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cd6:	f01e 0f10 	tst.w	lr, #16
 8007cda:	bf08      	it	eq
 8007cdc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007ce0:	f380 8809 	msr	PSP, r0
 8007ce4:	f3bf 8f6f 	isb	sy
 8007ce8:	4770      	bx	lr
 8007cea:	bf00      	nop
 8007cec:	f3af 8000 	nop.w

08007cf0 <pxCurrentTCBConst>:
 8007cf0:	20000694 	.word	0x20000694
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007cf4:	bf00      	nop
 8007cf6:	bf00      	nop

08007cf8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007cf8:	b580      	push	{r7, lr}
 8007cfa:	b082      	sub	sp, #8
 8007cfc:	af00      	add	r7, sp, #0
	__asm volatile
 8007cfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d02:	f383 8811 	msr	BASEPRI, r3
 8007d06:	f3bf 8f6f 	isb	sy
 8007d0a:	f3bf 8f4f 	dsb	sy
 8007d0e:	607b      	str	r3, [r7, #4]
}
 8007d10:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007d12:	f7fe fbdb 	bl	80064cc <xTaskIncrementTick>
 8007d16:	4603      	mov	r3, r0
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d003      	beq.n	8007d24 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007d1c:	4b06      	ldr	r3, [pc, #24]	; (8007d38 <SysTick_Handler+0x40>)
 8007d1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d22:	601a      	str	r2, [r3, #0]
 8007d24:	2300      	movs	r3, #0
 8007d26:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007d28:	683b      	ldr	r3, [r7, #0]
 8007d2a:	f383 8811 	msr	BASEPRI, r3
}
 8007d2e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007d30:	bf00      	nop
 8007d32:	3708      	adds	r7, #8
 8007d34:	46bd      	mov	sp, r7
 8007d36:	bd80      	pop	{r7, pc}
 8007d38:	e000ed04 	.word	0xe000ed04

08007d3c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007d3c:	b480      	push	{r7}
 8007d3e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007d40:	4b0b      	ldr	r3, [pc, #44]	; (8007d70 <vPortSetupTimerInterrupt+0x34>)
 8007d42:	2200      	movs	r2, #0
 8007d44:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007d46:	4b0b      	ldr	r3, [pc, #44]	; (8007d74 <vPortSetupTimerInterrupt+0x38>)
 8007d48:	2200      	movs	r2, #0
 8007d4a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007d4c:	4b0a      	ldr	r3, [pc, #40]	; (8007d78 <vPortSetupTimerInterrupt+0x3c>)
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	4a0a      	ldr	r2, [pc, #40]	; (8007d7c <vPortSetupTimerInterrupt+0x40>)
 8007d52:	fba2 2303 	umull	r2, r3, r2, r3
 8007d56:	099b      	lsrs	r3, r3, #6
 8007d58:	4a09      	ldr	r2, [pc, #36]	; (8007d80 <vPortSetupTimerInterrupt+0x44>)
 8007d5a:	3b01      	subs	r3, #1
 8007d5c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007d5e:	4b04      	ldr	r3, [pc, #16]	; (8007d70 <vPortSetupTimerInterrupt+0x34>)
 8007d60:	2207      	movs	r2, #7
 8007d62:	601a      	str	r2, [r3, #0]
}
 8007d64:	bf00      	nop
 8007d66:	46bd      	mov	sp, r7
 8007d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d6c:	4770      	bx	lr
 8007d6e:	bf00      	nop
 8007d70:	e000e010 	.word	0xe000e010
 8007d74:	e000e018 	.word	0xe000e018
 8007d78:	20000000 	.word	0x20000000
 8007d7c:	10624dd3 	.word	0x10624dd3
 8007d80:	e000e014 	.word	0xe000e014

08007d84 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007d84:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007d94 <vPortEnableVFP+0x10>
 8007d88:	6801      	ldr	r1, [r0, #0]
 8007d8a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007d8e:	6001      	str	r1, [r0, #0]
 8007d90:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007d92:	bf00      	nop
 8007d94:	e000ed88 	.word	0xe000ed88

08007d98 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007d98:	b480      	push	{r7}
 8007d9a:	b085      	sub	sp, #20
 8007d9c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007d9e:	f3ef 8305 	mrs	r3, IPSR
 8007da2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	2b0f      	cmp	r3, #15
 8007da8:	d914      	bls.n	8007dd4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007daa:	4a17      	ldr	r2, [pc, #92]	; (8007e08 <vPortValidateInterruptPriority+0x70>)
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	4413      	add	r3, r2
 8007db0:	781b      	ldrb	r3, [r3, #0]
 8007db2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007db4:	4b15      	ldr	r3, [pc, #84]	; (8007e0c <vPortValidateInterruptPriority+0x74>)
 8007db6:	781b      	ldrb	r3, [r3, #0]
 8007db8:	7afa      	ldrb	r2, [r7, #11]
 8007dba:	429a      	cmp	r2, r3
 8007dbc:	d20a      	bcs.n	8007dd4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8007dbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dc2:	f383 8811 	msr	BASEPRI, r3
 8007dc6:	f3bf 8f6f 	isb	sy
 8007dca:	f3bf 8f4f 	dsb	sy
 8007dce:	607b      	str	r3, [r7, #4]
}
 8007dd0:	bf00      	nop
 8007dd2:	e7fe      	b.n	8007dd2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007dd4:	4b0e      	ldr	r3, [pc, #56]	; (8007e10 <vPortValidateInterruptPriority+0x78>)
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007ddc:	4b0d      	ldr	r3, [pc, #52]	; (8007e14 <vPortValidateInterruptPriority+0x7c>)
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	429a      	cmp	r2, r3
 8007de2:	d90a      	bls.n	8007dfa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007de4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007de8:	f383 8811 	msr	BASEPRI, r3
 8007dec:	f3bf 8f6f 	isb	sy
 8007df0:	f3bf 8f4f 	dsb	sy
 8007df4:	603b      	str	r3, [r7, #0]
}
 8007df6:	bf00      	nop
 8007df8:	e7fe      	b.n	8007df8 <vPortValidateInterruptPriority+0x60>
	}
 8007dfa:	bf00      	nop
 8007dfc:	3714      	adds	r7, #20
 8007dfe:	46bd      	mov	sp, r7
 8007e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e04:	4770      	bx	lr
 8007e06:	bf00      	nop
 8007e08:	e000e3f0 	.word	0xe000e3f0
 8007e0c:	200008e4 	.word	0x200008e4
 8007e10:	e000ed0c 	.word	0xe000ed0c
 8007e14:	200008e8 	.word	0x200008e8

08007e18 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007e18:	b580      	push	{r7, lr}
 8007e1a:	b08a      	sub	sp, #40	; 0x28
 8007e1c:	af00      	add	r7, sp, #0
 8007e1e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007e20:	2300      	movs	r3, #0
 8007e22:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007e24:	f7fe f9cc 	bl	80061c0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007e28:	4b58      	ldr	r3, [pc, #352]	; (8007f8c <pvPortMalloc+0x174>)
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d101      	bne.n	8007e34 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007e30:	f000 f910 	bl	8008054 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007e34:	4b56      	ldr	r3, [pc, #344]	; (8007f90 <pvPortMalloc+0x178>)
 8007e36:	681a      	ldr	r2, [r3, #0]
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	4013      	ands	r3, r2
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	f040 808e 	bne.w	8007f5e <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d01d      	beq.n	8007e84 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007e48:	2208      	movs	r2, #8
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	4413      	add	r3, r2
 8007e4e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	f003 0307 	and.w	r3, r3, #7
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d014      	beq.n	8007e84 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	f023 0307 	bic.w	r3, r3, #7
 8007e60:	3308      	adds	r3, #8
 8007e62:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	f003 0307 	and.w	r3, r3, #7
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d00a      	beq.n	8007e84 <pvPortMalloc+0x6c>
	__asm volatile
 8007e6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e72:	f383 8811 	msr	BASEPRI, r3
 8007e76:	f3bf 8f6f 	isb	sy
 8007e7a:	f3bf 8f4f 	dsb	sy
 8007e7e:	617b      	str	r3, [r7, #20]
}
 8007e80:	bf00      	nop
 8007e82:	e7fe      	b.n	8007e82 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d069      	beq.n	8007f5e <pvPortMalloc+0x146>
 8007e8a:	4b42      	ldr	r3, [pc, #264]	; (8007f94 <pvPortMalloc+0x17c>)
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	687a      	ldr	r2, [r7, #4]
 8007e90:	429a      	cmp	r2, r3
 8007e92:	d864      	bhi.n	8007f5e <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007e94:	4b40      	ldr	r3, [pc, #256]	; (8007f98 <pvPortMalloc+0x180>)
 8007e96:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007e98:	4b3f      	ldr	r3, [pc, #252]	; (8007f98 <pvPortMalloc+0x180>)
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007e9e:	e004      	b.n	8007eaa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ea2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eac:	685b      	ldr	r3, [r3, #4]
 8007eae:	687a      	ldr	r2, [r7, #4]
 8007eb0:	429a      	cmp	r2, r3
 8007eb2:	d903      	bls.n	8007ebc <pvPortMalloc+0xa4>
 8007eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d1f1      	bne.n	8007ea0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007ebc:	4b33      	ldr	r3, [pc, #204]	; (8007f8c <pvPortMalloc+0x174>)
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ec2:	429a      	cmp	r2, r3
 8007ec4:	d04b      	beq.n	8007f5e <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007ec6:	6a3b      	ldr	r3, [r7, #32]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	2208      	movs	r2, #8
 8007ecc:	4413      	add	r3, r2
 8007ece:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ed2:	681a      	ldr	r2, [r3, #0]
 8007ed4:	6a3b      	ldr	r3, [r7, #32]
 8007ed6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eda:	685a      	ldr	r2, [r3, #4]
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	1ad2      	subs	r2, r2, r3
 8007ee0:	2308      	movs	r3, #8
 8007ee2:	005b      	lsls	r3, r3, #1
 8007ee4:	429a      	cmp	r2, r3
 8007ee6:	d91f      	bls.n	8007f28 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007ee8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	4413      	add	r3, r2
 8007eee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007ef0:	69bb      	ldr	r3, [r7, #24]
 8007ef2:	f003 0307 	and.w	r3, r3, #7
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d00a      	beq.n	8007f10 <pvPortMalloc+0xf8>
	__asm volatile
 8007efa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007efe:	f383 8811 	msr	BASEPRI, r3
 8007f02:	f3bf 8f6f 	isb	sy
 8007f06:	f3bf 8f4f 	dsb	sy
 8007f0a:	613b      	str	r3, [r7, #16]
}
 8007f0c:	bf00      	nop
 8007f0e:	e7fe      	b.n	8007f0e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f12:	685a      	ldr	r2, [r3, #4]
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	1ad2      	subs	r2, r2, r3
 8007f18:	69bb      	ldr	r3, [r7, #24]
 8007f1a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f1e:	687a      	ldr	r2, [r7, #4]
 8007f20:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007f22:	69b8      	ldr	r0, [r7, #24]
 8007f24:	f000 f8f8 	bl	8008118 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007f28:	4b1a      	ldr	r3, [pc, #104]	; (8007f94 <pvPortMalloc+0x17c>)
 8007f2a:	681a      	ldr	r2, [r3, #0]
 8007f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f2e:	685b      	ldr	r3, [r3, #4]
 8007f30:	1ad3      	subs	r3, r2, r3
 8007f32:	4a18      	ldr	r2, [pc, #96]	; (8007f94 <pvPortMalloc+0x17c>)
 8007f34:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007f36:	4b17      	ldr	r3, [pc, #92]	; (8007f94 <pvPortMalloc+0x17c>)
 8007f38:	681a      	ldr	r2, [r3, #0]
 8007f3a:	4b18      	ldr	r3, [pc, #96]	; (8007f9c <pvPortMalloc+0x184>)
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	429a      	cmp	r2, r3
 8007f40:	d203      	bcs.n	8007f4a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007f42:	4b14      	ldr	r3, [pc, #80]	; (8007f94 <pvPortMalloc+0x17c>)
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	4a15      	ldr	r2, [pc, #84]	; (8007f9c <pvPortMalloc+0x184>)
 8007f48:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f4c:	685a      	ldr	r2, [r3, #4]
 8007f4e:	4b10      	ldr	r3, [pc, #64]	; (8007f90 <pvPortMalloc+0x178>)
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	431a      	orrs	r2, r3
 8007f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f56:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f5a:	2200      	movs	r2, #0
 8007f5c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007f5e:	f7fe f93d 	bl	80061dc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007f62:	69fb      	ldr	r3, [r7, #28]
 8007f64:	f003 0307 	and.w	r3, r3, #7
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d00a      	beq.n	8007f82 <pvPortMalloc+0x16a>
	__asm volatile
 8007f6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f70:	f383 8811 	msr	BASEPRI, r3
 8007f74:	f3bf 8f6f 	isb	sy
 8007f78:	f3bf 8f4f 	dsb	sy
 8007f7c:	60fb      	str	r3, [r7, #12]
}
 8007f7e:	bf00      	nop
 8007f80:	e7fe      	b.n	8007f80 <pvPortMalloc+0x168>
	return pvReturn;
 8007f82:	69fb      	ldr	r3, [r7, #28]
}
 8007f84:	4618      	mov	r0, r3
 8007f86:	3728      	adds	r7, #40	; 0x28
 8007f88:	46bd      	mov	sp, r7
 8007f8a:	bd80      	pop	{r7, pc}
 8007f8c:	2000244c 	.word	0x2000244c
 8007f90:	20002458 	.word	0x20002458
 8007f94:	20002450 	.word	0x20002450
 8007f98:	20002444 	.word	0x20002444
 8007f9c:	20002454 	.word	0x20002454

08007fa0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007fa0:	b580      	push	{r7, lr}
 8007fa2:	b086      	sub	sp, #24
 8007fa4:	af00      	add	r7, sp, #0
 8007fa6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d048      	beq.n	8008044 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007fb2:	2308      	movs	r3, #8
 8007fb4:	425b      	negs	r3, r3
 8007fb6:	697a      	ldr	r2, [r7, #20]
 8007fb8:	4413      	add	r3, r2
 8007fba:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007fbc:	697b      	ldr	r3, [r7, #20]
 8007fbe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007fc0:	693b      	ldr	r3, [r7, #16]
 8007fc2:	685a      	ldr	r2, [r3, #4]
 8007fc4:	4b21      	ldr	r3, [pc, #132]	; (800804c <vPortFree+0xac>)
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	4013      	ands	r3, r2
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d10a      	bne.n	8007fe4 <vPortFree+0x44>
	__asm volatile
 8007fce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fd2:	f383 8811 	msr	BASEPRI, r3
 8007fd6:	f3bf 8f6f 	isb	sy
 8007fda:	f3bf 8f4f 	dsb	sy
 8007fde:	60fb      	str	r3, [r7, #12]
}
 8007fe0:	bf00      	nop
 8007fe2:	e7fe      	b.n	8007fe2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007fe4:	693b      	ldr	r3, [r7, #16]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d00a      	beq.n	8008002 <vPortFree+0x62>
	__asm volatile
 8007fec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ff0:	f383 8811 	msr	BASEPRI, r3
 8007ff4:	f3bf 8f6f 	isb	sy
 8007ff8:	f3bf 8f4f 	dsb	sy
 8007ffc:	60bb      	str	r3, [r7, #8]
}
 8007ffe:	bf00      	nop
 8008000:	e7fe      	b.n	8008000 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008002:	693b      	ldr	r3, [r7, #16]
 8008004:	685a      	ldr	r2, [r3, #4]
 8008006:	4b11      	ldr	r3, [pc, #68]	; (800804c <vPortFree+0xac>)
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	4013      	ands	r3, r2
 800800c:	2b00      	cmp	r3, #0
 800800e:	d019      	beq.n	8008044 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008010:	693b      	ldr	r3, [r7, #16]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	2b00      	cmp	r3, #0
 8008016:	d115      	bne.n	8008044 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008018:	693b      	ldr	r3, [r7, #16]
 800801a:	685a      	ldr	r2, [r3, #4]
 800801c:	4b0b      	ldr	r3, [pc, #44]	; (800804c <vPortFree+0xac>)
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	43db      	mvns	r3, r3
 8008022:	401a      	ands	r2, r3
 8008024:	693b      	ldr	r3, [r7, #16]
 8008026:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008028:	f7fe f8ca 	bl	80061c0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800802c:	693b      	ldr	r3, [r7, #16]
 800802e:	685a      	ldr	r2, [r3, #4]
 8008030:	4b07      	ldr	r3, [pc, #28]	; (8008050 <vPortFree+0xb0>)
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	4413      	add	r3, r2
 8008036:	4a06      	ldr	r2, [pc, #24]	; (8008050 <vPortFree+0xb0>)
 8008038:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800803a:	6938      	ldr	r0, [r7, #16]
 800803c:	f000 f86c 	bl	8008118 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8008040:	f7fe f8cc 	bl	80061dc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008044:	bf00      	nop
 8008046:	3718      	adds	r7, #24
 8008048:	46bd      	mov	sp, r7
 800804a:	bd80      	pop	{r7, pc}
 800804c:	20002458 	.word	0x20002458
 8008050:	20002450 	.word	0x20002450

08008054 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008054:	b480      	push	{r7}
 8008056:	b085      	sub	sp, #20
 8008058:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800805a:	f641 3358 	movw	r3, #7000	; 0x1b58
 800805e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008060:	4b27      	ldr	r3, [pc, #156]	; (8008100 <prvHeapInit+0xac>)
 8008062:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	f003 0307 	and.w	r3, r3, #7
 800806a:	2b00      	cmp	r3, #0
 800806c:	d00c      	beq.n	8008088 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	3307      	adds	r3, #7
 8008072:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	f023 0307 	bic.w	r3, r3, #7
 800807a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800807c:	68ba      	ldr	r2, [r7, #8]
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	1ad3      	subs	r3, r2, r3
 8008082:	4a1f      	ldr	r2, [pc, #124]	; (8008100 <prvHeapInit+0xac>)
 8008084:	4413      	add	r3, r2
 8008086:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800808c:	4a1d      	ldr	r2, [pc, #116]	; (8008104 <prvHeapInit+0xb0>)
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008092:	4b1c      	ldr	r3, [pc, #112]	; (8008104 <prvHeapInit+0xb0>)
 8008094:	2200      	movs	r2, #0
 8008096:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	68ba      	ldr	r2, [r7, #8]
 800809c:	4413      	add	r3, r2
 800809e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80080a0:	2208      	movs	r2, #8
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	1a9b      	subs	r3, r3, r2
 80080a6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	f023 0307 	bic.w	r3, r3, #7
 80080ae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	4a15      	ldr	r2, [pc, #84]	; (8008108 <prvHeapInit+0xb4>)
 80080b4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80080b6:	4b14      	ldr	r3, [pc, #80]	; (8008108 <prvHeapInit+0xb4>)
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	2200      	movs	r2, #0
 80080bc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80080be:	4b12      	ldr	r3, [pc, #72]	; (8008108 <prvHeapInit+0xb4>)
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	2200      	movs	r2, #0
 80080c4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80080ca:	683b      	ldr	r3, [r7, #0]
 80080cc:	68fa      	ldr	r2, [r7, #12]
 80080ce:	1ad2      	subs	r2, r2, r3
 80080d0:	683b      	ldr	r3, [r7, #0]
 80080d2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80080d4:	4b0c      	ldr	r3, [pc, #48]	; (8008108 <prvHeapInit+0xb4>)
 80080d6:	681a      	ldr	r2, [r3, #0]
 80080d8:	683b      	ldr	r3, [r7, #0]
 80080da:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80080dc:	683b      	ldr	r3, [r7, #0]
 80080de:	685b      	ldr	r3, [r3, #4]
 80080e0:	4a0a      	ldr	r2, [pc, #40]	; (800810c <prvHeapInit+0xb8>)
 80080e2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80080e4:	683b      	ldr	r3, [r7, #0]
 80080e6:	685b      	ldr	r3, [r3, #4]
 80080e8:	4a09      	ldr	r2, [pc, #36]	; (8008110 <prvHeapInit+0xbc>)
 80080ea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80080ec:	4b09      	ldr	r3, [pc, #36]	; (8008114 <prvHeapInit+0xc0>)
 80080ee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80080f2:	601a      	str	r2, [r3, #0]
}
 80080f4:	bf00      	nop
 80080f6:	3714      	adds	r7, #20
 80080f8:	46bd      	mov	sp, r7
 80080fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080fe:	4770      	bx	lr
 8008100:	200008ec 	.word	0x200008ec
 8008104:	20002444 	.word	0x20002444
 8008108:	2000244c 	.word	0x2000244c
 800810c:	20002454 	.word	0x20002454
 8008110:	20002450 	.word	0x20002450
 8008114:	20002458 	.word	0x20002458

08008118 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008118:	b480      	push	{r7}
 800811a:	b085      	sub	sp, #20
 800811c:	af00      	add	r7, sp, #0
 800811e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008120:	4b28      	ldr	r3, [pc, #160]	; (80081c4 <prvInsertBlockIntoFreeList+0xac>)
 8008122:	60fb      	str	r3, [r7, #12]
 8008124:	e002      	b.n	800812c <prvInsertBlockIntoFreeList+0x14>
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	60fb      	str	r3, [r7, #12]
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	687a      	ldr	r2, [r7, #4]
 8008132:	429a      	cmp	r2, r3
 8008134:	d8f7      	bhi.n	8008126 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	685b      	ldr	r3, [r3, #4]
 800813e:	68ba      	ldr	r2, [r7, #8]
 8008140:	4413      	add	r3, r2
 8008142:	687a      	ldr	r2, [r7, #4]
 8008144:	429a      	cmp	r2, r3
 8008146:	d108      	bne.n	800815a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	685a      	ldr	r2, [r3, #4]
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	685b      	ldr	r3, [r3, #4]
 8008150:	441a      	add	r2, r3
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	685b      	ldr	r3, [r3, #4]
 8008162:	68ba      	ldr	r2, [r7, #8]
 8008164:	441a      	add	r2, r3
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	429a      	cmp	r2, r3
 800816c:	d118      	bne.n	80081a0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	681a      	ldr	r2, [r3, #0]
 8008172:	4b15      	ldr	r3, [pc, #84]	; (80081c8 <prvInsertBlockIntoFreeList+0xb0>)
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	429a      	cmp	r2, r3
 8008178:	d00d      	beq.n	8008196 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	685a      	ldr	r2, [r3, #4]
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	685b      	ldr	r3, [r3, #4]
 8008184:	441a      	add	r2, r3
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	681a      	ldr	r2, [r3, #0]
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	601a      	str	r2, [r3, #0]
 8008194:	e008      	b.n	80081a8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008196:	4b0c      	ldr	r3, [pc, #48]	; (80081c8 <prvInsertBlockIntoFreeList+0xb0>)
 8008198:	681a      	ldr	r2, [r3, #0]
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	601a      	str	r2, [r3, #0]
 800819e:	e003      	b.n	80081a8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	681a      	ldr	r2, [r3, #0]
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80081a8:	68fa      	ldr	r2, [r7, #12]
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	429a      	cmp	r2, r3
 80081ae:	d002      	beq.n	80081b6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	687a      	ldr	r2, [r7, #4]
 80081b4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80081b6:	bf00      	nop
 80081b8:	3714      	adds	r7, #20
 80081ba:	46bd      	mov	sp, r7
 80081bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c0:	4770      	bx	lr
 80081c2:	bf00      	nop
 80081c4:	20002444 	.word	0x20002444
 80081c8:	2000244c 	.word	0x2000244c

080081cc <arm_mean_q15>:
 80081cc:	ea5f 0c91 	movs.w	ip, r1, lsr #2
 80081d0:	b4f0      	push	{r4, r5, r6, r7}
 80081d2:	d028      	beq.n	8008226 <arm_mean_q15+0x5a>
 80081d4:	4604      	mov	r4, r0
 80081d6:	4665      	mov	r5, ip
 80081d8:	2300      	movs	r3, #0
 80081da:	6827      	ldr	r7, [r4, #0]
 80081dc:	6866      	ldr	r6, [r4, #4]
 80081de:	fa03 f387 	sxtah	r3, r3, r7
 80081e2:	eb03 4327 	add.w	r3, r3, r7, asr #16
 80081e6:	fa03 f386 	sxtah	r3, r3, r6
 80081ea:	3d01      	subs	r5, #1
 80081ec:	eb03 4326 	add.w	r3, r3, r6, asr #16
 80081f0:	f104 0408 	add.w	r4, r4, #8
 80081f4:	d1f1      	bne.n	80081da <arm_mean_q15+0xe>
 80081f6:	eb00 00cc 	add.w	r0, r0, ip, lsl #3
 80081fa:	f011 0403 	ands.w	r4, r1, #3
 80081fe:	d00d      	beq.n	800821c <arm_mean_q15+0x50>
 8008200:	f9b0 5000 	ldrsh.w	r5, [r0]
 8008204:	3c01      	subs	r4, #1
 8008206:	442b      	add	r3, r5
 8008208:	d008      	beq.n	800821c <arm_mean_q15+0x50>
 800820a:	f9b0 5002 	ldrsh.w	r5, [r0, #2]
 800820e:	2c01      	cmp	r4, #1
 8008210:	bf18      	it	ne
 8008212:	f9b0 0004 	ldrshne.w	r0, [r0, #4]
 8008216:	442b      	add	r3, r5
 8008218:	bf18      	it	ne
 800821a:	181b      	addne	r3, r3, r0
 800821c:	fb93 f3f1 	sdiv	r3, r3, r1
 8008220:	bcf0      	pop	{r4, r5, r6, r7}
 8008222:	8013      	strh	r3, [r2, #0]
 8008224:	4770      	bx	lr
 8008226:	4663      	mov	r3, ip
 8008228:	e7e7      	b.n	80081fa <arm_mean_q15+0x2e>
 800822a:	bf00      	nop

0800822c <__errno>:
 800822c:	4b01      	ldr	r3, [pc, #4]	; (8008234 <__errno+0x8>)
 800822e:	6818      	ldr	r0, [r3, #0]
 8008230:	4770      	bx	lr
 8008232:	bf00      	nop
 8008234:	20000010 	.word	0x20000010

08008238 <__libc_init_array>:
 8008238:	b570      	push	{r4, r5, r6, lr}
 800823a:	4d0d      	ldr	r5, [pc, #52]	; (8008270 <__libc_init_array+0x38>)
 800823c:	4c0d      	ldr	r4, [pc, #52]	; (8008274 <__libc_init_array+0x3c>)
 800823e:	1b64      	subs	r4, r4, r5
 8008240:	10a4      	asrs	r4, r4, #2
 8008242:	2600      	movs	r6, #0
 8008244:	42a6      	cmp	r6, r4
 8008246:	d109      	bne.n	800825c <__libc_init_array+0x24>
 8008248:	4d0b      	ldr	r5, [pc, #44]	; (8008278 <__libc_init_array+0x40>)
 800824a:	4c0c      	ldr	r4, [pc, #48]	; (800827c <__libc_init_array+0x44>)
 800824c:	f000 fcf8 	bl	8008c40 <_init>
 8008250:	1b64      	subs	r4, r4, r5
 8008252:	10a4      	asrs	r4, r4, #2
 8008254:	2600      	movs	r6, #0
 8008256:	42a6      	cmp	r6, r4
 8008258:	d105      	bne.n	8008266 <__libc_init_array+0x2e>
 800825a:	bd70      	pop	{r4, r5, r6, pc}
 800825c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008260:	4798      	blx	r3
 8008262:	3601      	adds	r6, #1
 8008264:	e7ee      	b.n	8008244 <__libc_init_array+0xc>
 8008266:	f855 3b04 	ldr.w	r3, [r5], #4
 800826a:	4798      	blx	r3
 800826c:	3601      	adds	r6, #1
 800826e:	e7f2      	b.n	8008256 <__libc_init_array+0x1e>
 8008270:	08008dd0 	.word	0x08008dd0
 8008274:	08008dd0 	.word	0x08008dd0
 8008278:	08008dd0 	.word	0x08008dd0
 800827c:	08008dd4 	.word	0x08008dd4

08008280 <__retarget_lock_acquire_recursive>:
 8008280:	4770      	bx	lr

08008282 <__retarget_lock_release_recursive>:
 8008282:	4770      	bx	lr

08008284 <memcpy>:
 8008284:	440a      	add	r2, r1
 8008286:	4291      	cmp	r1, r2
 8008288:	f100 33ff 	add.w	r3, r0, #4294967295
 800828c:	d100      	bne.n	8008290 <memcpy+0xc>
 800828e:	4770      	bx	lr
 8008290:	b510      	push	{r4, lr}
 8008292:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008296:	f803 4f01 	strb.w	r4, [r3, #1]!
 800829a:	4291      	cmp	r1, r2
 800829c:	d1f9      	bne.n	8008292 <memcpy+0xe>
 800829e:	bd10      	pop	{r4, pc}

080082a0 <memset>:
 80082a0:	4402      	add	r2, r0
 80082a2:	4603      	mov	r3, r0
 80082a4:	4293      	cmp	r3, r2
 80082a6:	d100      	bne.n	80082aa <memset+0xa>
 80082a8:	4770      	bx	lr
 80082aa:	f803 1b01 	strb.w	r1, [r3], #1
 80082ae:	e7f9      	b.n	80082a4 <memset+0x4>

080082b0 <sbrk_aligned>:
 80082b0:	b570      	push	{r4, r5, r6, lr}
 80082b2:	4e0e      	ldr	r6, [pc, #56]	; (80082ec <sbrk_aligned+0x3c>)
 80082b4:	460c      	mov	r4, r1
 80082b6:	6831      	ldr	r1, [r6, #0]
 80082b8:	4605      	mov	r5, r0
 80082ba:	b911      	cbnz	r1, 80082c2 <sbrk_aligned+0x12>
 80082bc:	f000 f8f6 	bl	80084ac <_sbrk_r>
 80082c0:	6030      	str	r0, [r6, #0]
 80082c2:	4621      	mov	r1, r4
 80082c4:	4628      	mov	r0, r5
 80082c6:	f000 f8f1 	bl	80084ac <_sbrk_r>
 80082ca:	1c43      	adds	r3, r0, #1
 80082cc:	d00a      	beq.n	80082e4 <sbrk_aligned+0x34>
 80082ce:	1cc4      	adds	r4, r0, #3
 80082d0:	f024 0403 	bic.w	r4, r4, #3
 80082d4:	42a0      	cmp	r0, r4
 80082d6:	d007      	beq.n	80082e8 <sbrk_aligned+0x38>
 80082d8:	1a21      	subs	r1, r4, r0
 80082da:	4628      	mov	r0, r5
 80082dc:	f000 f8e6 	bl	80084ac <_sbrk_r>
 80082e0:	3001      	adds	r0, #1
 80082e2:	d101      	bne.n	80082e8 <sbrk_aligned+0x38>
 80082e4:	f04f 34ff 	mov.w	r4, #4294967295
 80082e8:	4620      	mov	r0, r4
 80082ea:	bd70      	pop	{r4, r5, r6, pc}
 80082ec:	20002464 	.word	0x20002464

080082f0 <_malloc_r>:
 80082f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80082f4:	1ccd      	adds	r5, r1, #3
 80082f6:	f025 0503 	bic.w	r5, r5, #3
 80082fa:	3508      	adds	r5, #8
 80082fc:	2d0c      	cmp	r5, #12
 80082fe:	bf38      	it	cc
 8008300:	250c      	movcc	r5, #12
 8008302:	2d00      	cmp	r5, #0
 8008304:	4607      	mov	r7, r0
 8008306:	db01      	blt.n	800830c <_malloc_r+0x1c>
 8008308:	42a9      	cmp	r1, r5
 800830a:	d905      	bls.n	8008318 <_malloc_r+0x28>
 800830c:	230c      	movs	r3, #12
 800830e:	603b      	str	r3, [r7, #0]
 8008310:	2600      	movs	r6, #0
 8008312:	4630      	mov	r0, r6
 8008314:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008318:	4e2e      	ldr	r6, [pc, #184]	; (80083d4 <_malloc_r+0xe4>)
 800831a:	f000 f8f7 	bl	800850c <__malloc_lock>
 800831e:	6833      	ldr	r3, [r6, #0]
 8008320:	461c      	mov	r4, r3
 8008322:	bb34      	cbnz	r4, 8008372 <_malloc_r+0x82>
 8008324:	4629      	mov	r1, r5
 8008326:	4638      	mov	r0, r7
 8008328:	f7ff ffc2 	bl	80082b0 <sbrk_aligned>
 800832c:	1c43      	adds	r3, r0, #1
 800832e:	4604      	mov	r4, r0
 8008330:	d14d      	bne.n	80083ce <_malloc_r+0xde>
 8008332:	6834      	ldr	r4, [r6, #0]
 8008334:	4626      	mov	r6, r4
 8008336:	2e00      	cmp	r6, #0
 8008338:	d140      	bne.n	80083bc <_malloc_r+0xcc>
 800833a:	6823      	ldr	r3, [r4, #0]
 800833c:	4631      	mov	r1, r6
 800833e:	4638      	mov	r0, r7
 8008340:	eb04 0803 	add.w	r8, r4, r3
 8008344:	f000 f8b2 	bl	80084ac <_sbrk_r>
 8008348:	4580      	cmp	r8, r0
 800834a:	d13a      	bne.n	80083c2 <_malloc_r+0xd2>
 800834c:	6821      	ldr	r1, [r4, #0]
 800834e:	3503      	adds	r5, #3
 8008350:	1a6d      	subs	r5, r5, r1
 8008352:	f025 0503 	bic.w	r5, r5, #3
 8008356:	3508      	adds	r5, #8
 8008358:	2d0c      	cmp	r5, #12
 800835a:	bf38      	it	cc
 800835c:	250c      	movcc	r5, #12
 800835e:	4629      	mov	r1, r5
 8008360:	4638      	mov	r0, r7
 8008362:	f7ff ffa5 	bl	80082b0 <sbrk_aligned>
 8008366:	3001      	adds	r0, #1
 8008368:	d02b      	beq.n	80083c2 <_malloc_r+0xd2>
 800836a:	6823      	ldr	r3, [r4, #0]
 800836c:	442b      	add	r3, r5
 800836e:	6023      	str	r3, [r4, #0]
 8008370:	e00e      	b.n	8008390 <_malloc_r+0xa0>
 8008372:	6822      	ldr	r2, [r4, #0]
 8008374:	1b52      	subs	r2, r2, r5
 8008376:	d41e      	bmi.n	80083b6 <_malloc_r+0xc6>
 8008378:	2a0b      	cmp	r2, #11
 800837a:	d916      	bls.n	80083aa <_malloc_r+0xba>
 800837c:	1961      	adds	r1, r4, r5
 800837e:	42a3      	cmp	r3, r4
 8008380:	6025      	str	r5, [r4, #0]
 8008382:	bf18      	it	ne
 8008384:	6059      	strne	r1, [r3, #4]
 8008386:	6863      	ldr	r3, [r4, #4]
 8008388:	bf08      	it	eq
 800838a:	6031      	streq	r1, [r6, #0]
 800838c:	5162      	str	r2, [r4, r5]
 800838e:	604b      	str	r3, [r1, #4]
 8008390:	4638      	mov	r0, r7
 8008392:	f104 060b 	add.w	r6, r4, #11
 8008396:	f000 f8bf 	bl	8008518 <__malloc_unlock>
 800839a:	f026 0607 	bic.w	r6, r6, #7
 800839e:	1d23      	adds	r3, r4, #4
 80083a0:	1af2      	subs	r2, r6, r3
 80083a2:	d0b6      	beq.n	8008312 <_malloc_r+0x22>
 80083a4:	1b9b      	subs	r3, r3, r6
 80083a6:	50a3      	str	r3, [r4, r2]
 80083a8:	e7b3      	b.n	8008312 <_malloc_r+0x22>
 80083aa:	6862      	ldr	r2, [r4, #4]
 80083ac:	42a3      	cmp	r3, r4
 80083ae:	bf0c      	ite	eq
 80083b0:	6032      	streq	r2, [r6, #0]
 80083b2:	605a      	strne	r2, [r3, #4]
 80083b4:	e7ec      	b.n	8008390 <_malloc_r+0xa0>
 80083b6:	4623      	mov	r3, r4
 80083b8:	6864      	ldr	r4, [r4, #4]
 80083ba:	e7b2      	b.n	8008322 <_malloc_r+0x32>
 80083bc:	4634      	mov	r4, r6
 80083be:	6876      	ldr	r6, [r6, #4]
 80083c0:	e7b9      	b.n	8008336 <_malloc_r+0x46>
 80083c2:	230c      	movs	r3, #12
 80083c4:	603b      	str	r3, [r7, #0]
 80083c6:	4638      	mov	r0, r7
 80083c8:	f000 f8a6 	bl	8008518 <__malloc_unlock>
 80083cc:	e7a1      	b.n	8008312 <_malloc_r+0x22>
 80083ce:	6025      	str	r5, [r4, #0]
 80083d0:	e7de      	b.n	8008390 <_malloc_r+0xa0>
 80083d2:	bf00      	nop
 80083d4:	20002460 	.word	0x20002460

080083d8 <cleanup_glue>:
 80083d8:	b538      	push	{r3, r4, r5, lr}
 80083da:	460c      	mov	r4, r1
 80083dc:	6809      	ldr	r1, [r1, #0]
 80083de:	4605      	mov	r5, r0
 80083e0:	b109      	cbz	r1, 80083e6 <cleanup_glue+0xe>
 80083e2:	f7ff fff9 	bl	80083d8 <cleanup_glue>
 80083e6:	4621      	mov	r1, r4
 80083e8:	4628      	mov	r0, r5
 80083ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80083ee:	f000 b899 	b.w	8008524 <_free_r>
	...

080083f4 <_reclaim_reent>:
 80083f4:	4b2c      	ldr	r3, [pc, #176]	; (80084a8 <_reclaim_reent+0xb4>)
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	4283      	cmp	r3, r0
 80083fa:	b570      	push	{r4, r5, r6, lr}
 80083fc:	4604      	mov	r4, r0
 80083fe:	d051      	beq.n	80084a4 <_reclaim_reent+0xb0>
 8008400:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8008402:	b143      	cbz	r3, 8008416 <_reclaim_reent+0x22>
 8008404:	68db      	ldr	r3, [r3, #12]
 8008406:	2b00      	cmp	r3, #0
 8008408:	d14a      	bne.n	80084a0 <_reclaim_reent+0xac>
 800840a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800840c:	6819      	ldr	r1, [r3, #0]
 800840e:	b111      	cbz	r1, 8008416 <_reclaim_reent+0x22>
 8008410:	4620      	mov	r0, r4
 8008412:	f000 f887 	bl	8008524 <_free_r>
 8008416:	6961      	ldr	r1, [r4, #20]
 8008418:	b111      	cbz	r1, 8008420 <_reclaim_reent+0x2c>
 800841a:	4620      	mov	r0, r4
 800841c:	f000 f882 	bl	8008524 <_free_r>
 8008420:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8008422:	b111      	cbz	r1, 800842a <_reclaim_reent+0x36>
 8008424:	4620      	mov	r0, r4
 8008426:	f000 f87d 	bl	8008524 <_free_r>
 800842a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800842c:	b111      	cbz	r1, 8008434 <_reclaim_reent+0x40>
 800842e:	4620      	mov	r0, r4
 8008430:	f000 f878 	bl	8008524 <_free_r>
 8008434:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8008436:	b111      	cbz	r1, 800843e <_reclaim_reent+0x4a>
 8008438:	4620      	mov	r0, r4
 800843a:	f000 f873 	bl	8008524 <_free_r>
 800843e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8008440:	b111      	cbz	r1, 8008448 <_reclaim_reent+0x54>
 8008442:	4620      	mov	r0, r4
 8008444:	f000 f86e 	bl	8008524 <_free_r>
 8008448:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800844a:	b111      	cbz	r1, 8008452 <_reclaim_reent+0x5e>
 800844c:	4620      	mov	r0, r4
 800844e:	f000 f869 	bl	8008524 <_free_r>
 8008452:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8008454:	b111      	cbz	r1, 800845c <_reclaim_reent+0x68>
 8008456:	4620      	mov	r0, r4
 8008458:	f000 f864 	bl	8008524 <_free_r>
 800845c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800845e:	b111      	cbz	r1, 8008466 <_reclaim_reent+0x72>
 8008460:	4620      	mov	r0, r4
 8008462:	f000 f85f 	bl	8008524 <_free_r>
 8008466:	69a3      	ldr	r3, [r4, #24]
 8008468:	b1e3      	cbz	r3, 80084a4 <_reclaim_reent+0xb0>
 800846a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800846c:	4620      	mov	r0, r4
 800846e:	4798      	blx	r3
 8008470:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8008472:	b1b9      	cbz	r1, 80084a4 <_reclaim_reent+0xb0>
 8008474:	4620      	mov	r0, r4
 8008476:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800847a:	f7ff bfad 	b.w	80083d8 <cleanup_glue>
 800847e:	5949      	ldr	r1, [r1, r5]
 8008480:	b941      	cbnz	r1, 8008494 <_reclaim_reent+0xa0>
 8008482:	3504      	adds	r5, #4
 8008484:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008486:	2d80      	cmp	r5, #128	; 0x80
 8008488:	68d9      	ldr	r1, [r3, #12]
 800848a:	d1f8      	bne.n	800847e <_reclaim_reent+0x8a>
 800848c:	4620      	mov	r0, r4
 800848e:	f000 f849 	bl	8008524 <_free_r>
 8008492:	e7ba      	b.n	800840a <_reclaim_reent+0x16>
 8008494:	680e      	ldr	r6, [r1, #0]
 8008496:	4620      	mov	r0, r4
 8008498:	f000 f844 	bl	8008524 <_free_r>
 800849c:	4631      	mov	r1, r6
 800849e:	e7ef      	b.n	8008480 <_reclaim_reent+0x8c>
 80084a0:	2500      	movs	r5, #0
 80084a2:	e7ef      	b.n	8008484 <_reclaim_reent+0x90>
 80084a4:	bd70      	pop	{r4, r5, r6, pc}
 80084a6:	bf00      	nop
 80084a8:	20000010 	.word	0x20000010

080084ac <_sbrk_r>:
 80084ac:	b538      	push	{r3, r4, r5, lr}
 80084ae:	4d06      	ldr	r5, [pc, #24]	; (80084c8 <_sbrk_r+0x1c>)
 80084b0:	2300      	movs	r3, #0
 80084b2:	4604      	mov	r4, r0
 80084b4:	4608      	mov	r0, r1
 80084b6:	602b      	str	r3, [r5, #0]
 80084b8:	f7f8 fc6e 	bl	8000d98 <_sbrk>
 80084bc:	1c43      	adds	r3, r0, #1
 80084be:	d102      	bne.n	80084c6 <_sbrk_r+0x1a>
 80084c0:	682b      	ldr	r3, [r5, #0]
 80084c2:	b103      	cbz	r3, 80084c6 <_sbrk_r+0x1a>
 80084c4:	6023      	str	r3, [r4, #0]
 80084c6:	bd38      	pop	{r3, r4, r5, pc}
 80084c8:	20002468 	.word	0x20002468

080084cc <siprintf>:
 80084cc:	b40e      	push	{r1, r2, r3}
 80084ce:	b500      	push	{lr}
 80084d0:	b09c      	sub	sp, #112	; 0x70
 80084d2:	ab1d      	add	r3, sp, #116	; 0x74
 80084d4:	9002      	str	r0, [sp, #8]
 80084d6:	9006      	str	r0, [sp, #24]
 80084d8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80084dc:	4809      	ldr	r0, [pc, #36]	; (8008504 <siprintf+0x38>)
 80084de:	9107      	str	r1, [sp, #28]
 80084e0:	9104      	str	r1, [sp, #16]
 80084e2:	4909      	ldr	r1, [pc, #36]	; (8008508 <siprintf+0x3c>)
 80084e4:	f853 2b04 	ldr.w	r2, [r3], #4
 80084e8:	9105      	str	r1, [sp, #20]
 80084ea:	6800      	ldr	r0, [r0, #0]
 80084ec:	9301      	str	r3, [sp, #4]
 80084ee:	a902      	add	r1, sp, #8
 80084f0:	f000 f8c0 	bl	8008674 <_svfiprintf_r>
 80084f4:	9b02      	ldr	r3, [sp, #8]
 80084f6:	2200      	movs	r2, #0
 80084f8:	701a      	strb	r2, [r3, #0]
 80084fa:	b01c      	add	sp, #112	; 0x70
 80084fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8008500:	b003      	add	sp, #12
 8008502:	4770      	bx	lr
 8008504:	20000010 	.word	0x20000010
 8008508:	ffff0208 	.word	0xffff0208

0800850c <__malloc_lock>:
 800850c:	4801      	ldr	r0, [pc, #4]	; (8008514 <__malloc_lock+0x8>)
 800850e:	f7ff beb7 	b.w	8008280 <__retarget_lock_acquire_recursive>
 8008512:	bf00      	nop
 8008514:	2000245c 	.word	0x2000245c

08008518 <__malloc_unlock>:
 8008518:	4801      	ldr	r0, [pc, #4]	; (8008520 <__malloc_unlock+0x8>)
 800851a:	f7ff beb2 	b.w	8008282 <__retarget_lock_release_recursive>
 800851e:	bf00      	nop
 8008520:	2000245c 	.word	0x2000245c

08008524 <_free_r>:
 8008524:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008526:	2900      	cmp	r1, #0
 8008528:	d044      	beq.n	80085b4 <_free_r+0x90>
 800852a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800852e:	9001      	str	r0, [sp, #4]
 8008530:	2b00      	cmp	r3, #0
 8008532:	f1a1 0404 	sub.w	r4, r1, #4
 8008536:	bfb8      	it	lt
 8008538:	18e4      	addlt	r4, r4, r3
 800853a:	f7ff ffe7 	bl	800850c <__malloc_lock>
 800853e:	4a1e      	ldr	r2, [pc, #120]	; (80085b8 <_free_r+0x94>)
 8008540:	9801      	ldr	r0, [sp, #4]
 8008542:	6813      	ldr	r3, [r2, #0]
 8008544:	b933      	cbnz	r3, 8008554 <_free_r+0x30>
 8008546:	6063      	str	r3, [r4, #4]
 8008548:	6014      	str	r4, [r2, #0]
 800854a:	b003      	add	sp, #12
 800854c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008550:	f7ff bfe2 	b.w	8008518 <__malloc_unlock>
 8008554:	42a3      	cmp	r3, r4
 8008556:	d908      	bls.n	800856a <_free_r+0x46>
 8008558:	6825      	ldr	r5, [r4, #0]
 800855a:	1961      	adds	r1, r4, r5
 800855c:	428b      	cmp	r3, r1
 800855e:	bf01      	itttt	eq
 8008560:	6819      	ldreq	r1, [r3, #0]
 8008562:	685b      	ldreq	r3, [r3, #4]
 8008564:	1949      	addeq	r1, r1, r5
 8008566:	6021      	streq	r1, [r4, #0]
 8008568:	e7ed      	b.n	8008546 <_free_r+0x22>
 800856a:	461a      	mov	r2, r3
 800856c:	685b      	ldr	r3, [r3, #4]
 800856e:	b10b      	cbz	r3, 8008574 <_free_r+0x50>
 8008570:	42a3      	cmp	r3, r4
 8008572:	d9fa      	bls.n	800856a <_free_r+0x46>
 8008574:	6811      	ldr	r1, [r2, #0]
 8008576:	1855      	adds	r5, r2, r1
 8008578:	42a5      	cmp	r5, r4
 800857a:	d10b      	bne.n	8008594 <_free_r+0x70>
 800857c:	6824      	ldr	r4, [r4, #0]
 800857e:	4421      	add	r1, r4
 8008580:	1854      	adds	r4, r2, r1
 8008582:	42a3      	cmp	r3, r4
 8008584:	6011      	str	r1, [r2, #0]
 8008586:	d1e0      	bne.n	800854a <_free_r+0x26>
 8008588:	681c      	ldr	r4, [r3, #0]
 800858a:	685b      	ldr	r3, [r3, #4]
 800858c:	6053      	str	r3, [r2, #4]
 800858e:	4421      	add	r1, r4
 8008590:	6011      	str	r1, [r2, #0]
 8008592:	e7da      	b.n	800854a <_free_r+0x26>
 8008594:	d902      	bls.n	800859c <_free_r+0x78>
 8008596:	230c      	movs	r3, #12
 8008598:	6003      	str	r3, [r0, #0]
 800859a:	e7d6      	b.n	800854a <_free_r+0x26>
 800859c:	6825      	ldr	r5, [r4, #0]
 800859e:	1961      	adds	r1, r4, r5
 80085a0:	428b      	cmp	r3, r1
 80085a2:	bf04      	itt	eq
 80085a4:	6819      	ldreq	r1, [r3, #0]
 80085a6:	685b      	ldreq	r3, [r3, #4]
 80085a8:	6063      	str	r3, [r4, #4]
 80085aa:	bf04      	itt	eq
 80085ac:	1949      	addeq	r1, r1, r5
 80085ae:	6021      	streq	r1, [r4, #0]
 80085b0:	6054      	str	r4, [r2, #4]
 80085b2:	e7ca      	b.n	800854a <_free_r+0x26>
 80085b4:	b003      	add	sp, #12
 80085b6:	bd30      	pop	{r4, r5, pc}
 80085b8:	20002460 	.word	0x20002460

080085bc <__ssputs_r>:
 80085bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80085c0:	688e      	ldr	r6, [r1, #8]
 80085c2:	429e      	cmp	r6, r3
 80085c4:	4682      	mov	sl, r0
 80085c6:	460c      	mov	r4, r1
 80085c8:	4690      	mov	r8, r2
 80085ca:	461f      	mov	r7, r3
 80085cc:	d838      	bhi.n	8008640 <__ssputs_r+0x84>
 80085ce:	898a      	ldrh	r2, [r1, #12]
 80085d0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80085d4:	d032      	beq.n	800863c <__ssputs_r+0x80>
 80085d6:	6825      	ldr	r5, [r4, #0]
 80085d8:	6909      	ldr	r1, [r1, #16]
 80085da:	eba5 0901 	sub.w	r9, r5, r1
 80085de:	6965      	ldr	r5, [r4, #20]
 80085e0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80085e4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80085e8:	3301      	adds	r3, #1
 80085ea:	444b      	add	r3, r9
 80085ec:	106d      	asrs	r5, r5, #1
 80085ee:	429d      	cmp	r5, r3
 80085f0:	bf38      	it	cc
 80085f2:	461d      	movcc	r5, r3
 80085f4:	0553      	lsls	r3, r2, #21
 80085f6:	d531      	bpl.n	800865c <__ssputs_r+0xa0>
 80085f8:	4629      	mov	r1, r5
 80085fa:	f7ff fe79 	bl	80082f0 <_malloc_r>
 80085fe:	4606      	mov	r6, r0
 8008600:	b950      	cbnz	r0, 8008618 <__ssputs_r+0x5c>
 8008602:	230c      	movs	r3, #12
 8008604:	f8ca 3000 	str.w	r3, [sl]
 8008608:	89a3      	ldrh	r3, [r4, #12]
 800860a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800860e:	81a3      	strh	r3, [r4, #12]
 8008610:	f04f 30ff 	mov.w	r0, #4294967295
 8008614:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008618:	6921      	ldr	r1, [r4, #16]
 800861a:	464a      	mov	r2, r9
 800861c:	f7ff fe32 	bl	8008284 <memcpy>
 8008620:	89a3      	ldrh	r3, [r4, #12]
 8008622:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008626:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800862a:	81a3      	strh	r3, [r4, #12]
 800862c:	6126      	str	r6, [r4, #16]
 800862e:	6165      	str	r5, [r4, #20]
 8008630:	444e      	add	r6, r9
 8008632:	eba5 0509 	sub.w	r5, r5, r9
 8008636:	6026      	str	r6, [r4, #0]
 8008638:	60a5      	str	r5, [r4, #8]
 800863a:	463e      	mov	r6, r7
 800863c:	42be      	cmp	r6, r7
 800863e:	d900      	bls.n	8008642 <__ssputs_r+0x86>
 8008640:	463e      	mov	r6, r7
 8008642:	6820      	ldr	r0, [r4, #0]
 8008644:	4632      	mov	r2, r6
 8008646:	4641      	mov	r1, r8
 8008648:	f000 faa8 	bl	8008b9c <memmove>
 800864c:	68a3      	ldr	r3, [r4, #8]
 800864e:	1b9b      	subs	r3, r3, r6
 8008650:	60a3      	str	r3, [r4, #8]
 8008652:	6823      	ldr	r3, [r4, #0]
 8008654:	4433      	add	r3, r6
 8008656:	6023      	str	r3, [r4, #0]
 8008658:	2000      	movs	r0, #0
 800865a:	e7db      	b.n	8008614 <__ssputs_r+0x58>
 800865c:	462a      	mov	r2, r5
 800865e:	f000 fab7 	bl	8008bd0 <_realloc_r>
 8008662:	4606      	mov	r6, r0
 8008664:	2800      	cmp	r0, #0
 8008666:	d1e1      	bne.n	800862c <__ssputs_r+0x70>
 8008668:	6921      	ldr	r1, [r4, #16]
 800866a:	4650      	mov	r0, sl
 800866c:	f7ff ff5a 	bl	8008524 <_free_r>
 8008670:	e7c7      	b.n	8008602 <__ssputs_r+0x46>
	...

08008674 <_svfiprintf_r>:
 8008674:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008678:	4698      	mov	r8, r3
 800867a:	898b      	ldrh	r3, [r1, #12]
 800867c:	061b      	lsls	r3, r3, #24
 800867e:	b09d      	sub	sp, #116	; 0x74
 8008680:	4607      	mov	r7, r0
 8008682:	460d      	mov	r5, r1
 8008684:	4614      	mov	r4, r2
 8008686:	d50e      	bpl.n	80086a6 <_svfiprintf_r+0x32>
 8008688:	690b      	ldr	r3, [r1, #16]
 800868a:	b963      	cbnz	r3, 80086a6 <_svfiprintf_r+0x32>
 800868c:	2140      	movs	r1, #64	; 0x40
 800868e:	f7ff fe2f 	bl	80082f0 <_malloc_r>
 8008692:	6028      	str	r0, [r5, #0]
 8008694:	6128      	str	r0, [r5, #16]
 8008696:	b920      	cbnz	r0, 80086a2 <_svfiprintf_r+0x2e>
 8008698:	230c      	movs	r3, #12
 800869a:	603b      	str	r3, [r7, #0]
 800869c:	f04f 30ff 	mov.w	r0, #4294967295
 80086a0:	e0d1      	b.n	8008846 <_svfiprintf_r+0x1d2>
 80086a2:	2340      	movs	r3, #64	; 0x40
 80086a4:	616b      	str	r3, [r5, #20]
 80086a6:	2300      	movs	r3, #0
 80086a8:	9309      	str	r3, [sp, #36]	; 0x24
 80086aa:	2320      	movs	r3, #32
 80086ac:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80086b0:	f8cd 800c 	str.w	r8, [sp, #12]
 80086b4:	2330      	movs	r3, #48	; 0x30
 80086b6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008860 <_svfiprintf_r+0x1ec>
 80086ba:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80086be:	f04f 0901 	mov.w	r9, #1
 80086c2:	4623      	mov	r3, r4
 80086c4:	469a      	mov	sl, r3
 80086c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80086ca:	b10a      	cbz	r2, 80086d0 <_svfiprintf_r+0x5c>
 80086cc:	2a25      	cmp	r2, #37	; 0x25
 80086ce:	d1f9      	bne.n	80086c4 <_svfiprintf_r+0x50>
 80086d0:	ebba 0b04 	subs.w	fp, sl, r4
 80086d4:	d00b      	beq.n	80086ee <_svfiprintf_r+0x7a>
 80086d6:	465b      	mov	r3, fp
 80086d8:	4622      	mov	r2, r4
 80086da:	4629      	mov	r1, r5
 80086dc:	4638      	mov	r0, r7
 80086de:	f7ff ff6d 	bl	80085bc <__ssputs_r>
 80086e2:	3001      	adds	r0, #1
 80086e4:	f000 80aa 	beq.w	800883c <_svfiprintf_r+0x1c8>
 80086e8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80086ea:	445a      	add	r2, fp
 80086ec:	9209      	str	r2, [sp, #36]	; 0x24
 80086ee:	f89a 3000 	ldrb.w	r3, [sl]
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	f000 80a2 	beq.w	800883c <_svfiprintf_r+0x1c8>
 80086f8:	2300      	movs	r3, #0
 80086fa:	f04f 32ff 	mov.w	r2, #4294967295
 80086fe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008702:	f10a 0a01 	add.w	sl, sl, #1
 8008706:	9304      	str	r3, [sp, #16]
 8008708:	9307      	str	r3, [sp, #28]
 800870a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800870e:	931a      	str	r3, [sp, #104]	; 0x68
 8008710:	4654      	mov	r4, sl
 8008712:	2205      	movs	r2, #5
 8008714:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008718:	4851      	ldr	r0, [pc, #324]	; (8008860 <_svfiprintf_r+0x1ec>)
 800871a:	f7f7 fd61 	bl	80001e0 <memchr>
 800871e:	9a04      	ldr	r2, [sp, #16]
 8008720:	b9d8      	cbnz	r0, 800875a <_svfiprintf_r+0xe6>
 8008722:	06d0      	lsls	r0, r2, #27
 8008724:	bf44      	itt	mi
 8008726:	2320      	movmi	r3, #32
 8008728:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800872c:	0711      	lsls	r1, r2, #28
 800872e:	bf44      	itt	mi
 8008730:	232b      	movmi	r3, #43	; 0x2b
 8008732:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008736:	f89a 3000 	ldrb.w	r3, [sl]
 800873a:	2b2a      	cmp	r3, #42	; 0x2a
 800873c:	d015      	beq.n	800876a <_svfiprintf_r+0xf6>
 800873e:	9a07      	ldr	r2, [sp, #28]
 8008740:	4654      	mov	r4, sl
 8008742:	2000      	movs	r0, #0
 8008744:	f04f 0c0a 	mov.w	ip, #10
 8008748:	4621      	mov	r1, r4
 800874a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800874e:	3b30      	subs	r3, #48	; 0x30
 8008750:	2b09      	cmp	r3, #9
 8008752:	d94e      	bls.n	80087f2 <_svfiprintf_r+0x17e>
 8008754:	b1b0      	cbz	r0, 8008784 <_svfiprintf_r+0x110>
 8008756:	9207      	str	r2, [sp, #28]
 8008758:	e014      	b.n	8008784 <_svfiprintf_r+0x110>
 800875a:	eba0 0308 	sub.w	r3, r0, r8
 800875e:	fa09 f303 	lsl.w	r3, r9, r3
 8008762:	4313      	orrs	r3, r2
 8008764:	9304      	str	r3, [sp, #16]
 8008766:	46a2      	mov	sl, r4
 8008768:	e7d2      	b.n	8008710 <_svfiprintf_r+0x9c>
 800876a:	9b03      	ldr	r3, [sp, #12]
 800876c:	1d19      	adds	r1, r3, #4
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	9103      	str	r1, [sp, #12]
 8008772:	2b00      	cmp	r3, #0
 8008774:	bfbb      	ittet	lt
 8008776:	425b      	neglt	r3, r3
 8008778:	f042 0202 	orrlt.w	r2, r2, #2
 800877c:	9307      	strge	r3, [sp, #28]
 800877e:	9307      	strlt	r3, [sp, #28]
 8008780:	bfb8      	it	lt
 8008782:	9204      	strlt	r2, [sp, #16]
 8008784:	7823      	ldrb	r3, [r4, #0]
 8008786:	2b2e      	cmp	r3, #46	; 0x2e
 8008788:	d10c      	bne.n	80087a4 <_svfiprintf_r+0x130>
 800878a:	7863      	ldrb	r3, [r4, #1]
 800878c:	2b2a      	cmp	r3, #42	; 0x2a
 800878e:	d135      	bne.n	80087fc <_svfiprintf_r+0x188>
 8008790:	9b03      	ldr	r3, [sp, #12]
 8008792:	1d1a      	adds	r2, r3, #4
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	9203      	str	r2, [sp, #12]
 8008798:	2b00      	cmp	r3, #0
 800879a:	bfb8      	it	lt
 800879c:	f04f 33ff 	movlt.w	r3, #4294967295
 80087a0:	3402      	adds	r4, #2
 80087a2:	9305      	str	r3, [sp, #20]
 80087a4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008870 <_svfiprintf_r+0x1fc>
 80087a8:	7821      	ldrb	r1, [r4, #0]
 80087aa:	2203      	movs	r2, #3
 80087ac:	4650      	mov	r0, sl
 80087ae:	f7f7 fd17 	bl	80001e0 <memchr>
 80087b2:	b140      	cbz	r0, 80087c6 <_svfiprintf_r+0x152>
 80087b4:	2340      	movs	r3, #64	; 0x40
 80087b6:	eba0 000a 	sub.w	r0, r0, sl
 80087ba:	fa03 f000 	lsl.w	r0, r3, r0
 80087be:	9b04      	ldr	r3, [sp, #16]
 80087c0:	4303      	orrs	r3, r0
 80087c2:	3401      	adds	r4, #1
 80087c4:	9304      	str	r3, [sp, #16]
 80087c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80087ca:	4826      	ldr	r0, [pc, #152]	; (8008864 <_svfiprintf_r+0x1f0>)
 80087cc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80087d0:	2206      	movs	r2, #6
 80087d2:	f7f7 fd05 	bl	80001e0 <memchr>
 80087d6:	2800      	cmp	r0, #0
 80087d8:	d038      	beq.n	800884c <_svfiprintf_r+0x1d8>
 80087da:	4b23      	ldr	r3, [pc, #140]	; (8008868 <_svfiprintf_r+0x1f4>)
 80087dc:	bb1b      	cbnz	r3, 8008826 <_svfiprintf_r+0x1b2>
 80087de:	9b03      	ldr	r3, [sp, #12]
 80087e0:	3307      	adds	r3, #7
 80087e2:	f023 0307 	bic.w	r3, r3, #7
 80087e6:	3308      	adds	r3, #8
 80087e8:	9303      	str	r3, [sp, #12]
 80087ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80087ec:	4433      	add	r3, r6
 80087ee:	9309      	str	r3, [sp, #36]	; 0x24
 80087f0:	e767      	b.n	80086c2 <_svfiprintf_r+0x4e>
 80087f2:	fb0c 3202 	mla	r2, ip, r2, r3
 80087f6:	460c      	mov	r4, r1
 80087f8:	2001      	movs	r0, #1
 80087fa:	e7a5      	b.n	8008748 <_svfiprintf_r+0xd4>
 80087fc:	2300      	movs	r3, #0
 80087fe:	3401      	adds	r4, #1
 8008800:	9305      	str	r3, [sp, #20]
 8008802:	4619      	mov	r1, r3
 8008804:	f04f 0c0a 	mov.w	ip, #10
 8008808:	4620      	mov	r0, r4
 800880a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800880e:	3a30      	subs	r2, #48	; 0x30
 8008810:	2a09      	cmp	r2, #9
 8008812:	d903      	bls.n	800881c <_svfiprintf_r+0x1a8>
 8008814:	2b00      	cmp	r3, #0
 8008816:	d0c5      	beq.n	80087a4 <_svfiprintf_r+0x130>
 8008818:	9105      	str	r1, [sp, #20]
 800881a:	e7c3      	b.n	80087a4 <_svfiprintf_r+0x130>
 800881c:	fb0c 2101 	mla	r1, ip, r1, r2
 8008820:	4604      	mov	r4, r0
 8008822:	2301      	movs	r3, #1
 8008824:	e7f0      	b.n	8008808 <_svfiprintf_r+0x194>
 8008826:	ab03      	add	r3, sp, #12
 8008828:	9300      	str	r3, [sp, #0]
 800882a:	462a      	mov	r2, r5
 800882c:	4b0f      	ldr	r3, [pc, #60]	; (800886c <_svfiprintf_r+0x1f8>)
 800882e:	a904      	add	r1, sp, #16
 8008830:	4638      	mov	r0, r7
 8008832:	f3af 8000 	nop.w
 8008836:	1c42      	adds	r2, r0, #1
 8008838:	4606      	mov	r6, r0
 800883a:	d1d6      	bne.n	80087ea <_svfiprintf_r+0x176>
 800883c:	89ab      	ldrh	r3, [r5, #12]
 800883e:	065b      	lsls	r3, r3, #25
 8008840:	f53f af2c 	bmi.w	800869c <_svfiprintf_r+0x28>
 8008844:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008846:	b01d      	add	sp, #116	; 0x74
 8008848:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800884c:	ab03      	add	r3, sp, #12
 800884e:	9300      	str	r3, [sp, #0]
 8008850:	462a      	mov	r2, r5
 8008852:	4b06      	ldr	r3, [pc, #24]	; (800886c <_svfiprintf_r+0x1f8>)
 8008854:	a904      	add	r1, sp, #16
 8008856:	4638      	mov	r0, r7
 8008858:	f000 f87a 	bl	8008950 <_printf_i>
 800885c:	e7eb      	b.n	8008836 <_svfiprintf_r+0x1c2>
 800885e:	bf00      	nop
 8008860:	08008d9c 	.word	0x08008d9c
 8008864:	08008da6 	.word	0x08008da6
 8008868:	00000000 	.word	0x00000000
 800886c:	080085bd 	.word	0x080085bd
 8008870:	08008da2 	.word	0x08008da2

08008874 <_printf_common>:
 8008874:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008878:	4616      	mov	r6, r2
 800887a:	4699      	mov	r9, r3
 800887c:	688a      	ldr	r2, [r1, #8]
 800887e:	690b      	ldr	r3, [r1, #16]
 8008880:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008884:	4293      	cmp	r3, r2
 8008886:	bfb8      	it	lt
 8008888:	4613      	movlt	r3, r2
 800888a:	6033      	str	r3, [r6, #0]
 800888c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008890:	4607      	mov	r7, r0
 8008892:	460c      	mov	r4, r1
 8008894:	b10a      	cbz	r2, 800889a <_printf_common+0x26>
 8008896:	3301      	adds	r3, #1
 8008898:	6033      	str	r3, [r6, #0]
 800889a:	6823      	ldr	r3, [r4, #0]
 800889c:	0699      	lsls	r1, r3, #26
 800889e:	bf42      	ittt	mi
 80088a0:	6833      	ldrmi	r3, [r6, #0]
 80088a2:	3302      	addmi	r3, #2
 80088a4:	6033      	strmi	r3, [r6, #0]
 80088a6:	6825      	ldr	r5, [r4, #0]
 80088a8:	f015 0506 	ands.w	r5, r5, #6
 80088ac:	d106      	bne.n	80088bc <_printf_common+0x48>
 80088ae:	f104 0a19 	add.w	sl, r4, #25
 80088b2:	68e3      	ldr	r3, [r4, #12]
 80088b4:	6832      	ldr	r2, [r6, #0]
 80088b6:	1a9b      	subs	r3, r3, r2
 80088b8:	42ab      	cmp	r3, r5
 80088ba:	dc26      	bgt.n	800890a <_printf_common+0x96>
 80088bc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80088c0:	1e13      	subs	r3, r2, #0
 80088c2:	6822      	ldr	r2, [r4, #0]
 80088c4:	bf18      	it	ne
 80088c6:	2301      	movne	r3, #1
 80088c8:	0692      	lsls	r2, r2, #26
 80088ca:	d42b      	bmi.n	8008924 <_printf_common+0xb0>
 80088cc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80088d0:	4649      	mov	r1, r9
 80088d2:	4638      	mov	r0, r7
 80088d4:	47c0      	blx	r8
 80088d6:	3001      	adds	r0, #1
 80088d8:	d01e      	beq.n	8008918 <_printf_common+0xa4>
 80088da:	6823      	ldr	r3, [r4, #0]
 80088dc:	68e5      	ldr	r5, [r4, #12]
 80088de:	6832      	ldr	r2, [r6, #0]
 80088e0:	f003 0306 	and.w	r3, r3, #6
 80088e4:	2b04      	cmp	r3, #4
 80088e6:	bf08      	it	eq
 80088e8:	1aad      	subeq	r5, r5, r2
 80088ea:	68a3      	ldr	r3, [r4, #8]
 80088ec:	6922      	ldr	r2, [r4, #16]
 80088ee:	bf0c      	ite	eq
 80088f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80088f4:	2500      	movne	r5, #0
 80088f6:	4293      	cmp	r3, r2
 80088f8:	bfc4      	itt	gt
 80088fa:	1a9b      	subgt	r3, r3, r2
 80088fc:	18ed      	addgt	r5, r5, r3
 80088fe:	2600      	movs	r6, #0
 8008900:	341a      	adds	r4, #26
 8008902:	42b5      	cmp	r5, r6
 8008904:	d11a      	bne.n	800893c <_printf_common+0xc8>
 8008906:	2000      	movs	r0, #0
 8008908:	e008      	b.n	800891c <_printf_common+0xa8>
 800890a:	2301      	movs	r3, #1
 800890c:	4652      	mov	r2, sl
 800890e:	4649      	mov	r1, r9
 8008910:	4638      	mov	r0, r7
 8008912:	47c0      	blx	r8
 8008914:	3001      	adds	r0, #1
 8008916:	d103      	bne.n	8008920 <_printf_common+0xac>
 8008918:	f04f 30ff 	mov.w	r0, #4294967295
 800891c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008920:	3501      	adds	r5, #1
 8008922:	e7c6      	b.n	80088b2 <_printf_common+0x3e>
 8008924:	18e1      	adds	r1, r4, r3
 8008926:	1c5a      	adds	r2, r3, #1
 8008928:	2030      	movs	r0, #48	; 0x30
 800892a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800892e:	4422      	add	r2, r4
 8008930:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008934:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008938:	3302      	adds	r3, #2
 800893a:	e7c7      	b.n	80088cc <_printf_common+0x58>
 800893c:	2301      	movs	r3, #1
 800893e:	4622      	mov	r2, r4
 8008940:	4649      	mov	r1, r9
 8008942:	4638      	mov	r0, r7
 8008944:	47c0      	blx	r8
 8008946:	3001      	adds	r0, #1
 8008948:	d0e6      	beq.n	8008918 <_printf_common+0xa4>
 800894a:	3601      	adds	r6, #1
 800894c:	e7d9      	b.n	8008902 <_printf_common+0x8e>
	...

08008950 <_printf_i>:
 8008950:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008954:	7e0f      	ldrb	r7, [r1, #24]
 8008956:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008958:	2f78      	cmp	r7, #120	; 0x78
 800895a:	4691      	mov	r9, r2
 800895c:	4680      	mov	r8, r0
 800895e:	460c      	mov	r4, r1
 8008960:	469a      	mov	sl, r3
 8008962:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008966:	d807      	bhi.n	8008978 <_printf_i+0x28>
 8008968:	2f62      	cmp	r7, #98	; 0x62
 800896a:	d80a      	bhi.n	8008982 <_printf_i+0x32>
 800896c:	2f00      	cmp	r7, #0
 800896e:	f000 80d8 	beq.w	8008b22 <_printf_i+0x1d2>
 8008972:	2f58      	cmp	r7, #88	; 0x58
 8008974:	f000 80a3 	beq.w	8008abe <_printf_i+0x16e>
 8008978:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800897c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008980:	e03a      	b.n	80089f8 <_printf_i+0xa8>
 8008982:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008986:	2b15      	cmp	r3, #21
 8008988:	d8f6      	bhi.n	8008978 <_printf_i+0x28>
 800898a:	a101      	add	r1, pc, #4	; (adr r1, 8008990 <_printf_i+0x40>)
 800898c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008990:	080089e9 	.word	0x080089e9
 8008994:	080089fd 	.word	0x080089fd
 8008998:	08008979 	.word	0x08008979
 800899c:	08008979 	.word	0x08008979
 80089a0:	08008979 	.word	0x08008979
 80089a4:	08008979 	.word	0x08008979
 80089a8:	080089fd 	.word	0x080089fd
 80089ac:	08008979 	.word	0x08008979
 80089b0:	08008979 	.word	0x08008979
 80089b4:	08008979 	.word	0x08008979
 80089b8:	08008979 	.word	0x08008979
 80089bc:	08008b09 	.word	0x08008b09
 80089c0:	08008a2d 	.word	0x08008a2d
 80089c4:	08008aeb 	.word	0x08008aeb
 80089c8:	08008979 	.word	0x08008979
 80089cc:	08008979 	.word	0x08008979
 80089d0:	08008b2b 	.word	0x08008b2b
 80089d4:	08008979 	.word	0x08008979
 80089d8:	08008a2d 	.word	0x08008a2d
 80089dc:	08008979 	.word	0x08008979
 80089e0:	08008979 	.word	0x08008979
 80089e4:	08008af3 	.word	0x08008af3
 80089e8:	682b      	ldr	r3, [r5, #0]
 80089ea:	1d1a      	adds	r2, r3, #4
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	602a      	str	r2, [r5, #0]
 80089f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80089f4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80089f8:	2301      	movs	r3, #1
 80089fa:	e0a3      	b.n	8008b44 <_printf_i+0x1f4>
 80089fc:	6820      	ldr	r0, [r4, #0]
 80089fe:	6829      	ldr	r1, [r5, #0]
 8008a00:	0606      	lsls	r6, r0, #24
 8008a02:	f101 0304 	add.w	r3, r1, #4
 8008a06:	d50a      	bpl.n	8008a1e <_printf_i+0xce>
 8008a08:	680e      	ldr	r6, [r1, #0]
 8008a0a:	602b      	str	r3, [r5, #0]
 8008a0c:	2e00      	cmp	r6, #0
 8008a0e:	da03      	bge.n	8008a18 <_printf_i+0xc8>
 8008a10:	232d      	movs	r3, #45	; 0x2d
 8008a12:	4276      	negs	r6, r6
 8008a14:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008a18:	485e      	ldr	r0, [pc, #376]	; (8008b94 <_printf_i+0x244>)
 8008a1a:	230a      	movs	r3, #10
 8008a1c:	e019      	b.n	8008a52 <_printf_i+0x102>
 8008a1e:	680e      	ldr	r6, [r1, #0]
 8008a20:	602b      	str	r3, [r5, #0]
 8008a22:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008a26:	bf18      	it	ne
 8008a28:	b236      	sxthne	r6, r6
 8008a2a:	e7ef      	b.n	8008a0c <_printf_i+0xbc>
 8008a2c:	682b      	ldr	r3, [r5, #0]
 8008a2e:	6820      	ldr	r0, [r4, #0]
 8008a30:	1d19      	adds	r1, r3, #4
 8008a32:	6029      	str	r1, [r5, #0]
 8008a34:	0601      	lsls	r1, r0, #24
 8008a36:	d501      	bpl.n	8008a3c <_printf_i+0xec>
 8008a38:	681e      	ldr	r6, [r3, #0]
 8008a3a:	e002      	b.n	8008a42 <_printf_i+0xf2>
 8008a3c:	0646      	lsls	r6, r0, #25
 8008a3e:	d5fb      	bpl.n	8008a38 <_printf_i+0xe8>
 8008a40:	881e      	ldrh	r6, [r3, #0]
 8008a42:	4854      	ldr	r0, [pc, #336]	; (8008b94 <_printf_i+0x244>)
 8008a44:	2f6f      	cmp	r7, #111	; 0x6f
 8008a46:	bf0c      	ite	eq
 8008a48:	2308      	moveq	r3, #8
 8008a4a:	230a      	movne	r3, #10
 8008a4c:	2100      	movs	r1, #0
 8008a4e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008a52:	6865      	ldr	r5, [r4, #4]
 8008a54:	60a5      	str	r5, [r4, #8]
 8008a56:	2d00      	cmp	r5, #0
 8008a58:	bfa2      	ittt	ge
 8008a5a:	6821      	ldrge	r1, [r4, #0]
 8008a5c:	f021 0104 	bicge.w	r1, r1, #4
 8008a60:	6021      	strge	r1, [r4, #0]
 8008a62:	b90e      	cbnz	r6, 8008a68 <_printf_i+0x118>
 8008a64:	2d00      	cmp	r5, #0
 8008a66:	d04d      	beq.n	8008b04 <_printf_i+0x1b4>
 8008a68:	4615      	mov	r5, r2
 8008a6a:	fbb6 f1f3 	udiv	r1, r6, r3
 8008a6e:	fb03 6711 	mls	r7, r3, r1, r6
 8008a72:	5dc7      	ldrb	r7, [r0, r7]
 8008a74:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008a78:	4637      	mov	r7, r6
 8008a7a:	42bb      	cmp	r3, r7
 8008a7c:	460e      	mov	r6, r1
 8008a7e:	d9f4      	bls.n	8008a6a <_printf_i+0x11a>
 8008a80:	2b08      	cmp	r3, #8
 8008a82:	d10b      	bne.n	8008a9c <_printf_i+0x14c>
 8008a84:	6823      	ldr	r3, [r4, #0]
 8008a86:	07de      	lsls	r6, r3, #31
 8008a88:	d508      	bpl.n	8008a9c <_printf_i+0x14c>
 8008a8a:	6923      	ldr	r3, [r4, #16]
 8008a8c:	6861      	ldr	r1, [r4, #4]
 8008a8e:	4299      	cmp	r1, r3
 8008a90:	bfde      	ittt	le
 8008a92:	2330      	movle	r3, #48	; 0x30
 8008a94:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008a98:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008a9c:	1b52      	subs	r2, r2, r5
 8008a9e:	6122      	str	r2, [r4, #16]
 8008aa0:	f8cd a000 	str.w	sl, [sp]
 8008aa4:	464b      	mov	r3, r9
 8008aa6:	aa03      	add	r2, sp, #12
 8008aa8:	4621      	mov	r1, r4
 8008aaa:	4640      	mov	r0, r8
 8008aac:	f7ff fee2 	bl	8008874 <_printf_common>
 8008ab0:	3001      	adds	r0, #1
 8008ab2:	d14c      	bne.n	8008b4e <_printf_i+0x1fe>
 8008ab4:	f04f 30ff 	mov.w	r0, #4294967295
 8008ab8:	b004      	add	sp, #16
 8008aba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008abe:	4835      	ldr	r0, [pc, #212]	; (8008b94 <_printf_i+0x244>)
 8008ac0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008ac4:	6829      	ldr	r1, [r5, #0]
 8008ac6:	6823      	ldr	r3, [r4, #0]
 8008ac8:	f851 6b04 	ldr.w	r6, [r1], #4
 8008acc:	6029      	str	r1, [r5, #0]
 8008ace:	061d      	lsls	r5, r3, #24
 8008ad0:	d514      	bpl.n	8008afc <_printf_i+0x1ac>
 8008ad2:	07df      	lsls	r7, r3, #31
 8008ad4:	bf44      	itt	mi
 8008ad6:	f043 0320 	orrmi.w	r3, r3, #32
 8008ada:	6023      	strmi	r3, [r4, #0]
 8008adc:	b91e      	cbnz	r6, 8008ae6 <_printf_i+0x196>
 8008ade:	6823      	ldr	r3, [r4, #0]
 8008ae0:	f023 0320 	bic.w	r3, r3, #32
 8008ae4:	6023      	str	r3, [r4, #0]
 8008ae6:	2310      	movs	r3, #16
 8008ae8:	e7b0      	b.n	8008a4c <_printf_i+0xfc>
 8008aea:	6823      	ldr	r3, [r4, #0]
 8008aec:	f043 0320 	orr.w	r3, r3, #32
 8008af0:	6023      	str	r3, [r4, #0]
 8008af2:	2378      	movs	r3, #120	; 0x78
 8008af4:	4828      	ldr	r0, [pc, #160]	; (8008b98 <_printf_i+0x248>)
 8008af6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008afa:	e7e3      	b.n	8008ac4 <_printf_i+0x174>
 8008afc:	0659      	lsls	r1, r3, #25
 8008afe:	bf48      	it	mi
 8008b00:	b2b6      	uxthmi	r6, r6
 8008b02:	e7e6      	b.n	8008ad2 <_printf_i+0x182>
 8008b04:	4615      	mov	r5, r2
 8008b06:	e7bb      	b.n	8008a80 <_printf_i+0x130>
 8008b08:	682b      	ldr	r3, [r5, #0]
 8008b0a:	6826      	ldr	r6, [r4, #0]
 8008b0c:	6961      	ldr	r1, [r4, #20]
 8008b0e:	1d18      	adds	r0, r3, #4
 8008b10:	6028      	str	r0, [r5, #0]
 8008b12:	0635      	lsls	r5, r6, #24
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	d501      	bpl.n	8008b1c <_printf_i+0x1cc>
 8008b18:	6019      	str	r1, [r3, #0]
 8008b1a:	e002      	b.n	8008b22 <_printf_i+0x1d2>
 8008b1c:	0670      	lsls	r0, r6, #25
 8008b1e:	d5fb      	bpl.n	8008b18 <_printf_i+0x1c8>
 8008b20:	8019      	strh	r1, [r3, #0]
 8008b22:	2300      	movs	r3, #0
 8008b24:	6123      	str	r3, [r4, #16]
 8008b26:	4615      	mov	r5, r2
 8008b28:	e7ba      	b.n	8008aa0 <_printf_i+0x150>
 8008b2a:	682b      	ldr	r3, [r5, #0]
 8008b2c:	1d1a      	adds	r2, r3, #4
 8008b2e:	602a      	str	r2, [r5, #0]
 8008b30:	681d      	ldr	r5, [r3, #0]
 8008b32:	6862      	ldr	r2, [r4, #4]
 8008b34:	2100      	movs	r1, #0
 8008b36:	4628      	mov	r0, r5
 8008b38:	f7f7 fb52 	bl	80001e0 <memchr>
 8008b3c:	b108      	cbz	r0, 8008b42 <_printf_i+0x1f2>
 8008b3e:	1b40      	subs	r0, r0, r5
 8008b40:	6060      	str	r0, [r4, #4]
 8008b42:	6863      	ldr	r3, [r4, #4]
 8008b44:	6123      	str	r3, [r4, #16]
 8008b46:	2300      	movs	r3, #0
 8008b48:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008b4c:	e7a8      	b.n	8008aa0 <_printf_i+0x150>
 8008b4e:	6923      	ldr	r3, [r4, #16]
 8008b50:	462a      	mov	r2, r5
 8008b52:	4649      	mov	r1, r9
 8008b54:	4640      	mov	r0, r8
 8008b56:	47d0      	blx	sl
 8008b58:	3001      	adds	r0, #1
 8008b5a:	d0ab      	beq.n	8008ab4 <_printf_i+0x164>
 8008b5c:	6823      	ldr	r3, [r4, #0]
 8008b5e:	079b      	lsls	r3, r3, #30
 8008b60:	d413      	bmi.n	8008b8a <_printf_i+0x23a>
 8008b62:	68e0      	ldr	r0, [r4, #12]
 8008b64:	9b03      	ldr	r3, [sp, #12]
 8008b66:	4298      	cmp	r0, r3
 8008b68:	bfb8      	it	lt
 8008b6a:	4618      	movlt	r0, r3
 8008b6c:	e7a4      	b.n	8008ab8 <_printf_i+0x168>
 8008b6e:	2301      	movs	r3, #1
 8008b70:	4632      	mov	r2, r6
 8008b72:	4649      	mov	r1, r9
 8008b74:	4640      	mov	r0, r8
 8008b76:	47d0      	blx	sl
 8008b78:	3001      	adds	r0, #1
 8008b7a:	d09b      	beq.n	8008ab4 <_printf_i+0x164>
 8008b7c:	3501      	adds	r5, #1
 8008b7e:	68e3      	ldr	r3, [r4, #12]
 8008b80:	9903      	ldr	r1, [sp, #12]
 8008b82:	1a5b      	subs	r3, r3, r1
 8008b84:	42ab      	cmp	r3, r5
 8008b86:	dcf2      	bgt.n	8008b6e <_printf_i+0x21e>
 8008b88:	e7eb      	b.n	8008b62 <_printf_i+0x212>
 8008b8a:	2500      	movs	r5, #0
 8008b8c:	f104 0619 	add.w	r6, r4, #25
 8008b90:	e7f5      	b.n	8008b7e <_printf_i+0x22e>
 8008b92:	bf00      	nop
 8008b94:	08008dad 	.word	0x08008dad
 8008b98:	08008dbe 	.word	0x08008dbe

08008b9c <memmove>:
 8008b9c:	4288      	cmp	r0, r1
 8008b9e:	b510      	push	{r4, lr}
 8008ba0:	eb01 0402 	add.w	r4, r1, r2
 8008ba4:	d902      	bls.n	8008bac <memmove+0x10>
 8008ba6:	4284      	cmp	r4, r0
 8008ba8:	4623      	mov	r3, r4
 8008baa:	d807      	bhi.n	8008bbc <memmove+0x20>
 8008bac:	1e43      	subs	r3, r0, #1
 8008bae:	42a1      	cmp	r1, r4
 8008bb0:	d008      	beq.n	8008bc4 <memmove+0x28>
 8008bb2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008bb6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008bba:	e7f8      	b.n	8008bae <memmove+0x12>
 8008bbc:	4402      	add	r2, r0
 8008bbe:	4601      	mov	r1, r0
 8008bc0:	428a      	cmp	r2, r1
 8008bc2:	d100      	bne.n	8008bc6 <memmove+0x2a>
 8008bc4:	bd10      	pop	{r4, pc}
 8008bc6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008bca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008bce:	e7f7      	b.n	8008bc0 <memmove+0x24>

08008bd0 <_realloc_r>:
 8008bd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008bd4:	4680      	mov	r8, r0
 8008bd6:	4614      	mov	r4, r2
 8008bd8:	460e      	mov	r6, r1
 8008bda:	b921      	cbnz	r1, 8008be6 <_realloc_r+0x16>
 8008bdc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008be0:	4611      	mov	r1, r2
 8008be2:	f7ff bb85 	b.w	80082f0 <_malloc_r>
 8008be6:	b92a      	cbnz	r2, 8008bf4 <_realloc_r+0x24>
 8008be8:	f7ff fc9c 	bl	8008524 <_free_r>
 8008bec:	4625      	mov	r5, r4
 8008bee:	4628      	mov	r0, r5
 8008bf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008bf4:	f000 f81b 	bl	8008c2e <_malloc_usable_size_r>
 8008bf8:	4284      	cmp	r4, r0
 8008bfa:	4607      	mov	r7, r0
 8008bfc:	d802      	bhi.n	8008c04 <_realloc_r+0x34>
 8008bfe:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008c02:	d812      	bhi.n	8008c2a <_realloc_r+0x5a>
 8008c04:	4621      	mov	r1, r4
 8008c06:	4640      	mov	r0, r8
 8008c08:	f7ff fb72 	bl	80082f0 <_malloc_r>
 8008c0c:	4605      	mov	r5, r0
 8008c0e:	2800      	cmp	r0, #0
 8008c10:	d0ed      	beq.n	8008bee <_realloc_r+0x1e>
 8008c12:	42bc      	cmp	r4, r7
 8008c14:	4622      	mov	r2, r4
 8008c16:	4631      	mov	r1, r6
 8008c18:	bf28      	it	cs
 8008c1a:	463a      	movcs	r2, r7
 8008c1c:	f7ff fb32 	bl	8008284 <memcpy>
 8008c20:	4631      	mov	r1, r6
 8008c22:	4640      	mov	r0, r8
 8008c24:	f7ff fc7e 	bl	8008524 <_free_r>
 8008c28:	e7e1      	b.n	8008bee <_realloc_r+0x1e>
 8008c2a:	4635      	mov	r5, r6
 8008c2c:	e7df      	b.n	8008bee <_realloc_r+0x1e>

08008c2e <_malloc_usable_size_r>:
 8008c2e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008c32:	1f18      	subs	r0, r3, #4
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	bfbc      	itt	lt
 8008c38:	580b      	ldrlt	r3, [r1, r0]
 8008c3a:	18c0      	addlt	r0, r0, r3
 8008c3c:	4770      	bx	lr
	...

08008c40 <_init>:
 8008c40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c42:	bf00      	nop
 8008c44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c46:	bc08      	pop	{r3}
 8008c48:	469e      	mov	lr, r3
 8008c4a:	4770      	bx	lr

08008c4c <_fini>:
 8008c4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c4e:	bf00      	nop
 8008c50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c52:	bc08      	pop	{r3}
 8008c54:	469e      	mov	lr, r3
 8008c56:	4770      	bx	lr
