
Weighing_machine.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008d88  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001ac  08008f18  08008f18  00018f18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080090c4  080090c4  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  080090c4  080090c4  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  080090c4  080090c4  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080090c4  080090c4  000190c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080090c8  080090c8  000190c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080090cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002400  20000074  08009140  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002474  08009140  00022474  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d760  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003f25  00000000  00000000  0003d804  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001650  00000000  00000000  00041730  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000014e8  00000000  00000000  00042d80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f109  00000000  00000000  00044268  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001be64  00000000  00000000  00063371  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b672b  00000000  00000000  0007f1d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000c5  00000000  00000000  00135900  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000061b4  00000000  00000000  001359c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    00000210  00000000  00000000  0013bb7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008f00 	.word	0x08008f00

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08008f00 	.word	0x08008f00

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <vApplicationIdleHook>:
void vApplicationIdleHook(void);
void vApplicationTickHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 8000280:	b480      	push	{r7}
 8000282:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 8000284:	bf00      	nop
 8000286:	46bd      	mov	sp, r7
 8000288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800028c:	4770      	bx	lr

0800028e <vApplicationTickHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 3 */
__weak void vApplicationTickHook( void )
{
 800028e:	b480      	push	{r7}
 8000290:	af00      	add	r7, sp, #0
   /* This function will be called by each tick interrupt if
   configUSE_TICK_HOOK is set to 1 in FreeRTOSConfig.h. User code can be
   added here, but the tick hook is called from an interrupt context, so
   code must not attempt to block, and only the interrupt safe FreeRTOS API
   functions can be used (those that end in FromISR()). */
}
 8000292:	bf00      	nop
 8000294:	46bd      	mov	sp, r7
 8000296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800029a:	4770      	bx	lr

0800029c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800029c:	b480      	push	{r7}
 800029e:	b085      	sub	sp, #20
 80002a0:	af00      	add	r7, sp, #0
 80002a2:	60f8      	str	r0, [r7, #12]
 80002a4:	60b9      	str	r1, [r7, #8]
 80002a6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80002a8:	68fb      	ldr	r3, [r7, #12]
 80002aa:	4a07      	ldr	r2, [pc, #28]	; (80002c8 <vApplicationGetIdleTaskMemory+0x2c>)
 80002ac:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80002ae:	68bb      	ldr	r3, [r7, #8]
 80002b0:	4a06      	ldr	r2, [pc, #24]	; (80002cc <vApplicationGetIdleTaskMemory+0x30>)
 80002b2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	2240      	movs	r2, #64	; 0x40
 80002b8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80002ba:	bf00      	nop
 80002bc:	3714      	adds	r7, #20
 80002be:	46bd      	mov	sp, r7
 80002c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002c4:	4770      	bx	lr
 80002c6:	bf00      	nop
 80002c8:	20000090 	.word	0x20000090
 80002cc:	20000148 	.word	0x20000148

080002d0 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 80002d0:	b480      	push	{r7}
 80002d2:	b085      	sub	sp, #20
 80002d4:	af00      	add	r7, sp, #0
 80002d6:	60f8      	str	r0, [r7, #12]
 80002d8:	60b9      	str	r1, [r7, #8]
 80002da:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 80002dc:	68fb      	ldr	r3, [r7, #12]
 80002de:	4a07      	ldr	r2, [pc, #28]	; (80002fc <vApplicationGetTimerTaskMemory+0x2c>)
 80002e0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 80002e2:	68bb      	ldr	r3, [r7, #8]
 80002e4:	4a06      	ldr	r2, [pc, #24]	; (8000300 <vApplicationGetTimerTaskMemory+0x30>)
 80002e6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 80002e8:	687b      	ldr	r3, [r7, #4]
 80002ea:	2240      	movs	r2, #64	; 0x40
 80002ec:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80002ee:	bf00      	nop
 80002f0:	3714      	adds	r7, #20
 80002f2:	46bd      	mov	sp, r7
 80002f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f8:	4770      	bx	lr
 80002fa:	bf00      	nop
 80002fc:	20000248 	.word	0x20000248
 8000300:	20000300 	.word	0x20000300

08000304 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000304:	b5b0      	push	{r4, r5, r7, lr}
 8000306:	b08c      	sub	sp, #48	; 0x30
 8000308:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	buffer.offset = 0;
 800030a:	4b4b      	ldr	r3, [pc, #300]	; (8000438 <main+0x134>)
 800030c:	2200      	movs	r2, #0
 800030e:	f8a3 20da 	strh.w	r2, [r3, #218]	; 0xda
	buffer.k = 1;
 8000312:	4b49      	ldr	r3, [pc, #292]	; (8000438 <main+0x134>)
 8000314:	2201      	movs	r2, #1
 8000316:	f8a3 20dc 	strh.w	r2, [r3, #220]	; 0xdc
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800031a:	f000 fee7 	bl	80010ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800031e:	f000 f8b3 	bl	8000488 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000322:	f000 f9c3 	bl	80006ac <MX_GPIO_Init>
  MX_ADC1_Init();
 8000326:	f000 f909 	bl	800053c <MX_ADC1_Init>
  MX_DMA_Init();
 800032a:	f000 f9a1 	bl	8000670 <MX_DMA_Init>
  MX_USART1_UART_Init();
 800032e:	f000 f96f 	bl	8000610 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000332:	4842      	ldr	r0, [pc, #264]	; (800043c <main+0x138>)
 8000334:	f001 fe18 	bl	8001f68 <HAL_DMA_Init>
 8000338:	4603      	mov	r3, r0
 800033a:	2b00      	cmp	r3, #0
 800033c:	d001      	beq.n	8000342 <main+0x3e>
  {
    Error_Handler();
 800033e:	f000 fce7 	bl	8000d10 <Error_Handler>
  }

  __HAL_LINKDMA(&hadc1,DMA_Handle,hdma_adc1);
 8000342:	4b3f      	ldr	r3, [pc, #252]	; (8000440 <main+0x13c>)
 8000344:	4a3d      	ldr	r2, [pc, #244]	; (800043c <main+0x138>)
 8000346:	639a      	str	r2, [r3, #56]	; 0x38
 8000348:	4b3c      	ldr	r3, [pc, #240]	; (800043c <main+0x138>)
 800034a:	4a3d      	ldr	r2, [pc, #244]	; (8000440 <main+0x13c>)
 800034c:	625a      	str	r2, [r3, #36]	; 0x24
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&buffer.adc_buf, sizeof(buffer.adc_buf)/2);
 800034e:	2232      	movs	r2, #50	; 0x32
 8000350:	493c      	ldr	r1, [pc, #240]	; (8000444 <main+0x140>)
 8000352:	483b      	ldr	r0, [pc, #236]	; (8000440 <main+0x13c>)
 8000354:	f001 f8a4 	bl	80014a0 <HAL_ADC_Start_DMA>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* add semaphores, ... */
  xSemaphore1 = xSemaphoreCreateBinary();
 8000358:	2203      	movs	r2, #3
 800035a:	2100      	movs	r1, #0
 800035c:	2001      	movs	r0, #1
 800035e:	f004 ffaa 	bl	80052b6 <xQueueGenericCreate>
 8000362:	4603      	mov	r3, r0
 8000364:	4a38      	ldr	r2, [pc, #224]	; (8000448 <main+0x144>)
 8000366:	6013      	str	r3, [r2, #0]
  //xSemaphore2 = xSemaphoreCreateCounting(4, 0);
  xCreatedEventGroup1 = xEventGroupCreate();
 8000368:	f004 fc70 	bl	8004c4c <xEventGroupCreate>
 800036c:	4603      	mov	r3, r0
 800036e:	4a37      	ldr	r2, [pc, #220]	; (800044c <main+0x148>)
 8000370:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  QueueHandle_t myQueue1;
  myQueue1 = xQueueCreate(40, sizeof(char));
 8000372:	2200      	movs	r2, #0
 8000374:	2101      	movs	r1, #1
 8000376:	2028      	movs	r0, #40	; 0x28
 8000378:	f004 ff9d 	bl	80052b6 <xQueueGenericCreate>
 800037c:	6278      	str	r0, [r7, #36]	; 0x24
  buffer.queueh = myQueue1;
 800037e:	4a2e      	ldr	r2, [pc, #184]	; (8000438 <main+0x134>)
 8000380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000382:	6013      	str	r3, [r2, #0]

  QueueHandle_t myQueue2;
  myQueue2 = xQueueCreate(40, sizeof(char));
 8000384:	2200      	movs	r2, #0
 8000386:	2101      	movs	r1, #1
 8000388:	2028      	movs	r0, #40	; 0x28
 800038a:	f004 ff94 	bl	80052b6 <xQueueGenericCreate>
 800038e:	6238      	str	r0, [r7, #32]
  buffer.queueh_clbrt = myQueue2;
 8000390:	4a29      	ldr	r2, [pc, #164]	; (8000438 <main+0x134>)
 8000392:	6a3b      	ldr	r3, [r7, #32]
 8000394:	6053      	str	r3, [r2, #4]
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityIdle, 0, 80);
 8000396:	4b2e      	ldr	r3, [pc, #184]	; (8000450 <main+0x14c>)
 8000398:	1d3c      	adds	r4, r7, #4
 800039a:	461d      	mov	r5, r3
 800039c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800039e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80003a0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80003a4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80003a8:	1d3b      	adds	r3, r7, #4
 80003aa:	2100      	movs	r1, #0
 80003ac:	4618      	mov	r0, r3
 80003ae:	f004 fc01 	bl	8004bb4 <osThreadCreate>
 80003b2:	4603      	mov	r3, r0
 80003b4:	4a27      	ldr	r2, [pc, #156]	; (8000454 <main+0x150>)
 80003b6:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  xTaskCreate(calibration, "calibration", 180, NULL, 5, NULL);
 80003b8:	2300      	movs	r3, #0
 80003ba:	9301      	str	r3, [sp, #4]
 80003bc:	2305      	movs	r3, #5
 80003be:	9300      	str	r3, [sp, #0]
 80003c0:	2300      	movs	r3, #0
 80003c2:	22b4      	movs	r2, #180	; 0xb4
 80003c4:	4924      	ldr	r1, [pc, #144]	; (8000458 <main+0x154>)
 80003c6:	4825      	ldr	r0, [pc, #148]	; (800045c <main+0x158>)
 80003c8:	f005 fdc4 	bl	8005f54 <xTaskCreate>
  xTaskCreate(weighing, "weighing", 64, NULL, 2, NULL);
 80003cc:	2300      	movs	r3, #0
 80003ce:	9301      	str	r3, [sp, #4]
 80003d0:	2302      	movs	r3, #2
 80003d2:	9300      	str	r3, [sp, #0]
 80003d4:	2300      	movs	r3, #0
 80003d6:	2240      	movs	r2, #64	; 0x40
 80003d8:	4921      	ldr	r1, [pc, #132]	; (8000460 <main+0x15c>)
 80003da:	4822      	ldr	r0, [pc, #136]	; (8000464 <main+0x160>)
 80003dc:	f005 fdba 	bl	8005f54 <xTaskCreate>
  xTaskCreate(sendUSART1weighing, "send data W", 128, NULL, 3, NULL);
 80003e0:	2300      	movs	r3, #0
 80003e2:	9301      	str	r3, [sp, #4]
 80003e4:	2303      	movs	r3, #3
 80003e6:	9300      	str	r3, [sp, #0]
 80003e8:	2300      	movs	r3, #0
 80003ea:	2280      	movs	r2, #128	; 0x80
 80003ec:	491e      	ldr	r1, [pc, #120]	; (8000468 <main+0x164>)
 80003ee:	481f      	ldr	r0, [pc, #124]	; (800046c <main+0x168>)
 80003f0:	f005 fdb0 	bl	8005f54 <xTaskCreate>
  xTaskCreate(receiveUSART1, "receive data", 64, NULL, 2, NULL);
 80003f4:	2300      	movs	r3, #0
 80003f6:	9301      	str	r3, [sp, #4]
 80003f8:	2302      	movs	r3, #2
 80003fa:	9300      	str	r3, [sp, #0]
 80003fc:	2300      	movs	r3, #0
 80003fe:	2240      	movs	r2, #64	; 0x40
 8000400:	491b      	ldr	r1, [pc, #108]	; (8000470 <main+0x16c>)
 8000402:	481c      	ldr	r0, [pc, #112]	; (8000474 <main+0x170>)
 8000404:	f005 fda6 	bl	8005f54 <xTaskCreate>
  xTaskCreate(sendUSART1int, "send data i", 160, NULL, 4, NULL);
 8000408:	2300      	movs	r3, #0
 800040a:	9301      	str	r3, [sp, #4]
 800040c:	2304      	movs	r3, #4
 800040e:	9300      	str	r3, [sp, #0]
 8000410:	2300      	movs	r3, #0
 8000412:	22a0      	movs	r2, #160	; 0xa0
 8000414:	4918      	ldr	r1, [pc, #96]	; (8000478 <main+0x174>)
 8000416:	4819      	ldr	r0, [pc, #100]	; (800047c <main+0x178>)
 8000418:	f005 fd9c 	bl	8005f54 <xTaskCreate>
  xTaskCreate(sendUSART1char, "send data c", 128, NULL, 4, NULL);
 800041c:	2300      	movs	r3, #0
 800041e:	9301      	str	r3, [sp, #4]
 8000420:	2304      	movs	r3, #4
 8000422:	9300      	str	r3, [sp, #0]
 8000424:	2300      	movs	r3, #0
 8000426:	2280      	movs	r2, #128	; 0x80
 8000428:	4915      	ldr	r1, [pc, #84]	; (8000480 <main+0x17c>)
 800042a:	4816      	ldr	r0, [pc, #88]	; (8000484 <main+0x180>)
 800042c:	f005 fd92 	bl	8005f54 <xTaskCreate>
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000430:	f004 fbb9 	bl	8004ba6 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000434:	e7fe      	b.n	8000434 <main+0x130>
 8000436:	bf00      	nop
 8000438:	20000520 	.word	0x20000520
 800043c:	20000450 	.word	0x20000450
 8000440:	20000400 	.word	0x20000400
 8000444:	2000052c 	.word	0x2000052c
 8000448:	20000600 	.word	0x20000600
 800044c:	20000604 	.word	0x20000604
 8000450:	08008f70 	.word	0x08008f70
 8000454:	2000051c 	.word	0x2000051c
 8000458:	08008f24 	.word	0x08008f24
 800045c:	08000769 	.word	0x08000769
 8000460:	08008f30 	.word	0x08008f30
 8000464:	08000a39 	.word	0x08000a39
 8000468:	08008f3c 	.word	0x08008f3c
 800046c:	08000ac9 	.word	0x08000ac9
 8000470:	08008f48 	.word	0x08008f48
 8000474:	08000c89 	.word	0x08000c89
 8000478:	08008f58 	.word	0x08008f58
 800047c:	08000b45 	.word	0x08000b45
 8000480:	08008f64 	.word	0x08008f64
 8000484:	08000be9 	.word	0x08000be9

08000488 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000488:	b580      	push	{r7, lr}
 800048a:	b09c      	sub	sp, #112	; 0x70
 800048c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800048e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000492:	2228      	movs	r2, #40	; 0x28
 8000494:	2100      	movs	r1, #0
 8000496:	4618      	mov	r0, r3
 8000498:	f008 f862 	bl	8008560 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800049c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80004a0:	2200      	movs	r2, #0
 80004a2:	601a      	str	r2, [r3, #0]
 80004a4:	605a      	str	r2, [r3, #4]
 80004a6:	609a      	str	r2, [r3, #8]
 80004a8:	60da      	str	r2, [r3, #12]
 80004aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80004ac:	463b      	mov	r3, r7
 80004ae:	2234      	movs	r2, #52	; 0x34
 80004b0:	2100      	movs	r1, #0
 80004b2:	4618      	mov	r0, r3
 80004b4:	f008 f854 	bl	8008560 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80004b8:	2302      	movs	r3, #2
 80004ba:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004bc:	2301      	movs	r3, #1
 80004be:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80004c0:	2310      	movs	r3, #16
 80004c2:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80004c4:	2302      	movs	r3, #2
 80004c6:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80004c8:	2300      	movs	r3, #0
 80004ca:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80004cc:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80004d0:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004d2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80004d6:	4618      	mov	r0, r3
 80004d8:	f002 f868 	bl	80025ac <HAL_RCC_OscConfig>
 80004dc:	4603      	mov	r3, r0
 80004de:	2b00      	cmp	r3, #0
 80004e0:	d001      	beq.n	80004e6 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80004e2:	f000 fc15 	bl	8000d10 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004e6:	230f      	movs	r3, #15
 80004e8:	637b      	str	r3, [r7, #52]	; 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004ea:	2302      	movs	r3, #2
 80004ec:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004ee:	2300      	movs	r3, #0
 80004f0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80004f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80004f6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004f8:	2300      	movs	r3, #0
 80004fa:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80004fc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000500:	2102      	movs	r1, #2
 8000502:	4618      	mov	r0, r3
 8000504:	f003 f890 	bl	8003628 <HAL_RCC_ClockConfig>
 8000508:	4603      	mov	r3, r0
 800050a:	2b00      	cmp	r3, #0
 800050c:	d001      	beq.n	8000512 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800050e:	f000 fbff 	bl	8000d10 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_ADC1;
 8000512:	2381      	movs	r3, #129	; 0x81
 8000514:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000516:	2300      	movs	r3, #0
 8000518:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.Adc1ClockSelection = RCC_ADC1PLLCLK_DIV1;
 800051a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800051e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000520:	463b      	mov	r3, r7
 8000522:	4618      	mov	r0, r3
 8000524:	f003 fae8 	bl	8003af8 <HAL_RCCEx_PeriphCLKConfig>
 8000528:	4603      	mov	r3, r0
 800052a:	2b00      	cmp	r3, #0
 800052c:	d001      	beq.n	8000532 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800052e:	f000 fbef 	bl	8000d10 <Error_Handler>
  }
}
 8000532:	bf00      	nop
 8000534:	3770      	adds	r7, #112	; 0x70
 8000536:	46bd      	mov	sp, r7
 8000538:	bd80      	pop	{r7, pc}
	...

0800053c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b086      	sub	sp, #24
 8000540:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000542:	463b      	mov	r3, r7
 8000544:	2200      	movs	r2, #0
 8000546:	601a      	str	r2, [r3, #0]
 8000548:	605a      	str	r2, [r3, #4]
 800054a:	609a      	str	r2, [r3, #8]
 800054c:	60da      	str	r2, [r3, #12]
 800054e:	611a      	str	r2, [r3, #16]
 8000550:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000552:	4b2e      	ldr	r3, [pc, #184]	; (800060c <MX_ADC1_Init+0xd0>)
 8000554:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000558:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800055a:	4b2c      	ldr	r3, [pc, #176]	; (800060c <MX_ADC1_Init+0xd0>)
 800055c:	2200      	movs	r2, #0
 800055e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000560:	4b2a      	ldr	r3, [pc, #168]	; (800060c <MX_ADC1_Init+0xd0>)
 8000562:	2200      	movs	r2, #0
 8000564:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000566:	4b29      	ldr	r3, [pc, #164]	; (800060c <MX_ADC1_Init+0xd0>)
 8000568:	2201      	movs	r2, #1
 800056a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800056c:	4b27      	ldr	r3, [pc, #156]	; (800060c <MX_ADC1_Init+0xd0>)
 800056e:	2201      	movs	r2, #1
 8000570:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000572:	4b26      	ldr	r3, [pc, #152]	; (800060c <MX_ADC1_Init+0xd0>)
 8000574:	2200      	movs	r2, #0
 8000576:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800057a:	4b24      	ldr	r3, [pc, #144]	; (800060c <MX_ADC1_Init+0xd0>)
 800057c:	2200      	movs	r2, #0
 800057e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000580:	4b22      	ldr	r3, [pc, #136]	; (800060c <MX_ADC1_Init+0xd0>)
 8000582:	2201      	movs	r2, #1
 8000584:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000586:	4b21      	ldr	r3, [pc, #132]	; (800060c <MX_ADC1_Init+0xd0>)
 8000588:	2200      	movs	r2, #0
 800058a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 800058c:	4b1f      	ldr	r3, [pc, #124]	; (800060c <MX_ADC1_Init+0xd0>)
 800058e:	2202      	movs	r2, #2
 8000590:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000592:	4b1e      	ldr	r3, [pc, #120]	; (800060c <MX_ADC1_Init+0xd0>)
 8000594:	2201      	movs	r2, #1
 8000596:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800059a:	4b1c      	ldr	r3, [pc, #112]	; (800060c <MX_ADC1_Init+0xd0>)
 800059c:	2204      	movs	r2, #4
 800059e:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80005a0:	4b1a      	ldr	r3, [pc, #104]	; (800060c <MX_ADC1_Init+0xd0>)
 80005a2:	2200      	movs	r2, #0
 80005a4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80005a6:	4b19      	ldr	r3, [pc, #100]	; (800060c <MX_ADC1_Init+0xd0>)
 80005a8:	2200      	movs	r2, #0
 80005aa:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80005ac:	4817      	ldr	r0, [pc, #92]	; (800060c <MX_ADC1_Init+0xd0>)
 80005ae:	f000 fdf1 	bl	8001194 <HAL_ADC_Init>
 80005b2:	4603      	mov	r3, r0
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d001      	beq.n	80005bc <MX_ADC1_Init+0x80>
  {
    Error_Handler();
 80005b8:	f000 fbaa 	bl	8000d10 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80005bc:	2301      	movs	r3, #1
 80005be:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80005c0:	2301      	movs	r3, #1
 80005c2:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80005c4:	2300      	movs	r3, #0
 80005c6:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80005c8:	2300      	movs	r3, #0
 80005ca:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80005cc:	2300      	movs	r3, #0
 80005ce:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80005d0:	2300      	movs	r3, #0
 80005d2:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005d4:	463b      	mov	r3, r7
 80005d6:	4619      	mov	r1, r3
 80005d8:	480c      	ldr	r0, [pc, #48]	; (800060c <MX_ADC1_Init+0xd0>)
 80005da:	f000 fffd 	bl	80015d8 <HAL_ADC_ConfigChannel>
 80005de:	4603      	mov	r3, r0
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d001      	beq.n	80005e8 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80005e4:	f000 fb94 	bl	8000d10 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80005e8:	2302      	movs	r3, #2
 80005ea:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80005ec:	2302      	movs	r3, #2
 80005ee:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005f0:	463b      	mov	r3, r7
 80005f2:	4619      	mov	r1, r3
 80005f4:	4805      	ldr	r0, [pc, #20]	; (800060c <MX_ADC1_Init+0xd0>)
 80005f6:	f000 ffef 	bl	80015d8 <HAL_ADC_ConfigChannel>
 80005fa:	4603      	mov	r3, r0
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d001      	beq.n	8000604 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8000600:	f000 fb86 	bl	8000d10 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000604:	bf00      	nop
 8000606:	3718      	adds	r7, #24
 8000608:	46bd      	mov	sp, r7
 800060a:	bd80      	pop	{r7, pc}
 800060c:	20000400 	.word	0x20000400

08000610 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000614:	4b14      	ldr	r3, [pc, #80]	; (8000668 <MX_USART1_UART_Init+0x58>)
 8000616:	4a15      	ldr	r2, [pc, #84]	; (800066c <MX_USART1_UART_Init+0x5c>)
 8000618:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800061a:	4b13      	ldr	r3, [pc, #76]	; (8000668 <MX_USART1_UART_Init+0x58>)
 800061c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000620:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000622:	4b11      	ldr	r3, [pc, #68]	; (8000668 <MX_USART1_UART_Init+0x58>)
 8000624:	2200      	movs	r2, #0
 8000626:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000628:	4b0f      	ldr	r3, [pc, #60]	; (8000668 <MX_USART1_UART_Init+0x58>)
 800062a:	2200      	movs	r2, #0
 800062c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800062e:	4b0e      	ldr	r3, [pc, #56]	; (8000668 <MX_USART1_UART_Init+0x58>)
 8000630:	2200      	movs	r2, #0
 8000632:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000634:	4b0c      	ldr	r3, [pc, #48]	; (8000668 <MX_USART1_UART_Init+0x58>)
 8000636:	220c      	movs	r2, #12
 8000638:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800063a:	4b0b      	ldr	r3, [pc, #44]	; (8000668 <MX_USART1_UART_Init+0x58>)
 800063c:	2200      	movs	r2, #0
 800063e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000640:	4b09      	ldr	r3, [pc, #36]	; (8000668 <MX_USART1_UART_Init+0x58>)
 8000642:	2200      	movs	r2, #0
 8000644:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000646:	4b08      	ldr	r3, [pc, #32]	; (8000668 <MX_USART1_UART_Init+0x58>)
 8000648:	2200      	movs	r2, #0
 800064a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800064c:	4b06      	ldr	r3, [pc, #24]	; (8000668 <MX_USART1_UART_Init+0x58>)
 800064e:	2200      	movs	r2, #0
 8000650:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000652:	4805      	ldr	r0, [pc, #20]	; (8000668 <MX_USART1_UART_Init+0x58>)
 8000654:	f003 fe6c 	bl	8004330 <HAL_UART_Init>
 8000658:	4603      	mov	r3, r0
 800065a:	2b00      	cmp	r3, #0
 800065c:	d001      	beq.n	8000662 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800065e:	f000 fb57 	bl	8000d10 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000662:	bf00      	nop
 8000664:	bd80      	pop	{r7, pc}
 8000666:	bf00      	nop
 8000668:	20000494 	.word	0x20000494
 800066c:	40013800 	.word	0x40013800

08000670 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b082      	sub	sp, #8
 8000674:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000676:	4b0c      	ldr	r3, [pc, #48]	; (80006a8 <MX_DMA_Init+0x38>)
 8000678:	695b      	ldr	r3, [r3, #20]
 800067a:	4a0b      	ldr	r2, [pc, #44]	; (80006a8 <MX_DMA_Init+0x38>)
 800067c:	f043 0301 	orr.w	r3, r3, #1
 8000680:	6153      	str	r3, [r2, #20]
 8000682:	4b09      	ldr	r3, [pc, #36]	; (80006a8 <MX_DMA_Init+0x38>)
 8000684:	695b      	ldr	r3, [r3, #20]
 8000686:	f003 0301 	and.w	r3, r3, #1
 800068a:	607b      	str	r3, [r7, #4]
 800068c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 800068e:	2200      	movs	r2, #0
 8000690:	2105      	movs	r1, #5
 8000692:	200b      	movs	r0, #11
 8000694:	f001 fc3e 	bl	8001f14 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000698:	200b      	movs	r0, #11
 800069a:	f001 fc57 	bl	8001f4c <HAL_NVIC_EnableIRQ>

}
 800069e:	bf00      	nop
 80006a0:	3708      	adds	r7, #8
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	bf00      	nop
 80006a8:	40021000 	.word	0x40021000

080006ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b088      	sub	sp, #32
 80006b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006b2:	f107 030c 	add.w	r3, r7, #12
 80006b6:	2200      	movs	r2, #0
 80006b8:	601a      	str	r2, [r3, #0]
 80006ba:	605a      	str	r2, [r3, #4]
 80006bc:	609a      	str	r2, [r3, #8]
 80006be:	60da      	str	r2, [r3, #12]
 80006c0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006c2:	4b27      	ldr	r3, [pc, #156]	; (8000760 <MX_GPIO_Init+0xb4>)
 80006c4:	695b      	ldr	r3, [r3, #20]
 80006c6:	4a26      	ldr	r2, [pc, #152]	; (8000760 <MX_GPIO_Init+0xb4>)
 80006c8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80006cc:	6153      	str	r3, [r2, #20]
 80006ce:	4b24      	ldr	r3, [pc, #144]	; (8000760 <MX_GPIO_Init+0xb4>)
 80006d0:	695b      	ldr	r3, [r3, #20]
 80006d2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80006d6:	60bb      	str	r3, [r7, #8]
 80006d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006da:	4b21      	ldr	r3, [pc, #132]	; (8000760 <MX_GPIO_Init+0xb4>)
 80006dc:	695b      	ldr	r3, [r3, #20]
 80006de:	4a20      	ldr	r2, [pc, #128]	; (8000760 <MX_GPIO_Init+0xb4>)
 80006e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006e4:	6153      	str	r3, [r2, #20]
 80006e6:	4b1e      	ldr	r3, [pc, #120]	; (8000760 <MX_GPIO_Init+0xb4>)
 80006e8:	695b      	ldr	r3, [r3, #20]
 80006ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80006ee:	607b      	str	r3, [r7, #4]
 80006f0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : PC13 PC10 PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_10|GPIO_PIN_11;
 80006f2:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 80006f6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80006f8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80006fc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006fe:	2300      	movs	r3, #0
 8000700:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000702:	f107 030c 	add.w	r3, r7, #12
 8000706:	4619      	mov	r1, r3
 8000708:	4816      	ldr	r0, [pc, #88]	; (8000764 <MX_GPIO_Init+0xb8>)
 800070a:	f001 fdc5 	bl	8002298 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800070e:	230c      	movs	r3, #12
 8000710:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000712:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000716:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000718:	2302      	movs	r3, #2
 800071a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800071c:	f107 030c 	add.w	r3, r7, #12
 8000720:	4619      	mov	r1, r3
 8000722:	4810      	ldr	r0, [pc, #64]	; (8000764 <MX_GPIO_Init+0xb8>)
 8000724:	f001 fdb8 	bl	8002298 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_TSC_IRQn, 5, 0);
 8000728:	2200      	movs	r2, #0
 800072a:	2105      	movs	r1, #5
 800072c:	2008      	movs	r0, #8
 800072e:	f001 fbf1 	bl	8001f14 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_TSC_IRQn);
 8000732:	2008      	movs	r0, #8
 8000734:	f001 fc0a 	bl	8001f4c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 8000738:	2200      	movs	r2, #0
 800073a:	2105      	movs	r1, #5
 800073c:	2009      	movs	r0, #9
 800073e:	f001 fbe9 	bl	8001f14 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000742:	2009      	movs	r0, #9
 8000744:	f001 fc02 	bl	8001f4c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000748:	2200      	movs	r2, #0
 800074a:	2105      	movs	r1, #5
 800074c:	2028      	movs	r0, #40	; 0x28
 800074e:	f001 fbe1 	bl	8001f14 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000752:	2028      	movs	r0, #40	; 0x28
 8000754:	f001 fbfa 	bl	8001f4c <HAL_NVIC_EnableIRQ>

}
 8000758:	bf00      	nop
 800075a:	3720      	adds	r7, #32
 800075c:	46bd      	mov	sp, r7
 800075e:	bd80      	pop	{r7, pc}
 8000760:	40021000 	.word	0x40021000
 8000764:	48000800 	.word	0x48000800

08000768 <calibration>:

/* USER CODE BEGIN 4 */
void calibration(void)
{
 8000768:	b5b0      	push	{r4, r5, r7, lr}
 800076a:	b09a      	sub	sp, #104	; 0x68
 800076c:	af02      	add	r7, sp, #8
	for( ;; )
	{
		xSemaphoreTake(xSemaphore1, portMAX_DELAY);
 800076e:	4ba6      	ldr	r3, [pc, #664]	; (8000a08 <calibration+0x2a0>)
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	f04f 31ff 	mov.w	r1, #4294967295
 8000776:	4618      	mov	r0, r3
 8000778:	f005 f8fe 	bl	8005978 <xQueueSemaphoreTake>
		for(int i = 0; i < SIZE_BUFFER; i++)
 800077c:	2300      	movs	r3, #0
 800077e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8000780:	e010      	b.n	80007a4 <calibration+0x3c>
		{
			arm_mean_q15((int16_t*)&buffer.adc_buf, sizeof(buffer.adc_buf)/2, (int16_t*)&buffer.adc_calibration[i]);
 8000782:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000784:	3338      	adds	r3, #56	; 0x38
 8000786:	005b      	lsls	r3, r3, #1
 8000788:	4aa0      	ldr	r2, [pc, #640]	; (8000a0c <calibration+0x2a4>)
 800078a:	4413      	add	r3, r2
 800078c:	3302      	adds	r3, #2
 800078e:	461a      	mov	r2, r3
 8000790:	2132      	movs	r1, #50	; 0x32
 8000792:	489f      	ldr	r0, [pc, #636]	; (8000a10 <calibration+0x2a8>)
 8000794:	f007 fe7a 	bl	800848c <arm_mean_q15>
			vTaskDelay(50);
 8000798:	2032      	movs	r0, #50	; 0x32
 800079a:	f005 fdb1 	bl	8006300 <vTaskDelay>
		for(int i = 0; i < SIZE_BUFFER; i++)
 800079e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80007a0:	3301      	adds	r3, #1
 80007a2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80007a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80007a6:	2b31      	cmp	r3, #49	; 0x31
 80007a8:	ddeb      	ble.n	8000782 <calibration+0x1a>
		}
		arm_mean_q15((int16_t*)&buffer.adc_calibration, sizeof(buffer.adc_calibration)/2, (int16_t*)&buffer.adc_calibration_result);
 80007aa:	4a9a      	ldr	r2, [pc, #616]	; (8000a14 <calibration+0x2ac>)
 80007ac:	2132      	movs	r1, #50	; 0x32
 80007ae:	489a      	ldr	r0, [pc, #616]	; (8000a18 <calibration+0x2b0>)
 80007b0:	f007 fe6c 	bl	800848c <arm_mean_q15>
		char string_buff[] = "Calibration 0 value: = ";
 80007b4:	4b99      	ldr	r3, [pc, #612]	; (8000a1c <calibration+0x2b4>)
 80007b6:	f107 0438 	add.w	r4, r7, #56	; 0x38
 80007ba:	461d      	mov	r5, r3
 80007bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007c0:	e895 0003 	ldmia.w	r5, {r0, r1}
 80007c4:	e884 0003 	stmia.w	r4, {r0, r1}
		for(uint8_t i = 0; i<(sizeof(string_buff)); i++)
 80007c8:	2300      	movs	r3, #0
 80007ca:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
 80007ce:	e00f      	b.n	80007f0 <calibration+0x88>
		{
			xQueueSend(buffer.queueh_clbrt, (void*)(&string_buff[i]), 5);
 80007d0:	4b8e      	ldr	r3, [pc, #568]	; (8000a0c <calibration+0x2a4>)
 80007d2:	6858      	ldr	r0, [r3, #4]
 80007d4:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 80007d8:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80007dc:	18d1      	adds	r1, r2, r3
 80007de:	2300      	movs	r3, #0
 80007e0:	2205      	movs	r2, #5
 80007e2:	f004 fdc5 	bl	8005370 <xQueueGenericSend>
		for(uint8_t i = 0; i<(sizeof(string_buff)); i++)
 80007e6:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 80007ea:	3301      	adds	r3, #1
 80007ec:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
 80007f0:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 80007f4:	2b17      	cmp	r3, #23
 80007f6:	d9eb      	bls.n	80007d0 <calibration+0x68>
		}
		xEventGroupSetBits(xCreatedEventGroup1, 0x1);
 80007f8:	4b89      	ldr	r3, [pc, #548]	; (8000a20 <calibration+0x2b8>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	2101      	movs	r1, #1
 80007fe:	4618      	mov	r0, r3
 8000800:	f004 fb0c 	bl	8004e1c <xEventGroupSetBits>
		xEventGroupWaitBits(xCreatedEventGroup1, 0x2, pdTRUE, pdTRUE, portMAX_DELAY);
 8000804:	4b86      	ldr	r3, [pc, #536]	; (8000a20 <calibration+0x2b8>)
 8000806:	6818      	ldr	r0, [r3, #0]
 8000808:	f04f 33ff 	mov.w	r3, #4294967295
 800080c:	9300      	str	r3, [sp, #0]
 800080e:	2301      	movs	r3, #1
 8000810:	2201      	movs	r2, #1
 8000812:	2102      	movs	r1, #2
 8000814:	f004 fa34 	bl	8004c80 <xEventGroupWaitBits>
		xQueueSend(buffer.queueh_clbrt, (void*)(((char*) &buffer.adc_calibration_result)), 1);
 8000818:	4b7c      	ldr	r3, [pc, #496]	; (8000a0c <calibration+0x2a4>)
 800081a:	6858      	ldr	r0, [r3, #4]
 800081c:	2300      	movs	r3, #0
 800081e:	2201      	movs	r2, #1
 8000820:	497c      	ldr	r1, [pc, #496]	; (8000a14 <calibration+0x2ac>)
 8000822:	f004 fda5 	bl	8005370 <xQueueGenericSend>
		xQueueSend(buffer.queueh_clbrt, (void*)(((char*) &buffer.adc_calibration_result)+1), 1);
 8000826:	4b79      	ldr	r3, [pc, #484]	; (8000a0c <calibration+0x2a4>)
 8000828:	6858      	ldr	r0, [r3, #4]
 800082a:	497e      	ldr	r1, [pc, #504]	; (8000a24 <calibration+0x2bc>)
 800082c:	2300      	movs	r3, #0
 800082e:	2201      	movs	r2, #1
 8000830:	f004 fd9e 	bl	8005370 <xQueueGenericSend>
		xEventGroupSetBits(xCreatedEventGroup1, 0x4);
 8000834:	4b7a      	ldr	r3, [pc, #488]	; (8000a20 <calibration+0x2b8>)
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	2104      	movs	r1, #4
 800083a:	4618      	mov	r0, r3
 800083c:	f004 faee 	bl	8004e1c <xEventGroupSetBits>
		xEventGroupWaitBits(xCreatedEventGroup1, 0x8, pdTRUE, pdTRUE, portMAX_DELAY);
 8000840:	4b77      	ldr	r3, [pc, #476]	; (8000a20 <calibration+0x2b8>)
 8000842:	6818      	ldr	r0, [r3, #0]
 8000844:	f04f 33ff 	mov.w	r3, #4294967295
 8000848:	9300      	str	r3, [sp, #0]
 800084a:	2301      	movs	r3, #1
 800084c:	2201      	movs	r2, #1
 800084e:	2108      	movs	r1, #8
 8000850:	f004 fa16 	bl	8004c80 <xEventGroupWaitBits>
		char string_buff2[] = "Place 197 grams etalon\r\n";
 8000854:	4b74      	ldr	r3, [pc, #464]	; (8000a28 <calibration+0x2c0>)
 8000856:	f107 041c 	add.w	r4, r7, #28
 800085a:	461d      	mov	r5, r3
 800085c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800085e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000860:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000864:	c403      	stmia	r4!, {r0, r1}
 8000866:	7022      	strb	r2, [r4, #0]
		xQueueReset(buffer.queueh_clbrt);
 8000868:	4b68      	ldr	r3, [pc, #416]	; (8000a0c <calibration+0x2a4>)
 800086a:	685b      	ldr	r3, [r3, #4]
 800086c:	2100      	movs	r1, #0
 800086e:	4618      	mov	r0, r3
 8000870:	f004 fc42 	bl	80050f8 <xQueueGenericReset>
		for(uint8_t i = 0; i<(sizeof(string_buff2)); i++)
 8000874:	2300      	movs	r3, #0
 8000876:	f887 305a 	strb.w	r3, [r7, #90]	; 0x5a
 800087a:	e00f      	b.n	800089c <calibration+0x134>
		{
			xQueueSend(buffer.queueh_clbrt, (void*)(&string_buff2[i]), 5);
 800087c:	4b63      	ldr	r3, [pc, #396]	; (8000a0c <calibration+0x2a4>)
 800087e:	6858      	ldr	r0, [r3, #4]
 8000880:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 8000884:	f107 021c 	add.w	r2, r7, #28
 8000888:	18d1      	adds	r1, r2, r3
 800088a:	2300      	movs	r3, #0
 800088c:	2205      	movs	r2, #5
 800088e:	f004 fd6f 	bl	8005370 <xQueueGenericSend>
		for(uint8_t i = 0; i<(sizeof(string_buff2)); i++)
 8000892:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 8000896:	3301      	adds	r3, #1
 8000898:	f887 305a 	strb.w	r3, [r7, #90]	; 0x5a
 800089c:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 80008a0:	2b18      	cmp	r3, #24
 80008a2:	d9eb      	bls.n	800087c <calibration+0x114>
		}
		xEventGroupSetBits(xCreatedEventGroup1, 0x1);
 80008a4:	4b5e      	ldr	r3, [pc, #376]	; (8000a20 <calibration+0x2b8>)
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	2101      	movs	r1, #1
 80008aa:	4618      	mov	r0, r3
 80008ac:	f004 fab6 	bl	8004e1c <xEventGroupSetBits>
		xEventGroupWaitBits(xCreatedEventGroup1, 0x2, pdTRUE, pdTRUE, portMAX_DELAY);
 80008b0:	4b5b      	ldr	r3, [pc, #364]	; (8000a20 <calibration+0x2b8>)
 80008b2:	6818      	ldr	r0, [r3, #0]
 80008b4:	f04f 33ff 	mov.w	r3, #4294967295
 80008b8:	9300      	str	r3, [sp, #0]
 80008ba:	2301      	movs	r3, #1
 80008bc:	2201      	movs	r2, #1
 80008be:	2102      	movs	r1, #2
 80008c0:	f004 f9de 	bl	8004c80 <xEventGroupWaitBits>
		xEventGroupWaitBits(xCreatedEventGroup1, 0x10, pdTRUE, pdTRUE, portMAX_DELAY);
 80008c4:	4b56      	ldr	r3, [pc, #344]	; (8000a20 <calibration+0x2b8>)
 80008c6:	6818      	ldr	r0, [r3, #0]
 80008c8:	f04f 33ff 	mov.w	r3, #4294967295
 80008cc:	9300      	str	r3, [sp, #0]
 80008ce:	2301      	movs	r3, #1
 80008d0:	2201      	movs	r2, #1
 80008d2:	2110      	movs	r1, #16
 80008d4:	f004 f9d4 	bl	8004c80 <xEventGroupWaitBits>
		for(int i = 0; i < SIZE_BUFFER; i++)
 80008d8:	2300      	movs	r3, #0
 80008da:	657b      	str	r3, [r7, #84]	; 0x54
 80008dc:	e010      	b.n	8000900 <calibration+0x198>
		{
			arm_mean_q15((int16_t*)&buffer.adc_buf, sizeof(buffer.adc_buf)/2, (int16_t*)&buffer.adc_calibration[i]);
 80008de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80008e0:	3338      	adds	r3, #56	; 0x38
 80008e2:	005b      	lsls	r3, r3, #1
 80008e4:	4a49      	ldr	r2, [pc, #292]	; (8000a0c <calibration+0x2a4>)
 80008e6:	4413      	add	r3, r2
 80008e8:	3302      	adds	r3, #2
 80008ea:	461a      	mov	r2, r3
 80008ec:	2132      	movs	r1, #50	; 0x32
 80008ee:	4848      	ldr	r0, [pc, #288]	; (8000a10 <calibration+0x2a8>)
 80008f0:	f007 fdcc 	bl	800848c <arm_mean_q15>
			vTaskDelay(50);
 80008f4:	2032      	movs	r0, #50	; 0x32
 80008f6:	f005 fd03 	bl	8006300 <vTaskDelay>
		for(int i = 0; i < SIZE_BUFFER; i++)
 80008fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80008fc:	3301      	adds	r3, #1
 80008fe:	657b      	str	r3, [r7, #84]	; 0x54
 8000900:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000902:	2b31      	cmp	r3, #49	; 0x31
 8000904:	ddeb      	ble.n	80008de <calibration+0x176>
		}
		arm_mean_q15((int16_t*)&buffer.adc_calibration, sizeof(buffer.adc_calibration)/2, (int16_t*)&buffer.adc_calibration_result1);
 8000906:	4a49      	ldr	r2, [pc, #292]	; (8000a2c <calibration+0x2c4>)
 8000908:	2132      	movs	r1, #50	; 0x32
 800090a:	4843      	ldr	r0, [pc, #268]	; (8000a18 <calibration+0x2b0>)
 800090c:	f007 fdbe 	bl	800848c <arm_mean_q15>
		char string_buff3[] = "Calibration 1 value: = ";
 8000910:	4b47      	ldr	r3, [pc, #284]	; (8000a30 <calibration+0x2c8>)
 8000912:	1d3c      	adds	r4, r7, #4
 8000914:	461d      	mov	r5, r3
 8000916:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000918:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800091a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800091e:	e884 0003 	stmia.w	r4, {r0, r1}
				for(uint8_t i = 0; i<(sizeof(string_buff3)); i++)
 8000922:	2300      	movs	r3, #0
 8000924:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
 8000928:	e00e      	b.n	8000948 <calibration+0x1e0>
		{
			xQueueSend(buffer.queueh_clbrt, (void*)(&string_buff3[i]), 5);
 800092a:	4b38      	ldr	r3, [pc, #224]	; (8000a0c <calibration+0x2a4>)
 800092c:	6858      	ldr	r0, [r3, #4]
 800092e:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8000932:	1d3a      	adds	r2, r7, #4
 8000934:	18d1      	adds	r1, r2, r3
 8000936:	2300      	movs	r3, #0
 8000938:	2205      	movs	r2, #5
 800093a:	f004 fd19 	bl	8005370 <xQueueGenericSend>
				for(uint8_t i = 0; i<(sizeof(string_buff3)); i++)
 800093e:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8000942:	3301      	adds	r3, #1
 8000944:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
 8000948:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 800094c:	2b17      	cmp	r3, #23
 800094e:	d9ec      	bls.n	800092a <calibration+0x1c2>
		}
		xEventGroupSetBits(xCreatedEventGroup1, 0x1);
 8000950:	4b33      	ldr	r3, [pc, #204]	; (8000a20 <calibration+0x2b8>)
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	2101      	movs	r1, #1
 8000956:	4618      	mov	r0, r3
 8000958:	f004 fa60 	bl	8004e1c <xEventGroupSetBits>
		xEventGroupWaitBits(xCreatedEventGroup1, 0x2, pdTRUE, pdTRUE, portMAX_DELAY);
 800095c:	4b30      	ldr	r3, [pc, #192]	; (8000a20 <calibration+0x2b8>)
 800095e:	6818      	ldr	r0, [r3, #0]
 8000960:	f04f 33ff 	mov.w	r3, #4294967295
 8000964:	9300      	str	r3, [sp, #0]
 8000966:	2301      	movs	r3, #1
 8000968:	2201      	movs	r2, #1
 800096a:	2102      	movs	r1, #2
 800096c:	f004 f988 	bl	8004c80 <xEventGroupWaitBits>
		xQueueSend(buffer.queueh_clbrt, (void*)(((char*) &buffer.adc_calibration_result1)), 1);
 8000970:	4b26      	ldr	r3, [pc, #152]	; (8000a0c <calibration+0x2a4>)
 8000972:	6858      	ldr	r0, [r3, #4]
 8000974:	2300      	movs	r3, #0
 8000976:	2201      	movs	r2, #1
 8000978:	492c      	ldr	r1, [pc, #176]	; (8000a2c <calibration+0x2c4>)
 800097a:	f004 fcf9 	bl	8005370 <xQueueGenericSend>
		xQueueSend(buffer.queueh_clbrt, (void*)(((char*) &buffer.adc_calibration_result1)+1), 1);
 800097e:	4b23      	ldr	r3, [pc, #140]	; (8000a0c <calibration+0x2a4>)
 8000980:	6858      	ldr	r0, [r3, #4]
 8000982:	492c      	ldr	r1, [pc, #176]	; (8000a34 <calibration+0x2cc>)
 8000984:	2300      	movs	r3, #0
 8000986:	2201      	movs	r2, #1
 8000988:	f004 fcf2 	bl	8005370 <xQueueGenericSend>
		xEventGroupSetBits(xCreatedEventGroup1, 0x4);
 800098c:	4b24      	ldr	r3, [pc, #144]	; (8000a20 <calibration+0x2b8>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	2104      	movs	r1, #4
 8000992:	4618      	mov	r0, r3
 8000994:	f004 fa42 	bl	8004e1c <xEventGroupSetBits>
		xEventGroupWaitBits(xCreatedEventGroup1, 0x8, pdTRUE, pdTRUE, portMAX_DELAY);
 8000998:	4b21      	ldr	r3, [pc, #132]	; (8000a20 <calibration+0x2b8>)
 800099a:	6818      	ldr	r0, [r3, #0]
 800099c:	f04f 33ff 	mov.w	r3, #4294967295
 80009a0:	9300      	str	r3, [sp, #0]
 80009a2:	2301      	movs	r3, #1
 80009a4:	2201      	movs	r2, #1
 80009a6:	2108      	movs	r1, #8
 80009a8:	f004 f96a 	bl	8004c80 <xEventGroupWaitBits>
		buffer.offset = buffer.adc_calibration_result1 - buffer.adc_calibration_result;
 80009ac:	4b17      	ldr	r3, [pc, #92]	; (8000a0c <calibration+0x2a4>)
 80009ae:	f8b3 20d8 	ldrh.w	r2, [r3, #216]	; 0xd8
 80009b2:	4b16      	ldr	r3, [pc, #88]	; (8000a0c <calibration+0x2a4>)
 80009b4:	f8b3 30d6 	ldrh.w	r3, [r3, #214]	; 0xd6
 80009b8:	1ad3      	subs	r3, r2, r3
 80009ba:	b29a      	uxth	r2, r3
 80009bc:	4b13      	ldr	r3, [pc, #76]	; (8000a0c <calibration+0x2a4>)
 80009be:	f8a3 20da 	strh.w	r2, [r3, #218]	; 0xda
		buffer.k = ETALON/(buffer.adc_calibration_result1 - buffer.adc_calibration_result);
 80009c2:	4b12      	ldr	r3, [pc, #72]	; (8000a0c <calibration+0x2a4>)
 80009c4:	f8b3 30d8 	ldrh.w	r3, [r3, #216]	; 0xd8
 80009c8:	461a      	mov	r2, r3
 80009ca:	4b10      	ldr	r3, [pc, #64]	; (8000a0c <calibration+0x2a4>)
 80009cc:	f8b3 30d6 	ldrh.w	r3, [r3, #214]	; 0xd6
 80009d0:	1ad3      	subs	r3, r2, r3
 80009d2:	22c5      	movs	r2, #197	; 0xc5
 80009d4:	fb92 f3f3 	sdiv	r3, r2, r3
 80009d8:	b29a      	uxth	r2, r3
 80009da:	4b0c      	ldr	r3, [pc, #48]	; (8000a0c <calibration+0x2a4>)
 80009dc:	f8a3 20dc 	strh.w	r2, [r3, #220]	; 0xdc

		vTaskDelay(400);
 80009e0:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80009e4:	f005 fc8c 	bl	8006300 <vTaskDelay>
		xSemaphoreTake(xSemaphore1, 1);
 80009e8:	4b07      	ldr	r3, [pc, #28]	; (8000a08 <calibration+0x2a0>)
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	2101      	movs	r1, #1
 80009ee:	4618      	mov	r0, r3
 80009f0:	f004 ffc2 	bl	8005978 <xQueueSemaphoreTake>
		xEventGroupWaitBits(xCreatedEventGroup1, 0x10, pdTRUE, pdTRUE, 1);
 80009f4:	4b0a      	ldr	r3, [pc, #40]	; (8000a20 <calibration+0x2b8>)
 80009f6:	6818      	ldr	r0, [r3, #0]
 80009f8:	2301      	movs	r3, #1
 80009fa:	9300      	str	r3, [sp, #0]
 80009fc:	2301      	movs	r3, #1
 80009fe:	2201      	movs	r2, #1
 8000a00:	2110      	movs	r1, #16
 8000a02:	f004 f93d 	bl	8004c80 <xEventGroupWaitBits>
	{
 8000a06:	e6b2      	b.n	800076e <calibration+0x6>
 8000a08:	20000600 	.word	0x20000600
 8000a0c:	20000520 	.word	0x20000520
 8000a10:	2000052c 	.word	0x2000052c
 8000a14:	200005f6 	.word	0x200005f6
 8000a18:	20000592 	.word	0x20000592
 8000a1c:	08008f8c 	.word	0x08008f8c
 8000a20:	20000604 	.word	0x20000604
 8000a24:	200005f7 	.word	0x200005f7
 8000a28:	08008fa4 	.word	0x08008fa4
 8000a2c:	200005f8 	.word	0x200005f8
 8000a30:	08008fc0 	.word	0x08008fc0
 8000a34:	200005f9 	.word	0x200005f9

08000a38 <weighing>:
	}
	vTaskDelete(xTaskGetHandle("calibration"));
}

void weighing(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	af00      	add	r7, sp, #0
	for( ;; )
	{
		vTaskDelay(500);
 8000a3c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000a40:	f005 fc5e 	bl	8006300 <vTaskDelay>
		arm_mean_q15((int16_t*)&buffer.adc_buf, sizeof(buffer.adc_buf)/2, (int16_t*)&buffer.adc_buf_result);
 8000a44:	4a1a      	ldr	r2, [pc, #104]	; (8000ab0 <weighing+0x78>)
 8000a46:	2132      	movs	r1, #50	; 0x32
 8000a48:	481a      	ldr	r0, [pc, #104]	; (8000ab4 <weighing+0x7c>)
 8000a4a:	f007 fd1f 	bl	800848c <arm_mean_q15>
		buffer.adc_buf_result = (buffer.adc_buf_result - buffer.offset)*buffer.k;
 8000a4e:	4b1a      	ldr	r3, [pc, #104]	; (8000ab8 <weighing+0x80>)
 8000a50:	f8b3 2070 	ldrh.w	r2, [r3, #112]	; 0x70
 8000a54:	4b18      	ldr	r3, [pc, #96]	; (8000ab8 <weighing+0x80>)
 8000a56:	f8b3 30da 	ldrh.w	r3, [r3, #218]	; 0xda
 8000a5a:	1ad3      	subs	r3, r2, r3
 8000a5c:	b29a      	uxth	r2, r3
 8000a5e:	4b16      	ldr	r3, [pc, #88]	; (8000ab8 <weighing+0x80>)
 8000a60:	f8b3 30dc 	ldrh.w	r3, [r3, #220]	; 0xdc
 8000a64:	fb12 f303 	smulbb	r3, r2, r3
 8000a68:	b29a      	uxth	r2, r3
 8000a6a:	4b13      	ldr	r3, [pc, #76]	; (8000ab8 <weighing+0x80>)
 8000a6c:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
		xQueueSend(buffer.queueh, (void*)(((char*) &buffer.adc_buf_result)), 1);
 8000a70:	4b11      	ldr	r3, [pc, #68]	; (8000ab8 <weighing+0x80>)
 8000a72:	6818      	ldr	r0, [r3, #0]
 8000a74:	2300      	movs	r3, #0
 8000a76:	2201      	movs	r2, #1
 8000a78:	490d      	ldr	r1, [pc, #52]	; (8000ab0 <weighing+0x78>)
 8000a7a:	f004 fc79 	bl	8005370 <xQueueGenericSend>
		xQueueSend(buffer.queueh, (void*)(((char*) &buffer.adc_buf_result)+1), 1);
 8000a7e:	4b0e      	ldr	r3, [pc, #56]	; (8000ab8 <weighing+0x80>)
 8000a80:	6818      	ldr	r0, [r3, #0]
 8000a82:	490e      	ldr	r1, [pc, #56]	; (8000abc <weighing+0x84>)
 8000a84:	2300      	movs	r3, #0
 8000a86:	2201      	movs	r2, #1
 8000a88:	f004 fc72 	bl	8005370 <xQueueGenericSend>
		xTaskNotify(xTaskGetHandle("send data W"), 0, eNoAction);
 8000a8c:	480c      	ldr	r0, [pc, #48]	; (8000ac0 <weighing+0x88>)
 8000a8e:	f005 fdfb 	bl	8006688 <xTaskGetHandle>
 8000a92:	2300      	movs	r3, #0
 8000a94:	2200      	movs	r2, #0
 8000a96:	2100      	movs	r1, #0
 8000a98:	f006 fc90 	bl	80073bc <xTaskGenericNotify>
		taskYIELD();
 8000a9c:	4b09      	ldr	r3, [pc, #36]	; (8000ac4 <weighing+0x8c>)
 8000a9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000aa2:	601a      	str	r2, [r3, #0]
 8000aa4:	f3bf 8f4f 	dsb	sy
 8000aa8:	f3bf 8f6f 	isb	sy
	{
 8000aac:	e7c6      	b.n	8000a3c <weighing+0x4>
 8000aae:	bf00      	nop
 8000ab0:	20000590 	.word	0x20000590
 8000ab4:	2000052c 	.word	0x2000052c
 8000ab8:	20000520 	.word	0x20000520
 8000abc:	20000591 	.word	0x20000591
 8000ac0:	08008f3c 	.word	0x08008f3c
 8000ac4:	e000ed04 	.word	0xe000ed04

08000ac8 <sendUSART1weighing>:
	}
}

void sendUSART1weighing(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b084      	sub	sp, #16
 8000acc:	af00      	add	r7, sp, #0
	uint16_t res_to_uart;
	char string_buff[8];
	for( ;; )
	{
		xTaskNotifyWait(0x00, 0xffffffff, NULL, portMAX_DELAY);
 8000ace:	f04f 33ff 	mov.w	r3, #4294967295
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	f04f 31ff 	mov.w	r1, #4294967295
 8000ad8:	2000      	movs	r0, #0
 8000ada:	f006 fc0f 	bl	80072fc <xTaskNotifyWait>
		xQueueReceive(buffer.queueh, &buffer.tx[0], portMAX_DELAY);
 8000ade:	4b14      	ldr	r3, [pc, #80]	; (8000b30 <sendUSART1weighing+0x68>)
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	f04f 32ff 	mov.w	r2, #4294967295
 8000ae6:	4913      	ldr	r1, [pc, #76]	; (8000b34 <sendUSART1weighing+0x6c>)
 8000ae8:	4618      	mov	r0, r3
 8000aea:	f004 fe65 	bl	80057b8 <xQueueReceive>
		xQueueReceive(buffer.queueh, &buffer.tx[1], portMAX_DELAY);
 8000aee:	4b10      	ldr	r3, [pc, #64]	; (8000b30 <sendUSART1weighing+0x68>)
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	f04f 32ff 	mov.w	r2, #4294967295
 8000af6:	4910      	ldr	r1, [pc, #64]	; (8000b38 <sendUSART1weighing+0x70>)
 8000af8:	4618      	mov	r0, r3
 8000afa:	f004 fe5d 	bl	80057b8 <xQueueReceive>
		res_to_uart = buffer.tx[0];
 8000afe:	4b0c      	ldr	r3, [pc, #48]	; (8000b30 <sendUSART1weighing+0x68>)
 8000b00:	7a1b      	ldrb	r3, [r3, #8]
 8000b02:	81fb      	strh	r3, [r7, #14]
		res_to_uart = res_to_uart + (buffer.tx[1] << 8);
 8000b04:	4b0a      	ldr	r3, [pc, #40]	; (8000b30 <sendUSART1weighing+0x68>)
 8000b06:	7a5b      	ldrb	r3, [r3, #9]
 8000b08:	b29b      	uxth	r3, r3
 8000b0a:	021b      	lsls	r3, r3, #8
 8000b0c:	b29a      	uxth	r2, r3
 8000b0e:	89fb      	ldrh	r3, [r7, #14]
 8000b10:	4413      	add	r3, r2
 8000b12:	81fb      	strh	r3, [r7, #14]
		sprintf(string_buff, "%d\r\n", res_to_uart);
 8000b14:	89fa      	ldrh	r2, [r7, #14]
 8000b16:	1d3b      	adds	r3, r7, #4
 8000b18:	4908      	ldr	r1, [pc, #32]	; (8000b3c <sendUSART1weighing+0x74>)
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	f007 fe36 	bl	800878c <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*) string_buff, sizeof(string_buff), 100);
 8000b20:	1d39      	adds	r1, r7, #4
 8000b22:	2364      	movs	r3, #100	; 0x64
 8000b24:	2208      	movs	r2, #8
 8000b26:	4806      	ldr	r0, [pc, #24]	; (8000b40 <sendUSART1weighing+0x78>)
 8000b28:	f003 fc50 	bl	80043cc <HAL_UART_Transmit>
		xTaskNotifyWait(0x00, 0xffffffff, NULL, portMAX_DELAY);
 8000b2c:	e7cf      	b.n	8000ace <sendUSART1weighing+0x6>
 8000b2e:	bf00      	nop
 8000b30:	20000520 	.word	0x20000520
 8000b34:	20000528 	.word	0x20000528
 8000b38:	20000529 	.word	0x20000529
 8000b3c:	08008fd8 	.word	0x08008fd8
 8000b40:	20000494 	.word	0x20000494

08000b44 <sendUSART1int>:
	}
	 vTaskDelete(xTaskGetHandle("send data W"));
}

void sendUSART1int(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b08a      	sub	sp, #40	; 0x28
 8000b48:	af02      	add	r7, sp, #8
	for( ;; )
	{
		uint16_t res_to_uart;
		char string_buff[30] = {0};
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	603b      	str	r3, [r7, #0]
 8000b4e:	1d3b      	adds	r3, r7, #4
 8000b50:	2200      	movs	r2, #0
 8000b52:	601a      	str	r2, [r3, #0]
 8000b54:	605a      	str	r2, [r3, #4]
 8000b56:	609a      	str	r2, [r3, #8]
 8000b58:	60da      	str	r2, [r3, #12]
 8000b5a:	611a      	str	r2, [r3, #16]
 8000b5c:	615a      	str	r2, [r3, #20]
 8000b5e:	831a      	strh	r2, [r3, #24]
		xEventGroupWaitBits(xCreatedEventGroup1, 0x4, pdTRUE, pdTRUE, portMAX_DELAY);
 8000b60:	4b1b      	ldr	r3, [pc, #108]	; (8000bd0 <sendUSART1int+0x8c>)
 8000b62:	6818      	ldr	r0, [r3, #0]
 8000b64:	f04f 33ff 	mov.w	r3, #4294967295
 8000b68:	9300      	str	r3, [sp, #0]
 8000b6a:	2301      	movs	r3, #1
 8000b6c:	2201      	movs	r2, #1
 8000b6e:	2104      	movs	r1, #4
 8000b70:	f004 f886 	bl	8004c80 <xEventGroupWaitBits>
		xQueueReceive(buffer.queueh_clbrt, &buffer.tx[0], portMAX_DELAY);
 8000b74:	4b17      	ldr	r3, [pc, #92]	; (8000bd4 <sendUSART1int+0x90>)
 8000b76:	685b      	ldr	r3, [r3, #4]
 8000b78:	f04f 32ff 	mov.w	r2, #4294967295
 8000b7c:	4916      	ldr	r1, [pc, #88]	; (8000bd8 <sendUSART1int+0x94>)
 8000b7e:	4618      	mov	r0, r3
 8000b80:	f004 fe1a 	bl	80057b8 <xQueueReceive>
		xQueueReceive(buffer.queueh_clbrt, &buffer.tx[1], portMAX_DELAY);
 8000b84:	4b13      	ldr	r3, [pc, #76]	; (8000bd4 <sendUSART1int+0x90>)
 8000b86:	685b      	ldr	r3, [r3, #4]
 8000b88:	f04f 32ff 	mov.w	r2, #4294967295
 8000b8c:	4913      	ldr	r1, [pc, #76]	; (8000bdc <sendUSART1int+0x98>)
 8000b8e:	4618      	mov	r0, r3
 8000b90:	f004 fe12 	bl	80057b8 <xQueueReceive>
		res_to_uart = buffer.tx[0];
 8000b94:	4b0f      	ldr	r3, [pc, #60]	; (8000bd4 <sendUSART1int+0x90>)
 8000b96:	7a1b      	ldrb	r3, [r3, #8]
 8000b98:	83fb      	strh	r3, [r7, #30]
		res_to_uart = res_to_uart + (buffer.tx[1] << 8);
 8000b9a:	4b0e      	ldr	r3, [pc, #56]	; (8000bd4 <sendUSART1int+0x90>)
 8000b9c:	7a5b      	ldrb	r3, [r3, #9]
 8000b9e:	b29b      	uxth	r3, r3
 8000ba0:	021b      	lsls	r3, r3, #8
 8000ba2:	b29a      	uxth	r2, r3
 8000ba4:	8bfb      	ldrh	r3, [r7, #30]
 8000ba6:	4413      	add	r3, r2
 8000ba8:	83fb      	strh	r3, [r7, #30]
		sprintf(string_buff, "%d\r\n", res_to_uart);
 8000baa:	8bfa      	ldrh	r2, [r7, #30]
 8000bac:	463b      	mov	r3, r7
 8000bae:	490c      	ldr	r1, [pc, #48]	; (8000be0 <sendUSART1int+0x9c>)
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	f007 fdeb 	bl	800878c <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*) string_buff, sizeof(string_buff), 100);
 8000bb6:	4639      	mov	r1, r7
 8000bb8:	2364      	movs	r3, #100	; 0x64
 8000bba:	221e      	movs	r2, #30
 8000bbc:	4809      	ldr	r0, [pc, #36]	; (8000be4 <sendUSART1int+0xa0>)
 8000bbe:	f003 fc05 	bl	80043cc <HAL_UART_Transmit>
		xEventGroupSetBits(xCreatedEventGroup1, 0x8);
 8000bc2:	4b03      	ldr	r3, [pc, #12]	; (8000bd0 <sendUSART1int+0x8c>)
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	2108      	movs	r1, #8
 8000bc8:	4618      	mov	r0, r3
 8000bca:	f004 f927 	bl	8004e1c <xEventGroupSetBits>
	{
 8000bce:	e7bc      	b.n	8000b4a <sendUSART1int+0x6>
 8000bd0:	20000604 	.word	0x20000604
 8000bd4:	20000520 	.word	0x20000520
 8000bd8:	20000528 	.word	0x20000528
 8000bdc:	20000529 	.word	0x20000529
 8000be0:	08008fd8 	.word	0x08008fd8
 8000be4:	20000494 	.word	0x20000494

08000be8 <sendUSART1char>:
	}
	 vTaskDelete(xTaskGetHandle("send data i"));
}
void sendUSART1char(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b08c      	sub	sp, #48	; 0x30
 8000bec:	af02      	add	r7, sp, #8
	for( ;; )
	{
		char string_buff[30] = {0};
 8000bee:	2300      	movs	r3, #0
 8000bf0:	603b      	str	r3, [r7, #0]
 8000bf2:	1d3b      	adds	r3, r7, #4
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	601a      	str	r2, [r3, #0]
 8000bf8:	605a      	str	r2, [r3, #4]
 8000bfa:	609a      	str	r2, [r3, #8]
 8000bfc:	60da      	str	r2, [r3, #12]
 8000bfe:	611a      	str	r2, [r3, #16]
 8000c00:	615a      	str	r2, [r3, #20]
 8000c02:	831a      	strh	r2, [r3, #24]
		BaseType_t res;
		uint8_t i = 0;
 8000c04:	2300      	movs	r3, #0
 8000c06:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		xEventGroupWaitBits(xCreatedEventGroup1, 0x1, pdTRUE, pdTRUE, portMAX_DELAY);
 8000c0a:	4b1c      	ldr	r3, [pc, #112]	; (8000c7c <sendUSART1char+0x94>)
 8000c0c:	6818      	ldr	r0, [r3, #0]
 8000c0e:	f04f 33ff 	mov.w	r3, #4294967295
 8000c12:	9300      	str	r3, [sp, #0]
 8000c14:	2301      	movs	r3, #1
 8000c16:	2201      	movs	r2, #1
 8000c18:	2101      	movs	r1, #1
 8000c1a:	f004 f831 	bl	8004c80 <xEventGroupWaitBits>
		do{
			res = xQueueReceive(buffer.queueh_clbrt, &string_buff[i], portMAX_DELAY);
 8000c1e:	4b18      	ldr	r3, [pc, #96]	; (8000c80 <sendUSART1char+0x98>)
 8000c20:	6858      	ldr	r0, [r3, #4]
 8000c22:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000c26:	463a      	mov	r2, r7
 8000c28:	4413      	add	r3, r2
 8000c2a:	f04f 32ff 	mov.w	r2, #4294967295
 8000c2e:	4619      	mov	r1, r3
 8000c30:	f004 fdc2 	bl	80057b8 <xQueueReceive>
 8000c34:	6238      	str	r0, [r7, #32]
			i++;
 8000c36:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000c3a:	3301      	adds	r3, #1
 8000c3c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		}while(res != errQUEUE_EMPTY && string_buff[i-1] != '\0');
 8000c40:	6a3b      	ldr	r3, [r7, #32]
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d008      	beq.n	8000c58 <sendUSART1char+0x70>
 8000c46:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000c4a:	3b01      	subs	r3, #1
 8000c4c:	3328      	adds	r3, #40	; 0x28
 8000c4e:	443b      	add	r3, r7
 8000c50:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d1e2      	bne.n	8000c1e <sendUSART1char+0x36>

		HAL_UART_Transmit(&huart1, (uint8_t*) string_buff, i+1, 100);
 8000c58:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000c5c:	b29b      	uxth	r3, r3
 8000c5e:	3301      	adds	r3, #1
 8000c60:	b29a      	uxth	r2, r3
 8000c62:	4639      	mov	r1, r7
 8000c64:	2364      	movs	r3, #100	; 0x64
 8000c66:	4807      	ldr	r0, [pc, #28]	; (8000c84 <sendUSART1char+0x9c>)
 8000c68:	f003 fbb0 	bl	80043cc <HAL_UART_Transmit>
		xEventGroupSetBits(xCreatedEventGroup1, 0x2);
 8000c6c:	4b03      	ldr	r3, [pc, #12]	; (8000c7c <sendUSART1char+0x94>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	2102      	movs	r1, #2
 8000c72:	4618      	mov	r0, r3
 8000c74:	f004 f8d2 	bl	8004e1c <xEventGroupSetBits>
	{
 8000c78:	e7b9      	b.n	8000bee <sendUSART1char+0x6>
 8000c7a:	bf00      	nop
 8000c7c:	20000604 	.word	0x20000604
 8000c80:	20000520 	.word	0x20000520
 8000c84:	20000494 	.word	0x20000494

08000c88 <receiveUSART1>:
	}
	 vTaskDelete(xTaskGetHandle("send data c"));
}

void receiveUSART1(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	af00      	add	r7, sp, #0
	for( ;; )
	{
		vTaskDelete(xTaskGetHandle("receive data"));
 8000c8c:	4803      	ldr	r0, [pc, #12]	; (8000c9c <receiveUSART1+0x14>)
 8000c8e:	f005 fcfb 	bl	8006688 <xTaskGetHandle>
 8000c92:	4603      	mov	r3, r0
 8000c94:	4618      	mov	r0, r3
 8000c96:	f005 faa3 	bl	80061e0 <vTaskDelete>
 8000c9a:	e7f7      	b.n	8000c8c <receiveUSART1+0x4>
 8000c9c:	08008f48 	.word	0x08008f48

08000ca0 <HAL_GPIO_EXTI_Callback>:
	}
	vTaskDelete(xTaskGetHandle("receive data"));
}

HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b082      	sub	sp, #8
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_2)
 8000caa:	88fb      	ldrh	r3, [r7, #6]
 8000cac:	2b04      	cmp	r3, #4
 8000cae:	d105      	bne.n	8000cbc <HAL_GPIO_EXTI_Callback+0x1c>
	{
		xSemaphoreGiveFromISR(xSemaphore1, NULL);
 8000cb0:	4b0a      	ldr	r3, [pc, #40]	; (8000cdc <HAL_GPIO_EXTI_Callback+0x3c>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	2100      	movs	r1, #0
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	f004 fcf0 	bl	800569c <xQueueGiveFromISR>
	}
	if(GPIO_Pin == GPIO_PIN_13)
 8000cbc:	88fb      	ldrh	r3, [r7, #6]
 8000cbe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000cc2:	d106      	bne.n	8000cd2 <HAL_GPIO_EXTI_Callback+0x32>
	{
		xEventGroupSetBitsFromISR(xCreatedEventGroup1, 0x10, pdFALSE);
 8000cc4:	4b06      	ldr	r3, [pc, #24]	; (8000ce0 <HAL_GPIO_EXTI_Callback+0x40>)
 8000cc6:	6819      	ldr	r1, [r3, #0]
 8000cc8:	2300      	movs	r3, #0
 8000cca:	2210      	movs	r2, #16
 8000ccc:	4805      	ldr	r0, [pc, #20]	; (8000ce4 <HAL_GPIO_EXTI_Callback+0x44>)
 8000cce:	f006 ff97 	bl	8007c00 <xTimerPendFunctionCallFromISR>
	}
}
 8000cd2:	bf00      	nop
 8000cd4:	3708      	adds	r7, #8
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	20000600 	.word	0x20000600
 8000ce0:	20000604 	.word	0x20000604
 8000ce4:	08004f33 	.word	0x08004f33

08000ce8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	b083      	sub	sp, #12
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
 8000cf0:	e7fe      	b.n	8000cf0 <StartDefaultTask+0x8>

08000cf2 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000cf2:	b580      	push	{r7, lr}
 8000cf4:	b082      	sub	sp, #8
 8000cf6:	af00      	add	r7, sp, #0
 8000cf8:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000d02:	d101      	bne.n	8000d08 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000d04:	f000 fa08 	bl	8001118 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000d08:	bf00      	nop
 8000d0a:	3708      	adds	r7, #8
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bd80      	pop	{r7, pc}

08000d10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d14:	b672      	cpsid	i
}
 8000d16:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d18:	e7fe      	b.n	8000d18 <Error_Handler+0x8>
	...

08000d1c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b082      	sub	sp, #8
 8000d20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d22:	4b11      	ldr	r3, [pc, #68]	; (8000d68 <HAL_MspInit+0x4c>)
 8000d24:	699b      	ldr	r3, [r3, #24]
 8000d26:	4a10      	ldr	r2, [pc, #64]	; (8000d68 <HAL_MspInit+0x4c>)
 8000d28:	f043 0301 	orr.w	r3, r3, #1
 8000d2c:	6193      	str	r3, [r2, #24]
 8000d2e:	4b0e      	ldr	r3, [pc, #56]	; (8000d68 <HAL_MspInit+0x4c>)
 8000d30:	699b      	ldr	r3, [r3, #24]
 8000d32:	f003 0301 	and.w	r3, r3, #1
 8000d36:	607b      	str	r3, [r7, #4]
 8000d38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d3a:	4b0b      	ldr	r3, [pc, #44]	; (8000d68 <HAL_MspInit+0x4c>)
 8000d3c:	69db      	ldr	r3, [r3, #28]
 8000d3e:	4a0a      	ldr	r2, [pc, #40]	; (8000d68 <HAL_MspInit+0x4c>)
 8000d40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d44:	61d3      	str	r3, [r2, #28]
 8000d46:	4b08      	ldr	r3, [pc, #32]	; (8000d68 <HAL_MspInit+0x4c>)
 8000d48:	69db      	ldr	r3, [r3, #28]
 8000d4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d4e:	603b      	str	r3, [r7, #0]
 8000d50:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000d52:	2200      	movs	r2, #0
 8000d54:	210f      	movs	r1, #15
 8000d56:	f06f 0001 	mvn.w	r0, #1
 8000d5a:	f001 f8db 	bl	8001f14 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d5e:	bf00      	nop
 8000d60:	3708      	adds	r7, #8
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	bf00      	nop
 8000d68:	40021000 	.word	0x40021000

08000d6c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b08a      	sub	sp, #40	; 0x28
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d74:	f107 0314 	add.w	r3, r7, #20
 8000d78:	2200      	movs	r2, #0
 8000d7a:	601a      	str	r2, [r3, #0]
 8000d7c:	605a      	str	r2, [r3, #4]
 8000d7e:	609a      	str	r2, [r3, #8]
 8000d80:	60da      	str	r2, [r3, #12]
 8000d82:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000d8c:	d14d      	bne.n	8000e2a <HAL_ADC_MspInit+0xbe>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000d8e:	4b29      	ldr	r3, [pc, #164]	; (8000e34 <HAL_ADC_MspInit+0xc8>)
 8000d90:	695b      	ldr	r3, [r3, #20]
 8000d92:	4a28      	ldr	r2, [pc, #160]	; (8000e34 <HAL_ADC_MspInit+0xc8>)
 8000d94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d98:	6153      	str	r3, [r2, #20]
 8000d9a:	4b26      	ldr	r3, [pc, #152]	; (8000e34 <HAL_ADC_MspInit+0xc8>)
 8000d9c:	695b      	ldr	r3, [r3, #20]
 8000d9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000da2:	613b      	str	r3, [r7, #16]
 8000da4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000da6:	4b23      	ldr	r3, [pc, #140]	; (8000e34 <HAL_ADC_MspInit+0xc8>)
 8000da8:	695b      	ldr	r3, [r3, #20]
 8000daa:	4a22      	ldr	r2, [pc, #136]	; (8000e34 <HAL_ADC_MspInit+0xc8>)
 8000dac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000db0:	6153      	str	r3, [r2, #20]
 8000db2:	4b20      	ldr	r3, [pc, #128]	; (8000e34 <HAL_ADC_MspInit+0xc8>)
 8000db4:	695b      	ldr	r3, [r3, #20]
 8000db6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dba:	60fb      	str	r3, [r7, #12]
 8000dbc:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000dbe:	2303      	movs	r3, #3
 8000dc0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000dc2:	2303      	movs	r3, #3
 8000dc4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dca:	f107 0314 	add.w	r3, r7, #20
 8000dce:	4619      	mov	r1, r3
 8000dd0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dd4:	f001 fa60 	bl	8002298 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000dd8:	4b17      	ldr	r3, [pc, #92]	; (8000e38 <HAL_ADC_MspInit+0xcc>)
 8000dda:	4a18      	ldr	r2, [pc, #96]	; (8000e3c <HAL_ADC_MspInit+0xd0>)
 8000ddc:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000dde:	4b16      	ldr	r3, [pc, #88]	; (8000e38 <HAL_ADC_MspInit+0xcc>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000de4:	4b14      	ldr	r3, [pc, #80]	; (8000e38 <HAL_ADC_MspInit+0xcc>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000dea:	4b13      	ldr	r3, [pc, #76]	; (8000e38 <HAL_ADC_MspInit+0xcc>)
 8000dec:	2280      	movs	r2, #128	; 0x80
 8000dee:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000df0:	4b11      	ldr	r3, [pc, #68]	; (8000e38 <HAL_ADC_MspInit+0xcc>)
 8000df2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000df6:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000df8:	4b0f      	ldr	r3, [pc, #60]	; (8000e38 <HAL_ADC_MspInit+0xcc>)
 8000dfa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000dfe:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000e00:	4b0d      	ldr	r3, [pc, #52]	; (8000e38 <HAL_ADC_MspInit+0xcc>)
 8000e02:	2220      	movs	r2, #32
 8000e04:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000e06:	4b0c      	ldr	r3, [pc, #48]	; (8000e38 <HAL_ADC_MspInit+0xcc>)
 8000e08:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8000e0c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000e0e:	480a      	ldr	r0, [pc, #40]	; (8000e38 <HAL_ADC_MspInit+0xcc>)
 8000e10:	f001 f8aa 	bl	8001f68 <HAL_DMA_Init>
 8000e14:	4603      	mov	r3, r0
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d001      	beq.n	8000e1e <HAL_ADC_MspInit+0xb2>
    {
      Error_Handler();
 8000e1a:	f7ff ff79 	bl	8000d10 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	4a05      	ldr	r2, [pc, #20]	; (8000e38 <HAL_ADC_MspInit+0xcc>)
 8000e22:	639a      	str	r2, [r3, #56]	; 0x38
 8000e24:	4a04      	ldr	r2, [pc, #16]	; (8000e38 <HAL_ADC_MspInit+0xcc>)
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000e2a:	bf00      	nop
 8000e2c:	3728      	adds	r7, #40	; 0x28
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	40021000 	.word	0x40021000
 8000e38:	20000450 	.word	0x20000450
 8000e3c:	40020008 	.word	0x40020008

08000e40 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b08a      	sub	sp, #40	; 0x28
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e48:	f107 0314 	add.w	r3, r7, #20
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	601a      	str	r2, [r3, #0]
 8000e50:	605a      	str	r2, [r3, #4]
 8000e52:	609a      	str	r2, [r3, #8]
 8000e54:	60da      	str	r2, [r3, #12]
 8000e56:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	4a17      	ldr	r2, [pc, #92]	; (8000ebc <HAL_UART_MspInit+0x7c>)
 8000e5e:	4293      	cmp	r3, r2
 8000e60:	d127      	bne.n	8000eb2 <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000e62:	4b17      	ldr	r3, [pc, #92]	; (8000ec0 <HAL_UART_MspInit+0x80>)
 8000e64:	699b      	ldr	r3, [r3, #24]
 8000e66:	4a16      	ldr	r2, [pc, #88]	; (8000ec0 <HAL_UART_MspInit+0x80>)
 8000e68:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e6c:	6193      	str	r3, [r2, #24]
 8000e6e:	4b14      	ldr	r3, [pc, #80]	; (8000ec0 <HAL_UART_MspInit+0x80>)
 8000e70:	699b      	ldr	r3, [r3, #24]
 8000e72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e76:	613b      	str	r3, [r7, #16]
 8000e78:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e7a:	4b11      	ldr	r3, [pc, #68]	; (8000ec0 <HAL_UART_MspInit+0x80>)
 8000e7c:	695b      	ldr	r3, [r3, #20]
 8000e7e:	4a10      	ldr	r2, [pc, #64]	; (8000ec0 <HAL_UART_MspInit+0x80>)
 8000e80:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000e84:	6153      	str	r3, [r2, #20]
 8000e86:	4b0e      	ldr	r3, [pc, #56]	; (8000ec0 <HAL_UART_MspInit+0x80>)
 8000e88:	695b      	ldr	r3, [r3, #20]
 8000e8a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000e8e:	60fb      	str	r3, [r7, #12]
 8000e90:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000e92:	2330      	movs	r3, #48	; 0x30
 8000e94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e96:	2302      	movs	r3, #2
 8000e98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e9e:	2303      	movs	r3, #3
 8000ea0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000ea2:	2307      	movs	r3, #7
 8000ea4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ea6:	f107 0314 	add.w	r3, r7, #20
 8000eaa:	4619      	mov	r1, r3
 8000eac:	4805      	ldr	r0, [pc, #20]	; (8000ec4 <HAL_UART_MspInit+0x84>)
 8000eae:	f001 f9f3 	bl	8002298 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000eb2:	bf00      	nop
 8000eb4:	3728      	adds	r7, #40	; 0x28
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	40013800 	.word	0x40013800
 8000ec0:	40021000 	.word	0x40021000
 8000ec4:	48000800 	.word	0x48000800

08000ec8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b08c      	sub	sp, #48	; 0x30
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM2 IRQ priority */
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0);
 8000ed8:	2200      	movs	r2, #0
 8000eda:	6879      	ldr	r1, [r7, #4]
 8000edc:	201c      	movs	r0, #28
 8000ede:	f001 f819 	bl	8001f14 <HAL_NVIC_SetPriority>

  /* Enable the TIM2 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000ee2:	201c      	movs	r0, #28
 8000ee4:	f001 f832 	bl	8001f4c <HAL_NVIC_EnableIRQ>

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8000ee8:	4b20      	ldr	r3, [pc, #128]	; (8000f6c <HAL_InitTick+0xa4>)
 8000eea:	69db      	ldr	r3, [r3, #28]
 8000eec:	4a1f      	ldr	r2, [pc, #124]	; (8000f6c <HAL_InitTick+0xa4>)
 8000eee:	f043 0301 	orr.w	r3, r3, #1
 8000ef2:	61d3      	str	r3, [r2, #28]
 8000ef4:	4b1d      	ldr	r3, [pc, #116]	; (8000f6c <HAL_InitTick+0xa4>)
 8000ef6:	69db      	ldr	r3, [r3, #28]
 8000ef8:	f003 0301 	and.w	r3, r3, #1
 8000efc:	60fb      	str	r3, [r7, #12]
 8000efe:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000f00:	f107 0210 	add.w	r2, r7, #16
 8000f04:	f107 0314 	add.w	r3, r7, #20
 8000f08:	4611      	mov	r1, r2
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f002 fdc2 	bl	8003a94 <HAL_RCC_GetClockConfig>

  /* Compute TIM2 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000f10:	f002 fd7c 	bl	8003a0c <HAL_RCC_GetPCLK1Freq>
 8000f14:	4603      	mov	r3, r0
 8000f16:	005b      	lsls	r3, r3, #1
 8000f18:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000f1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f1c:	4a14      	ldr	r2, [pc, #80]	; (8000f70 <HAL_InitTick+0xa8>)
 8000f1e:	fba2 2303 	umull	r2, r3, r2, r3
 8000f22:	0c9b      	lsrs	r3, r3, #18
 8000f24:	3b01      	subs	r3, #1
 8000f26:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8000f28:	4b12      	ldr	r3, [pc, #72]	; (8000f74 <HAL_InitTick+0xac>)
 8000f2a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f2e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8000f30:	4b10      	ldr	r3, [pc, #64]	; (8000f74 <HAL_InitTick+0xac>)
 8000f32:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000f36:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8000f38:	4a0e      	ldr	r2, [pc, #56]	; (8000f74 <HAL_InitTick+0xac>)
 8000f3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f3c:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8000f3e:	4b0d      	ldr	r3, [pc, #52]	; (8000f74 <HAL_InitTick+0xac>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f44:	4b0b      	ldr	r3, [pc, #44]	; (8000f74 <HAL_InitTick+0xac>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 8000f4a:	480a      	ldr	r0, [pc, #40]	; (8000f74 <HAL_InitTick+0xac>)
 8000f4c:	f002 ff66 	bl	8003e1c <HAL_TIM_Base_Init>
 8000f50:	4603      	mov	r3, r0
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d104      	bne.n	8000f60 <HAL_InitTick+0x98>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim2);
 8000f56:	4807      	ldr	r0, [pc, #28]	; (8000f74 <HAL_InitTick+0xac>)
 8000f58:	f002 ffc2 	bl	8003ee0 <HAL_TIM_Base_Start_IT>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	e000      	b.n	8000f62 <HAL_InitTick+0x9a>
  }

  /* Return function status */
  return HAL_ERROR;
 8000f60:	2301      	movs	r3, #1
}
 8000f62:	4618      	mov	r0, r3
 8000f64:	3730      	adds	r7, #48	; 0x30
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	40021000 	.word	0x40021000
 8000f70:	431bde83 	.word	0x431bde83
 8000f74:	20000608 	.word	0x20000608

08000f78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f7c:	e7fe      	b.n	8000f7c <NMI_Handler+0x4>

08000f7e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f7e:	b480      	push	{r7}
 8000f80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f82:	e7fe      	b.n	8000f82 <HardFault_Handler+0x4>

08000f84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f88:	e7fe      	b.n	8000f88 <MemManage_Handler+0x4>

08000f8a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f8a:	b480      	push	{r7}
 8000f8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f8e:	e7fe      	b.n	8000f8e <BusFault_Handler+0x4>

08000f90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f90:	b480      	push	{r7}
 8000f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f94:	e7fe      	b.n	8000f94 <UsageFault_Handler+0x4>

08000f96 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f96:	b480      	push	{r7}
 8000f98:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f9a:	bf00      	nop
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa2:	4770      	bx	lr

08000fa4 <EXTI2_TSC_IRQHandler>:

/**
  * @brief This function handles EXTI line2 and Touch Sense controller.
  */
void EXTI2_TSC_IRQHandler(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	af00      	add	r7, sp, #0
//		EXTI->PR |= (1<<2);
//		//xTaskNotifyFromISR(xTaskGetHandle("calibration"), 0, eNoAction, pdFALSE);
//		xSemaphoreGiveFromISR(xSemaphore1, pdTRUE);
//	}
  /* USER CODE END EXTI2_TSC_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8000fa8:	2004      	movs	r0, #4
 8000faa:	f001 fae7 	bl	800257c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_TSC_IRQn 1 */

  /* USER CODE END EXTI2_TSC_IRQn 1 */
}
 8000fae:	bf00      	nop
 8000fb0:	bd80      	pop	{r7, pc}

08000fb2 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8000fb2:	b580      	push	{r7, lr}
 8000fb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8000fb6:	2008      	movs	r0, #8
 8000fb8:	f001 fae0 	bl	800257c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8000fbc:	bf00      	nop
 8000fbe:	bd80      	pop	{r7, pc}

08000fc0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000fc4:	4802      	ldr	r0, [pc, #8]	; (8000fd0 <DMA1_Channel1_IRQHandler+0x10>)
 8000fc6:	f001 f875 	bl	80020b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000fca:	bf00      	nop
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	20000450 	.word	0x20000450

08000fd4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000fd8:	4802      	ldr	r0, [pc, #8]	; (8000fe4 <TIM2_IRQHandler+0x10>)
 8000fda:	f002 ffd5 	bl	8003f88 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000fde:	bf00      	nop
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	20000608 	.word	0x20000608

08000fe8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8000fec:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000ff0:	f001 fac4 	bl	800257c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8000ff4:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8000ff8:	f001 fac0 	bl	800257c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000ffc:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001000:	f001 fabc 	bl	800257c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001004:	bf00      	nop
 8001006:	bd80      	pop	{r7, pc}

08001008 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b086      	sub	sp, #24
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001010:	4a14      	ldr	r2, [pc, #80]	; (8001064 <_sbrk+0x5c>)
 8001012:	4b15      	ldr	r3, [pc, #84]	; (8001068 <_sbrk+0x60>)
 8001014:	1ad3      	subs	r3, r2, r3
 8001016:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001018:	697b      	ldr	r3, [r7, #20]
 800101a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800101c:	4b13      	ldr	r3, [pc, #76]	; (800106c <_sbrk+0x64>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	2b00      	cmp	r3, #0
 8001022:	d102      	bne.n	800102a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001024:	4b11      	ldr	r3, [pc, #68]	; (800106c <_sbrk+0x64>)
 8001026:	4a12      	ldr	r2, [pc, #72]	; (8001070 <_sbrk+0x68>)
 8001028:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800102a:	4b10      	ldr	r3, [pc, #64]	; (800106c <_sbrk+0x64>)
 800102c:	681a      	ldr	r2, [r3, #0]
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	4413      	add	r3, r2
 8001032:	693a      	ldr	r2, [r7, #16]
 8001034:	429a      	cmp	r2, r3
 8001036:	d207      	bcs.n	8001048 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001038:	f007 fa58 	bl	80084ec <__errno>
 800103c:	4603      	mov	r3, r0
 800103e:	220c      	movs	r2, #12
 8001040:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001042:	f04f 33ff 	mov.w	r3, #4294967295
 8001046:	e009      	b.n	800105c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001048:	4b08      	ldr	r3, [pc, #32]	; (800106c <_sbrk+0x64>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800104e:	4b07      	ldr	r3, [pc, #28]	; (800106c <_sbrk+0x64>)
 8001050:	681a      	ldr	r2, [r3, #0]
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	4413      	add	r3, r2
 8001056:	4a05      	ldr	r2, [pc, #20]	; (800106c <_sbrk+0x64>)
 8001058:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800105a:	68fb      	ldr	r3, [r7, #12]
}
 800105c:	4618      	mov	r0, r3
 800105e:	3718      	adds	r7, #24
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}
 8001064:	20004000 	.word	0x20004000
 8001068:	00000400 	.word	0x00000400
 800106c:	20000654 	.word	0x20000654
 8001070:	20002478 	.word	0x20002478

08001074 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001074:	b480      	push	{r7}
 8001076:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001078:	4b06      	ldr	r3, [pc, #24]	; (8001094 <SystemInit+0x20>)
 800107a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800107e:	4a05      	ldr	r2, [pc, #20]	; (8001094 <SystemInit+0x20>)
 8001080:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001084:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001088:	bf00      	nop
 800108a:	46bd      	mov	sp, r7
 800108c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop
 8001094:	e000ed00 	.word	0xe000ed00

08001098 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001098:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010d0 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 800109c:	f7ff ffea 	bl	8001074 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010a0:	480c      	ldr	r0, [pc, #48]	; (80010d4 <LoopForever+0x6>)
  ldr r1, =_edata
 80010a2:	490d      	ldr	r1, [pc, #52]	; (80010d8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80010a4:	4a0d      	ldr	r2, [pc, #52]	; (80010dc <LoopForever+0xe>)
  movs r3, #0
 80010a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010a8:	e002      	b.n	80010b0 <LoopCopyDataInit>

080010aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010ae:	3304      	adds	r3, #4

080010b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010b4:	d3f9      	bcc.n	80010aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010b6:	4a0a      	ldr	r2, [pc, #40]	; (80010e0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80010b8:	4c0a      	ldr	r4, [pc, #40]	; (80010e4 <LoopForever+0x16>)
  movs r3, #0
 80010ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010bc:	e001      	b.n	80010c2 <LoopFillZerobss>

080010be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010c0:	3204      	adds	r2, #4

080010c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010c4:	d3fb      	bcc.n	80010be <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80010c6:	f007 fa17 	bl	80084f8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80010ca:	f7ff f91b 	bl	8000304 <main>

080010ce <LoopForever>:

LoopForever:
    b LoopForever
 80010ce:	e7fe      	b.n	80010ce <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80010d0:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 80010d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010d8:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80010dc:	080090cc 	.word	0x080090cc
  ldr r2, =_sbss
 80010e0:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80010e4:	20002474 	.word	0x20002474

080010e8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80010e8:	e7fe      	b.n	80010e8 <ADC1_IRQHandler>
	...

080010ec <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010f0:	4b08      	ldr	r3, [pc, #32]	; (8001114 <HAL_Init+0x28>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	4a07      	ldr	r2, [pc, #28]	; (8001114 <HAL_Init+0x28>)
 80010f6:	f043 0310 	orr.w	r3, r3, #16
 80010fa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010fc:	2003      	movs	r0, #3
 80010fe:	f000 fefe 	bl	8001efe <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001102:	200f      	movs	r0, #15
 8001104:	f7ff fee0 	bl	8000ec8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001108:	f7ff fe08 	bl	8000d1c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800110c:	2300      	movs	r3, #0
}
 800110e:	4618      	mov	r0, r3
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	40022000 	.word	0x40022000

08001118 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001118:	b480      	push	{r7}
 800111a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800111c:	4b06      	ldr	r3, [pc, #24]	; (8001138 <HAL_IncTick+0x20>)
 800111e:	781b      	ldrb	r3, [r3, #0]
 8001120:	461a      	mov	r2, r3
 8001122:	4b06      	ldr	r3, [pc, #24]	; (800113c <HAL_IncTick+0x24>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	4413      	add	r3, r2
 8001128:	4a04      	ldr	r2, [pc, #16]	; (800113c <HAL_IncTick+0x24>)
 800112a:	6013      	str	r3, [r2, #0]
}
 800112c:	bf00      	nop
 800112e:	46bd      	mov	sp, r7
 8001130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001134:	4770      	bx	lr
 8001136:	bf00      	nop
 8001138:	20000008 	.word	0x20000008
 800113c:	20000658 	.word	0x20000658

08001140 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001140:	b480      	push	{r7}
 8001142:	af00      	add	r7, sp, #0
  return uwTick;  
 8001144:	4b03      	ldr	r3, [pc, #12]	; (8001154 <HAL_GetTick+0x14>)
 8001146:	681b      	ldr	r3, [r3, #0]
}
 8001148:	4618      	mov	r0, r3
 800114a:	46bd      	mov	sp, r7
 800114c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001150:	4770      	bx	lr
 8001152:	bf00      	nop
 8001154:	20000658 	.word	0x20000658

08001158 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001158:	b480      	push	{r7}
 800115a:	b083      	sub	sp, #12
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001160:	bf00      	nop
 8001162:	370c      	adds	r7, #12
 8001164:	46bd      	mov	sp, r7
 8001166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116a:	4770      	bx	lr

0800116c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800116c:	b480      	push	{r7}
 800116e:	b083      	sub	sp, #12
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001174:	bf00      	nop
 8001176:	370c      	adds	r7, #12
 8001178:	46bd      	mov	sp, r7
 800117a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117e:	4770      	bx	lr

08001180 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001180:	b480      	push	{r7}
 8001182:	b083      	sub	sp, #12
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001188:	bf00      	nop
 800118a:	370c      	adds	r7, #12
 800118c:	46bd      	mov	sp, r7
 800118e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001192:	4770      	bx	lr

08001194 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b09a      	sub	sp, #104	; 0x68
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800119c:	2300      	movs	r3, #0
 800119e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 80011a2:	2300      	movs	r3, #0
 80011a4:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 80011a6:	2300      	movs	r3, #0
 80011a8:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d101      	bne.n	80011b4 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 80011b0:	2301      	movs	r3, #1
 80011b2:	e169      	b.n	8001488 <HAL_ADC_Init+0x2f4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	691b      	ldr	r3, [r3, #16]
 80011b8:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011be:	f003 0310 	and.w	r3, r3, #16
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d176      	bne.n	80012b4 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d152      	bne.n	8001274 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	2200      	movs	r2, #0
 80011d2:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	2200      	movs	r2, #0
 80011d8:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	2200      	movs	r2, #0
 80011de:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	2200      	movs	r2, #0
 80011e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80011e8:	6878      	ldr	r0, [r7, #4]
 80011ea:	f7ff fdbf 	bl	8000d6c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	689b      	ldr	r3, [r3, #8]
 80011f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d13b      	bne.n	8001274 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 80011fc:	6878      	ldr	r0, [r7, #4]
 80011fe:	f000 fd6b 	bl	8001cd8 <ADC_Disable>
 8001202:	4603      	mov	r3, r0
 8001204:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800120c:	f003 0310 	and.w	r3, r3, #16
 8001210:	2b00      	cmp	r3, #0
 8001212:	d12f      	bne.n	8001274 <HAL_ADC_Init+0xe0>
 8001214:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001218:	2b00      	cmp	r3, #0
 800121a:	d12b      	bne.n	8001274 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001220:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001224:	f023 0302 	bic.w	r3, r3, #2
 8001228:	f043 0202 	orr.w	r2, r3, #2
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	689a      	ldr	r2, [r3, #8]
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800123e:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	689a      	ldr	r2, [r3, #8]
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800124e:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001250:	4b8f      	ldr	r3, [pc, #572]	; (8001490 <HAL_ADC_Init+0x2fc>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	4a8f      	ldr	r2, [pc, #572]	; (8001494 <HAL_ADC_Init+0x300>)
 8001256:	fba2 2303 	umull	r2, r3, r2, r3
 800125a:	0c9a      	lsrs	r2, r3, #18
 800125c:	4613      	mov	r3, r2
 800125e:	009b      	lsls	r3, r3, #2
 8001260:	4413      	add	r3, r2
 8001262:	005b      	lsls	r3, r3, #1
 8001264:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001266:	e002      	b.n	800126e <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8001268:	68bb      	ldr	r3, [r7, #8]
 800126a:	3b01      	subs	r3, #1
 800126c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800126e:	68bb      	ldr	r3, [r7, #8]
 8001270:	2b00      	cmp	r3, #0
 8001272:	d1f9      	bne.n	8001268 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	689b      	ldr	r3, [r3, #8]
 800127a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800127e:	2b00      	cmp	r3, #0
 8001280:	d007      	beq.n	8001292 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	689b      	ldr	r3, [r3, #8]
 8001288:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 800128c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001290:	d110      	bne.n	80012b4 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001296:	f023 0312 	bic.w	r3, r3, #18
 800129a:	f043 0210 	orr.w	r2, r3, #16
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012a6:	f043 0201 	orr.w	r2, r3, #1
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 80012ae:	2301      	movs	r3, #1
 80012b0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b8:	f003 0310 	and.w	r3, r3, #16
 80012bc:	2b00      	cmp	r3, #0
 80012be:	f040 80d6 	bne.w	800146e <HAL_ADC_Init+0x2da>
 80012c2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	f040 80d1 	bne.w	800146e <HAL_ADC_Init+0x2da>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	689b      	ldr	r3, [r3, #8]
 80012d2:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	f040 80c9 	bne.w	800146e <HAL_ADC_Init+0x2da>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012e0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80012e4:	f043 0202 	orr.w	r2, r3, #2
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80012ec:	4b6a      	ldr	r3, [pc, #424]	; (8001498 <HAL_ADC_Init+0x304>)
 80012ee:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80012f0:	2300      	movs	r3, #0
 80012f2:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	689b      	ldr	r3, [r3, #8]
 80012fa:	f003 0303 	and.w	r3, r3, #3
 80012fe:	2b01      	cmp	r3, #1
 8001300:	d108      	bne.n	8001314 <HAL_ADC_Init+0x180>
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	f003 0301 	and.w	r3, r3, #1
 800130c:	2b01      	cmp	r3, #1
 800130e:	d101      	bne.n	8001314 <HAL_ADC_Init+0x180>
 8001310:	2301      	movs	r3, #1
 8001312:	e000      	b.n	8001316 <HAL_ADC_Init+0x182>
 8001314:	2300      	movs	r3, #0
 8001316:	2b00      	cmp	r3, #0
 8001318:	d11c      	bne.n	8001354 <HAL_ADC_Init+0x1c0>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800131a:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800131c:	2b00      	cmp	r3, #0
 800131e:	d010      	beq.n	8001342 <HAL_ADC_Init+0x1ae>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	689b      	ldr	r3, [r3, #8]
 8001324:	f003 0303 	and.w	r3, r3, #3
 8001328:	2b01      	cmp	r3, #1
 800132a:	d107      	bne.n	800133c <HAL_ADC_Init+0x1a8>
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	f003 0301 	and.w	r3, r3, #1
 8001334:	2b01      	cmp	r3, #1
 8001336:	d101      	bne.n	800133c <HAL_ADC_Init+0x1a8>
 8001338:	2301      	movs	r3, #1
 800133a:	e000      	b.n	800133e <HAL_ADC_Init+0x1aa>
 800133c:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800133e:	2b00      	cmp	r3, #0
 8001340:	d108      	bne.n	8001354 <HAL_ADC_Init+0x1c0>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8001342:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001344:	689b      	ldr	r3, [r3, #8]
 8001346:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	685b      	ldr	r3, [r3, #4]
 800134e:	431a      	orrs	r2, r3
 8001350:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001352:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	7e5b      	ldrb	r3, [r3, #25]
 8001358:	035b      	lsls	r3, r3, #13
 800135a:	687a      	ldr	r2, [r7, #4]
 800135c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800135e:	2a01      	cmp	r2, #1
 8001360:	d002      	beq.n	8001368 <HAL_ADC_Init+0x1d4>
 8001362:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001366:	e000      	b.n	800136a <HAL_ADC_Init+0x1d6>
 8001368:	2200      	movs	r2, #0
 800136a:	431a      	orrs	r2, r3
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	68db      	ldr	r3, [r3, #12]
 8001370:	431a      	orrs	r2, r3
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	689b      	ldr	r3, [r3, #8]
 8001376:	4313      	orrs	r3, r2
 8001378:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800137a:	4313      	orrs	r3, r2
 800137c:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001384:	2b01      	cmp	r3, #1
 8001386:	d11b      	bne.n	80013c0 <HAL_ADC_Init+0x22c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	7e5b      	ldrb	r3, [r3, #25]
 800138c:	2b00      	cmp	r3, #0
 800138e:	d109      	bne.n	80013a4 <HAL_ADC_Init+0x210>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001394:	3b01      	subs	r3, #1
 8001396:	045a      	lsls	r2, r3, #17
 8001398:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800139a:	4313      	orrs	r3, r2
 800139c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013a0:	663b      	str	r3, [r7, #96]	; 0x60
 80013a2:	e00d      	b.n	80013c0 <HAL_ADC_Init+0x22c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013a8:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80013ac:	f043 0220 	orr.w	r2, r3, #32
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013b8:	f043 0201 	orr.w	r2, r3, #1
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013c4:	2b01      	cmp	r3, #1
 80013c6:	d007      	beq.n	80013d8 <HAL_ADC_Init+0x244>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013d0:	4313      	orrs	r3, r2
 80013d2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80013d4:	4313      	orrs	r3, r2
 80013d6:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	689b      	ldr	r3, [r3, #8]
 80013de:	f003 030c 	and.w	r3, r3, #12
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d114      	bne.n	8001410 <HAL_ADC_Init+0x27c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	68db      	ldr	r3, [r3, #12]
 80013ec:	687a      	ldr	r2, [r7, #4]
 80013ee:	6812      	ldr	r2, [r2, #0]
 80013f0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80013f4:	f023 0302 	bic.w	r3, r3, #2
 80013f8:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	7e1b      	ldrb	r3, [r3, #24]
 80013fe:	039a      	lsls	r2, r3, #14
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001406:	005b      	lsls	r3, r3, #1
 8001408:	4313      	orrs	r3, r2
 800140a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800140c:	4313      	orrs	r3, r2
 800140e:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	68da      	ldr	r2, [r3, #12]
 8001416:	4b21      	ldr	r3, [pc, #132]	; (800149c <HAL_ADC_Init+0x308>)
 8001418:	4013      	ands	r3, r2
 800141a:	687a      	ldr	r2, [r7, #4]
 800141c:	6812      	ldr	r2, [r2, #0]
 800141e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8001420:	430b      	orrs	r3, r1
 8001422:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	691b      	ldr	r3, [r3, #16]
 8001428:	2b01      	cmp	r3, #1
 800142a:	d10c      	bne.n	8001446 <HAL_ADC_Init+0x2b2>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001432:	f023 010f 	bic.w	r1, r3, #15
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	69db      	ldr	r3, [r3, #28]
 800143a:	1e5a      	subs	r2, r3, #1
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	430a      	orrs	r2, r1
 8001442:	631a      	str	r2, [r3, #48]	; 0x30
 8001444:	e007      	b.n	8001456 <HAL_ADC_Init+0x2c2>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	f022 020f 	bic.w	r2, r2, #15
 8001454:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	2200      	movs	r2, #0
 800145a:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001460:	f023 0303 	bic.w	r3, r3, #3
 8001464:	f043 0201 	orr.w	r2, r3, #1
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	641a      	str	r2, [r3, #64]	; 0x40
 800146c:	e00a      	b.n	8001484 <HAL_ADC_Init+0x2f0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001472:	f023 0312 	bic.w	r3, r3, #18
 8001476:	f043 0210 	orr.w	r2, r3, #16
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 800147e:	2301      	movs	r3, #1
 8001480:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8001484:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001488:	4618      	mov	r0, r3
 800148a:	3768      	adds	r7, #104	; 0x68
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}
 8001490:	20000000 	.word	0x20000000
 8001494:	431bde83 	.word	0x431bde83
 8001498:	50000300 	.word	0x50000300
 800149c:	fff0c007 	.word	0xfff0c007

080014a0 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b086      	sub	sp, #24
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	60f8      	str	r0, [r7, #12]
 80014a8:	60b9      	str	r1, [r7, #8]
 80014aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80014ac:	2300      	movs	r3, #0
 80014ae:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	689b      	ldr	r3, [r3, #8]
 80014b6:	f003 0304 	and.w	r3, r3, #4
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d17e      	bne.n	80015bc <HAL_ADC_Start_DMA+0x11c>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80014c4:	2b01      	cmp	r3, #1
 80014c6:	d101      	bne.n	80014cc <HAL_ADC_Start_DMA+0x2c>
 80014c8:	2302      	movs	r3, #2
 80014ca:	e07a      	b.n	80015c2 <HAL_ADC_Start_DMA+0x122>
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	2201      	movs	r2, #1
 80014d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* If multimode is enabled, dedicated function multimode conversion       */
    /* start DMA must be used.                                                */
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80014d4:	68f8      	ldr	r0, [r7, #12]
 80014d6:	f000 fb9b 	bl	8001c10 <ADC_Enable>
 80014da:	4603      	mov	r3, r0
 80014dc:	75fb      	strb	r3, [r7, #23]
      
      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80014de:	7dfb      	ldrb	r3, [r7, #23]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d166      	bne.n	80015b2 <HAL_ADC_Start_DMA+0x112>
      {
        /* Set ADC state                                                      */
        /* - Clear state bitfield related to regular group conversion results */
        /* - Set state bitfield related to regular operation                  */
        ADC_STATE_CLR_SET(hadc->State,
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014e8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80014ec:	f023 0301 	bic.w	r3, r3, #1
 80014f0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	641a      	str	r2, [r3, #64]	; 0x40
        /* for all cases of multimode: independent mode, multimode ADC master */
        /* or multimode ADC slave (for devices with several ADCs):            */
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
        {
          /* Set ADC state (ADC independent or master) */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014fc:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	68db      	ldr	r3, [r3, #12]
 800150a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800150e:	2b00      	cmp	r3, #0
 8001510:	d007      	beq.n	8001522 <HAL_ADC_Start_DMA+0x82>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001516:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800151a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	641a      	str	r2, [r3, #64]	; 0x40
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
          }
        }
        
        /* State machine update: Check if an injected conversion is ongoing */
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001526:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800152a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800152e:	d106      	bne.n	800153e <HAL_ADC_Start_DMA+0x9e>
        {
          /* Reset ADC error code fields related to conversions on group regular*/
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001534:	f023 0206 	bic.w	r2, r3, #6
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	645a      	str	r2, [r3, #68]	; 0x44
 800153c:	e002      	b.n	8001544 <HAL_ADC_Start_DMA+0xa4>
        }
        else
        {
          /* Reset ADC all error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	2200      	movs	r2, #0
 8001542:	645a      	str	r2, [r3, #68]	; 0x44
        }
        
        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	2200      	movs	r2, #0
 8001548:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        
        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001550:	4a1e      	ldr	r2, [pc, #120]	; (80015cc <HAL_ADC_Start_DMA+0x12c>)
 8001552:	629a      	str	r2, [r3, #40]	; 0x28

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001558:	4a1d      	ldr	r2, [pc, #116]	; (80015d0 <HAL_ADC_Start_DMA+0x130>)
 800155a:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001560:	4a1c      	ldr	r2, [pc, #112]	; (80015d4 <HAL_ADC_Start_DMA+0x134>)
 8001562:	631a      	str	r2, [r3, #48]	; 0x30
        /* start (in case of SW start):                                       */
        
        /* Clear regular group conversion flag and overrun flag */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	221c      	movs	r2, #28
 800156a:	601a      	str	r2, [r3, #0]
        
        /* Enable ADC overrun interrupt */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	685a      	ldr	r2, [r3, #4]
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f042 0210 	orr.w	r2, r2, #16
 800157a:	605a      	str	r2, [r3, #4]
        
        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	68da      	ldr	r2, [r3, #12]
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f042 0201 	orr.w	r2, r2, #1
 800158a:	60da      	str	r2, [r3, #12]
        
        /* Start the DMA channel */
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	3340      	adds	r3, #64	; 0x40
 8001596:	4619      	mov	r1, r3
 8001598:	68ba      	ldr	r2, [r7, #8]
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	f000 fd2b 	bl	8001ff6 <HAL_DMA_Start_IT>
                 
        /* Enable conversion of regular group.                                */
        /* If software start has been selected, conversion starts immediately.*/
        /* If external trigger has been selected, conversion will start at    */
        /* next trigger event.                                                */
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	689a      	ldr	r2, [r3, #8]
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f042 0204 	orr.w	r2, r2, #4
 80015ae:	609a      	str	r2, [r3, #8]
 80015b0:	e006      	b.n	80015c0 <HAL_ADC_Start_DMA+0x120>
        
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	2200      	movs	r2, #0
 80015b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80015ba:	e001      	b.n	80015c0 <HAL_ADC_Start_DMA+0x120>
      __HAL_UNLOCK(hadc);
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80015bc:	2302      	movs	r3, #2
 80015be:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80015c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80015c2:	4618      	mov	r0, r3
 80015c4:	3718      	adds	r7, #24
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	08001b45 	.word	0x08001b45
 80015d0:	08001bbf 	.word	0x08001bbf
 80015d4:	08001bdb 	.word	0x08001bdb

080015d8 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80015d8:	b480      	push	{r7}
 80015da:	b09b      	sub	sp, #108	; 0x6c
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
 80015e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80015e2:	2300      	movs	r3, #0
 80015e4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 80015e8:	2300      	movs	r3, #0
 80015ea:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80015f2:	2b01      	cmp	r3, #1
 80015f4:	d101      	bne.n	80015fa <HAL_ADC_ConfigChannel+0x22>
 80015f6:	2302      	movs	r3, #2
 80015f8:	e299      	b.n	8001b2e <HAL_ADC_ConfigChannel+0x556>
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	2201      	movs	r2, #1
 80015fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	689b      	ldr	r3, [r3, #8]
 8001608:	f003 0304 	and.w	r3, r3, #4
 800160c:	2b00      	cmp	r3, #0
 800160e:	f040 827d 	bne.w	8001b0c <HAL_ADC_ConfigChannel+0x534>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	2b04      	cmp	r3, #4
 8001618:	d81c      	bhi.n	8001654 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	685a      	ldr	r2, [r3, #4]
 8001624:	4613      	mov	r3, r2
 8001626:	005b      	lsls	r3, r3, #1
 8001628:	4413      	add	r3, r2
 800162a:	005b      	lsls	r3, r3, #1
 800162c:	461a      	mov	r2, r3
 800162e:	231f      	movs	r3, #31
 8001630:	4093      	lsls	r3, r2
 8001632:	43db      	mvns	r3, r3
 8001634:	4019      	ands	r1, r3
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	6818      	ldr	r0, [r3, #0]
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	685a      	ldr	r2, [r3, #4]
 800163e:	4613      	mov	r3, r2
 8001640:	005b      	lsls	r3, r3, #1
 8001642:	4413      	add	r3, r2
 8001644:	005b      	lsls	r3, r3, #1
 8001646:	fa00 f203 	lsl.w	r2, r0, r3
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	430a      	orrs	r2, r1
 8001650:	631a      	str	r2, [r3, #48]	; 0x30
 8001652:	e063      	b.n	800171c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	2b09      	cmp	r3, #9
 800165a:	d81e      	bhi.n	800169a <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	685a      	ldr	r2, [r3, #4]
 8001666:	4613      	mov	r3, r2
 8001668:	005b      	lsls	r3, r3, #1
 800166a:	4413      	add	r3, r2
 800166c:	005b      	lsls	r3, r3, #1
 800166e:	3b1e      	subs	r3, #30
 8001670:	221f      	movs	r2, #31
 8001672:	fa02 f303 	lsl.w	r3, r2, r3
 8001676:	43db      	mvns	r3, r3
 8001678:	4019      	ands	r1, r3
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	6818      	ldr	r0, [r3, #0]
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	685a      	ldr	r2, [r3, #4]
 8001682:	4613      	mov	r3, r2
 8001684:	005b      	lsls	r3, r3, #1
 8001686:	4413      	add	r3, r2
 8001688:	005b      	lsls	r3, r3, #1
 800168a:	3b1e      	subs	r3, #30
 800168c:	fa00 f203 	lsl.w	r2, r0, r3
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	430a      	orrs	r2, r1
 8001696:	635a      	str	r2, [r3, #52]	; 0x34
 8001698:	e040      	b.n	800171c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	685b      	ldr	r3, [r3, #4]
 800169e:	2b0e      	cmp	r3, #14
 80016a0:	d81e      	bhi.n	80016e0 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	685a      	ldr	r2, [r3, #4]
 80016ac:	4613      	mov	r3, r2
 80016ae:	005b      	lsls	r3, r3, #1
 80016b0:	4413      	add	r3, r2
 80016b2:	005b      	lsls	r3, r3, #1
 80016b4:	3b3c      	subs	r3, #60	; 0x3c
 80016b6:	221f      	movs	r2, #31
 80016b8:	fa02 f303 	lsl.w	r3, r2, r3
 80016bc:	43db      	mvns	r3, r3
 80016be:	4019      	ands	r1, r3
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	6818      	ldr	r0, [r3, #0]
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	685a      	ldr	r2, [r3, #4]
 80016c8:	4613      	mov	r3, r2
 80016ca:	005b      	lsls	r3, r3, #1
 80016cc:	4413      	add	r3, r2
 80016ce:	005b      	lsls	r3, r3, #1
 80016d0:	3b3c      	subs	r3, #60	; 0x3c
 80016d2:	fa00 f203 	lsl.w	r2, r0, r3
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	430a      	orrs	r2, r1
 80016dc:	639a      	str	r2, [r3, #56]	; 0x38
 80016de:	e01d      	b.n	800171c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	685a      	ldr	r2, [r3, #4]
 80016ea:	4613      	mov	r3, r2
 80016ec:	005b      	lsls	r3, r3, #1
 80016ee:	4413      	add	r3, r2
 80016f0:	005b      	lsls	r3, r3, #1
 80016f2:	3b5a      	subs	r3, #90	; 0x5a
 80016f4:	221f      	movs	r2, #31
 80016f6:	fa02 f303 	lsl.w	r3, r2, r3
 80016fa:	43db      	mvns	r3, r3
 80016fc:	4019      	ands	r1, r3
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	6818      	ldr	r0, [r3, #0]
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	685a      	ldr	r2, [r3, #4]
 8001706:	4613      	mov	r3, r2
 8001708:	005b      	lsls	r3, r3, #1
 800170a:	4413      	add	r3, r2
 800170c:	005b      	lsls	r3, r3, #1
 800170e:	3b5a      	subs	r3, #90	; 0x5a
 8001710:	fa00 f203 	lsl.w	r2, r0, r3
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	430a      	orrs	r2, r1
 800171a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	689b      	ldr	r3, [r3, #8]
 8001722:	f003 030c 	and.w	r3, r3, #12
 8001726:	2b00      	cmp	r3, #0
 8001728:	f040 80e5 	bne.w	80018f6 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	2b09      	cmp	r3, #9
 8001732:	d91c      	bls.n	800176e <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	6999      	ldr	r1, [r3, #24]
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	681a      	ldr	r2, [r3, #0]
 800173e:	4613      	mov	r3, r2
 8001740:	005b      	lsls	r3, r3, #1
 8001742:	4413      	add	r3, r2
 8001744:	3b1e      	subs	r3, #30
 8001746:	2207      	movs	r2, #7
 8001748:	fa02 f303 	lsl.w	r3, r2, r3
 800174c:	43db      	mvns	r3, r3
 800174e:	4019      	ands	r1, r3
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	6898      	ldr	r0, [r3, #8]
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	681a      	ldr	r2, [r3, #0]
 8001758:	4613      	mov	r3, r2
 800175a:	005b      	lsls	r3, r3, #1
 800175c:	4413      	add	r3, r2
 800175e:	3b1e      	subs	r3, #30
 8001760:	fa00 f203 	lsl.w	r2, r0, r3
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	430a      	orrs	r2, r1
 800176a:	619a      	str	r2, [r3, #24]
 800176c:	e019      	b.n	80017a2 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	6959      	ldr	r1, [r3, #20]
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	681a      	ldr	r2, [r3, #0]
 8001778:	4613      	mov	r3, r2
 800177a:	005b      	lsls	r3, r3, #1
 800177c:	4413      	add	r3, r2
 800177e:	2207      	movs	r2, #7
 8001780:	fa02 f303 	lsl.w	r3, r2, r3
 8001784:	43db      	mvns	r3, r3
 8001786:	4019      	ands	r1, r3
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	6898      	ldr	r0, [r3, #8]
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	681a      	ldr	r2, [r3, #0]
 8001790:	4613      	mov	r3, r2
 8001792:	005b      	lsls	r3, r3, #1
 8001794:	4413      	add	r3, r2
 8001796:	fa00 f203 	lsl.w	r2, r0, r3
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	430a      	orrs	r2, r1
 80017a0:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	695a      	ldr	r2, [r3, #20]
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	68db      	ldr	r3, [r3, #12]
 80017ac:	08db      	lsrs	r3, r3, #3
 80017ae:	f003 0303 	and.w	r3, r3, #3
 80017b2:	005b      	lsls	r3, r3, #1
 80017b4:	fa02 f303 	lsl.w	r3, r2, r3
 80017b8:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	691b      	ldr	r3, [r3, #16]
 80017be:	3b01      	subs	r3, #1
 80017c0:	2b03      	cmp	r3, #3
 80017c2:	d84f      	bhi.n	8001864 <HAL_ADC_ConfigChannel+0x28c>
 80017c4:	a201      	add	r2, pc, #4	; (adr r2, 80017cc <HAL_ADC_ConfigChannel+0x1f4>)
 80017c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017ca:	bf00      	nop
 80017cc:	080017dd 	.word	0x080017dd
 80017d0:	080017ff 	.word	0x080017ff
 80017d4:	08001821 	.word	0x08001821
 80017d8:	08001843 	.word	0x08001843
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80017e2:	4b99      	ldr	r3, [pc, #612]	; (8001a48 <HAL_ADC_ConfigChannel+0x470>)
 80017e4:	4013      	ands	r3, r2
 80017e6:	683a      	ldr	r2, [r7, #0]
 80017e8:	6812      	ldr	r2, [r2, #0]
 80017ea:	0691      	lsls	r1, r2, #26
 80017ec:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80017ee:	430a      	orrs	r2, r1
 80017f0:	431a      	orrs	r2, r3
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80017fa:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80017fc:	e07e      	b.n	80018fc <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001804:	4b90      	ldr	r3, [pc, #576]	; (8001a48 <HAL_ADC_ConfigChannel+0x470>)
 8001806:	4013      	ands	r3, r2
 8001808:	683a      	ldr	r2, [r7, #0]
 800180a:	6812      	ldr	r2, [r2, #0]
 800180c:	0691      	lsls	r1, r2, #26
 800180e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001810:	430a      	orrs	r2, r1
 8001812:	431a      	orrs	r2, r3
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800181c:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800181e:	e06d      	b.n	80018fc <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001826:	4b88      	ldr	r3, [pc, #544]	; (8001a48 <HAL_ADC_ConfigChannel+0x470>)
 8001828:	4013      	ands	r3, r2
 800182a:	683a      	ldr	r2, [r7, #0]
 800182c:	6812      	ldr	r2, [r2, #0]
 800182e:	0691      	lsls	r1, r2, #26
 8001830:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001832:	430a      	orrs	r2, r1
 8001834:	431a      	orrs	r2, r3
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800183e:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001840:	e05c      	b.n	80018fc <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001848:	4b7f      	ldr	r3, [pc, #508]	; (8001a48 <HAL_ADC_ConfigChannel+0x470>)
 800184a:	4013      	ands	r3, r2
 800184c:	683a      	ldr	r2, [r7, #0]
 800184e:	6812      	ldr	r2, [r2, #0]
 8001850:	0691      	lsls	r1, r2, #26
 8001852:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001854:	430a      	orrs	r2, r1
 8001856:	431a      	orrs	r2, r3
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001860:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001862:	e04b      	b.n	80018fc <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800186a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	069b      	lsls	r3, r3, #26
 8001874:	429a      	cmp	r2, r3
 8001876:	d107      	bne.n	8001888 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001886:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800188e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	069b      	lsls	r3, r3, #26
 8001898:	429a      	cmp	r2, r3
 800189a:	d107      	bne.n	80018ac <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80018aa:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80018b2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	069b      	lsls	r3, r3, #26
 80018bc:	429a      	cmp	r2, r3
 80018be:	d107      	bne.n	80018d0 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80018ce:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80018d6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	069b      	lsls	r3, r3, #26
 80018e0:	429a      	cmp	r2, r3
 80018e2:	d10a      	bne.n	80018fa <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80018f2:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 80018f4:	e001      	b.n	80018fa <HAL_ADC_ConfigChannel+0x322>
    }

  }
 80018f6:	bf00      	nop
 80018f8:	e000      	b.n	80018fc <HAL_ADC_ConfigChannel+0x324>
      break;
 80018fa:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	689b      	ldr	r3, [r3, #8]
 8001902:	f003 0303 	and.w	r3, r3, #3
 8001906:	2b01      	cmp	r3, #1
 8001908:	d108      	bne.n	800191c <HAL_ADC_ConfigChannel+0x344>
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f003 0301 	and.w	r3, r3, #1
 8001914:	2b01      	cmp	r3, #1
 8001916:	d101      	bne.n	800191c <HAL_ADC_ConfigChannel+0x344>
 8001918:	2301      	movs	r3, #1
 800191a:	e000      	b.n	800191e <HAL_ADC_ConfigChannel+0x346>
 800191c:	2300      	movs	r3, #0
 800191e:	2b00      	cmp	r3, #0
 8001920:	f040 80ff 	bne.w	8001b22 <HAL_ADC_ConfigChannel+0x54a>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	68db      	ldr	r3, [r3, #12]
 8001928:	2b01      	cmp	r3, #1
 800192a:	d00f      	beq.n	800194c <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	2201      	movs	r2, #1
 800193a:	fa02 f303 	lsl.w	r3, r2, r3
 800193e:	43da      	mvns	r2, r3
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	400a      	ands	r2, r1
 8001946:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 800194a:	e049      	b.n	80019e0 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	2201      	movs	r2, #1
 800195a:	409a      	lsls	r2, r3
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	430a      	orrs	r2, r1
 8001962:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	2b09      	cmp	r3, #9
 800196c:	d91c      	bls.n	80019a8 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	6999      	ldr	r1, [r3, #24]
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	681a      	ldr	r2, [r3, #0]
 8001978:	4613      	mov	r3, r2
 800197a:	005b      	lsls	r3, r3, #1
 800197c:	4413      	add	r3, r2
 800197e:	3b1b      	subs	r3, #27
 8001980:	2207      	movs	r2, #7
 8001982:	fa02 f303 	lsl.w	r3, r2, r3
 8001986:	43db      	mvns	r3, r3
 8001988:	4019      	ands	r1, r3
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	6898      	ldr	r0, [r3, #8]
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	681a      	ldr	r2, [r3, #0]
 8001992:	4613      	mov	r3, r2
 8001994:	005b      	lsls	r3, r3, #1
 8001996:	4413      	add	r3, r2
 8001998:	3b1b      	subs	r3, #27
 800199a:	fa00 f203 	lsl.w	r2, r0, r3
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	430a      	orrs	r2, r1
 80019a4:	619a      	str	r2, [r3, #24]
 80019a6:	e01b      	b.n	80019e0 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	6959      	ldr	r1, [r3, #20]
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	1c5a      	adds	r2, r3, #1
 80019b4:	4613      	mov	r3, r2
 80019b6:	005b      	lsls	r3, r3, #1
 80019b8:	4413      	add	r3, r2
 80019ba:	2207      	movs	r2, #7
 80019bc:	fa02 f303 	lsl.w	r3, r2, r3
 80019c0:	43db      	mvns	r3, r3
 80019c2:	4019      	ands	r1, r3
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	6898      	ldr	r0, [r3, #8]
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	1c5a      	adds	r2, r3, #1
 80019ce:	4613      	mov	r3, r2
 80019d0:	005b      	lsls	r3, r3, #1
 80019d2:	4413      	add	r3, r2
 80019d4:	fa00 f203 	lsl.w	r2, r0, r3
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	430a      	orrs	r2, r1
 80019de:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80019e0:	4b1a      	ldr	r3, [pc, #104]	; (8001a4c <HAL_ADC_ConfigChannel+0x474>)
 80019e2:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	2b10      	cmp	r3, #16
 80019ea:	d105      	bne.n	80019f8 <HAL_ADC_ConfigChannel+0x420>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80019ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80019ee:	689b      	ldr	r3, [r3, #8]
 80019f0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d014      	beq.n	8001a22 <HAL_ADC_ConfigChannel+0x44a>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80019fc:	2b11      	cmp	r3, #17
 80019fe:	d105      	bne.n	8001a0c <HAL_ADC_ConfigChannel+0x434>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001a00:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001a02:	689b      	ldr	r3, [r3, #8]
 8001a04:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d00a      	beq.n	8001a22 <HAL_ADC_ConfigChannel+0x44a>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001a10:	2b12      	cmp	r3, #18
 8001a12:	f040 8086 	bne.w	8001b22 <HAL_ADC_ConfigChannel+0x54a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8001a16:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001a18:	689b      	ldr	r3, [r3, #8]
 8001a1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d17f      	bne.n	8001b22 <HAL_ADC_ConfigChannel+0x54a>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001a22:	2300      	movs	r3, #0
 8001a24:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	689b      	ldr	r3, [r3, #8]
 8001a2c:	f003 0303 	and.w	r3, r3, #3
 8001a30:	2b01      	cmp	r3, #1
 8001a32:	d10d      	bne.n	8001a50 <HAL_ADC_ConfigChannel+0x478>
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f003 0301 	and.w	r3, r3, #1
 8001a3e:	2b01      	cmp	r3, #1
 8001a40:	d106      	bne.n	8001a50 <HAL_ADC_ConfigChannel+0x478>
 8001a42:	2301      	movs	r3, #1
 8001a44:	e005      	b.n	8001a52 <HAL_ADC_ConfigChannel+0x47a>
 8001a46:	bf00      	nop
 8001a48:	83fff000 	.word	0x83fff000
 8001a4c:	50000300 	.word	0x50000300
 8001a50:	2300      	movs	r3, #0
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d150      	bne.n	8001af8 <HAL_ADC_ConfigChannel+0x520>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001a56:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d010      	beq.n	8001a7e <HAL_ADC_ConfigChannel+0x4a6>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	689b      	ldr	r3, [r3, #8]
 8001a60:	f003 0303 	and.w	r3, r3, #3
 8001a64:	2b01      	cmp	r3, #1
 8001a66:	d107      	bne.n	8001a78 <HAL_ADC_ConfigChannel+0x4a0>
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f003 0301 	and.w	r3, r3, #1
 8001a70:	2b01      	cmp	r3, #1
 8001a72:	d101      	bne.n	8001a78 <HAL_ADC_ConfigChannel+0x4a0>
 8001a74:	2301      	movs	r3, #1
 8001a76:	e000      	b.n	8001a7a <HAL_ADC_ConfigChannel+0x4a2>
 8001a78:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d13c      	bne.n	8001af8 <HAL_ADC_ConfigChannel+0x520>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	2b10      	cmp	r3, #16
 8001a84:	d11d      	bne.n	8001ac2 <HAL_ADC_ConfigChannel+0x4ea>
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001a8e:	d118      	bne.n	8001ac2 <HAL_ADC_ConfigChannel+0x4ea>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8001a90:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001a92:	689b      	ldr	r3, [r3, #8]
 8001a94:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001a98:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001a9a:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001a9c:	4b27      	ldr	r3, [pc, #156]	; (8001b3c <HAL_ADC_ConfigChannel+0x564>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4a27      	ldr	r2, [pc, #156]	; (8001b40 <HAL_ADC_ConfigChannel+0x568>)
 8001aa2:	fba2 2303 	umull	r2, r3, r2, r3
 8001aa6:	0c9a      	lsrs	r2, r3, #18
 8001aa8:	4613      	mov	r3, r2
 8001aaa:	009b      	lsls	r3, r3, #2
 8001aac:	4413      	add	r3, r2
 8001aae:	005b      	lsls	r3, r3, #1
 8001ab0:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001ab2:	e002      	b.n	8001aba <HAL_ADC_ConfigChannel+0x4e2>
          {
            wait_loop_index--;
 8001ab4:	68bb      	ldr	r3, [r7, #8]
 8001ab6:	3b01      	subs	r3, #1
 8001ab8:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001aba:	68bb      	ldr	r3, [r7, #8]
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d1f9      	bne.n	8001ab4 <HAL_ADC_ConfigChannel+0x4dc>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001ac0:	e02e      	b.n	8001b20 <HAL_ADC_ConfigChannel+0x548>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	2b11      	cmp	r3, #17
 8001ac8:	d10b      	bne.n	8001ae2 <HAL_ADC_ConfigChannel+0x50a>
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001ad2:	d106      	bne.n	8001ae2 <HAL_ADC_ConfigChannel+0x50a>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8001ad4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ad6:	689b      	ldr	r3, [r3, #8]
 8001ad8:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8001adc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ade:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001ae0:	e01e      	b.n	8001b20 <HAL_ADC_ConfigChannel+0x548>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	2b12      	cmp	r3, #18
 8001ae8:	d11a      	bne.n	8001b20 <HAL_ADC_ConfigChannel+0x548>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8001aea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001aec:	689b      	ldr	r3, [r3, #8]
 8001aee:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001af2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001af4:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001af6:	e013      	b.n	8001b20 <HAL_ADC_ConfigChannel+0x548>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001afc:	f043 0220 	orr.w	r2, r3, #32
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8001b04:	2301      	movs	r3, #1
 8001b06:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001b0a:	e00a      	b.n	8001b22 <HAL_ADC_ConfigChannel+0x54a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b10:	f043 0220 	orr.w	r2, r3, #32
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001b18:	2301      	movs	r3, #1
 8001b1a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001b1e:	e000      	b.n	8001b22 <HAL_ADC_ConfigChannel+0x54a>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001b20:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	2200      	movs	r2, #0
 8001b26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001b2a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001b2e:	4618      	mov	r0, r3
 8001b30:	376c      	adds	r7, #108	; 0x6c
 8001b32:	46bd      	mov	sp, r7
 8001b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b38:	4770      	bx	lr
 8001b3a:	bf00      	nop
 8001b3c:	20000000 	.word	0x20000000
 8001b40:	431bde83 	.word	0x431bde83

08001b44 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b084      	sub	sp, #16
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b50:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b56:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d126      	bne.n	8001bac <ADC_DMAConvCplt+0x68>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b62:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	641a      	str	r2, [r3, #64]	; 0x40
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F3 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	68db      	ldr	r3, [r3, #12]
 8001b70:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d115      	bne.n	8001ba4 <ADC_DMAConvCplt+0x60>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	7e5b      	ldrb	r3, [r3, #25]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d111      	bne.n	8001ba4 <ADC_DMAConvCplt+0x60>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b84:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b90:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d105      	bne.n	8001ba4 <ADC_DMAConvCplt+0x60>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b9c:	f043 0201 	orr.w	r2, r3, #1
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8001ba4:	68f8      	ldr	r0, [r7, #12]
 8001ba6:	f7ff fad7 	bl	8001158 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8001baa:	e004      	b.n	8001bb6 <ADC_DMAConvCplt+0x72>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bb2:	6878      	ldr	r0, [r7, #4]
 8001bb4:	4798      	blx	r3
}
 8001bb6:	bf00      	nop
 8001bb8:	3710      	adds	r7, #16
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}

08001bbe <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001bbe:	b580      	push	{r7, lr}
 8001bc0:	b084      	sub	sp, #16
 8001bc2:	af00      	add	r7, sp, #0
 8001bc4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bca:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001bcc:	68f8      	ldr	r0, [r7, #12]
 8001bce:	f7ff facd 	bl	800116c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */ 
}
 8001bd2:	bf00      	nop
 8001bd4:	3710      	adds	r7, #16
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}

08001bda <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001bda:	b580      	push	{r7, lr}
 8001bdc:	b084      	sub	sp, #16
 8001bde:	af00      	add	r7, sp, #0
 8001be0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001be6:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bec:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bf8:	f043 0204 	orr.w	r2, r3, #4
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001c00:	68f8      	ldr	r0, [r7, #12]
 8001c02:	f7ff fabd 	bl	8001180 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001c06:	bf00      	nop
 8001c08:	3710      	adds	r7, #16
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}
	...

08001c10 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b084      	sub	sp, #16
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	689b      	ldr	r3, [r3, #8]
 8001c22:	f003 0303 	and.w	r3, r3, #3
 8001c26:	2b01      	cmp	r3, #1
 8001c28:	d108      	bne.n	8001c3c <ADC_Enable+0x2c>
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f003 0301 	and.w	r3, r3, #1
 8001c34:	2b01      	cmp	r3, #1
 8001c36:	d101      	bne.n	8001c3c <ADC_Enable+0x2c>
 8001c38:	2301      	movs	r3, #1
 8001c3a:	e000      	b.n	8001c3e <ADC_Enable+0x2e>
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d143      	bne.n	8001cca <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	689a      	ldr	r2, [r3, #8]
 8001c48:	4b22      	ldr	r3, [pc, #136]	; (8001cd4 <ADC_Enable+0xc4>)
 8001c4a:	4013      	ands	r3, r2
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d00d      	beq.n	8001c6c <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c54:	f043 0210 	orr.w	r2, r3, #16
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c60:	f043 0201 	orr.w	r2, r3, #1
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8001c68:	2301      	movs	r3, #1
 8001c6a:	e02f      	b.n	8001ccc <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	689a      	ldr	r2, [r3, #8]
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f042 0201 	orr.w	r2, r2, #1
 8001c7a:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8001c7c:	f7ff fa60 	bl	8001140 <HAL_GetTick>
 8001c80:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001c82:	e01b      	b.n	8001cbc <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001c84:	f7ff fa5c 	bl	8001140 <HAL_GetTick>
 8001c88:	4602      	mov	r2, r0
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	1ad3      	subs	r3, r2, r3
 8001c8e:	2b02      	cmp	r3, #2
 8001c90:	d914      	bls.n	8001cbc <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f003 0301 	and.w	r3, r3, #1
 8001c9c:	2b01      	cmp	r3, #1
 8001c9e:	d00d      	beq.n	8001cbc <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ca4:	f043 0210 	orr.w	r2, r3, #16
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cb0:	f043 0201 	orr.w	r2, r3, #1
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8001cb8:	2301      	movs	r3, #1
 8001cba:	e007      	b.n	8001ccc <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f003 0301 	and.w	r3, r3, #1
 8001cc6:	2b01      	cmp	r3, #1
 8001cc8:	d1dc      	bne.n	8001c84 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001cca:	2300      	movs	r3, #0
}
 8001ccc:	4618      	mov	r0, r3
 8001cce:	3710      	adds	r7, #16
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bd80      	pop	{r7, pc}
 8001cd4:	8000003f 	.word	0x8000003f

08001cd8 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b084      	sub	sp, #16
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	689b      	ldr	r3, [r3, #8]
 8001cea:	f003 0303 	and.w	r3, r3, #3
 8001cee:	2b01      	cmp	r3, #1
 8001cf0:	d108      	bne.n	8001d04 <ADC_Disable+0x2c>
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f003 0301 	and.w	r3, r3, #1
 8001cfc:	2b01      	cmp	r3, #1
 8001cfe:	d101      	bne.n	8001d04 <ADC_Disable+0x2c>
 8001d00:	2301      	movs	r3, #1
 8001d02:	e000      	b.n	8001d06 <ADC_Disable+0x2e>
 8001d04:	2300      	movs	r3, #0
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d047      	beq.n	8001d9a <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	689b      	ldr	r3, [r3, #8]
 8001d10:	f003 030d 	and.w	r3, r3, #13
 8001d14:	2b01      	cmp	r3, #1
 8001d16:	d10f      	bne.n	8001d38 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	689a      	ldr	r2, [r3, #8]
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f042 0202 	orr.w	r2, r2, #2
 8001d26:	609a      	str	r2, [r3, #8]
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	2203      	movs	r2, #3
 8001d2e:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8001d30:	f7ff fa06 	bl	8001140 <HAL_GetTick>
 8001d34:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001d36:	e029      	b.n	8001d8c <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d3c:	f043 0210 	orr.w	r2, r3, #16
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d48:	f043 0201 	orr.w	r2, r3, #1
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8001d50:	2301      	movs	r3, #1
 8001d52:	e023      	b.n	8001d9c <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001d54:	f7ff f9f4 	bl	8001140 <HAL_GetTick>
 8001d58:	4602      	mov	r2, r0
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	1ad3      	subs	r3, r2, r3
 8001d5e:	2b02      	cmp	r3, #2
 8001d60:	d914      	bls.n	8001d8c <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	689b      	ldr	r3, [r3, #8]
 8001d68:	f003 0301 	and.w	r3, r3, #1
 8001d6c:	2b01      	cmp	r3, #1
 8001d6e:	d10d      	bne.n	8001d8c <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d74:	f043 0210 	orr.w	r2, r3, #16
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d80:	f043 0201 	orr.w	r2, r3, #1
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8001d88:	2301      	movs	r3, #1
 8001d8a:	e007      	b.n	8001d9c <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	689b      	ldr	r3, [r3, #8]
 8001d92:	f003 0301 	and.w	r3, r3, #1
 8001d96:	2b01      	cmp	r3, #1
 8001d98:	d0dc      	beq.n	8001d54 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001d9a:	2300      	movs	r3, #0
}
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	3710      	adds	r7, #16
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bd80      	pop	{r7, pc}

08001da4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001da4:	b480      	push	{r7}
 8001da6:	b085      	sub	sp, #20
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	f003 0307 	and.w	r3, r3, #7
 8001db2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001db4:	4b0c      	ldr	r3, [pc, #48]	; (8001de8 <__NVIC_SetPriorityGrouping+0x44>)
 8001db6:	68db      	ldr	r3, [r3, #12]
 8001db8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001dba:	68ba      	ldr	r2, [r7, #8]
 8001dbc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001dc0:	4013      	ands	r3, r2
 8001dc2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001dc8:	68bb      	ldr	r3, [r7, #8]
 8001dca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001dcc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001dd0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001dd4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001dd6:	4a04      	ldr	r2, [pc, #16]	; (8001de8 <__NVIC_SetPriorityGrouping+0x44>)
 8001dd8:	68bb      	ldr	r3, [r7, #8]
 8001dda:	60d3      	str	r3, [r2, #12]
}
 8001ddc:	bf00      	nop
 8001dde:	3714      	adds	r7, #20
 8001de0:	46bd      	mov	sp, r7
 8001de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de6:	4770      	bx	lr
 8001de8:	e000ed00 	.word	0xe000ed00

08001dec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001dec:	b480      	push	{r7}
 8001dee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001df0:	4b04      	ldr	r3, [pc, #16]	; (8001e04 <__NVIC_GetPriorityGrouping+0x18>)
 8001df2:	68db      	ldr	r3, [r3, #12]
 8001df4:	0a1b      	lsrs	r3, r3, #8
 8001df6:	f003 0307 	and.w	r3, r3, #7
}
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e02:	4770      	bx	lr
 8001e04:	e000ed00 	.word	0xe000ed00

08001e08 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b083      	sub	sp, #12
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	4603      	mov	r3, r0
 8001e10:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	db0b      	blt.n	8001e32 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e1a:	79fb      	ldrb	r3, [r7, #7]
 8001e1c:	f003 021f 	and.w	r2, r3, #31
 8001e20:	4907      	ldr	r1, [pc, #28]	; (8001e40 <__NVIC_EnableIRQ+0x38>)
 8001e22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e26:	095b      	lsrs	r3, r3, #5
 8001e28:	2001      	movs	r0, #1
 8001e2a:	fa00 f202 	lsl.w	r2, r0, r2
 8001e2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001e32:	bf00      	nop
 8001e34:	370c      	adds	r7, #12
 8001e36:	46bd      	mov	sp, r7
 8001e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3c:	4770      	bx	lr
 8001e3e:	bf00      	nop
 8001e40:	e000e100 	.word	0xe000e100

08001e44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e44:	b480      	push	{r7}
 8001e46:	b083      	sub	sp, #12
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	6039      	str	r1, [r7, #0]
 8001e4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	db0a      	blt.n	8001e6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	b2da      	uxtb	r2, r3
 8001e5c:	490c      	ldr	r1, [pc, #48]	; (8001e90 <__NVIC_SetPriority+0x4c>)
 8001e5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e62:	0112      	lsls	r2, r2, #4
 8001e64:	b2d2      	uxtb	r2, r2
 8001e66:	440b      	add	r3, r1
 8001e68:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e6c:	e00a      	b.n	8001e84 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	b2da      	uxtb	r2, r3
 8001e72:	4908      	ldr	r1, [pc, #32]	; (8001e94 <__NVIC_SetPriority+0x50>)
 8001e74:	79fb      	ldrb	r3, [r7, #7]
 8001e76:	f003 030f 	and.w	r3, r3, #15
 8001e7a:	3b04      	subs	r3, #4
 8001e7c:	0112      	lsls	r2, r2, #4
 8001e7e:	b2d2      	uxtb	r2, r2
 8001e80:	440b      	add	r3, r1
 8001e82:	761a      	strb	r2, [r3, #24]
}
 8001e84:	bf00      	nop
 8001e86:	370c      	adds	r7, #12
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8e:	4770      	bx	lr
 8001e90:	e000e100 	.word	0xe000e100
 8001e94:	e000ed00 	.word	0xe000ed00

08001e98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	b089      	sub	sp, #36	; 0x24
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	60f8      	str	r0, [r7, #12]
 8001ea0:	60b9      	str	r1, [r7, #8]
 8001ea2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	f003 0307 	and.w	r3, r3, #7
 8001eaa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001eac:	69fb      	ldr	r3, [r7, #28]
 8001eae:	f1c3 0307 	rsb	r3, r3, #7
 8001eb2:	2b04      	cmp	r3, #4
 8001eb4:	bf28      	it	cs
 8001eb6:	2304      	movcs	r3, #4
 8001eb8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001eba:	69fb      	ldr	r3, [r7, #28]
 8001ebc:	3304      	adds	r3, #4
 8001ebe:	2b06      	cmp	r3, #6
 8001ec0:	d902      	bls.n	8001ec8 <NVIC_EncodePriority+0x30>
 8001ec2:	69fb      	ldr	r3, [r7, #28]
 8001ec4:	3b03      	subs	r3, #3
 8001ec6:	e000      	b.n	8001eca <NVIC_EncodePriority+0x32>
 8001ec8:	2300      	movs	r3, #0
 8001eca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ecc:	f04f 32ff 	mov.w	r2, #4294967295
 8001ed0:	69bb      	ldr	r3, [r7, #24]
 8001ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed6:	43da      	mvns	r2, r3
 8001ed8:	68bb      	ldr	r3, [r7, #8]
 8001eda:	401a      	ands	r2, r3
 8001edc:	697b      	ldr	r3, [r7, #20]
 8001ede:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ee0:	f04f 31ff 	mov.w	r1, #4294967295
 8001ee4:	697b      	ldr	r3, [r7, #20]
 8001ee6:	fa01 f303 	lsl.w	r3, r1, r3
 8001eea:	43d9      	mvns	r1, r3
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ef0:	4313      	orrs	r3, r2
         );
}
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	3724      	adds	r7, #36	; 0x24
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efc:	4770      	bx	lr

08001efe <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001efe:	b580      	push	{r7, lr}
 8001f00:	b082      	sub	sp, #8
 8001f02:	af00      	add	r7, sp, #0
 8001f04:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f06:	6878      	ldr	r0, [r7, #4]
 8001f08:	f7ff ff4c 	bl	8001da4 <__NVIC_SetPriorityGrouping>
}
 8001f0c:	bf00      	nop
 8001f0e:	3708      	adds	r7, #8
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bd80      	pop	{r7, pc}

08001f14 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b086      	sub	sp, #24
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	60b9      	str	r1, [r7, #8]
 8001f1e:	607a      	str	r2, [r7, #4]
 8001f20:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f22:	2300      	movs	r3, #0
 8001f24:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f26:	f7ff ff61 	bl	8001dec <__NVIC_GetPriorityGrouping>
 8001f2a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f2c:	687a      	ldr	r2, [r7, #4]
 8001f2e:	68b9      	ldr	r1, [r7, #8]
 8001f30:	6978      	ldr	r0, [r7, #20]
 8001f32:	f7ff ffb1 	bl	8001e98 <NVIC_EncodePriority>
 8001f36:	4602      	mov	r2, r0
 8001f38:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f3c:	4611      	mov	r1, r2
 8001f3e:	4618      	mov	r0, r3
 8001f40:	f7ff ff80 	bl	8001e44 <__NVIC_SetPriority>
}
 8001f44:	bf00      	nop
 8001f46:	3718      	adds	r7, #24
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	bd80      	pop	{r7, pc}

08001f4c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b082      	sub	sp, #8
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	4603      	mov	r3, r0
 8001f54:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	f7ff ff54 	bl	8001e08 <__NVIC_EnableIRQ>
}
 8001f60:	bf00      	nop
 8001f62:	3708      	adds	r7, #8
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bd80      	pop	{r7, pc}

08001f68 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b084      	sub	sp, #16
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001f70:	2300      	movs	r3, #0
 8001f72:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d101      	bne.n	8001f7e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	e037      	b.n	8001fee <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	2202      	movs	r2, #2
 8001f82:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001f94:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001f98:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001fa2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	68db      	ldr	r3, [r3, #12]
 8001fa8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001fae:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	695b      	ldr	r3, [r3, #20]
 8001fb4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001fba:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	69db      	ldr	r3, [r3, #28]
 8001fc0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001fc2:	68fa      	ldr	r2, [r7, #12]
 8001fc4:	4313      	orrs	r3, r2
 8001fc6:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	68fa      	ldr	r2, [r7, #12]
 8001fce:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8001fd0:	6878      	ldr	r0, [r7, #4]
 8001fd2:	f000 f941 	bl	8002258 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2200      	movs	r2, #0
 8001fda:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2201      	movs	r2, #1
 8001fe0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8001fec:	2300      	movs	r3, #0
}  
 8001fee:	4618      	mov	r0, r3
 8001ff0:	3710      	adds	r7, #16
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}

08001ff6 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001ff6:	b580      	push	{r7, lr}
 8001ff8:	b086      	sub	sp, #24
 8001ffa:	af00      	add	r7, sp, #0
 8001ffc:	60f8      	str	r0, [r7, #12]
 8001ffe:	60b9      	str	r1, [r7, #8]
 8002000:	607a      	str	r2, [r7, #4]
 8002002:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8002004:	2300      	movs	r3, #0
 8002006:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800200e:	2b01      	cmp	r3, #1
 8002010:	d101      	bne.n	8002016 <HAL_DMA_Start_IT+0x20>
 8002012:	2302      	movs	r3, #2
 8002014:	e04a      	b.n	80020ac <HAL_DMA_Start_IT+0xb6>
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	2201      	movs	r2, #1
 800201a:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002024:	2b01      	cmp	r3, #1
 8002026:	d13a      	bne.n	800209e <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	2202      	movs	r2, #2
 800202c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	2200      	movs	r2, #0
 8002034:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	681a      	ldr	r2, [r3, #0]
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f022 0201 	bic.w	r2, r2, #1
 8002044:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	687a      	ldr	r2, [r7, #4]
 800204a:	68b9      	ldr	r1, [r7, #8]
 800204c:	68f8      	ldr	r0, [r7, #12]
 800204e:	f000 f8d4 	bl	80021fa <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002056:	2b00      	cmp	r3, #0
 8002058:	d008      	beq.n	800206c <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	681a      	ldr	r2, [r3, #0]
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f042 020e 	orr.w	r2, r2, #14
 8002068:	601a      	str	r2, [r3, #0]
 800206a:	e00f      	b.n	800208c <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	681a      	ldr	r2, [r3, #0]
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f042 020a 	orr.w	r2, r2, #10
 800207a:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	681a      	ldr	r2, [r3, #0]
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f022 0204 	bic.w	r2, r2, #4
 800208a:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	681a      	ldr	r2, [r3, #0]
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f042 0201 	orr.w	r2, r2, #1
 800209a:	601a      	str	r2, [r3, #0]
 800209c:	e005      	b.n	80020aa <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	2200      	movs	r2, #0
 80020a2:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 80020a6:	2302      	movs	r3, #2
 80020a8:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 80020aa:	7dfb      	ldrb	r3, [r7, #23]
} 
 80020ac:	4618      	mov	r0, r3
 80020ae:	3718      	adds	r7, #24
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bd80      	pop	{r7, pc}

080020b4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b084      	sub	sp, #16
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d0:	2204      	movs	r2, #4
 80020d2:	409a      	lsls	r2, r3
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	4013      	ands	r3, r2
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d024      	beq.n	8002126 <HAL_DMA_IRQHandler+0x72>
 80020dc:	68bb      	ldr	r3, [r7, #8]
 80020de:	f003 0304 	and.w	r3, r3, #4
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d01f      	beq.n	8002126 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f003 0320 	and.w	r3, r3, #32
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d107      	bne.n	8002104 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	681a      	ldr	r2, [r3, #0]
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f022 0204 	bic.w	r2, r2, #4
 8002102:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800210c:	2104      	movs	r1, #4
 800210e:	fa01 f202 	lsl.w	r2, r1, r2
 8002112:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002118:	2b00      	cmp	r3, #0
 800211a:	d06a      	beq.n	80021f2 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002120:	6878      	ldr	r0, [r7, #4]
 8002122:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8002124:	e065      	b.n	80021f2 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800212a:	2202      	movs	r2, #2
 800212c:	409a      	lsls	r2, r3
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	4013      	ands	r3, r2
 8002132:	2b00      	cmp	r3, #0
 8002134:	d02c      	beq.n	8002190 <HAL_DMA_IRQHandler+0xdc>
 8002136:	68bb      	ldr	r3, [r7, #8]
 8002138:	f003 0302 	and.w	r3, r3, #2
 800213c:	2b00      	cmp	r3, #0
 800213e:	d027      	beq.n	8002190 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f003 0320 	and.w	r3, r3, #32
 800214a:	2b00      	cmp	r3, #0
 800214c:	d10b      	bne.n	8002166 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	681a      	ldr	r2, [r3, #0]
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f022 020a 	bic.w	r2, r2, #10
 800215c:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2201      	movs	r2, #1
 8002162:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800216e:	2102      	movs	r1, #2
 8002170:	fa01 f202 	lsl.w	r2, r1, r2
 8002174:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2200      	movs	r2, #0
 800217a:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002182:	2b00      	cmp	r3, #0
 8002184:	d035      	beq.n	80021f2 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800218a:	6878      	ldr	r0, [r7, #4]
 800218c:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 800218e:	e030      	b.n	80021f2 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002194:	2208      	movs	r2, #8
 8002196:	409a      	lsls	r2, r3
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	4013      	ands	r3, r2
 800219c:	2b00      	cmp	r3, #0
 800219e:	d028      	beq.n	80021f2 <HAL_DMA_IRQHandler+0x13e>
 80021a0:	68bb      	ldr	r3, [r7, #8]
 80021a2:	f003 0308 	and.w	r3, r3, #8
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d023      	beq.n	80021f2 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	681a      	ldr	r2, [r3, #0]
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f022 020e 	bic.w	r2, r2, #14
 80021b8:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021c2:	2101      	movs	r1, #1
 80021c4:	fa01 f202 	lsl.w	r2, r1, r2
 80021c8:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	2201      	movs	r2, #1
 80021ce:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2201      	movs	r2, #1
 80021d4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2200      	movs	r2, #0
 80021dc:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d004      	beq.n	80021f2 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ec:	6878      	ldr	r0, [r7, #4]
 80021ee:	4798      	blx	r3
    }
  }
}  
 80021f0:	e7ff      	b.n	80021f2 <HAL_DMA_IRQHandler+0x13e>
 80021f2:	bf00      	nop
 80021f4:	3710      	adds	r7, #16
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bd80      	pop	{r7, pc}

080021fa <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80021fa:	b480      	push	{r7}
 80021fc:	b085      	sub	sp, #20
 80021fe:	af00      	add	r7, sp, #0
 8002200:	60f8      	str	r0, [r7, #12]
 8002202:	60b9      	str	r1, [r7, #8]
 8002204:	607a      	str	r2, [r7, #4]
 8002206:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002210:	2101      	movs	r1, #1
 8002212:	fa01 f202 	lsl.w	r2, r1, r2
 8002216:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	683a      	ldr	r2, [r7, #0]
 800221e:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	2b10      	cmp	r3, #16
 8002226:	d108      	bne.n	800223a <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	687a      	ldr	r2, [r7, #4]
 800222e:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	68ba      	ldr	r2, [r7, #8]
 8002236:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002238:	e007      	b.n	800224a <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	68ba      	ldr	r2, [r7, #8]
 8002240:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	687a      	ldr	r2, [r7, #4]
 8002248:	60da      	str	r2, [r3, #12]
}
 800224a:	bf00      	nop
 800224c:	3714      	adds	r7, #20
 800224e:	46bd      	mov	sp, r7
 8002250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002254:	4770      	bx	lr
	...

08002258 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002258:	b480      	push	{r7}
 800225a:	b083      	sub	sp, #12
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	461a      	mov	r2, r3
 8002266:	4b09      	ldr	r3, [pc, #36]	; (800228c <DMA_CalcBaseAndBitshift+0x34>)
 8002268:	4413      	add	r3, r2
 800226a:	4a09      	ldr	r2, [pc, #36]	; (8002290 <DMA_CalcBaseAndBitshift+0x38>)
 800226c:	fba2 2303 	umull	r2, r3, r2, r3
 8002270:	091b      	lsrs	r3, r3, #4
 8002272:	009a      	lsls	r2, r3, #2
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	4a06      	ldr	r2, [pc, #24]	; (8002294 <DMA_CalcBaseAndBitshift+0x3c>)
 800227c:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 800227e:	bf00      	nop
 8002280:	370c      	adds	r7, #12
 8002282:	46bd      	mov	sp, r7
 8002284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002288:	4770      	bx	lr
 800228a:	bf00      	nop
 800228c:	bffdfff8 	.word	0xbffdfff8
 8002290:	cccccccd 	.word	0xcccccccd
 8002294:	40020000 	.word	0x40020000

08002298 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002298:	b480      	push	{r7}
 800229a:	b087      	sub	sp, #28
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
 80022a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80022a2:	2300      	movs	r3, #0
 80022a4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022a6:	e14e      	b.n	8002546 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	681a      	ldr	r2, [r3, #0]
 80022ac:	2101      	movs	r1, #1
 80022ae:	697b      	ldr	r3, [r7, #20]
 80022b0:	fa01 f303 	lsl.w	r3, r1, r3
 80022b4:	4013      	ands	r3, r2
 80022b6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	f000 8140 	beq.w	8002540 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	f003 0303 	and.w	r3, r3, #3
 80022c8:	2b01      	cmp	r3, #1
 80022ca:	d005      	beq.n	80022d8 <HAL_GPIO_Init+0x40>
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	f003 0303 	and.w	r3, r3, #3
 80022d4:	2b02      	cmp	r3, #2
 80022d6:	d130      	bne.n	800233a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	689b      	ldr	r3, [r3, #8]
 80022dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80022de:	697b      	ldr	r3, [r7, #20]
 80022e0:	005b      	lsls	r3, r3, #1
 80022e2:	2203      	movs	r2, #3
 80022e4:	fa02 f303 	lsl.w	r3, r2, r3
 80022e8:	43db      	mvns	r3, r3
 80022ea:	693a      	ldr	r2, [r7, #16]
 80022ec:	4013      	ands	r3, r2
 80022ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	68da      	ldr	r2, [r3, #12]
 80022f4:	697b      	ldr	r3, [r7, #20]
 80022f6:	005b      	lsls	r3, r3, #1
 80022f8:	fa02 f303 	lsl.w	r3, r2, r3
 80022fc:	693a      	ldr	r2, [r7, #16]
 80022fe:	4313      	orrs	r3, r2
 8002300:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	693a      	ldr	r2, [r7, #16]
 8002306:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800230e:	2201      	movs	r2, #1
 8002310:	697b      	ldr	r3, [r7, #20]
 8002312:	fa02 f303 	lsl.w	r3, r2, r3
 8002316:	43db      	mvns	r3, r3
 8002318:	693a      	ldr	r2, [r7, #16]
 800231a:	4013      	ands	r3, r2
 800231c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	091b      	lsrs	r3, r3, #4
 8002324:	f003 0201 	and.w	r2, r3, #1
 8002328:	697b      	ldr	r3, [r7, #20]
 800232a:	fa02 f303 	lsl.w	r3, r2, r3
 800232e:	693a      	ldr	r2, [r7, #16]
 8002330:	4313      	orrs	r3, r2
 8002332:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	693a      	ldr	r2, [r7, #16]
 8002338:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	f003 0303 	and.w	r3, r3, #3
 8002342:	2b03      	cmp	r3, #3
 8002344:	d017      	beq.n	8002376 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	68db      	ldr	r3, [r3, #12]
 800234a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800234c:	697b      	ldr	r3, [r7, #20]
 800234e:	005b      	lsls	r3, r3, #1
 8002350:	2203      	movs	r2, #3
 8002352:	fa02 f303 	lsl.w	r3, r2, r3
 8002356:	43db      	mvns	r3, r3
 8002358:	693a      	ldr	r2, [r7, #16]
 800235a:	4013      	ands	r3, r2
 800235c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	689a      	ldr	r2, [r3, #8]
 8002362:	697b      	ldr	r3, [r7, #20]
 8002364:	005b      	lsls	r3, r3, #1
 8002366:	fa02 f303 	lsl.w	r3, r2, r3
 800236a:	693a      	ldr	r2, [r7, #16]
 800236c:	4313      	orrs	r3, r2
 800236e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	693a      	ldr	r2, [r7, #16]
 8002374:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	685b      	ldr	r3, [r3, #4]
 800237a:	f003 0303 	and.w	r3, r3, #3
 800237e:	2b02      	cmp	r3, #2
 8002380:	d123      	bne.n	80023ca <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002382:	697b      	ldr	r3, [r7, #20]
 8002384:	08da      	lsrs	r2, r3, #3
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	3208      	adds	r2, #8
 800238a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800238e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002390:	697b      	ldr	r3, [r7, #20]
 8002392:	f003 0307 	and.w	r3, r3, #7
 8002396:	009b      	lsls	r3, r3, #2
 8002398:	220f      	movs	r2, #15
 800239a:	fa02 f303 	lsl.w	r3, r2, r3
 800239e:	43db      	mvns	r3, r3
 80023a0:	693a      	ldr	r2, [r7, #16]
 80023a2:	4013      	ands	r3, r2
 80023a4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	691a      	ldr	r2, [r3, #16]
 80023aa:	697b      	ldr	r3, [r7, #20]
 80023ac:	f003 0307 	and.w	r3, r3, #7
 80023b0:	009b      	lsls	r3, r3, #2
 80023b2:	fa02 f303 	lsl.w	r3, r2, r3
 80023b6:	693a      	ldr	r2, [r7, #16]
 80023b8:	4313      	orrs	r3, r2
 80023ba:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80023bc:	697b      	ldr	r3, [r7, #20]
 80023be:	08da      	lsrs	r2, r3, #3
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	3208      	adds	r2, #8
 80023c4:	6939      	ldr	r1, [r7, #16]
 80023c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80023d0:	697b      	ldr	r3, [r7, #20]
 80023d2:	005b      	lsls	r3, r3, #1
 80023d4:	2203      	movs	r2, #3
 80023d6:	fa02 f303 	lsl.w	r3, r2, r3
 80023da:	43db      	mvns	r3, r3
 80023dc:	693a      	ldr	r2, [r7, #16]
 80023de:	4013      	ands	r3, r2
 80023e0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	685b      	ldr	r3, [r3, #4]
 80023e6:	f003 0203 	and.w	r2, r3, #3
 80023ea:	697b      	ldr	r3, [r7, #20]
 80023ec:	005b      	lsls	r3, r3, #1
 80023ee:	fa02 f303 	lsl.w	r3, r2, r3
 80023f2:	693a      	ldr	r2, [r7, #16]
 80023f4:	4313      	orrs	r3, r2
 80023f6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	693a      	ldr	r2, [r7, #16]
 80023fc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002406:	2b00      	cmp	r3, #0
 8002408:	f000 809a 	beq.w	8002540 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800240c:	4b55      	ldr	r3, [pc, #340]	; (8002564 <HAL_GPIO_Init+0x2cc>)
 800240e:	699b      	ldr	r3, [r3, #24]
 8002410:	4a54      	ldr	r2, [pc, #336]	; (8002564 <HAL_GPIO_Init+0x2cc>)
 8002412:	f043 0301 	orr.w	r3, r3, #1
 8002416:	6193      	str	r3, [r2, #24]
 8002418:	4b52      	ldr	r3, [pc, #328]	; (8002564 <HAL_GPIO_Init+0x2cc>)
 800241a:	699b      	ldr	r3, [r3, #24]
 800241c:	f003 0301 	and.w	r3, r3, #1
 8002420:	60bb      	str	r3, [r7, #8]
 8002422:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002424:	4a50      	ldr	r2, [pc, #320]	; (8002568 <HAL_GPIO_Init+0x2d0>)
 8002426:	697b      	ldr	r3, [r7, #20]
 8002428:	089b      	lsrs	r3, r3, #2
 800242a:	3302      	adds	r3, #2
 800242c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002430:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002432:	697b      	ldr	r3, [r7, #20]
 8002434:	f003 0303 	and.w	r3, r3, #3
 8002438:	009b      	lsls	r3, r3, #2
 800243a:	220f      	movs	r2, #15
 800243c:	fa02 f303 	lsl.w	r3, r2, r3
 8002440:	43db      	mvns	r3, r3
 8002442:	693a      	ldr	r2, [r7, #16]
 8002444:	4013      	ands	r3, r2
 8002446:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800244e:	d013      	beq.n	8002478 <HAL_GPIO_Init+0x1e0>
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	4a46      	ldr	r2, [pc, #280]	; (800256c <HAL_GPIO_Init+0x2d4>)
 8002454:	4293      	cmp	r3, r2
 8002456:	d00d      	beq.n	8002474 <HAL_GPIO_Init+0x1dc>
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	4a45      	ldr	r2, [pc, #276]	; (8002570 <HAL_GPIO_Init+0x2d8>)
 800245c:	4293      	cmp	r3, r2
 800245e:	d007      	beq.n	8002470 <HAL_GPIO_Init+0x1d8>
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	4a44      	ldr	r2, [pc, #272]	; (8002574 <HAL_GPIO_Init+0x2dc>)
 8002464:	4293      	cmp	r3, r2
 8002466:	d101      	bne.n	800246c <HAL_GPIO_Init+0x1d4>
 8002468:	2303      	movs	r3, #3
 800246a:	e006      	b.n	800247a <HAL_GPIO_Init+0x1e2>
 800246c:	2305      	movs	r3, #5
 800246e:	e004      	b.n	800247a <HAL_GPIO_Init+0x1e2>
 8002470:	2302      	movs	r3, #2
 8002472:	e002      	b.n	800247a <HAL_GPIO_Init+0x1e2>
 8002474:	2301      	movs	r3, #1
 8002476:	e000      	b.n	800247a <HAL_GPIO_Init+0x1e2>
 8002478:	2300      	movs	r3, #0
 800247a:	697a      	ldr	r2, [r7, #20]
 800247c:	f002 0203 	and.w	r2, r2, #3
 8002480:	0092      	lsls	r2, r2, #2
 8002482:	4093      	lsls	r3, r2
 8002484:	693a      	ldr	r2, [r7, #16]
 8002486:	4313      	orrs	r3, r2
 8002488:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800248a:	4937      	ldr	r1, [pc, #220]	; (8002568 <HAL_GPIO_Init+0x2d0>)
 800248c:	697b      	ldr	r3, [r7, #20]
 800248e:	089b      	lsrs	r3, r3, #2
 8002490:	3302      	adds	r3, #2
 8002492:	693a      	ldr	r2, [r7, #16]
 8002494:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002498:	4b37      	ldr	r3, [pc, #220]	; (8002578 <HAL_GPIO_Init+0x2e0>)
 800249a:	689b      	ldr	r3, [r3, #8]
 800249c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	43db      	mvns	r3, r3
 80024a2:	693a      	ldr	r2, [r7, #16]
 80024a4:	4013      	ands	r3, r2
 80024a6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d003      	beq.n	80024bc <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 80024b4:	693a      	ldr	r2, [r7, #16]
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	4313      	orrs	r3, r2
 80024ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80024bc:	4a2e      	ldr	r2, [pc, #184]	; (8002578 <HAL_GPIO_Init+0x2e0>)
 80024be:	693b      	ldr	r3, [r7, #16]
 80024c0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80024c2:	4b2d      	ldr	r3, [pc, #180]	; (8002578 <HAL_GPIO_Init+0x2e0>)
 80024c4:	68db      	ldr	r3, [r3, #12]
 80024c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	43db      	mvns	r3, r3
 80024cc:	693a      	ldr	r2, [r7, #16]
 80024ce:	4013      	ands	r3, r2
 80024d0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d003      	beq.n	80024e6 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 80024de:	693a      	ldr	r2, [r7, #16]
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	4313      	orrs	r3, r2
 80024e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80024e6:	4a24      	ldr	r2, [pc, #144]	; (8002578 <HAL_GPIO_Init+0x2e0>)
 80024e8:	693b      	ldr	r3, [r7, #16]
 80024ea:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80024ec:	4b22      	ldr	r3, [pc, #136]	; (8002578 <HAL_GPIO_Init+0x2e0>)
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	43db      	mvns	r3, r3
 80024f6:	693a      	ldr	r2, [r7, #16]
 80024f8:	4013      	ands	r3, r2
 80024fa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002504:	2b00      	cmp	r3, #0
 8002506:	d003      	beq.n	8002510 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8002508:	693a      	ldr	r2, [r7, #16]
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	4313      	orrs	r3, r2
 800250e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002510:	4a19      	ldr	r2, [pc, #100]	; (8002578 <HAL_GPIO_Init+0x2e0>)
 8002512:	693b      	ldr	r3, [r7, #16]
 8002514:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002516:	4b18      	ldr	r3, [pc, #96]	; (8002578 <HAL_GPIO_Init+0x2e0>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	43db      	mvns	r3, r3
 8002520:	693a      	ldr	r2, [r7, #16]
 8002522:	4013      	ands	r3, r2
 8002524:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800252e:	2b00      	cmp	r3, #0
 8002530:	d003      	beq.n	800253a <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8002532:	693a      	ldr	r2, [r7, #16]
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	4313      	orrs	r3, r2
 8002538:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800253a:	4a0f      	ldr	r2, [pc, #60]	; (8002578 <HAL_GPIO_Init+0x2e0>)
 800253c:	693b      	ldr	r3, [r7, #16]
 800253e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002540:	697b      	ldr	r3, [r7, #20]
 8002542:	3301      	adds	r3, #1
 8002544:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	681a      	ldr	r2, [r3, #0]
 800254a:	697b      	ldr	r3, [r7, #20]
 800254c:	fa22 f303 	lsr.w	r3, r2, r3
 8002550:	2b00      	cmp	r3, #0
 8002552:	f47f aea9 	bne.w	80022a8 <HAL_GPIO_Init+0x10>
  }
}
 8002556:	bf00      	nop
 8002558:	bf00      	nop
 800255a:	371c      	adds	r7, #28
 800255c:	46bd      	mov	sp, r7
 800255e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002562:	4770      	bx	lr
 8002564:	40021000 	.word	0x40021000
 8002568:	40010000 	.word	0x40010000
 800256c:	48000400 	.word	0x48000400
 8002570:	48000800 	.word	0x48000800
 8002574:	48000c00 	.word	0x48000c00
 8002578:	40010400 	.word	0x40010400

0800257c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b082      	sub	sp, #8
 8002580:	af00      	add	r7, sp, #0
 8002582:	4603      	mov	r3, r0
 8002584:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002586:	4b08      	ldr	r3, [pc, #32]	; (80025a8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002588:	695a      	ldr	r2, [r3, #20]
 800258a:	88fb      	ldrh	r3, [r7, #6]
 800258c:	4013      	ands	r3, r2
 800258e:	2b00      	cmp	r3, #0
 8002590:	d006      	beq.n	80025a0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002592:	4a05      	ldr	r2, [pc, #20]	; (80025a8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002594:	88fb      	ldrh	r3, [r7, #6]
 8002596:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002598:	88fb      	ldrh	r3, [r7, #6]
 800259a:	4618      	mov	r0, r3
 800259c:	f7fe fb80 	bl	8000ca0 <HAL_GPIO_EXTI_Callback>
  }
}
 80025a0:	bf00      	nop
 80025a2:	3708      	adds	r7, #8
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bd80      	pop	{r7, pc}
 80025a8:	40010400 	.word	0x40010400

080025ac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80025b2:	af00      	add	r7, sp, #0
 80025b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025b8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80025bc:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80025be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025c2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d102      	bne.n	80025d2 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80025cc:	2301      	movs	r3, #1
 80025ce:	f001 b823 	b.w	8003618 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025d6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f003 0301 	and.w	r3, r3, #1
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	f000 817d 	beq.w	80028e2 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80025e8:	4bbc      	ldr	r3, [pc, #752]	; (80028dc <HAL_RCC_OscConfig+0x330>)
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	f003 030c 	and.w	r3, r3, #12
 80025f0:	2b04      	cmp	r3, #4
 80025f2:	d00c      	beq.n	800260e <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80025f4:	4bb9      	ldr	r3, [pc, #740]	; (80028dc <HAL_RCC_OscConfig+0x330>)
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	f003 030c 	and.w	r3, r3, #12
 80025fc:	2b08      	cmp	r3, #8
 80025fe:	d15c      	bne.n	80026ba <HAL_RCC_OscConfig+0x10e>
 8002600:	4bb6      	ldr	r3, [pc, #728]	; (80028dc <HAL_RCC_OscConfig+0x330>)
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002608:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800260c:	d155      	bne.n	80026ba <HAL_RCC_OscConfig+0x10e>
 800260e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002612:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002616:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800261a:	fa93 f3a3 	rbit	r3, r3
 800261e:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002622:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002626:	fab3 f383 	clz	r3, r3
 800262a:	b2db      	uxtb	r3, r3
 800262c:	095b      	lsrs	r3, r3, #5
 800262e:	b2db      	uxtb	r3, r3
 8002630:	f043 0301 	orr.w	r3, r3, #1
 8002634:	b2db      	uxtb	r3, r3
 8002636:	2b01      	cmp	r3, #1
 8002638:	d102      	bne.n	8002640 <HAL_RCC_OscConfig+0x94>
 800263a:	4ba8      	ldr	r3, [pc, #672]	; (80028dc <HAL_RCC_OscConfig+0x330>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	e015      	b.n	800266c <HAL_RCC_OscConfig+0xc0>
 8002640:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002644:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002648:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 800264c:	fa93 f3a3 	rbit	r3, r3
 8002650:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8002654:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002658:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 800265c:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8002660:	fa93 f3a3 	rbit	r3, r3
 8002664:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8002668:	4b9c      	ldr	r3, [pc, #624]	; (80028dc <HAL_RCC_OscConfig+0x330>)
 800266a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800266c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002670:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8002674:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002678:	fa92 f2a2 	rbit	r2, r2
 800267c:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8002680:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8002684:	fab2 f282 	clz	r2, r2
 8002688:	b2d2      	uxtb	r2, r2
 800268a:	f042 0220 	orr.w	r2, r2, #32
 800268e:	b2d2      	uxtb	r2, r2
 8002690:	f002 021f 	and.w	r2, r2, #31
 8002694:	2101      	movs	r1, #1
 8002696:	fa01 f202 	lsl.w	r2, r1, r2
 800269a:	4013      	ands	r3, r2
 800269c:	2b00      	cmp	r3, #0
 800269e:	f000 811f 	beq.w	80028e0 <HAL_RCC_OscConfig+0x334>
 80026a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026a6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	f040 8116 	bne.w	80028e0 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 80026b4:	2301      	movs	r3, #1
 80026b6:	f000 bfaf 	b.w	8003618 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026be:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	685b      	ldr	r3, [r3, #4]
 80026c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026ca:	d106      	bne.n	80026da <HAL_RCC_OscConfig+0x12e>
 80026cc:	4b83      	ldr	r3, [pc, #524]	; (80028dc <HAL_RCC_OscConfig+0x330>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4a82      	ldr	r2, [pc, #520]	; (80028dc <HAL_RCC_OscConfig+0x330>)
 80026d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026d6:	6013      	str	r3, [r2, #0]
 80026d8:	e036      	b.n	8002748 <HAL_RCC_OscConfig+0x19c>
 80026da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026de:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d10c      	bne.n	8002704 <HAL_RCC_OscConfig+0x158>
 80026ea:	4b7c      	ldr	r3, [pc, #496]	; (80028dc <HAL_RCC_OscConfig+0x330>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4a7b      	ldr	r2, [pc, #492]	; (80028dc <HAL_RCC_OscConfig+0x330>)
 80026f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026f4:	6013      	str	r3, [r2, #0]
 80026f6:	4b79      	ldr	r3, [pc, #484]	; (80028dc <HAL_RCC_OscConfig+0x330>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4a78      	ldr	r2, [pc, #480]	; (80028dc <HAL_RCC_OscConfig+0x330>)
 80026fc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002700:	6013      	str	r3, [r2, #0]
 8002702:	e021      	b.n	8002748 <HAL_RCC_OscConfig+0x19c>
 8002704:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002708:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002714:	d10c      	bne.n	8002730 <HAL_RCC_OscConfig+0x184>
 8002716:	4b71      	ldr	r3, [pc, #452]	; (80028dc <HAL_RCC_OscConfig+0x330>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4a70      	ldr	r2, [pc, #448]	; (80028dc <HAL_RCC_OscConfig+0x330>)
 800271c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002720:	6013      	str	r3, [r2, #0]
 8002722:	4b6e      	ldr	r3, [pc, #440]	; (80028dc <HAL_RCC_OscConfig+0x330>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	4a6d      	ldr	r2, [pc, #436]	; (80028dc <HAL_RCC_OscConfig+0x330>)
 8002728:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800272c:	6013      	str	r3, [r2, #0]
 800272e:	e00b      	b.n	8002748 <HAL_RCC_OscConfig+0x19c>
 8002730:	4b6a      	ldr	r3, [pc, #424]	; (80028dc <HAL_RCC_OscConfig+0x330>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4a69      	ldr	r2, [pc, #420]	; (80028dc <HAL_RCC_OscConfig+0x330>)
 8002736:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800273a:	6013      	str	r3, [r2, #0]
 800273c:	4b67      	ldr	r3, [pc, #412]	; (80028dc <HAL_RCC_OscConfig+0x330>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4a66      	ldr	r2, [pc, #408]	; (80028dc <HAL_RCC_OscConfig+0x330>)
 8002742:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002746:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002748:	4b64      	ldr	r3, [pc, #400]	; (80028dc <HAL_RCC_OscConfig+0x330>)
 800274a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800274c:	f023 020f 	bic.w	r2, r3, #15
 8002750:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002754:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	689b      	ldr	r3, [r3, #8]
 800275c:	495f      	ldr	r1, [pc, #380]	; (80028dc <HAL_RCC_OscConfig+0x330>)
 800275e:	4313      	orrs	r3, r2
 8002760:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002762:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002766:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	2b00      	cmp	r3, #0
 8002770:	d059      	beq.n	8002826 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002772:	f7fe fce5 	bl	8001140 <HAL_GetTick>
 8002776:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800277a:	e00a      	b.n	8002792 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800277c:	f7fe fce0 	bl	8001140 <HAL_GetTick>
 8002780:	4602      	mov	r2, r0
 8002782:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002786:	1ad3      	subs	r3, r2, r3
 8002788:	2b64      	cmp	r3, #100	; 0x64
 800278a:	d902      	bls.n	8002792 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 800278c:	2303      	movs	r3, #3
 800278e:	f000 bf43 	b.w	8003618 <HAL_RCC_OscConfig+0x106c>
 8002792:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002796:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800279a:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 800279e:	fa93 f3a3 	rbit	r3, r3
 80027a2:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80027a6:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027aa:	fab3 f383 	clz	r3, r3
 80027ae:	b2db      	uxtb	r3, r3
 80027b0:	095b      	lsrs	r3, r3, #5
 80027b2:	b2db      	uxtb	r3, r3
 80027b4:	f043 0301 	orr.w	r3, r3, #1
 80027b8:	b2db      	uxtb	r3, r3
 80027ba:	2b01      	cmp	r3, #1
 80027bc:	d102      	bne.n	80027c4 <HAL_RCC_OscConfig+0x218>
 80027be:	4b47      	ldr	r3, [pc, #284]	; (80028dc <HAL_RCC_OscConfig+0x330>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	e015      	b.n	80027f0 <HAL_RCC_OscConfig+0x244>
 80027c4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80027c8:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027cc:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80027d0:	fa93 f3a3 	rbit	r3, r3
 80027d4:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80027d8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80027dc:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80027e0:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80027e4:	fa93 f3a3 	rbit	r3, r3
 80027e8:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80027ec:	4b3b      	ldr	r3, [pc, #236]	; (80028dc <HAL_RCC_OscConfig+0x330>)
 80027ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027f0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80027f4:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80027f8:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80027fc:	fa92 f2a2 	rbit	r2, r2
 8002800:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8002804:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8002808:	fab2 f282 	clz	r2, r2
 800280c:	b2d2      	uxtb	r2, r2
 800280e:	f042 0220 	orr.w	r2, r2, #32
 8002812:	b2d2      	uxtb	r2, r2
 8002814:	f002 021f 	and.w	r2, r2, #31
 8002818:	2101      	movs	r1, #1
 800281a:	fa01 f202 	lsl.w	r2, r1, r2
 800281e:	4013      	ands	r3, r2
 8002820:	2b00      	cmp	r3, #0
 8002822:	d0ab      	beq.n	800277c <HAL_RCC_OscConfig+0x1d0>
 8002824:	e05d      	b.n	80028e2 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002826:	f7fe fc8b 	bl	8001140 <HAL_GetTick>
 800282a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800282e:	e00a      	b.n	8002846 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002830:	f7fe fc86 	bl	8001140 <HAL_GetTick>
 8002834:	4602      	mov	r2, r0
 8002836:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800283a:	1ad3      	subs	r3, r2, r3
 800283c:	2b64      	cmp	r3, #100	; 0x64
 800283e:	d902      	bls.n	8002846 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8002840:	2303      	movs	r3, #3
 8002842:	f000 bee9 	b.w	8003618 <HAL_RCC_OscConfig+0x106c>
 8002846:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800284a:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800284e:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8002852:	fa93 f3a3 	rbit	r3, r3
 8002856:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 800285a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800285e:	fab3 f383 	clz	r3, r3
 8002862:	b2db      	uxtb	r3, r3
 8002864:	095b      	lsrs	r3, r3, #5
 8002866:	b2db      	uxtb	r3, r3
 8002868:	f043 0301 	orr.w	r3, r3, #1
 800286c:	b2db      	uxtb	r3, r3
 800286e:	2b01      	cmp	r3, #1
 8002870:	d102      	bne.n	8002878 <HAL_RCC_OscConfig+0x2cc>
 8002872:	4b1a      	ldr	r3, [pc, #104]	; (80028dc <HAL_RCC_OscConfig+0x330>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	e015      	b.n	80028a4 <HAL_RCC_OscConfig+0x2f8>
 8002878:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800287c:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002880:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002884:	fa93 f3a3 	rbit	r3, r3
 8002888:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800288c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002890:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002894:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002898:	fa93 f3a3 	rbit	r3, r3
 800289c:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80028a0:	4b0e      	ldr	r3, [pc, #56]	; (80028dc <HAL_RCC_OscConfig+0x330>)
 80028a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028a4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80028a8:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80028ac:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80028b0:	fa92 f2a2 	rbit	r2, r2
 80028b4:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80028b8:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80028bc:	fab2 f282 	clz	r2, r2
 80028c0:	b2d2      	uxtb	r2, r2
 80028c2:	f042 0220 	orr.w	r2, r2, #32
 80028c6:	b2d2      	uxtb	r2, r2
 80028c8:	f002 021f 	and.w	r2, r2, #31
 80028cc:	2101      	movs	r1, #1
 80028ce:	fa01 f202 	lsl.w	r2, r1, r2
 80028d2:	4013      	ands	r3, r2
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d1ab      	bne.n	8002830 <HAL_RCC_OscConfig+0x284>
 80028d8:	e003      	b.n	80028e2 <HAL_RCC_OscConfig+0x336>
 80028da:	bf00      	nop
 80028dc:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028e6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f003 0302 	and.w	r3, r3, #2
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	f000 817d 	beq.w	8002bf2 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80028f8:	4ba6      	ldr	r3, [pc, #664]	; (8002b94 <HAL_RCC_OscConfig+0x5e8>)
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	f003 030c 	and.w	r3, r3, #12
 8002900:	2b00      	cmp	r3, #0
 8002902:	d00b      	beq.n	800291c <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002904:	4ba3      	ldr	r3, [pc, #652]	; (8002b94 <HAL_RCC_OscConfig+0x5e8>)
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	f003 030c 	and.w	r3, r3, #12
 800290c:	2b08      	cmp	r3, #8
 800290e:	d172      	bne.n	80029f6 <HAL_RCC_OscConfig+0x44a>
 8002910:	4ba0      	ldr	r3, [pc, #640]	; (8002b94 <HAL_RCC_OscConfig+0x5e8>)
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002918:	2b00      	cmp	r3, #0
 800291a:	d16c      	bne.n	80029f6 <HAL_RCC_OscConfig+0x44a>
 800291c:	2302      	movs	r3, #2
 800291e:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002922:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8002926:	fa93 f3a3 	rbit	r3, r3
 800292a:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 800292e:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002932:	fab3 f383 	clz	r3, r3
 8002936:	b2db      	uxtb	r3, r3
 8002938:	095b      	lsrs	r3, r3, #5
 800293a:	b2db      	uxtb	r3, r3
 800293c:	f043 0301 	orr.w	r3, r3, #1
 8002940:	b2db      	uxtb	r3, r3
 8002942:	2b01      	cmp	r3, #1
 8002944:	d102      	bne.n	800294c <HAL_RCC_OscConfig+0x3a0>
 8002946:	4b93      	ldr	r3, [pc, #588]	; (8002b94 <HAL_RCC_OscConfig+0x5e8>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	e013      	b.n	8002974 <HAL_RCC_OscConfig+0x3c8>
 800294c:	2302      	movs	r3, #2
 800294e:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002952:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8002956:	fa93 f3a3 	rbit	r3, r3
 800295a:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800295e:	2302      	movs	r3, #2
 8002960:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002964:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002968:	fa93 f3a3 	rbit	r3, r3
 800296c:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002970:	4b88      	ldr	r3, [pc, #544]	; (8002b94 <HAL_RCC_OscConfig+0x5e8>)
 8002972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002974:	2202      	movs	r2, #2
 8002976:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 800297a:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800297e:	fa92 f2a2 	rbit	r2, r2
 8002982:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8002986:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 800298a:	fab2 f282 	clz	r2, r2
 800298e:	b2d2      	uxtb	r2, r2
 8002990:	f042 0220 	orr.w	r2, r2, #32
 8002994:	b2d2      	uxtb	r2, r2
 8002996:	f002 021f 	and.w	r2, r2, #31
 800299a:	2101      	movs	r1, #1
 800299c:	fa01 f202 	lsl.w	r2, r1, r2
 80029a0:	4013      	ands	r3, r2
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d00a      	beq.n	80029bc <HAL_RCC_OscConfig+0x410>
 80029a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029aa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	691b      	ldr	r3, [r3, #16]
 80029b2:	2b01      	cmp	r3, #1
 80029b4:	d002      	beq.n	80029bc <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 80029b6:	2301      	movs	r3, #1
 80029b8:	f000 be2e 	b.w	8003618 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029bc:	4b75      	ldr	r3, [pc, #468]	; (8002b94 <HAL_RCC_OscConfig+0x5e8>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80029c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029c8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	695b      	ldr	r3, [r3, #20]
 80029d0:	21f8      	movs	r1, #248	; 0xf8
 80029d2:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029d6:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80029da:	fa91 f1a1 	rbit	r1, r1
 80029de:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80029e2:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80029e6:	fab1 f181 	clz	r1, r1
 80029ea:	b2c9      	uxtb	r1, r1
 80029ec:	408b      	lsls	r3, r1
 80029ee:	4969      	ldr	r1, [pc, #420]	; (8002b94 <HAL_RCC_OscConfig+0x5e8>)
 80029f0:	4313      	orrs	r3, r2
 80029f2:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029f4:	e0fd      	b.n	8002bf2 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80029f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029fa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	691b      	ldr	r3, [r3, #16]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	f000 8088 	beq.w	8002b18 <HAL_RCC_OscConfig+0x56c>
 8002a08:	2301      	movs	r3, #1
 8002a0a:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a0e:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8002a12:	fa93 f3a3 	rbit	r3, r3
 8002a16:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8002a1a:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a1e:	fab3 f383 	clz	r3, r3
 8002a22:	b2db      	uxtb	r3, r3
 8002a24:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002a28:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002a2c:	009b      	lsls	r3, r3, #2
 8002a2e:	461a      	mov	r2, r3
 8002a30:	2301      	movs	r3, #1
 8002a32:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a34:	f7fe fb84 	bl	8001140 <HAL_GetTick>
 8002a38:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a3c:	e00a      	b.n	8002a54 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a3e:	f7fe fb7f 	bl	8001140 <HAL_GetTick>
 8002a42:	4602      	mov	r2, r0
 8002a44:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002a48:	1ad3      	subs	r3, r2, r3
 8002a4a:	2b02      	cmp	r3, #2
 8002a4c:	d902      	bls.n	8002a54 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8002a4e:	2303      	movs	r3, #3
 8002a50:	f000 bde2 	b.w	8003618 <HAL_RCC_OscConfig+0x106c>
 8002a54:	2302      	movs	r3, #2
 8002a56:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a5a:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8002a5e:	fa93 f3a3 	rbit	r3, r3
 8002a62:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8002a66:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a6a:	fab3 f383 	clz	r3, r3
 8002a6e:	b2db      	uxtb	r3, r3
 8002a70:	095b      	lsrs	r3, r3, #5
 8002a72:	b2db      	uxtb	r3, r3
 8002a74:	f043 0301 	orr.w	r3, r3, #1
 8002a78:	b2db      	uxtb	r3, r3
 8002a7a:	2b01      	cmp	r3, #1
 8002a7c:	d102      	bne.n	8002a84 <HAL_RCC_OscConfig+0x4d8>
 8002a7e:	4b45      	ldr	r3, [pc, #276]	; (8002b94 <HAL_RCC_OscConfig+0x5e8>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	e013      	b.n	8002aac <HAL_RCC_OscConfig+0x500>
 8002a84:	2302      	movs	r3, #2
 8002a86:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a8a:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002a8e:	fa93 f3a3 	rbit	r3, r3
 8002a92:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002a96:	2302      	movs	r3, #2
 8002a98:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002a9c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002aa0:	fa93 f3a3 	rbit	r3, r3
 8002aa4:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8002aa8:	4b3a      	ldr	r3, [pc, #232]	; (8002b94 <HAL_RCC_OscConfig+0x5e8>)
 8002aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aac:	2202      	movs	r2, #2
 8002aae:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8002ab2:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002ab6:	fa92 f2a2 	rbit	r2, r2
 8002aba:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8002abe:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8002ac2:	fab2 f282 	clz	r2, r2
 8002ac6:	b2d2      	uxtb	r2, r2
 8002ac8:	f042 0220 	orr.w	r2, r2, #32
 8002acc:	b2d2      	uxtb	r2, r2
 8002ace:	f002 021f 	and.w	r2, r2, #31
 8002ad2:	2101      	movs	r1, #1
 8002ad4:	fa01 f202 	lsl.w	r2, r1, r2
 8002ad8:	4013      	ands	r3, r2
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d0af      	beq.n	8002a3e <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ade:	4b2d      	ldr	r3, [pc, #180]	; (8002b94 <HAL_RCC_OscConfig+0x5e8>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ae6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002aea:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	695b      	ldr	r3, [r3, #20]
 8002af2:	21f8      	movs	r1, #248	; 0xf8
 8002af4:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002af8:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002afc:	fa91 f1a1 	rbit	r1, r1
 8002b00:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8002b04:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8002b08:	fab1 f181 	clz	r1, r1
 8002b0c:	b2c9      	uxtb	r1, r1
 8002b0e:	408b      	lsls	r3, r1
 8002b10:	4920      	ldr	r1, [pc, #128]	; (8002b94 <HAL_RCC_OscConfig+0x5e8>)
 8002b12:	4313      	orrs	r3, r2
 8002b14:	600b      	str	r3, [r1, #0]
 8002b16:	e06c      	b.n	8002bf2 <HAL_RCC_OscConfig+0x646>
 8002b18:	2301      	movs	r3, #1
 8002b1a:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b1e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002b22:	fa93 f3a3 	rbit	r3, r3
 8002b26:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8002b2a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b2e:	fab3 f383 	clz	r3, r3
 8002b32:	b2db      	uxtb	r3, r3
 8002b34:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002b38:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002b3c:	009b      	lsls	r3, r3, #2
 8002b3e:	461a      	mov	r2, r3
 8002b40:	2300      	movs	r3, #0
 8002b42:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b44:	f7fe fafc 	bl	8001140 <HAL_GetTick>
 8002b48:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b4c:	e00a      	b.n	8002b64 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b4e:	f7fe faf7 	bl	8001140 <HAL_GetTick>
 8002b52:	4602      	mov	r2, r0
 8002b54:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002b58:	1ad3      	subs	r3, r2, r3
 8002b5a:	2b02      	cmp	r3, #2
 8002b5c:	d902      	bls.n	8002b64 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8002b5e:	2303      	movs	r3, #3
 8002b60:	f000 bd5a 	b.w	8003618 <HAL_RCC_OscConfig+0x106c>
 8002b64:	2302      	movs	r3, #2
 8002b66:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b6a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002b6e:	fa93 f3a3 	rbit	r3, r3
 8002b72:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8002b76:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b7a:	fab3 f383 	clz	r3, r3
 8002b7e:	b2db      	uxtb	r3, r3
 8002b80:	095b      	lsrs	r3, r3, #5
 8002b82:	b2db      	uxtb	r3, r3
 8002b84:	f043 0301 	orr.w	r3, r3, #1
 8002b88:	b2db      	uxtb	r3, r3
 8002b8a:	2b01      	cmp	r3, #1
 8002b8c:	d104      	bne.n	8002b98 <HAL_RCC_OscConfig+0x5ec>
 8002b8e:	4b01      	ldr	r3, [pc, #4]	; (8002b94 <HAL_RCC_OscConfig+0x5e8>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	e015      	b.n	8002bc0 <HAL_RCC_OscConfig+0x614>
 8002b94:	40021000 	.word	0x40021000
 8002b98:	2302      	movs	r3, #2
 8002b9a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b9e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002ba2:	fa93 f3a3 	rbit	r3, r3
 8002ba6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002baa:	2302      	movs	r3, #2
 8002bac:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002bb0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002bb4:	fa93 f3a3 	rbit	r3, r3
 8002bb8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8002bbc:	4bc8      	ldr	r3, [pc, #800]	; (8002ee0 <HAL_RCC_OscConfig+0x934>)
 8002bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bc0:	2202      	movs	r2, #2
 8002bc2:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8002bc6:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002bca:	fa92 f2a2 	rbit	r2, r2
 8002bce:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8002bd2:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8002bd6:	fab2 f282 	clz	r2, r2
 8002bda:	b2d2      	uxtb	r2, r2
 8002bdc:	f042 0220 	orr.w	r2, r2, #32
 8002be0:	b2d2      	uxtb	r2, r2
 8002be2:	f002 021f 	and.w	r2, r2, #31
 8002be6:	2101      	movs	r1, #1
 8002be8:	fa01 f202 	lsl.w	r2, r1, r2
 8002bec:	4013      	ands	r3, r2
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d1ad      	bne.n	8002b4e <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002bf2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bf6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f003 0308 	and.w	r3, r3, #8
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	f000 8110 	beq.w	8002e28 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c0c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	699b      	ldr	r3, [r3, #24]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d079      	beq.n	8002d0c <HAL_RCC_OscConfig+0x760>
 8002c18:	2301      	movs	r3, #1
 8002c1a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c1e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002c22:	fa93 f3a3 	rbit	r3, r3
 8002c26:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8002c2a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c2e:	fab3 f383 	clz	r3, r3
 8002c32:	b2db      	uxtb	r3, r3
 8002c34:	461a      	mov	r2, r3
 8002c36:	4bab      	ldr	r3, [pc, #684]	; (8002ee4 <HAL_RCC_OscConfig+0x938>)
 8002c38:	4413      	add	r3, r2
 8002c3a:	009b      	lsls	r3, r3, #2
 8002c3c:	461a      	mov	r2, r3
 8002c3e:	2301      	movs	r3, #1
 8002c40:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c42:	f7fe fa7d 	bl	8001140 <HAL_GetTick>
 8002c46:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c4a:	e00a      	b.n	8002c62 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c4c:	f7fe fa78 	bl	8001140 <HAL_GetTick>
 8002c50:	4602      	mov	r2, r0
 8002c52:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002c56:	1ad3      	subs	r3, r2, r3
 8002c58:	2b02      	cmp	r3, #2
 8002c5a:	d902      	bls.n	8002c62 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8002c5c:	2303      	movs	r3, #3
 8002c5e:	f000 bcdb 	b.w	8003618 <HAL_RCC_OscConfig+0x106c>
 8002c62:	2302      	movs	r3, #2
 8002c64:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c68:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002c6c:	fa93 f3a3 	rbit	r3, r3
 8002c70:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002c74:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c78:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002c7c:	2202      	movs	r2, #2
 8002c7e:	601a      	str	r2, [r3, #0]
 8002c80:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c84:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	fa93 f2a3 	rbit	r2, r3
 8002c8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c92:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002c96:	601a      	str	r2, [r3, #0]
 8002c98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c9c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002ca0:	2202      	movs	r2, #2
 8002ca2:	601a      	str	r2, [r3, #0]
 8002ca4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ca8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	fa93 f2a3 	rbit	r2, r3
 8002cb2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cb6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002cba:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cbc:	4b88      	ldr	r3, [pc, #544]	; (8002ee0 <HAL_RCC_OscConfig+0x934>)
 8002cbe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002cc0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cc4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002cc8:	2102      	movs	r1, #2
 8002cca:	6019      	str	r1, [r3, #0]
 8002ccc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cd0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	fa93 f1a3 	rbit	r1, r3
 8002cda:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cde:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002ce2:	6019      	str	r1, [r3, #0]
  return result;
 8002ce4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ce8:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	fab3 f383 	clz	r3, r3
 8002cf2:	b2db      	uxtb	r3, r3
 8002cf4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002cf8:	b2db      	uxtb	r3, r3
 8002cfa:	f003 031f 	and.w	r3, r3, #31
 8002cfe:	2101      	movs	r1, #1
 8002d00:	fa01 f303 	lsl.w	r3, r1, r3
 8002d04:	4013      	ands	r3, r2
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d0a0      	beq.n	8002c4c <HAL_RCC_OscConfig+0x6a0>
 8002d0a:	e08d      	b.n	8002e28 <HAL_RCC_OscConfig+0x87c>
 8002d0c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d10:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002d14:	2201      	movs	r2, #1
 8002d16:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d18:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d1c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	fa93 f2a3 	rbit	r2, r3
 8002d26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d2a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002d2e:	601a      	str	r2, [r3, #0]
  return result;
 8002d30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d34:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002d38:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d3a:	fab3 f383 	clz	r3, r3
 8002d3e:	b2db      	uxtb	r3, r3
 8002d40:	461a      	mov	r2, r3
 8002d42:	4b68      	ldr	r3, [pc, #416]	; (8002ee4 <HAL_RCC_OscConfig+0x938>)
 8002d44:	4413      	add	r3, r2
 8002d46:	009b      	lsls	r3, r3, #2
 8002d48:	461a      	mov	r2, r3
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d4e:	f7fe f9f7 	bl	8001140 <HAL_GetTick>
 8002d52:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d56:	e00a      	b.n	8002d6e <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d58:	f7fe f9f2 	bl	8001140 <HAL_GetTick>
 8002d5c:	4602      	mov	r2, r0
 8002d5e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002d62:	1ad3      	subs	r3, r2, r3
 8002d64:	2b02      	cmp	r3, #2
 8002d66:	d902      	bls.n	8002d6e <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8002d68:	2303      	movs	r3, #3
 8002d6a:	f000 bc55 	b.w	8003618 <HAL_RCC_OscConfig+0x106c>
 8002d6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d72:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002d76:	2202      	movs	r2, #2
 8002d78:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d7e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	fa93 f2a3 	rbit	r2, r3
 8002d88:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d8c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002d90:	601a      	str	r2, [r3, #0]
 8002d92:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d96:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002d9a:	2202      	movs	r2, #2
 8002d9c:	601a      	str	r2, [r3, #0]
 8002d9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002da2:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	fa93 f2a3 	rbit	r2, r3
 8002dac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002db0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002db4:	601a      	str	r2, [r3, #0]
 8002db6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002dbe:	2202      	movs	r2, #2
 8002dc0:	601a      	str	r2, [r3, #0]
 8002dc2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dc6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	fa93 f2a3 	rbit	r2, r3
 8002dd0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dd4:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002dd8:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002dda:	4b41      	ldr	r3, [pc, #260]	; (8002ee0 <HAL_RCC_OscConfig+0x934>)
 8002ddc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002dde:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002de2:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002de6:	2102      	movs	r1, #2
 8002de8:	6019      	str	r1, [r3, #0]
 8002dea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dee:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	fa93 f1a3 	rbit	r1, r3
 8002df8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dfc:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002e00:	6019      	str	r1, [r3, #0]
  return result;
 8002e02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e06:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	fab3 f383 	clz	r3, r3
 8002e10:	b2db      	uxtb	r3, r3
 8002e12:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002e16:	b2db      	uxtb	r3, r3
 8002e18:	f003 031f 	and.w	r3, r3, #31
 8002e1c:	2101      	movs	r1, #1
 8002e1e:	fa01 f303 	lsl.w	r3, r1, r3
 8002e22:	4013      	ands	r3, r2
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d197      	bne.n	8002d58 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e2c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f003 0304 	and.w	r3, r3, #4
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	f000 81a1 	beq.w	8003180 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e3e:	2300      	movs	r3, #0
 8002e40:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e44:	4b26      	ldr	r3, [pc, #152]	; (8002ee0 <HAL_RCC_OscConfig+0x934>)
 8002e46:	69db      	ldr	r3, [r3, #28]
 8002e48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d116      	bne.n	8002e7e <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e50:	4b23      	ldr	r3, [pc, #140]	; (8002ee0 <HAL_RCC_OscConfig+0x934>)
 8002e52:	69db      	ldr	r3, [r3, #28]
 8002e54:	4a22      	ldr	r2, [pc, #136]	; (8002ee0 <HAL_RCC_OscConfig+0x934>)
 8002e56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e5a:	61d3      	str	r3, [r2, #28]
 8002e5c:	4b20      	ldr	r3, [pc, #128]	; (8002ee0 <HAL_RCC_OscConfig+0x934>)
 8002e5e:	69db      	ldr	r3, [r3, #28]
 8002e60:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002e64:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e68:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002e6c:	601a      	str	r2, [r3, #0]
 8002e6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e72:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002e76:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002e78:	2301      	movs	r3, #1
 8002e7a:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e7e:	4b1a      	ldr	r3, [pc, #104]	; (8002ee8 <HAL_RCC_OscConfig+0x93c>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d11a      	bne.n	8002ec0 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e8a:	4b17      	ldr	r3, [pc, #92]	; (8002ee8 <HAL_RCC_OscConfig+0x93c>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4a16      	ldr	r2, [pc, #88]	; (8002ee8 <HAL_RCC_OscConfig+0x93c>)
 8002e90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e94:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e96:	f7fe f953 	bl	8001140 <HAL_GetTick>
 8002e9a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e9e:	e009      	b.n	8002eb4 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ea0:	f7fe f94e 	bl	8001140 <HAL_GetTick>
 8002ea4:	4602      	mov	r2, r0
 8002ea6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002eaa:	1ad3      	subs	r3, r2, r3
 8002eac:	2b64      	cmp	r3, #100	; 0x64
 8002eae:	d901      	bls.n	8002eb4 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8002eb0:	2303      	movs	r3, #3
 8002eb2:	e3b1      	b.n	8003618 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002eb4:	4b0c      	ldr	r3, [pc, #48]	; (8002ee8 <HAL_RCC_OscConfig+0x93c>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d0ef      	beq.n	8002ea0 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ec0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ec4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	68db      	ldr	r3, [r3, #12]
 8002ecc:	2b01      	cmp	r3, #1
 8002ece:	d10d      	bne.n	8002eec <HAL_RCC_OscConfig+0x940>
 8002ed0:	4b03      	ldr	r3, [pc, #12]	; (8002ee0 <HAL_RCC_OscConfig+0x934>)
 8002ed2:	6a1b      	ldr	r3, [r3, #32]
 8002ed4:	4a02      	ldr	r2, [pc, #8]	; (8002ee0 <HAL_RCC_OscConfig+0x934>)
 8002ed6:	f043 0301 	orr.w	r3, r3, #1
 8002eda:	6213      	str	r3, [r2, #32]
 8002edc:	e03c      	b.n	8002f58 <HAL_RCC_OscConfig+0x9ac>
 8002ede:	bf00      	nop
 8002ee0:	40021000 	.word	0x40021000
 8002ee4:	10908120 	.word	0x10908120
 8002ee8:	40007000 	.word	0x40007000
 8002eec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ef0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	68db      	ldr	r3, [r3, #12]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d10c      	bne.n	8002f16 <HAL_RCC_OscConfig+0x96a>
 8002efc:	4bc1      	ldr	r3, [pc, #772]	; (8003204 <HAL_RCC_OscConfig+0xc58>)
 8002efe:	6a1b      	ldr	r3, [r3, #32]
 8002f00:	4ac0      	ldr	r2, [pc, #768]	; (8003204 <HAL_RCC_OscConfig+0xc58>)
 8002f02:	f023 0301 	bic.w	r3, r3, #1
 8002f06:	6213      	str	r3, [r2, #32]
 8002f08:	4bbe      	ldr	r3, [pc, #760]	; (8003204 <HAL_RCC_OscConfig+0xc58>)
 8002f0a:	6a1b      	ldr	r3, [r3, #32]
 8002f0c:	4abd      	ldr	r2, [pc, #756]	; (8003204 <HAL_RCC_OscConfig+0xc58>)
 8002f0e:	f023 0304 	bic.w	r3, r3, #4
 8002f12:	6213      	str	r3, [r2, #32]
 8002f14:	e020      	b.n	8002f58 <HAL_RCC_OscConfig+0x9ac>
 8002f16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f1a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	68db      	ldr	r3, [r3, #12]
 8002f22:	2b05      	cmp	r3, #5
 8002f24:	d10c      	bne.n	8002f40 <HAL_RCC_OscConfig+0x994>
 8002f26:	4bb7      	ldr	r3, [pc, #732]	; (8003204 <HAL_RCC_OscConfig+0xc58>)
 8002f28:	6a1b      	ldr	r3, [r3, #32]
 8002f2a:	4ab6      	ldr	r2, [pc, #728]	; (8003204 <HAL_RCC_OscConfig+0xc58>)
 8002f2c:	f043 0304 	orr.w	r3, r3, #4
 8002f30:	6213      	str	r3, [r2, #32]
 8002f32:	4bb4      	ldr	r3, [pc, #720]	; (8003204 <HAL_RCC_OscConfig+0xc58>)
 8002f34:	6a1b      	ldr	r3, [r3, #32]
 8002f36:	4ab3      	ldr	r2, [pc, #716]	; (8003204 <HAL_RCC_OscConfig+0xc58>)
 8002f38:	f043 0301 	orr.w	r3, r3, #1
 8002f3c:	6213      	str	r3, [r2, #32]
 8002f3e:	e00b      	b.n	8002f58 <HAL_RCC_OscConfig+0x9ac>
 8002f40:	4bb0      	ldr	r3, [pc, #704]	; (8003204 <HAL_RCC_OscConfig+0xc58>)
 8002f42:	6a1b      	ldr	r3, [r3, #32]
 8002f44:	4aaf      	ldr	r2, [pc, #700]	; (8003204 <HAL_RCC_OscConfig+0xc58>)
 8002f46:	f023 0301 	bic.w	r3, r3, #1
 8002f4a:	6213      	str	r3, [r2, #32]
 8002f4c:	4bad      	ldr	r3, [pc, #692]	; (8003204 <HAL_RCC_OscConfig+0xc58>)
 8002f4e:	6a1b      	ldr	r3, [r3, #32]
 8002f50:	4aac      	ldr	r2, [pc, #688]	; (8003204 <HAL_RCC_OscConfig+0xc58>)
 8002f52:	f023 0304 	bic.w	r3, r3, #4
 8002f56:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002f58:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f5c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	68db      	ldr	r3, [r3, #12]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	f000 8081 	beq.w	800306c <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f6a:	f7fe f8e9 	bl	8001140 <HAL_GetTick>
 8002f6e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f72:	e00b      	b.n	8002f8c <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f74:	f7fe f8e4 	bl	8001140 <HAL_GetTick>
 8002f78:	4602      	mov	r2, r0
 8002f7a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002f7e:	1ad3      	subs	r3, r2, r3
 8002f80:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d901      	bls.n	8002f8c <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8002f88:	2303      	movs	r3, #3
 8002f8a:	e345      	b.n	8003618 <HAL_RCC_OscConfig+0x106c>
 8002f8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f90:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002f94:	2202      	movs	r2, #2
 8002f96:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f9c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	fa93 f2a3 	rbit	r2, r3
 8002fa6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002faa:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002fae:	601a      	str	r2, [r3, #0]
 8002fb0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fb4:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002fb8:	2202      	movs	r2, #2
 8002fba:	601a      	str	r2, [r3, #0]
 8002fbc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fc0:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	fa93 f2a3 	rbit	r2, r3
 8002fca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fce:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002fd2:	601a      	str	r2, [r3, #0]
  return result;
 8002fd4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fd8:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002fdc:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fde:	fab3 f383 	clz	r3, r3
 8002fe2:	b2db      	uxtb	r3, r3
 8002fe4:	095b      	lsrs	r3, r3, #5
 8002fe6:	b2db      	uxtb	r3, r3
 8002fe8:	f043 0302 	orr.w	r3, r3, #2
 8002fec:	b2db      	uxtb	r3, r3
 8002fee:	2b02      	cmp	r3, #2
 8002ff0:	d102      	bne.n	8002ff8 <HAL_RCC_OscConfig+0xa4c>
 8002ff2:	4b84      	ldr	r3, [pc, #528]	; (8003204 <HAL_RCC_OscConfig+0xc58>)
 8002ff4:	6a1b      	ldr	r3, [r3, #32]
 8002ff6:	e013      	b.n	8003020 <HAL_RCC_OscConfig+0xa74>
 8002ff8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ffc:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003000:	2202      	movs	r2, #2
 8003002:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003004:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003008:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	fa93 f2a3 	rbit	r2, r3
 8003012:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003016:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800301a:	601a      	str	r2, [r3, #0]
 800301c:	4b79      	ldr	r3, [pc, #484]	; (8003204 <HAL_RCC_OscConfig+0xc58>)
 800301e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003020:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003024:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8003028:	2102      	movs	r1, #2
 800302a:	6011      	str	r1, [r2, #0]
 800302c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003030:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8003034:	6812      	ldr	r2, [r2, #0]
 8003036:	fa92 f1a2 	rbit	r1, r2
 800303a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800303e:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003042:	6011      	str	r1, [r2, #0]
  return result;
 8003044:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003048:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800304c:	6812      	ldr	r2, [r2, #0]
 800304e:	fab2 f282 	clz	r2, r2
 8003052:	b2d2      	uxtb	r2, r2
 8003054:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003058:	b2d2      	uxtb	r2, r2
 800305a:	f002 021f 	and.w	r2, r2, #31
 800305e:	2101      	movs	r1, #1
 8003060:	fa01 f202 	lsl.w	r2, r1, r2
 8003064:	4013      	ands	r3, r2
 8003066:	2b00      	cmp	r3, #0
 8003068:	d084      	beq.n	8002f74 <HAL_RCC_OscConfig+0x9c8>
 800306a:	e07f      	b.n	800316c <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800306c:	f7fe f868 	bl	8001140 <HAL_GetTick>
 8003070:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003074:	e00b      	b.n	800308e <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003076:	f7fe f863 	bl	8001140 <HAL_GetTick>
 800307a:	4602      	mov	r2, r0
 800307c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003080:	1ad3      	subs	r3, r2, r3
 8003082:	f241 3288 	movw	r2, #5000	; 0x1388
 8003086:	4293      	cmp	r3, r2
 8003088:	d901      	bls.n	800308e <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 800308a:	2303      	movs	r3, #3
 800308c:	e2c4      	b.n	8003618 <HAL_RCC_OscConfig+0x106c>
 800308e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003092:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8003096:	2202      	movs	r2, #2
 8003098:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800309a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800309e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	fa93 f2a3 	rbit	r2, r3
 80030a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030ac:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80030b0:	601a      	str	r2, [r3, #0]
 80030b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030b6:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80030ba:	2202      	movs	r2, #2
 80030bc:	601a      	str	r2, [r3, #0]
 80030be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030c2:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	fa93 f2a3 	rbit	r2, r3
 80030cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030d0:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80030d4:	601a      	str	r2, [r3, #0]
  return result;
 80030d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030da:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80030de:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030e0:	fab3 f383 	clz	r3, r3
 80030e4:	b2db      	uxtb	r3, r3
 80030e6:	095b      	lsrs	r3, r3, #5
 80030e8:	b2db      	uxtb	r3, r3
 80030ea:	f043 0302 	orr.w	r3, r3, #2
 80030ee:	b2db      	uxtb	r3, r3
 80030f0:	2b02      	cmp	r3, #2
 80030f2:	d102      	bne.n	80030fa <HAL_RCC_OscConfig+0xb4e>
 80030f4:	4b43      	ldr	r3, [pc, #268]	; (8003204 <HAL_RCC_OscConfig+0xc58>)
 80030f6:	6a1b      	ldr	r3, [r3, #32]
 80030f8:	e013      	b.n	8003122 <HAL_RCC_OscConfig+0xb76>
 80030fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030fe:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8003102:	2202      	movs	r2, #2
 8003104:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003106:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800310a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	fa93 f2a3 	rbit	r2, r3
 8003114:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003118:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 800311c:	601a      	str	r2, [r3, #0]
 800311e:	4b39      	ldr	r3, [pc, #228]	; (8003204 <HAL_RCC_OscConfig+0xc58>)
 8003120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003122:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003126:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800312a:	2102      	movs	r1, #2
 800312c:	6011      	str	r1, [r2, #0]
 800312e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003132:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8003136:	6812      	ldr	r2, [r2, #0]
 8003138:	fa92 f1a2 	rbit	r1, r2
 800313c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003140:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003144:	6011      	str	r1, [r2, #0]
  return result;
 8003146:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800314a:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800314e:	6812      	ldr	r2, [r2, #0]
 8003150:	fab2 f282 	clz	r2, r2
 8003154:	b2d2      	uxtb	r2, r2
 8003156:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800315a:	b2d2      	uxtb	r2, r2
 800315c:	f002 021f 	and.w	r2, r2, #31
 8003160:	2101      	movs	r1, #1
 8003162:	fa01 f202 	lsl.w	r2, r1, r2
 8003166:	4013      	ands	r3, r2
 8003168:	2b00      	cmp	r3, #0
 800316a:	d184      	bne.n	8003076 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800316c:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8003170:	2b01      	cmp	r3, #1
 8003172:	d105      	bne.n	8003180 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003174:	4b23      	ldr	r3, [pc, #140]	; (8003204 <HAL_RCC_OscConfig+0xc58>)
 8003176:	69db      	ldr	r3, [r3, #28]
 8003178:	4a22      	ldr	r2, [pc, #136]	; (8003204 <HAL_RCC_OscConfig+0xc58>)
 800317a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800317e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003180:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003184:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	69db      	ldr	r3, [r3, #28]
 800318c:	2b00      	cmp	r3, #0
 800318e:	f000 8242 	beq.w	8003616 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003192:	4b1c      	ldr	r3, [pc, #112]	; (8003204 <HAL_RCC_OscConfig+0xc58>)
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	f003 030c 	and.w	r3, r3, #12
 800319a:	2b08      	cmp	r3, #8
 800319c:	f000 8213 	beq.w	80035c6 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80031a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031a4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	69db      	ldr	r3, [r3, #28]
 80031ac:	2b02      	cmp	r3, #2
 80031ae:	f040 8162 	bne.w	8003476 <HAL_RCC_OscConfig+0xeca>
 80031b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031b6:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80031ba:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80031be:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031c4:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	fa93 f2a3 	rbit	r2, r3
 80031ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031d2:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80031d6:	601a      	str	r2, [r3, #0]
  return result;
 80031d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031dc:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80031e0:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031e2:	fab3 f383 	clz	r3, r3
 80031e6:	b2db      	uxtb	r3, r3
 80031e8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80031ec:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80031f0:	009b      	lsls	r3, r3, #2
 80031f2:	461a      	mov	r2, r3
 80031f4:	2300      	movs	r3, #0
 80031f6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031f8:	f7fd ffa2 	bl	8001140 <HAL_GetTick>
 80031fc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003200:	e00c      	b.n	800321c <HAL_RCC_OscConfig+0xc70>
 8003202:	bf00      	nop
 8003204:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003208:	f7fd ff9a 	bl	8001140 <HAL_GetTick>
 800320c:	4602      	mov	r2, r0
 800320e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003212:	1ad3      	subs	r3, r2, r3
 8003214:	2b02      	cmp	r3, #2
 8003216:	d901      	bls.n	800321c <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8003218:	2303      	movs	r3, #3
 800321a:	e1fd      	b.n	8003618 <HAL_RCC_OscConfig+0x106c>
 800321c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003220:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003224:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003228:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800322a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800322e:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	fa93 f2a3 	rbit	r2, r3
 8003238:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800323c:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003240:	601a      	str	r2, [r3, #0]
  return result;
 8003242:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003246:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800324a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800324c:	fab3 f383 	clz	r3, r3
 8003250:	b2db      	uxtb	r3, r3
 8003252:	095b      	lsrs	r3, r3, #5
 8003254:	b2db      	uxtb	r3, r3
 8003256:	f043 0301 	orr.w	r3, r3, #1
 800325a:	b2db      	uxtb	r3, r3
 800325c:	2b01      	cmp	r3, #1
 800325e:	d102      	bne.n	8003266 <HAL_RCC_OscConfig+0xcba>
 8003260:	4bb0      	ldr	r3, [pc, #704]	; (8003524 <HAL_RCC_OscConfig+0xf78>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	e027      	b.n	80032b6 <HAL_RCC_OscConfig+0xd0a>
 8003266:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800326a:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800326e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003272:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003274:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003278:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	fa93 f2a3 	rbit	r2, r3
 8003282:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003286:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800328a:	601a      	str	r2, [r3, #0]
 800328c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003290:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8003294:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003298:	601a      	str	r2, [r3, #0]
 800329a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800329e:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	fa93 f2a3 	rbit	r2, r3
 80032a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032ac:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80032b0:	601a      	str	r2, [r3, #0]
 80032b2:	4b9c      	ldr	r3, [pc, #624]	; (8003524 <HAL_RCC_OscConfig+0xf78>)
 80032b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032b6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80032ba:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80032be:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80032c2:	6011      	str	r1, [r2, #0]
 80032c4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80032c8:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80032cc:	6812      	ldr	r2, [r2, #0]
 80032ce:	fa92 f1a2 	rbit	r1, r2
 80032d2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80032d6:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80032da:	6011      	str	r1, [r2, #0]
  return result;
 80032dc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80032e0:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80032e4:	6812      	ldr	r2, [r2, #0]
 80032e6:	fab2 f282 	clz	r2, r2
 80032ea:	b2d2      	uxtb	r2, r2
 80032ec:	f042 0220 	orr.w	r2, r2, #32
 80032f0:	b2d2      	uxtb	r2, r2
 80032f2:	f002 021f 	and.w	r2, r2, #31
 80032f6:	2101      	movs	r1, #1
 80032f8:	fa01 f202 	lsl.w	r2, r1, r2
 80032fc:	4013      	ands	r3, r2
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d182      	bne.n	8003208 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003302:	4b88      	ldr	r3, [pc, #544]	; (8003524 <HAL_RCC_OscConfig+0xf78>)
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800330a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800330e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003316:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800331a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	6a1b      	ldr	r3, [r3, #32]
 8003322:	430b      	orrs	r3, r1
 8003324:	497f      	ldr	r1, [pc, #508]	; (8003524 <HAL_RCC_OscConfig+0xf78>)
 8003326:	4313      	orrs	r3, r2
 8003328:	604b      	str	r3, [r1, #4]
 800332a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800332e:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8003332:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003336:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003338:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800333c:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	fa93 f2a3 	rbit	r2, r3
 8003346:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800334a:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800334e:	601a      	str	r2, [r3, #0]
  return result;
 8003350:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003354:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003358:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800335a:	fab3 f383 	clz	r3, r3
 800335e:	b2db      	uxtb	r3, r3
 8003360:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003364:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003368:	009b      	lsls	r3, r3, #2
 800336a:	461a      	mov	r2, r3
 800336c:	2301      	movs	r3, #1
 800336e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003370:	f7fd fee6 	bl	8001140 <HAL_GetTick>
 8003374:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003378:	e009      	b.n	800338e <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800337a:	f7fd fee1 	bl	8001140 <HAL_GetTick>
 800337e:	4602      	mov	r2, r0
 8003380:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003384:	1ad3      	subs	r3, r2, r3
 8003386:	2b02      	cmp	r3, #2
 8003388:	d901      	bls.n	800338e <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 800338a:	2303      	movs	r3, #3
 800338c:	e144      	b.n	8003618 <HAL_RCC_OscConfig+0x106c>
 800338e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003392:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003396:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800339a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800339c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033a0:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	fa93 f2a3 	rbit	r2, r3
 80033aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033ae:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80033b2:	601a      	str	r2, [r3, #0]
  return result;
 80033b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033b8:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80033bc:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80033be:	fab3 f383 	clz	r3, r3
 80033c2:	b2db      	uxtb	r3, r3
 80033c4:	095b      	lsrs	r3, r3, #5
 80033c6:	b2db      	uxtb	r3, r3
 80033c8:	f043 0301 	orr.w	r3, r3, #1
 80033cc:	b2db      	uxtb	r3, r3
 80033ce:	2b01      	cmp	r3, #1
 80033d0:	d102      	bne.n	80033d8 <HAL_RCC_OscConfig+0xe2c>
 80033d2:	4b54      	ldr	r3, [pc, #336]	; (8003524 <HAL_RCC_OscConfig+0xf78>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	e027      	b.n	8003428 <HAL_RCC_OscConfig+0xe7c>
 80033d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033dc:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80033e0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80033e4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033ea:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	fa93 f2a3 	rbit	r2, r3
 80033f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033f8:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80033fc:	601a      	str	r2, [r3, #0]
 80033fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003402:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8003406:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800340a:	601a      	str	r2, [r3, #0]
 800340c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003410:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	fa93 f2a3 	rbit	r2, r3
 800341a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800341e:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8003422:	601a      	str	r2, [r3, #0]
 8003424:	4b3f      	ldr	r3, [pc, #252]	; (8003524 <HAL_RCC_OscConfig+0xf78>)
 8003426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003428:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800342c:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8003430:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003434:	6011      	str	r1, [r2, #0]
 8003436:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800343a:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 800343e:	6812      	ldr	r2, [r2, #0]
 8003440:	fa92 f1a2 	rbit	r1, r2
 8003444:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003448:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800344c:	6011      	str	r1, [r2, #0]
  return result;
 800344e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003452:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003456:	6812      	ldr	r2, [r2, #0]
 8003458:	fab2 f282 	clz	r2, r2
 800345c:	b2d2      	uxtb	r2, r2
 800345e:	f042 0220 	orr.w	r2, r2, #32
 8003462:	b2d2      	uxtb	r2, r2
 8003464:	f002 021f 	and.w	r2, r2, #31
 8003468:	2101      	movs	r1, #1
 800346a:	fa01 f202 	lsl.w	r2, r1, r2
 800346e:	4013      	ands	r3, r2
 8003470:	2b00      	cmp	r3, #0
 8003472:	d082      	beq.n	800337a <HAL_RCC_OscConfig+0xdce>
 8003474:	e0cf      	b.n	8003616 <HAL_RCC_OscConfig+0x106a>
 8003476:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800347a:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800347e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003482:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003484:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003488:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	fa93 f2a3 	rbit	r2, r3
 8003492:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003496:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800349a:	601a      	str	r2, [r3, #0]
  return result;
 800349c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034a0:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80034a4:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034a6:	fab3 f383 	clz	r3, r3
 80034aa:	b2db      	uxtb	r3, r3
 80034ac:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80034b0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80034b4:	009b      	lsls	r3, r3, #2
 80034b6:	461a      	mov	r2, r3
 80034b8:	2300      	movs	r3, #0
 80034ba:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034bc:	f7fd fe40 	bl	8001140 <HAL_GetTick>
 80034c0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80034c4:	e009      	b.n	80034da <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034c6:	f7fd fe3b 	bl	8001140 <HAL_GetTick>
 80034ca:	4602      	mov	r2, r0
 80034cc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80034d0:	1ad3      	subs	r3, r2, r3
 80034d2:	2b02      	cmp	r3, #2
 80034d4:	d901      	bls.n	80034da <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 80034d6:	2303      	movs	r3, #3
 80034d8:	e09e      	b.n	8003618 <HAL_RCC_OscConfig+0x106c>
 80034da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034de:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80034e2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80034e6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034ec:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	fa93 f2a3 	rbit	r2, r3
 80034f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034fa:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80034fe:	601a      	str	r2, [r3, #0]
  return result;
 8003500:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003504:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003508:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800350a:	fab3 f383 	clz	r3, r3
 800350e:	b2db      	uxtb	r3, r3
 8003510:	095b      	lsrs	r3, r3, #5
 8003512:	b2db      	uxtb	r3, r3
 8003514:	f043 0301 	orr.w	r3, r3, #1
 8003518:	b2db      	uxtb	r3, r3
 800351a:	2b01      	cmp	r3, #1
 800351c:	d104      	bne.n	8003528 <HAL_RCC_OscConfig+0xf7c>
 800351e:	4b01      	ldr	r3, [pc, #4]	; (8003524 <HAL_RCC_OscConfig+0xf78>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	e029      	b.n	8003578 <HAL_RCC_OscConfig+0xfcc>
 8003524:	40021000 	.word	0x40021000
 8003528:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800352c:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003530:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003534:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003536:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800353a:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	fa93 f2a3 	rbit	r2, r3
 8003544:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003548:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800354c:	601a      	str	r2, [r3, #0]
 800354e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003552:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003556:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800355a:	601a      	str	r2, [r3, #0]
 800355c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003560:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	fa93 f2a3 	rbit	r2, r3
 800356a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800356e:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8003572:	601a      	str	r2, [r3, #0]
 8003574:	4b2b      	ldr	r3, [pc, #172]	; (8003624 <HAL_RCC_OscConfig+0x1078>)
 8003576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003578:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800357c:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8003580:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003584:	6011      	str	r1, [r2, #0]
 8003586:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800358a:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 800358e:	6812      	ldr	r2, [r2, #0]
 8003590:	fa92 f1a2 	rbit	r1, r2
 8003594:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003598:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800359c:	6011      	str	r1, [r2, #0]
  return result;
 800359e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80035a2:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80035a6:	6812      	ldr	r2, [r2, #0]
 80035a8:	fab2 f282 	clz	r2, r2
 80035ac:	b2d2      	uxtb	r2, r2
 80035ae:	f042 0220 	orr.w	r2, r2, #32
 80035b2:	b2d2      	uxtb	r2, r2
 80035b4:	f002 021f 	and.w	r2, r2, #31
 80035b8:	2101      	movs	r1, #1
 80035ba:	fa01 f202 	lsl.w	r2, r1, r2
 80035be:	4013      	ands	r3, r2
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d180      	bne.n	80034c6 <HAL_RCC_OscConfig+0xf1a>
 80035c4:	e027      	b.n	8003616 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80035c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035ca:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	69db      	ldr	r3, [r3, #28]
 80035d2:	2b01      	cmp	r3, #1
 80035d4:	d101      	bne.n	80035da <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 80035d6:	2301      	movs	r3, #1
 80035d8:	e01e      	b.n	8003618 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80035da:	4b12      	ldr	r3, [pc, #72]	; (8003624 <HAL_RCC_OscConfig+0x1078>)
 80035dc:	685b      	ldr	r3, [r3, #4]
 80035de:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80035e2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80035e6:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80035ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035ee:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	6a1b      	ldr	r3, [r3, #32]
 80035f6:	429a      	cmp	r2, r3
 80035f8:	d10b      	bne.n	8003612 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80035fa:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80035fe:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003602:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003606:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800360e:	429a      	cmp	r2, r3
 8003610:	d001      	beq.n	8003616 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8003612:	2301      	movs	r3, #1
 8003614:	e000      	b.n	8003618 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8003616:	2300      	movs	r3, #0
}
 8003618:	4618      	mov	r0, r3
 800361a:	f507 7700 	add.w	r7, r7, #512	; 0x200
 800361e:	46bd      	mov	sp, r7
 8003620:	bd80      	pop	{r7, pc}
 8003622:	bf00      	nop
 8003624:	40021000 	.word	0x40021000

08003628 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b09e      	sub	sp, #120	; 0x78
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
 8003630:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003632:	2300      	movs	r3, #0
 8003634:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d101      	bne.n	8003640 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800363c:	2301      	movs	r3, #1
 800363e:	e162      	b.n	8003906 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003640:	4b90      	ldr	r3, [pc, #576]	; (8003884 <HAL_RCC_ClockConfig+0x25c>)
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f003 0307 	and.w	r3, r3, #7
 8003648:	683a      	ldr	r2, [r7, #0]
 800364a:	429a      	cmp	r2, r3
 800364c:	d910      	bls.n	8003670 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800364e:	4b8d      	ldr	r3, [pc, #564]	; (8003884 <HAL_RCC_ClockConfig+0x25c>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f023 0207 	bic.w	r2, r3, #7
 8003656:	498b      	ldr	r1, [pc, #556]	; (8003884 <HAL_RCC_ClockConfig+0x25c>)
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	4313      	orrs	r3, r2
 800365c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800365e:	4b89      	ldr	r3, [pc, #548]	; (8003884 <HAL_RCC_ClockConfig+0x25c>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f003 0307 	and.w	r3, r3, #7
 8003666:	683a      	ldr	r2, [r7, #0]
 8003668:	429a      	cmp	r2, r3
 800366a:	d001      	beq.n	8003670 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800366c:	2301      	movs	r3, #1
 800366e:	e14a      	b.n	8003906 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f003 0302 	and.w	r3, r3, #2
 8003678:	2b00      	cmp	r3, #0
 800367a:	d008      	beq.n	800368e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800367c:	4b82      	ldr	r3, [pc, #520]	; (8003888 <HAL_RCC_ClockConfig+0x260>)
 800367e:	685b      	ldr	r3, [r3, #4]
 8003680:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	689b      	ldr	r3, [r3, #8]
 8003688:	497f      	ldr	r1, [pc, #508]	; (8003888 <HAL_RCC_ClockConfig+0x260>)
 800368a:	4313      	orrs	r3, r2
 800368c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f003 0301 	and.w	r3, r3, #1
 8003696:	2b00      	cmp	r3, #0
 8003698:	f000 80dc 	beq.w	8003854 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	685b      	ldr	r3, [r3, #4]
 80036a0:	2b01      	cmp	r3, #1
 80036a2:	d13c      	bne.n	800371e <HAL_RCC_ClockConfig+0xf6>
 80036a4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80036a8:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036aa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80036ac:	fa93 f3a3 	rbit	r3, r3
 80036b0:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80036b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036b4:	fab3 f383 	clz	r3, r3
 80036b8:	b2db      	uxtb	r3, r3
 80036ba:	095b      	lsrs	r3, r3, #5
 80036bc:	b2db      	uxtb	r3, r3
 80036be:	f043 0301 	orr.w	r3, r3, #1
 80036c2:	b2db      	uxtb	r3, r3
 80036c4:	2b01      	cmp	r3, #1
 80036c6:	d102      	bne.n	80036ce <HAL_RCC_ClockConfig+0xa6>
 80036c8:	4b6f      	ldr	r3, [pc, #444]	; (8003888 <HAL_RCC_ClockConfig+0x260>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	e00f      	b.n	80036ee <HAL_RCC_ClockConfig+0xc6>
 80036ce:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80036d2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036d4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80036d6:	fa93 f3a3 	rbit	r3, r3
 80036da:	667b      	str	r3, [r7, #100]	; 0x64
 80036dc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80036e0:	663b      	str	r3, [r7, #96]	; 0x60
 80036e2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80036e4:	fa93 f3a3 	rbit	r3, r3
 80036e8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80036ea:	4b67      	ldr	r3, [pc, #412]	; (8003888 <HAL_RCC_ClockConfig+0x260>)
 80036ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ee:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80036f2:	65ba      	str	r2, [r7, #88]	; 0x58
 80036f4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80036f6:	fa92 f2a2 	rbit	r2, r2
 80036fa:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80036fc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80036fe:	fab2 f282 	clz	r2, r2
 8003702:	b2d2      	uxtb	r2, r2
 8003704:	f042 0220 	orr.w	r2, r2, #32
 8003708:	b2d2      	uxtb	r2, r2
 800370a:	f002 021f 	and.w	r2, r2, #31
 800370e:	2101      	movs	r1, #1
 8003710:	fa01 f202 	lsl.w	r2, r1, r2
 8003714:	4013      	ands	r3, r2
 8003716:	2b00      	cmp	r3, #0
 8003718:	d17b      	bne.n	8003812 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800371a:	2301      	movs	r3, #1
 800371c:	e0f3      	b.n	8003906 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	2b02      	cmp	r3, #2
 8003724:	d13c      	bne.n	80037a0 <HAL_RCC_ClockConfig+0x178>
 8003726:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800372a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800372c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800372e:	fa93 f3a3 	rbit	r3, r3
 8003732:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003734:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003736:	fab3 f383 	clz	r3, r3
 800373a:	b2db      	uxtb	r3, r3
 800373c:	095b      	lsrs	r3, r3, #5
 800373e:	b2db      	uxtb	r3, r3
 8003740:	f043 0301 	orr.w	r3, r3, #1
 8003744:	b2db      	uxtb	r3, r3
 8003746:	2b01      	cmp	r3, #1
 8003748:	d102      	bne.n	8003750 <HAL_RCC_ClockConfig+0x128>
 800374a:	4b4f      	ldr	r3, [pc, #316]	; (8003888 <HAL_RCC_ClockConfig+0x260>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	e00f      	b.n	8003770 <HAL_RCC_ClockConfig+0x148>
 8003750:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003754:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003756:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003758:	fa93 f3a3 	rbit	r3, r3
 800375c:	647b      	str	r3, [r7, #68]	; 0x44
 800375e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003762:	643b      	str	r3, [r7, #64]	; 0x40
 8003764:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003766:	fa93 f3a3 	rbit	r3, r3
 800376a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800376c:	4b46      	ldr	r3, [pc, #280]	; (8003888 <HAL_RCC_ClockConfig+0x260>)
 800376e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003770:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003774:	63ba      	str	r2, [r7, #56]	; 0x38
 8003776:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003778:	fa92 f2a2 	rbit	r2, r2
 800377c:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800377e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003780:	fab2 f282 	clz	r2, r2
 8003784:	b2d2      	uxtb	r2, r2
 8003786:	f042 0220 	orr.w	r2, r2, #32
 800378a:	b2d2      	uxtb	r2, r2
 800378c:	f002 021f 	and.w	r2, r2, #31
 8003790:	2101      	movs	r1, #1
 8003792:	fa01 f202 	lsl.w	r2, r1, r2
 8003796:	4013      	ands	r3, r2
 8003798:	2b00      	cmp	r3, #0
 800379a:	d13a      	bne.n	8003812 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800379c:	2301      	movs	r3, #1
 800379e:	e0b2      	b.n	8003906 <HAL_RCC_ClockConfig+0x2de>
 80037a0:	2302      	movs	r3, #2
 80037a2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037a6:	fa93 f3a3 	rbit	r3, r3
 80037aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80037ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037ae:	fab3 f383 	clz	r3, r3
 80037b2:	b2db      	uxtb	r3, r3
 80037b4:	095b      	lsrs	r3, r3, #5
 80037b6:	b2db      	uxtb	r3, r3
 80037b8:	f043 0301 	orr.w	r3, r3, #1
 80037bc:	b2db      	uxtb	r3, r3
 80037be:	2b01      	cmp	r3, #1
 80037c0:	d102      	bne.n	80037c8 <HAL_RCC_ClockConfig+0x1a0>
 80037c2:	4b31      	ldr	r3, [pc, #196]	; (8003888 <HAL_RCC_ClockConfig+0x260>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	e00d      	b.n	80037e4 <HAL_RCC_ClockConfig+0x1bc>
 80037c8:	2302      	movs	r3, #2
 80037ca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037ce:	fa93 f3a3 	rbit	r3, r3
 80037d2:	627b      	str	r3, [r7, #36]	; 0x24
 80037d4:	2302      	movs	r3, #2
 80037d6:	623b      	str	r3, [r7, #32]
 80037d8:	6a3b      	ldr	r3, [r7, #32]
 80037da:	fa93 f3a3 	rbit	r3, r3
 80037de:	61fb      	str	r3, [r7, #28]
 80037e0:	4b29      	ldr	r3, [pc, #164]	; (8003888 <HAL_RCC_ClockConfig+0x260>)
 80037e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037e4:	2202      	movs	r2, #2
 80037e6:	61ba      	str	r2, [r7, #24]
 80037e8:	69ba      	ldr	r2, [r7, #24]
 80037ea:	fa92 f2a2 	rbit	r2, r2
 80037ee:	617a      	str	r2, [r7, #20]
  return result;
 80037f0:	697a      	ldr	r2, [r7, #20]
 80037f2:	fab2 f282 	clz	r2, r2
 80037f6:	b2d2      	uxtb	r2, r2
 80037f8:	f042 0220 	orr.w	r2, r2, #32
 80037fc:	b2d2      	uxtb	r2, r2
 80037fe:	f002 021f 	and.w	r2, r2, #31
 8003802:	2101      	movs	r1, #1
 8003804:	fa01 f202 	lsl.w	r2, r1, r2
 8003808:	4013      	ands	r3, r2
 800380a:	2b00      	cmp	r3, #0
 800380c:	d101      	bne.n	8003812 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800380e:	2301      	movs	r3, #1
 8003810:	e079      	b.n	8003906 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003812:	4b1d      	ldr	r3, [pc, #116]	; (8003888 <HAL_RCC_ClockConfig+0x260>)
 8003814:	685b      	ldr	r3, [r3, #4]
 8003816:	f023 0203 	bic.w	r2, r3, #3
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	685b      	ldr	r3, [r3, #4]
 800381e:	491a      	ldr	r1, [pc, #104]	; (8003888 <HAL_RCC_ClockConfig+0x260>)
 8003820:	4313      	orrs	r3, r2
 8003822:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003824:	f7fd fc8c 	bl	8001140 <HAL_GetTick>
 8003828:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800382a:	e00a      	b.n	8003842 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800382c:	f7fd fc88 	bl	8001140 <HAL_GetTick>
 8003830:	4602      	mov	r2, r0
 8003832:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003834:	1ad3      	subs	r3, r2, r3
 8003836:	f241 3288 	movw	r2, #5000	; 0x1388
 800383a:	4293      	cmp	r3, r2
 800383c:	d901      	bls.n	8003842 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800383e:	2303      	movs	r3, #3
 8003840:	e061      	b.n	8003906 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003842:	4b11      	ldr	r3, [pc, #68]	; (8003888 <HAL_RCC_ClockConfig+0x260>)
 8003844:	685b      	ldr	r3, [r3, #4]
 8003846:	f003 020c 	and.w	r2, r3, #12
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	685b      	ldr	r3, [r3, #4]
 800384e:	009b      	lsls	r3, r3, #2
 8003850:	429a      	cmp	r2, r3
 8003852:	d1eb      	bne.n	800382c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003854:	4b0b      	ldr	r3, [pc, #44]	; (8003884 <HAL_RCC_ClockConfig+0x25c>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f003 0307 	and.w	r3, r3, #7
 800385c:	683a      	ldr	r2, [r7, #0]
 800385e:	429a      	cmp	r2, r3
 8003860:	d214      	bcs.n	800388c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003862:	4b08      	ldr	r3, [pc, #32]	; (8003884 <HAL_RCC_ClockConfig+0x25c>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f023 0207 	bic.w	r2, r3, #7
 800386a:	4906      	ldr	r1, [pc, #24]	; (8003884 <HAL_RCC_ClockConfig+0x25c>)
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	4313      	orrs	r3, r2
 8003870:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003872:	4b04      	ldr	r3, [pc, #16]	; (8003884 <HAL_RCC_ClockConfig+0x25c>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f003 0307 	and.w	r3, r3, #7
 800387a:	683a      	ldr	r2, [r7, #0]
 800387c:	429a      	cmp	r2, r3
 800387e:	d005      	beq.n	800388c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003880:	2301      	movs	r3, #1
 8003882:	e040      	b.n	8003906 <HAL_RCC_ClockConfig+0x2de>
 8003884:	40022000 	.word	0x40022000
 8003888:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f003 0304 	and.w	r3, r3, #4
 8003894:	2b00      	cmp	r3, #0
 8003896:	d008      	beq.n	80038aa <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003898:	4b1d      	ldr	r3, [pc, #116]	; (8003910 <HAL_RCC_ClockConfig+0x2e8>)
 800389a:	685b      	ldr	r3, [r3, #4]
 800389c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	68db      	ldr	r3, [r3, #12]
 80038a4:	491a      	ldr	r1, [pc, #104]	; (8003910 <HAL_RCC_ClockConfig+0x2e8>)
 80038a6:	4313      	orrs	r3, r2
 80038a8:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f003 0308 	and.w	r3, r3, #8
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d009      	beq.n	80038ca <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80038b6:	4b16      	ldr	r3, [pc, #88]	; (8003910 <HAL_RCC_ClockConfig+0x2e8>)
 80038b8:	685b      	ldr	r3, [r3, #4]
 80038ba:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	691b      	ldr	r3, [r3, #16]
 80038c2:	00db      	lsls	r3, r3, #3
 80038c4:	4912      	ldr	r1, [pc, #72]	; (8003910 <HAL_RCC_ClockConfig+0x2e8>)
 80038c6:	4313      	orrs	r3, r2
 80038c8:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80038ca:	f000 f829 	bl	8003920 <HAL_RCC_GetSysClockFreq>
 80038ce:	4601      	mov	r1, r0
 80038d0:	4b0f      	ldr	r3, [pc, #60]	; (8003910 <HAL_RCC_ClockConfig+0x2e8>)
 80038d2:	685b      	ldr	r3, [r3, #4]
 80038d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80038d8:	22f0      	movs	r2, #240	; 0xf0
 80038da:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038dc:	693a      	ldr	r2, [r7, #16]
 80038de:	fa92 f2a2 	rbit	r2, r2
 80038e2:	60fa      	str	r2, [r7, #12]
  return result;
 80038e4:	68fa      	ldr	r2, [r7, #12]
 80038e6:	fab2 f282 	clz	r2, r2
 80038ea:	b2d2      	uxtb	r2, r2
 80038ec:	40d3      	lsrs	r3, r2
 80038ee:	4a09      	ldr	r2, [pc, #36]	; (8003914 <HAL_RCC_ClockConfig+0x2ec>)
 80038f0:	5cd3      	ldrb	r3, [r2, r3]
 80038f2:	fa21 f303 	lsr.w	r3, r1, r3
 80038f6:	4a08      	ldr	r2, [pc, #32]	; (8003918 <HAL_RCC_ClockConfig+0x2f0>)
 80038f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80038fa:	4b08      	ldr	r3, [pc, #32]	; (800391c <HAL_RCC_ClockConfig+0x2f4>)
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	4618      	mov	r0, r3
 8003900:	f7fd fae2 	bl	8000ec8 <HAL_InitTick>
  
  return HAL_OK;
 8003904:	2300      	movs	r3, #0
}
 8003906:	4618      	mov	r0, r3
 8003908:	3778      	adds	r7, #120	; 0x78
 800390a:	46bd      	mov	sp, r7
 800390c:	bd80      	pop	{r7, pc}
 800390e:	bf00      	nop
 8003910:	40021000 	.word	0x40021000
 8003914:	08008ff8 	.word	0x08008ff8
 8003918:	20000000 	.word	0x20000000
 800391c:	20000004 	.word	0x20000004

08003920 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003920:	b480      	push	{r7}
 8003922:	b08b      	sub	sp, #44	; 0x2c
 8003924:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003926:	2300      	movs	r3, #0
 8003928:	61fb      	str	r3, [r7, #28]
 800392a:	2300      	movs	r3, #0
 800392c:	61bb      	str	r3, [r7, #24]
 800392e:	2300      	movs	r3, #0
 8003930:	627b      	str	r3, [r7, #36]	; 0x24
 8003932:	2300      	movs	r3, #0
 8003934:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003936:	2300      	movs	r3, #0
 8003938:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800393a:	4b29      	ldr	r3, [pc, #164]	; (80039e0 <HAL_RCC_GetSysClockFreq+0xc0>)
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003940:	69fb      	ldr	r3, [r7, #28]
 8003942:	f003 030c 	and.w	r3, r3, #12
 8003946:	2b04      	cmp	r3, #4
 8003948:	d002      	beq.n	8003950 <HAL_RCC_GetSysClockFreq+0x30>
 800394a:	2b08      	cmp	r3, #8
 800394c:	d003      	beq.n	8003956 <HAL_RCC_GetSysClockFreq+0x36>
 800394e:	e03c      	b.n	80039ca <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003950:	4b24      	ldr	r3, [pc, #144]	; (80039e4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003952:	623b      	str	r3, [r7, #32]
      break;
 8003954:	e03c      	b.n	80039d0 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003956:	69fb      	ldr	r3, [r7, #28]
 8003958:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800395c:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003960:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003962:	68ba      	ldr	r2, [r7, #8]
 8003964:	fa92 f2a2 	rbit	r2, r2
 8003968:	607a      	str	r2, [r7, #4]
  return result;
 800396a:	687a      	ldr	r2, [r7, #4]
 800396c:	fab2 f282 	clz	r2, r2
 8003970:	b2d2      	uxtb	r2, r2
 8003972:	40d3      	lsrs	r3, r2
 8003974:	4a1c      	ldr	r2, [pc, #112]	; (80039e8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003976:	5cd3      	ldrb	r3, [r2, r3]
 8003978:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800397a:	4b19      	ldr	r3, [pc, #100]	; (80039e0 <HAL_RCC_GetSysClockFreq+0xc0>)
 800397c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800397e:	f003 030f 	and.w	r3, r3, #15
 8003982:	220f      	movs	r2, #15
 8003984:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003986:	693a      	ldr	r2, [r7, #16]
 8003988:	fa92 f2a2 	rbit	r2, r2
 800398c:	60fa      	str	r2, [r7, #12]
  return result;
 800398e:	68fa      	ldr	r2, [r7, #12]
 8003990:	fab2 f282 	clz	r2, r2
 8003994:	b2d2      	uxtb	r2, r2
 8003996:	40d3      	lsrs	r3, r2
 8003998:	4a14      	ldr	r2, [pc, #80]	; (80039ec <HAL_RCC_GetSysClockFreq+0xcc>)
 800399a:	5cd3      	ldrb	r3, [r2, r3]
 800399c:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800399e:	69fb      	ldr	r3, [r7, #28]
 80039a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d008      	beq.n	80039ba <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80039a8:	4a0e      	ldr	r2, [pc, #56]	; (80039e4 <HAL_RCC_GetSysClockFreq+0xc4>)
 80039aa:	69bb      	ldr	r3, [r7, #24]
 80039ac:	fbb2 f2f3 	udiv	r2, r2, r3
 80039b0:	697b      	ldr	r3, [r7, #20]
 80039b2:	fb02 f303 	mul.w	r3, r2, r3
 80039b6:	627b      	str	r3, [r7, #36]	; 0x24
 80039b8:	e004      	b.n	80039c4 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80039ba:	697b      	ldr	r3, [r7, #20]
 80039bc:	4a0c      	ldr	r2, [pc, #48]	; (80039f0 <HAL_RCC_GetSysClockFreq+0xd0>)
 80039be:	fb02 f303 	mul.w	r3, r2, r3
 80039c2:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80039c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039c6:	623b      	str	r3, [r7, #32]
      break;
 80039c8:	e002      	b.n	80039d0 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80039ca:	4b06      	ldr	r3, [pc, #24]	; (80039e4 <HAL_RCC_GetSysClockFreq+0xc4>)
 80039cc:	623b      	str	r3, [r7, #32]
      break;
 80039ce:	bf00      	nop
    }
  }
  return sysclockfreq;
 80039d0:	6a3b      	ldr	r3, [r7, #32]
}
 80039d2:	4618      	mov	r0, r3
 80039d4:	372c      	adds	r7, #44	; 0x2c
 80039d6:	46bd      	mov	sp, r7
 80039d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039dc:	4770      	bx	lr
 80039de:	bf00      	nop
 80039e0:	40021000 	.word	0x40021000
 80039e4:	007a1200 	.word	0x007a1200
 80039e8:	08009010 	.word	0x08009010
 80039ec:	08009020 	.word	0x08009020
 80039f0:	003d0900 	.word	0x003d0900

080039f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80039f4:	b480      	push	{r7}
 80039f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80039f8:	4b03      	ldr	r3, [pc, #12]	; (8003a08 <HAL_RCC_GetHCLKFreq+0x14>)
 80039fa:	681b      	ldr	r3, [r3, #0]
}
 80039fc:	4618      	mov	r0, r3
 80039fe:	46bd      	mov	sp, r7
 8003a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a04:	4770      	bx	lr
 8003a06:	bf00      	nop
 8003a08:	20000000 	.word	0x20000000

08003a0c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b082      	sub	sp, #8
 8003a10:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003a12:	f7ff ffef 	bl	80039f4 <HAL_RCC_GetHCLKFreq>
 8003a16:	4601      	mov	r1, r0
 8003a18:	4b0b      	ldr	r3, [pc, #44]	; (8003a48 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003a1a:	685b      	ldr	r3, [r3, #4]
 8003a1c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003a20:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003a24:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a26:	687a      	ldr	r2, [r7, #4]
 8003a28:	fa92 f2a2 	rbit	r2, r2
 8003a2c:	603a      	str	r2, [r7, #0]
  return result;
 8003a2e:	683a      	ldr	r2, [r7, #0]
 8003a30:	fab2 f282 	clz	r2, r2
 8003a34:	b2d2      	uxtb	r2, r2
 8003a36:	40d3      	lsrs	r3, r2
 8003a38:	4a04      	ldr	r2, [pc, #16]	; (8003a4c <HAL_RCC_GetPCLK1Freq+0x40>)
 8003a3a:	5cd3      	ldrb	r3, [r2, r3]
 8003a3c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003a40:	4618      	mov	r0, r3
 8003a42:	3708      	adds	r7, #8
 8003a44:	46bd      	mov	sp, r7
 8003a46:	bd80      	pop	{r7, pc}
 8003a48:	40021000 	.word	0x40021000
 8003a4c:	08009008 	.word	0x08009008

08003a50 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b082      	sub	sp, #8
 8003a54:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003a56:	f7ff ffcd 	bl	80039f4 <HAL_RCC_GetHCLKFreq>
 8003a5a:	4601      	mov	r1, r0
 8003a5c:	4b0b      	ldr	r3, [pc, #44]	; (8003a8c <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003a5e:	685b      	ldr	r3, [r3, #4]
 8003a60:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8003a64:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003a68:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a6a:	687a      	ldr	r2, [r7, #4]
 8003a6c:	fa92 f2a2 	rbit	r2, r2
 8003a70:	603a      	str	r2, [r7, #0]
  return result;
 8003a72:	683a      	ldr	r2, [r7, #0]
 8003a74:	fab2 f282 	clz	r2, r2
 8003a78:	b2d2      	uxtb	r2, r2
 8003a7a:	40d3      	lsrs	r3, r2
 8003a7c:	4a04      	ldr	r2, [pc, #16]	; (8003a90 <HAL_RCC_GetPCLK2Freq+0x40>)
 8003a7e:	5cd3      	ldrb	r3, [r2, r3]
 8003a80:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003a84:	4618      	mov	r0, r3
 8003a86:	3708      	adds	r7, #8
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	bd80      	pop	{r7, pc}
 8003a8c:	40021000 	.word	0x40021000
 8003a90:	08009008 	.word	0x08009008

08003a94 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003a94:	b480      	push	{r7}
 8003a96:	b083      	sub	sp, #12
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
 8003a9c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	220f      	movs	r2, #15
 8003aa2:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003aa4:	4b12      	ldr	r3, [pc, #72]	; (8003af0 <HAL_RCC_GetClockConfig+0x5c>)
 8003aa6:	685b      	ldr	r3, [r3, #4]
 8003aa8:	f003 0203 	and.w	r2, r3, #3
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8003ab0:	4b0f      	ldr	r3, [pc, #60]	; (8003af0 <HAL_RCC_GetClockConfig+0x5c>)
 8003ab2:	685b      	ldr	r3, [r3, #4]
 8003ab4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 8003abc:	4b0c      	ldr	r3, [pc, #48]	; (8003af0 <HAL_RCC_GetClockConfig+0x5c>)
 8003abe:	685b      	ldr	r3, [r3, #4]
 8003ac0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003ac8:	4b09      	ldr	r3, [pc, #36]	; (8003af0 <HAL_RCC_GetClockConfig+0x5c>)
 8003aca:	685b      	ldr	r3, [r3, #4]
 8003acc:	08db      	lsrs	r3, r3, #3
 8003ace:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 8003ad6:	4b07      	ldr	r3, [pc, #28]	; (8003af4 <HAL_RCC_GetClockConfig+0x60>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f003 0207 	and.w	r2, r3, #7
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	601a      	str	r2, [r3, #0]
}
 8003ae2:	bf00      	nop
 8003ae4:	370c      	adds	r7, #12
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aec:	4770      	bx	lr
 8003aee:	bf00      	nop
 8003af0:	40021000 	.word	0x40021000
 8003af4:	40022000 	.word	0x40022000

08003af8 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b092      	sub	sp, #72	; 0x48
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003b00:	2300      	movs	r3, #0
 8003b02:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003b04:	2300      	movs	r3, #0
 8003b06:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003b08:	2300      	movs	r3, #0
 8003b0a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	f000 80d4 	beq.w	8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b1c:	4b4e      	ldr	r3, [pc, #312]	; (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b1e:	69db      	ldr	r3, [r3, #28]
 8003b20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d10e      	bne.n	8003b46 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b28:	4b4b      	ldr	r3, [pc, #300]	; (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b2a:	69db      	ldr	r3, [r3, #28]
 8003b2c:	4a4a      	ldr	r2, [pc, #296]	; (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b32:	61d3      	str	r3, [r2, #28]
 8003b34:	4b48      	ldr	r3, [pc, #288]	; (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b36:	69db      	ldr	r3, [r3, #28]
 8003b38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b3c:	60bb      	str	r3, [r7, #8]
 8003b3e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b40:	2301      	movs	r3, #1
 8003b42:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b46:	4b45      	ldr	r3, [pc, #276]	; (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d118      	bne.n	8003b84 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b52:	4b42      	ldr	r3, [pc, #264]	; (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	4a41      	ldr	r2, [pc, #260]	; (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003b58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b5c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b5e:	f7fd faef 	bl	8001140 <HAL_GetTick>
 8003b62:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b64:	e008      	b.n	8003b78 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b66:	f7fd faeb 	bl	8001140 <HAL_GetTick>
 8003b6a:	4602      	mov	r2, r0
 8003b6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b6e:	1ad3      	subs	r3, r2, r3
 8003b70:	2b64      	cmp	r3, #100	; 0x64
 8003b72:	d901      	bls.n	8003b78 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003b74:	2303      	movs	r3, #3
 8003b76:	e14b      	b.n	8003e10 <HAL_RCCEx_PeriphCLKConfig+0x318>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b78:	4b38      	ldr	r3, [pc, #224]	; (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d0f0      	beq.n	8003b66 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003b84:	4b34      	ldr	r3, [pc, #208]	; (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b86:	6a1b      	ldr	r3, [r3, #32]
 8003b88:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b8c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003b8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	f000 8084 	beq.w	8003c9e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	685b      	ldr	r3, [r3, #4]
 8003b9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b9e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003ba0:	429a      	cmp	r2, r3
 8003ba2:	d07c      	beq.n	8003c9e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003ba4:	4b2c      	ldr	r3, [pc, #176]	; (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ba6:	6a1b      	ldr	r3, [r3, #32]
 8003ba8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003bac:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003bae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003bb2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bb6:	fa93 f3a3 	rbit	r3, r3
 8003bba:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003bbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003bbe:	fab3 f383 	clz	r3, r3
 8003bc2:	b2db      	uxtb	r3, r3
 8003bc4:	461a      	mov	r2, r3
 8003bc6:	4b26      	ldr	r3, [pc, #152]	; (8003c60 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003bc8:	4413      	add	r3, r2
 8003bca:	009b      	lsls	r3, r3, #2
 8003bcc:	461a      	mov	r2, r3
 8003bce:	2301      	movs	r3, #1
 8003bd0:	6013      	str	r3, [r2, #0]
 8003bd2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003bd6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bda:	fa93 f3a3 	rbit	r3, r3
 8003bde:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003be0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003be2:	fab3 f383 	clz	r3, r3
 8003be6:	b2db      	uxtb	r3, r3
 8003be8:	461a      	mov	r2, r3
 8003bea:	4b1d      	ldr	r3, [pc, #116]	; (8003c60 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003bec:	4413      	add	r3, r2
 8003bee:	009b      	lsls	r3, r3, #2
 8003bf0:	461a      	mov	r2, r3
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003bf6:	4a18      	ldr	r2, [pc, #96]	; (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bf8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003bfa:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003bfc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003bfe:	f003 0301 	and.w	r3, r3, #1
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d04b      	beq.n	8003c9e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c06:	f7fd fa9b 	bl	8001140 <HAL_GetTick>
 8003c0a:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c0c:	e00a      	b.n	8003c24 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c0e:	f7fd fa97 	bl	8001140 <HAL_GetTick>
 8003c12:	4602      	mov	r2, r0
 8003c14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c16:	1ad3      	subs	r3, r2, r3
 8003c18:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d901      	bls.n	8003c24 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003c20:	2303      	movs	r3, #3
 8003c22:	e0f5      	b.n	8003e10 <HAL_RCCEx_PeriphCLKConfig+0x318>
 8003c24:	2302      	movs	r3, #2
 8003c26:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c2a:	fa93 f3a3 	rbit	r3, r3
 8003c2e:	627b      	str	r3, [r7, #36]	; 0x24
 8003c30:	2302      	movs	r3, #2
 8003c32:	623b      	str	r3, [r7, #32]
 8003c34:	6a3b      	ldr	r3, [r7, #32]
 8003c36:	fa93 f3a3 	rbit	r3, r3
 8003c3a:	61fb      	str	r3, [r7, #28]
  return result;
 8003c3c:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c3e:	fab3 f383 	clz	r3, r3
 8003c42:	b2db      	uxtb	r3, r3
 8003c44:	095b      	lsrs	r3, r3, #5
 8003c46:	b2db      	uxtb	r3, r3
 8003c48:	f043 0302 	orr.w	r3, r3, #2
 8003c4c:	b2db      	uxtb	r3, r3
 8003c4e:	2b02      	cmp	r3, #2
 8003c50:	d108      	bne.n	8003c64 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8003c52:	4b01      	ldr	r3, [pc, #4]	; (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c54:	6a1b      	ldr	r3, [r3, #32]
 8003c56:	e00d      	b.n	8003c74 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8003c58:	40021000 	.word	0x40021000
 8003c5c:	40007000 	.word	0x40007000
 8003c60:	10908100 	.word	0x10908100
 8003c64:	2302      	movs	r3, #2
 8003c66:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c68:	69bb      	ldr	r3, [r7, #24]
 8003c6a:	fa93 f3a3 	rbit	r3, r3
 8003c6e:	617b      	str	r3, [r7, #20]
 8003c70:	4b69      	ldr	r3, [pc, #420]	; (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c74:	2202      	movs	r2, #2
 8003c76:	613a      	str	r2, [r7, #16]
 8003c78:	693a      	ldr	r2, [r7, #16]
 8003c7a:	fa92 f2a2 	rbit	r2, r2
 8003c7e:	60fa      	str	r2, [r7, #12]
  return result;
 8003c80:	68fa      	ldr	r2, [r7, #12]
 8003c82:	fab2 f282 	clz	r2, r2
 8003c86:	b2d2      	uxtb	r2, r2
 8003c88:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003c8c:	b2d2      	uxtb	r2, r2
 8003c8e:	f002 021f 	and.w	r2, r2, #31
 8003c92:	2101      	movs	r1, #1
 8003c94:	fa01 f202 	lsl.w	r2, r1, r2
 8003c98:	4013      	ands	r3, r2
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d0b7      	beq.n	8003c0e <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003c9e:	4b5e      	ldr	r3, [pc, #376]	; (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003ca0:	6a1b      	ldr	r3, [r3, #32]
 8003ca2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	685b      	ldr	r3, [r3, #4]
 8003caa:	495b      	ldr	r1, [pc, #364]	; (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003cac:	4313      	orrs	r3, r2
 8003cae:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003cb0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003cb4:	2b01      	cmp	r3, #1
 8003cb6:	d105      	bne.n	8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003cb8:	4b57      	ldr	r3, [pc, #348]	; (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003cba:	69db      	ldr	r3, [r3, #28]
 8003cbc:	4a56      	ldr	r2, [pc, #344]	; (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003cbe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003cc2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f003 0301 	and.w	r3, r3, #1
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d008      	beq.n	8003ce2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003cd0:	4b51      	ldr	r3, [pc, #324]	; (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003cd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cd4:	f023 0203 	bic.w	r2, r3, #3
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	689b      	ldr	r3, [r3, #8]
 8003cdc:	494e      	ldr	r1, [pc, #312]	; (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003cde:	4313      	orrs	r3, r2
 8003ce0:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f003 0320 	and.w	r3, r3, #32
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d008      	beq.n	8003d00 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003cee:	4b4a      	ldr	r3, [pc, #296]	; (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cf2:	f023 0210 	bic.w	r2, r3, #16
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	68db      	ldr	r3, [r3, #12]
 8003cfa:	4947      	ldr	r1, [pc, #284]	; (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003cfc:	4313      	orrs	r3, r2
 8003cfe:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d008      	beq.n	8003d1e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003d0c:	4b42      	ldr	r3, [pc, #264]	; (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003d0e:	685b      	ldr	r3, [r3, #4]
 8003d10:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d18:	493f      	ldr	r1, [pc, #252]	; (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003d1a:	4313      	orrs	r3, r2
 8003d1c:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d008      	beq.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003d2a:	4b3b      	ldr	r3, [pc, #236]	; (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d2e:	f023 0220 	bic.w	r2, r3, #32
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	691b      	ldr	r3, [r3, #16]
 8003d36:	4938      	ldr	r1, [pc, #224]	; (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003d38:	4313      	orrs	r3, r2
 8003d3a:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d008      	beq.n	8003d5a <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003d48:	4b33      	ldr	r3, [pc, #204]	; (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003d4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d4c:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	695b      	ldr	r3, [r3, #20]
 8003d54:	4930      	ldr	r1, [pc, #192]	; (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003d56:	4313      	orrs	r3, r2
 8003d58:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d008      	beq.n	8003d78 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003d66:	4b2c      	ldr	r3, [pc, #176]	; (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	69db      	ldr	r3, [r3, #28]
 8003d72:	4929      	ldr	r1, [pc, #164]	; (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003d74:	4313      	orrs	r3, r2
 8003d76:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d008      	beq.n	8003d96 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 8003d84:	4b24      	ldr	r3, [pc, #144]	; (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003d86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d88:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	699b      	ldr	r3, [r3, #24]
 8003d90:	4921      	ldr	r1, [pc, #132]	; (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003d92:	4313      	orrs	r3, r2
 8003d94:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d008      	beq.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003da2:	4b1d      	ldr	r3, [pc, #116]	; (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003da6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6a1b      	ldr	r3, [r3, #32]
 8003dae:	491a      	ldr	r1, [pc, #104]	; (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003db0:	4313      	orrs	r3, r2
 8003db2:	630b      	str	r3, [r1, #48]	; 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d008      	beq.n	8003dd2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8003dc0:	4b15      	ldr	r3, [pc, #84]	; (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003dc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dc4:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dcc:	4912      	ldr	r1, [pc, #72]	; (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003dce:	4313      	orrs	r3, r2
 8003dd0:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d008      	beq.n	8003df0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8003dde:	4b0e      	ldr	r3, [pc, #56]	; (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003de2:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dea:	490b      	ldr	r1, [pc, #44]	; (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003dec:	4313      	orrs	r3, r2
 8003dee:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d008      	beq.n	8003e0e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8003dfc:	4b06      	ldr	r3, [pc, #24]	; (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003dfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e00:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e08:	4903      	ldr	r1, [pc, #12]	; (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003e0a:	4313      	orrs	r3, r2
 8003e0c:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003e0e:	2300      	movs	r3, #0
}
 8003e10:	4618      	mov	r0, r3
 8003e12:	3748      	adds	r7, #72	; 0x48
 8003e14:	46bd      	mov	sp, r7
 8003e16:	bd80      	pop	{r7, pc}
 8003e18:	40021000 	.word	0x40021000

08003e1c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b082      	sub	sp, #8
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d101      	bne.n	8003e2e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	e049      	b.n	8003ec2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e34:	b2db      	uxtb	r3, r3
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d106      	bne.n	8003e48 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003e42:	6878      	ldr	r0, [r7, #4]
 8003e44:	f000 f841 	bl	8003eca <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2202      	movs	r2, #2
 8003e4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681a      	ldr	r2, [r3, #0]
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	3304      	adds	r3, #4
 8003e58:	4619      	mov	r1, r3
 8003e5a:	4610      	mov	r0, r2
 8003e5c:	f000 f9dc 	bl	8004218 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2201      	movs	r2, #1
 8003e64:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2201      	movs	r2, #1
 8003e6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2201      	movs	r2, #1
 8003e74:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2201      	movs	r2, #1
 8003e7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2201      	movs	r2, #1
 8003e84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2201      	movs	r2, #1
 8003e8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2201      	movs	r2, #1
 8003e94:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2201      	movs	r2, #1
 8003e9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2201      	movs	r2, #1
 8003ea4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2201      	movs	r2, #1
 8003eac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2201      	movs	r2, #1
 8003eb4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2201      	movs	r2, #1
 8003ebc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003ec0:	2300      	movs	r3, #0
}
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	3708      	adds	r7, #8
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	bd80      	pop	{r7, pc}

08003eca <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003eca:	b480      	push	{r7}
 8003ecc:	b083      	sub	sp, #12
 8003ece:	af00      	add	r7, sp, #0
 8003ed0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003ed2:	bf00      	nop
 8003ed4:	370c      	adds	r7, #12
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003edc:	4770      	bx	lr
	...

08003ee0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003ee0:	b480      	push	{r7}
 8003ee2:	b085      	sub	sp, #20
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003eee:	b2db      	uxtb	r3, r3
 8003ef0:	2b01      	cmp	r3, #1
 8003ef2:	d001      	beq.n	8003ef8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003ef4:	2301      	movs	r3, #1
 8003ef6:	e03b      	b.n	8003f70 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2202      	movs	r2, #2
 8003efc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	68da      	ldr	r2, [r3, #12]
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f042 0201 	orr.w	r2, r2, #1
 8003f0e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	4a19      	ldr	r2, [pc, #100]	; (8003f7c <HAL_TIM_Base_Start_IT+0x9c>)
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d009      	beq.n	8003f2e <HAL_TIM_Base_Start_IT+0x4e>
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f22:	d004      	beq.n	8003f2e <HAL_TIM_Base_Start_IT+0x4e>
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	4a15      	ldr	r2, [pc, #84]	; (8003f80 <HAL_TIM_Base_Start_IT+0xa0>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d115      	bne.n	8003f5a <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	689a      	ldr	r2, [r3, #8]
 8003f34:	4b13      	ldr	r3, [pc, #76]	; (8003f84 <HAL_TIM_Base_Start_IT+0xa4>)
 8003f36:	4013      	ands	r3, r2
 8003f38:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	2b06      	cmp	r3, #6
 8003f3e:	d015      	beq.n	8003f6c <HAL_TIM_Base_Start_IT+0x8c>
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f46:	d011      	beq.n	8003f6c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	681a      	ldr	r2, [r3, #0]
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f042 0201 	orr.w	r2, r2, #1
 8003f56:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f58:	e008      	b.n	8003f6c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	681a      	ldr	r2, [r3, #0]
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f042 0201 	orr.w	r2, r2, #1
 8003f68:	601a      	str	r2, [r3, #0]
 8003f6a:	e000      	b.n	8003f6e <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f6c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003f6e:	2300      	movs	r3, #0
}
 8003f70:	4618      	mov	r0, r3
 8003f72:	3714      	adds	r7, #20
 8003f74:	46bd      	mov	sp, r7
 8003f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7a:	4770      	bx	lr
 8003f7c:	40012c00 	.word	0x40012c00
 8003f80:	40014000 	.word	0x40014000
 8003f84:	00010007 	.word	0x00010007

08003f88 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b082      	sub	sp, #8
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	691b      	ldr	r3, [r3, #16]
 8003f96:	f003 0302 	and.w	r3, r3, #2
 8003f9a:	2b02      	cmp	r3, #2
 8003f9c:	d122      	bne.n	8003fe4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	68db      	ldr	r3, [r3, #12]
 8003fa4:	f003 0302 	and.w	r3, r3, #2
 8003fa8:	2b02      	cmp	r3, #2
 8003faa:	d11b      	bne.n	8003fe4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f06f 0202 	mvn.w	r2, #2
 8003fb4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2201      	movs	r2, #1
 8003fba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	699b      	ldr	r3, [r3, #24]
 8003fc2:	f003 0303 	and.w	r3, r3, #3
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d003      	beq.n	8003fd2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003fca:	6878      	ldr	r0, [r7, #4]
 8003fcc:	f000 f905 	bl	80041da <HAL_TIM_IC_CaptureCallback>
 8003fd0:	e005      	b.n	8003fde <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fd2:	6878      	ldr	r0, [r7, #4]
 8003fd4:	f000 f8f7 	bl	80041c6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fd8:	6878      	ldr	r0, [r7, #4]
 8003fda:	f000 f908 	bl	80041ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	691b      	ldr	r3, [r3, #16]
 8003fea:	f003 0304 	and.w	r3, r3, #4
 8003fee:	2b04      	cmp	r3, #4
 8003ff0:	d122      	bne.n	8004038 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	68db      	ldr	r3, [r3, #12]
 8003ff8:	f003 0304 	and.w	r3, r3, #4
 8003ffc:	2b04      	cmp	r3, #4
 8003ffe:	d11b      	bne.n	8004038 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f06f 0204 	mvn.w	r2, #4
 8004008:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2202      	movs	r2, #2
 800400e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	699b      	ldr	r3, [r3, #24]
 8004016:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800401a:	2b00      	cmp	r3, #0
 800401c:	d003      	beq.n	8004026 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800401e:	6878      	ldr	r0, [r7, #4]
 8004020:	f000 f8db 	bl	80041da <HAL_TIM_IC_CaptureCallback>
 8004024:	e005      	b.n	8004032 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004026:	6878      	ldr	r0, [r7, #4]
 8004028:	f000 f8cd 	bl	80041c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800402c:	6878      	ldr	r0, [r7, #4]
 800402e:	f000 f8de 	bl	80041ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2200      	movs	r2, #0
 8004036:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	691b      	ldr	r3, [r3, #16]
 800403e:	f003 0308 	and.w	r3, r3, #8
 8004042:	2b08      	cmp	r3, #8
 8004044:	d122      	bne.n	800408c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	68db      	ldr	r3, [r3, #12]
 800404c:	f003 0308 	and.w	r3, r3, #8
 8004050:	2b08      	cmp	r3, #8
 8004052:	d11b      	bne.n	800408c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f06f 0208 	mvn.w	r2, #8
 800405c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2204      	movs	r2, #4
 8004062:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	69db      	ldr	r3, [r3, #28]
 800406a:	f003 0303 	and.w	r3, r3, #3
 800406e:	2b00      	cmp	r3, #0
 8004070:	d003      	beq.n	800407a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004072:	6878      	ldr	r0, [r7, #4]
 8004074:	f000 f8b1 	bl	80041da <HAL_TIM_IC_CaptureCallback>
 8004078:	e005      	b.n	8004086 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800407a:	6878      	ldr	r0, [r7, #4]
 800407c:	f000 f8a3 	bl	80041c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004080:	6878      	ldr	r0, [r7, #4]
 8004082:	f000 f8b4 	bl	80041ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	2200      	movs	r2, #0
 800408a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	691b      	ldr	r3, [r3, #16]
 8004092:	f003 0310 	and.w	r3, r3, #16
 8004096:	2b10      	cmp	r3, #16
 8004098:	d122      	bne.n	80040e0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	68db      	ldr	r3, [r3, #12]
 80040a0:	f003 0310 	and.w	r3, r3, #16
 80040a4:	2b10      	cmp	r3, #16
 80040a6:	d11b      	bne.n	80040e0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f06f 0210 	mvn.w	r2, #16
 80040b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2208      	movs	r2, #8
 80040b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	69db      	ldr	r3, [r3, #28]
 80040be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d003      	beq.n	80040ce <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80040c6:	6878      	ldr	r0, [r7, #4]
 80040c8:	f000 f887 	bl	80041da <HAL_TIM_IC_CaptureCallback>
 80040cc:	e005      	b.n	80040da <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80040ce:	6878      	ldr	r0, [r7, #4]
 80040d0:	f000 f879 	bl	80041c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040d4:	6878      	ldr	r0, [r7, #4]
 80040d6:	f000 f88a 	bl	80041ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2200      	movs	r2, #0
 80040de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	691b      	ldr	r3, [r3, #16]
 80040e6:	f003 0301 	and.w	r3, r3, #1
 80040ea:	2b01      	cmp	r3, #1
 80040ec:	d10e      	bne.n	800410c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	68db      	ldr	r3, [r3, #12]
 80040f4:	f003 0301 	and.w	r3, r3, #1
 80040f8:	2b01      	cmp	r3, #1
 80040fa:	d107      	bne.n	800410c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f06f 0201 	mvn.w	r2, #1
 8004104:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004106:	6878      	ldr	r0, [r7, #4]
 8004108:	f7fc fdf3 	bl	8000cf2 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	691b      	ldr	r3, [r3, #16]
 8004112:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004116:	2b80      	cmp	r3, #128	; 0x80
 8004118:	d10e      	bne.n	8004138 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	68db      	ldr	r3, [r3, #12]
 8004120:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004124:	2b80      	cmp	r3, #128	; 0x80
 8004126:	d107      	bne.n	8004138 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004130:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004132:	6878      	ldr	r0, [r7, #4]
 8004134:	f000 f8e8 	bl	8004308 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	691b      	ldr	r3, [r3, #16]
 800413e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004142:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004146:	d10e      	bne.n	8004166 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	68db      	ldr	r3, [r3, #12]
 800414e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004152:	2b80      	cmp	r3, #128	; 0x80
 8004154:	d107      	bne.n	8004166 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800415e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004160:	6878      	ldr	r0, [r7, #4]
 8004162:	f000 f8db 	bl	800431c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	691b      	ldr	r3, [r3, #16]
 800416c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004170:	2b40      	cmp	r3, #64	; 0x40
 8004172:	d10e      	bne.n	8004192 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	68db      	ldr	r3, [r3, #12]
 800417a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800417e:	2b40      	cmp	r3, #64	; 0x40
 8004180:	d107      	bne.n	8004192 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800418a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800418c:	6878      	ldr	r0, [r7, #4]
 800418e:	f000 f838 	bl	8004202 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	691b      	ldr	r3, [r3, #16]
 8004198:	f003 0320 	and.w	r3, r3, #32
 800419c:	2b20      	cmp	r3, #32
 800419e:	d10e      	bne.n	80041be <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	68db      	ldr	r3, [r3, #12]
 80041a6:	f003 0320 	and.w	r3, r3, #32
 80041aa:	2b20      	cmp	r3, #32
 80041ac:	d107      	bne.n	80041be <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f06f 0220 	mvn.w	r2, #32
 80041b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80041b8:	6878      	ldr	r0, [r7, #4]
 80041ba:	f000 f89b 	bl	80042f4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80041be:	bf00      	nop
 80041c0:	3708      	adds	r7, #8
 80041c2:	46bd      	mov	sp, r7
 80041c4:	bd80      	pop	{r7, pc}

080041c6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80041c6:	b480      	push	{r7}
 80041c8:	b083      	sub	sp, #12
 80041ca:	af00      	add	r7, sp, #0
 80041cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80041ce:	bf00      	nop
 80041d0:	370c      	adds	r7, #12
 80041d2:	46bd      	mov	sp, r7
 80041d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d8:	4770      	bx	lr

080041da <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80041da:	b480      	push	{r7}
 80041dc:	b083      	sub	sp, #12
 80041de:	af00      	add	r7, sp, #0
 80041e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80041e2:	bf00      	nop
 80041e4:	370c      	adds	r7, #12
 80041e6:	46bd      	mov	sp, r7
 80041e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ec:	4770      	bx	lr

080041ee <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80041ee:	b480      	push	{r7}
 80041f0:	b083      	sub	sp, #12
 80041f2:	af00      	add	r7, sp, #0
 80041f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80041f6:	bf00      	nop
 80041f8:	370c      	adds	r7, #12
 80041fa:	46bd      	mov	sp, r7
 80041fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004200:	4770      	bx	lr

08004202 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004202:	b480      	push	{r7}
 8004204:	b083      	sub	sp, #12
 8004206:	af00      	add	r7, sp, #0
 8004208:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800420a:	bf00      	nop
 800420c:	370c      	adds	r7, #12
 800420e:	46bd      	mov	sp, r7
 8004210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004214:	4770      	bx	lr
	...

08004218 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004218:	b480      	push	{r7}
 800421a:	b085      	sub	sp, #20
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
 8004220:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	4a2e      	ldr	r2, [pc, #184]	; (80042e4 <TIM_Base_SetConfig+0xcc>)
 800422c:	4293      	cmp	r3, r2
 800422e:	d003      	beq.n	8004238 <TIM_Base_SetConfig+0x20>
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004236:	d108      	bne.n	800424a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800423e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	685b      	ldr	r3, [r3, #4]
 8004244:	68fa      	ldr	r2, [r7, #12]
 8004246:	4313      	orrs	r3, r2
 8004248:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	4a25      	ldr	r2, [pc, #148]	; (80042e4 <TIM_Base_SetConfig+0xcc>)
 800424e:	4293      	cmp	r3, r2
 8004250:	d00f      	beq.n	8004272 <TIM_Base_SetConfig+0x5a>
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004258:	d00b      	beq.n	8004272 <TIM_Base_SetConfig+0x5a>
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	4a22      	ldr	r2, [pc, #136]	; (80042e8 <TIM_Base_SetConfig+0xd0>)
 800425e:	4293      	cmp	r3, r2
 8004260:	d007      	beq.n	8004272 <TIM_Base_SetConfig+0x5a>
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	4a21      	ldr	r2, [pc, #132]	; (80042ec <TIM_Base_SetConfig+0xd4>)
 8004266:	4293      	cmp	r3, r2
 8004268:	d003      	beq.n	8004272 <TIM_Base_SetConfig+0x5a>
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	4a20      	ldr	r2, [pc, #128]	; (80042f0 <TIM_Base_SetConfig+0xd8>)
 800426e:	4293      	cmp	r3, r2
 8004270:	d108      	bne.n	8004284 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004278:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	68db      	ldr	r3, [r3, #12]
 800427e:	68fa      	ldr	r2, [r7, #12]
 8004280:	4313      	orrs	r3, r2
 8004282:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	695b      	ldr	r3, [r3, #20]
 800428e:	4313      	orrs	r3, r2
 8004290:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	68fa      	ldr	r2, [r7, #12]
 8004296:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	689a      	ldr	r2, [r3, #8]
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	681a      	ldr	r2, [r3, #0]
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	4a0e      	ldr	r2, [pc, #56]	; (80042e4 <TIM_Base_SetConfig+0xcc>)
 80042ac:	4293      	cmp	r3, r2
 80042ae:	d00b      	beq.n	80042c8 <TIM_Base_SetConfig+0xb0>
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	4a0d      	ldr	r2, [pc, #52]	; (80042e8 <TIM_Base_SetConfig+0xd0>)
 80042b4:	4293      	cmp	r3, r2
 80042b6:	d007      	beq.n	80042c8 <TIM_Base_SetConfig+0xb0>
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	4a0c      	ldr	r2, [pc, #48]	; (80042ec <TIM_Base_SetConfig+0xd4>)
 80042bc:	4293      	cmp	r3, r2
 80042be:	d003      	beq.n	80042c8 <TIM_Base_SetConfig+0xb0>
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	4a0b      	ldr	r2, [pc, #44]	; (80042f0 <TIM_Base_SetConfig+0xd8>)
 80042c4:	4293      	cmp	r3, r2
 80042c6:	d103      	bne.n	80042d0 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	691a      	ldr	r2, [r3, #16]
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2201      	movs	r2, #1
 80042d4:	615a      	str	r2, [r3, #20]
}
 80042d6:	bf00      	nop
 80042d8:	3714      	adds	r7, #20
 80042da:	46bd      	mov	sp, r7
 80042dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e0:	4770      	bx	lr
 80042e2:	bf00      	nop
 80042e4:	40012c00 	.word	0x40012c00
 80042e8:	40014000 	.word	0x40014000
 80042ec:	40014400 	.word	0x40014400
 80042f0:	40014800 	.word	0x40014800

080042f4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80042f4:	b480      	push	{r7}
 80042f6:	b083      	sub	sp, #12
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80042fc:	bf00      	nop
 80042fe:	370c      	adds	r7, #12
 8004300:	46bd      	mov	sp, r7
 8004302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004306:	4770      	bx	lr

08004308 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004308:	b480      	push	{r7}
 800430a:	b083      	sub	sp, #12
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004310:	bf00      	nop
 8004312:	370c      	adds	r7, #12
 8004314:	46bd      	mov	sp, r7
 8004316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431a:	4770      	bx	lr

0800431c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800431c:	b480      	push	{r7}
 800431e:	b083      	sub	sp, #12
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004324:	bf00      	nop
 8004326:	370c      	adds	r7, #12
 8004328:	46bd      	mov	sp, r7
 800432a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432e:	4770      	bx	lr

08004330 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b082      	sub	sp, #8
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d101      	bne.n	8004342 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800433e:	2301      	movs	r3, #1
 8004340:	e040      	b.n	80043c4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004346:	2b00      	cmp	r3, #0
 8004348:	d106      	bne.n	8004358 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	2200      	movs	r2, #0
 800434e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004352:	6878      	ldr	r0, [r7, #4]
 8004354:	f7fc fd74 	bl	8000e40 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2224      	movs	r2, #36	; 0x24
 800435c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	681a      	ldr	r2, [r3, #0]
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f022 0201 	bic.w	r2, r2, #1
 800436c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800436e:	6878      	ldr	r0, [r7, #4]
 8004370:	f000 f8b6 	bl	80044e0 <UART_SetConfig>
 8004374:	4603      	mov	r3, r0
 8004376:	2b01      	cmp	r3, #1
 8004378:	d101      	bne.n	800437e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800437a:	2301      	movs	r3, #1
 800437c:	e022      	b.n	80043c4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004382:	2b00      	cmp	r3, #0
 8004384:	d002      	beq.n	800438c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004386:	6878      	ldr	r0, [r7, #4]
 8004388:	f000 f9e0 	bl	800474c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	685a      	ldr	r2, [r3, #4]
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800439a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	689a      	ldr	r2, [r3, #8]
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80043aa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	681a      	ldr	r2, [r3, #0]
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f042 0201 	orr.w	r2, r2, #1
 80043ba:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80043bc:	6878      	ldr	r0, [r7, #4]
 80043be:	f000 fa67 	bl	8004890 <UART_CheckIdleState>
 80043c2:	4603      	mov	r3, r0
}
 80043c4:	4618      	mov	r0, r3
 80043c6:	3708      	adds	r7, #8
 80043c8:	46bd      	mov	sp, r7
 80043ca:	bd80      	pop	{r7, pc}

080043cc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b08a      	sub	sp, #40	; 0x28
 80043d0:	af02      	add	r7, sp, #8
 80043d2:	60f8      	str	r0, [r7, #12]
 80043d4:	60b9      	str	r1, [r7, #8]
 80043d6:	603b      	str	r3, [r7, #0]
 80043d8:	4613      	mov	r3, r2
 80043da:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80043e0:	2b20      	cmp	r3, #32
 80043e2:	d178      	bne.n	80044d6 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 80043e4:	68bb      	ldr	r3, [r7, #8]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d002      	beq.n	80043f0 <HAL_UART_Transmit+0x24>
 80043ea:	88fb      	ldrh	r3, [r7, #6]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d101      	bne.n	80043f4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80043f0:	2301      	movs	r3, #1
 80043f2:	e071      	b.n	80044d8 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	2200      	movs	r2, #0
 80043f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	2221      	movs	r2, #33	; 0x21
 8004400:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004402:	f7fc fe9d 	bl	8001140 <HAL_GetTick>
 8004406:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	88fa      	ldrh	r2, [r7, #6]
 800440c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	88fa      	ldrh	r2, [r7, #6]
 8004414:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	689b      	ldr	r3, [r3, #8]
 800441c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004420:	d108      	bne.n	8004434 <HAL_UART_Transmit+0x68>
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	691b      	ldr	r3, [r3, #16]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d104      	bne.n	8004434 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800442a:	2300      	movs	r3, #0
 800442c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800442e:	68bb      	ldr	r3, [r7, #8]
 8004430:	61bb      	str	r3, [r7, #24]
 8004432:	e003      	b.n	800443c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004434:	68bb      	ldr	r3, [r7, #8]
 8004436:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004438:	2300      	movs	r3, #0
 800443a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800443c:	e030      	b.n	80044a0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	9300      	str	r3, [sp, #0]
 8004442:	697b      	ldr	r3, [r7, #20]
 8004444:	2200      	movs	r2, #0
 8004446:	2180      	movs	r1, #128	; 0x80
 8004448:	68f8      	ldr	r0, [r7, #12]
 800444a:	f000 fac9 	bl	80049e0 <UART_WaitOnFlagUntilTimeout>
 800444e:	4603      	mov	r3, r0
 8004450:	2b00      	cmp	r3, #0
 8004452:	d004      	beq.n	800445e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	2220      	movs	r2, #32
 8004458:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800445a:	2303      	movs	r3, #3
 800445c:	e03c      	b.n	80044d8 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 800445e:	69fb      	ldr	r3, [r7, #28]
 8004460:	2b00      	cmp	r3, #0
 8004462:	d10b      	bne.n	800447c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004464:	69bb      	ldr	r3, [r7, #24]
 8004466:	881a      	ldrh	r2, [r3, #0]
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004470:	b292      	uxth	r2, r2
 8004472:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004474:	69bb      	ldr	r3, [r7, #24]
 8004476:	3302      	adds	r3, #2
 8004478:	61bb      	str	r3, [r7, #24]
 800447a:	e008      	b.n	800448e <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800447c:	69fb      	ldr	r3, [r7, #28]
 800447e:	781a      	ldrb	r2, [r3, #0]
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	b292      	uxth	r2, r2
 8004486:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004488:	69fb      	ldr	r3, [r7, #28]
 800448a:	3301      	adds	r3, #1
 800448c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004494:	b29b      	uxth	r3, r3
 8004496:	3b01      	subs	r3, #1
 8004498:	b29a      	uxth	r2, r3
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80044a6:	b29b      	uxth	r3, r3
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d1c8      	bne.n	800443e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	9300      	str	r3, [sp, #0]
 80044b0:	697b      	ldr	r3, [r7, #20]
 80044b2:	2200      	movs	r2, #0
 80044b4:	2140      	movs	r1, #64	; 0x40
 80044b6:	68f8      	ldr	r0, [r7, #12]
 80044b8:	f000 fa92 	bl	80049e0 <UART_WaitOnFlagUntilTimeout>
 80044bc:	4603      	mov	r3, r0
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d004      	beq.n	80044cc <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	2220      	movs	r2, #32
 80044c6:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80044c8:	2303      	movs	r3, #3
 80044ca:	e005      	b.n	80044d8 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	2220      	movs	r2, #32
 80044d0:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80044d2:	2300      	movs	r3, #0
 80044d4:	e000      	b.n	80044d8 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 80044d6:	2302      	movs	r3, #2
  }
}
 80044d8:	4618      	mov	r0, r3
 80044da:	3720      	adds	r7, #32
 80044dc:	46bd      	mov	sp, r7
 80044de:	bd80      	pop	{r7, pc}

080044e0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b088      	sub	sp, #32
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80044e8:	2300      	movs	r3, #0
 80044ea:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	689a      	ldr	r2, [r3, #8]
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	691b      	ldr	r3, [r3, #16]
 80044f4:	431a      	orrs	r2, r3
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	695b      	ldr	r3, [r3, #20]
 80044fa:	431a      	orrs	r2, r3
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	69db      	ldr	r3, [r3, #28]
 8004500:	4313      	orrs	r3, r2
 8004502:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	681a      	ldr	r2, [r3, #0]
 800450a:	4b8a      	ldr	r3, [pc, #552]	; (8004734 <UART_SetConfig+0x254>)
 800450c:	4013      	ands	r3, r2
 800450e:	687a      	ldr	r2, [r7, #4]
 8004510:	6812      	ldr	r2, [r2, #0]
 8004512:	6979      	ldr	r1, [r7, #20]
 8004514:	430b      	orrs	r3, r1
 8004516:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	685b      	ldr	r3, [r3, #4]
 800451e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	68da      	ldr	r2, [r3, #12]
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	430a      	orrs	r2, r1
 800452c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	699b      	ldr	r3, [r3, #24]
 8004532:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6a1b      	ldr	r3, [r3, #32]
 8004538:	697a      	ldr	r2, [r7, #20]
 800453a:	4313      	orrs	r3, r2
 800453c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	689b      	ldr	r3, [r3, #8]
 8004544:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	697a      	ldr	r2, [r7, #20]
 800454e:	430a      	orrs	r2, r1
 8004550:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	4a78      	ldr	r2, [pc, #480]	; (8004738 <UART_SetConfig+0x258>)
 8004558:	4293      	cmp	r3, r2
 800455a:	d120      	bne.n	800459e <UART_SetConfig+0xbe>
 800455c:	4b77      	ldr	r3, [pc, #476]	; (800473c <UART_SetConfig+0x25c>)
 800455e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004560:	f003 0303 	and.w	r3, r3, #3
 8004564:	2b03      	cmp	r3, #3
 8004566:	d817      	bhi.n	8004598 <UART_SetConfig+0xb8>
 8004568:	a201      	add	r2, pc, #4	; (adr r2, 8004570 <UART_SetConfig+0x90>)
 800456a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800456e:	bf00      	nop
 8004570:	08004581 	.word	0x08004581
 8004574:	0800458d 	.word	0x0800458d
 8004578:	08004593 	.word	0x08004593
 800457c:	08004587 	.word	0x08004587
 8004580:	2300      	movs	r3, #0
 8004582:	77fb      	strb	r3, [r7, #31]
 8004584:	e01d      	b.n	80045c2 <UART_SetConfig+0xe2>
 8004586:	2302      	movs	r3, #2
 8004588:	77fb      	strb	r3, [r7, #31]
 800458a:	e01a      	b.n	80045c2 <UART_SetConfig+0xe2>
 800458c:	2304      	movs	r3, #4
 800458e:	77fb      	strb	r3, [r7, #31]
 8004590:	e017      	b.n	80045c2 <UART_SetConfig+0xe2>
 8004592:	2308      	movs	r3, #8
 8004594:	77fb      	strb	r3, [r7, #31]
 8004596:	e014      	b.n	80045c2 <UART_SetConfig+0xe2>
 8004598:	2310      	movs	r3, #16
 800459a:	77fb      	strb	r3, [r7, #31]
 800459c:	e011      	b.n	80045c2 <UART_SetConfig+0xe2>
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	4a67      	ldr	r2, [pc, #412]	; (8004740 <UART_SetConfig+0x260>)
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d102      	bne.n	80045ae <UART_SetConfig+0xce>
 80045a8:	2300      	movs	r3, #0
 80045aa:	77fb      	strb	r3, [r7, #31]
 80045ac:	e009      	b.n	80045c2 <UART_SetConfig+0xe2>
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	4a64      	ldr	r2, [pc, #400]	; (8004744 <UART_SetConfig+0x264>)
 80045b4:	4293      	cmp	r3, r2
 80045b6:	d102      	bne.n	80045be <UART_SetConfig+0xde>
 80045b8:	2300      	movs	r3, #0
 80045ba:	77fb      	strb	r3, [r7, #31]
 80045bc:	e001      	b.n	80045c2 <UART_SetConfig+0xe2>
 80045be:	2310      	movs	r3, #16
 80045c0:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	69db      	ldr	r3, [r3, #28]
 80045c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80045ca:	d15a      	bne.n	8004682 <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 80045cc:	7ffb      	ldrb	r3, [r7, #31]
 80045ce:	2b08      	cmp	r3, #8
 80045d0:	d827      	bhi.n	8004622 <UART_SetConfig+0x142>
 80045d2:	a201      	add	r2, pc, #4	; (adr r2, 80045d8 <UART_SetConfig+0xf8>)
 80045d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045d8:	080045fd 	.word	0x080045fd
 80045dc:	08004605 	.word	0x08004605
 80045e0:	0800460d 	.word	0x0800460d
 80045e4:	08004623 	.word	0x08004623
 80045e8:	08004613 	.word	0x08004613
 80045ec:	08004623 	.word	0x08004623
 80045f0:	08004623 	.word	0x08004623
 80045f4:	08004623 	.word	0x08004623
 80045f8:	0800461b 	.word	0x0800461b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80045fc:	f7ff fa06 	bl	8003a0c <HAL_RCC_GetPCLK1Freq>
 8004600:	61b8      	str	r0, [r7, #24]
        break;
 8004602:	e013      	b.n	800462c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004604:	f7ff fa24 	bl	8003a50 <HAL_RCC_GetPCLK2Freq>
 8004608:	61b8      	str	r0, [r7, #24]
        break;
 800460a:	e00f      	b.n	800462c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800460c:	4b4e      	ldr	r3, [pc, #312]	; (8004748 <UART_SetConfig+0x268>)
 800460e:	61bb      	str	r3, [r7, #24]
        break;
 8004610:	e00c      	b.n	800462c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004612:	f7ff f985 	bl	8003920 <HAL_RCC_GetSysClockFreq>
 8004616:	61b8      	str	r0, [r7, #24]
        break;
 8004618:	e008      	b.n	800462c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800461a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800461e:	61bb      	str	r3, [r7, #24]
        break;
 8004620:	e004      	b.n	800462c <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8004622:	2300      	movs	r3, #0
 8004624:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004626:	2301      	movs	r3, #1
 8004628:	77bb      	strb	r3, [r7, #30]
        break;
 800462a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800462c:	69bb      	ldr	r3, [r7, #24]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d074      	beq.n	800471c <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004632:	69bb      	ldr	r3, [r7, #24]
 8004634:	005a      	lsls	r2, r3, #1
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	685b      	ldr	r3, [r3, #4]
 800463a:	085b      	lsrs	r3, r3, #1
 800463c:	441a      	add	r2, r3
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	685b      	ldr	r3, [r3, #4]
 8004642:	fbb2 f3f3 	udiv	r3, r2, r3
 8004646:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004648:	693b      	ldr	r3, [r7, #16]
 800464a:	2b0f      	cmp	r3, #15
 800464c:	d916      	bls.n	800467c <UART_SetConfig+0x19c>
 800464e:	693b      	ldr	r3, [r7, #16]
 8004650:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004654:	d212      	bcs.n	800467c <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004656:	693b      	ldr	r3, [r7, #16]
 8004658:	b29b      	uxth	r3, r3
 800465a:	f023 030f 	bic.w	r3, r3, #15
 800465e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004660:	693b      	ldr	r3, [r7, #16]
 8004662:	085b      	lsrs	r3, r3, #1
 8004664:	b29b      	uxth	r3, r3
 8004666:	f003 0307 	and.w	r3, r3, #7
 800466a:	b29a      	uxth	r2, r3
 800466c:	89fb      	ldrh	r3, [r7, #14]
 800466e:	4313      	orrs	r3, r2
 8004670:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	89fa      	ldrh	r2, [r7, #14]
 8004678:	60da      	str	r2, [r3, #12]
 800467a:	e04f      	b.n	800471c <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 800467c:	2301      	movs	r3, #1
 800467e:	77bb      	strb	r3, [r7, #30]
 8004680:	e04c      	b.n	800471c <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004682:	7ffb      	ldrb	r3, [r7, #31]
 8004684:	2b08      	cmp	r3, #8
 8004686:	d828      	bhi.n	80046da <UART_SetConfig+0x1fa>
 8004688:	a201      	add	r2, pc, #4	; (adr r2, 8004690 <UART_SetConfig+0x1b0>)
 800468a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800468e:	bf00      	nop
 8004690:	080046b5 	.word	0x080046b5
 8004694:	080046bd 	.word	0x080046bd
 8004698:	080046c5 	.word	0x080046c5
 800469c:	080046db 	.word	0x080046db
 80046a0:	080046cb 	.word	0x080046cb
 80046a4:	080046db 	.word	0x080046db
 80046a8:	080046db 	.word	0x080046db
 80046ac:	080046db 	.word	0x080046db
 80046b0:	080046d3 	.word	0x080046d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80046b4:	f7ff f9aa 	bl	8003a0c <HAL_RCC_GetPCLK1Freq>
 80046b8:	61b8      	str	r0, [r7, #24]
        break;
 80046ba:	e013      	b.n	80046e4 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80046bc:	f7ff f9c8 	bl	8003a50 <HAL_RCC_GetPCLK2Freq>
 80046c0:	61b8      	str	r0, [r7, #24]
        break;
 80046c2:	e00f      	b.n	80046e4 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80046c4:	4b20      	ldr	r3, [pc, #128]	; (8004748 <UART_SetConfig+0x268>)
 80046c6:	61bb      	str	r3, [r7, #24]
        break;
 80046c8:	e00c      	b.n	80046e4 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80046ca:	f7ff f929 	bl	8003920 <HAL_RCC_GetSysClockFreq>
 80046ce:	61b8      	str	r0, [r7, #24]
        break;
 80046d0:	e008      	b.n	80046e4 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80046d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80046d6:	61bb      	str	r3, [r7, #24]
        break;
 80046d8:	e004      	b.n	80046e4 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 80046da:	2300      	movs	r3, #0
 80046dc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80046de:	2301      	movs	r3, #1
 80046e0:	77bb      	strb	r3, [r7, #30]
        break;
 80046e2:	bf00      	nop
    }

    if (pclk != 0U)
 80046e4:	69bb      	ldr	r3, [r7, #24]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d018      	beq.n	800471c <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	685b      	ldr	r3, [r3, #4]
 80046ee:	085a      	lsrs	r2, r3, #1
 80046f0:	69bb      	ldr	r3, [r7, #24]
 80046f2:	441a      	add	r2, r3
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	685b      	ldr	r3, [r3, #4]
 80046f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80046fc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80046fe:	693b      	ldr	r3, [r7, #16]
 8004700:	2b0f      	cmp	r3, #15
 8004702:	d909      	bls.n	8004718 <UART_SetConfig+0x238>
 8004704:	693b      	ldr	r3, [r7, #16]
 8004706:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800470a:	d205      	bcs.n	8004718 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800470c:	693b      	ldr	r3, [r7, #16]
 800470e:	b29a      	uxth	r2, r3
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	60da      	str	r2, [r3, #12]
 8004716:	e001      	b.n	800471c <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8004718:	2301      	movs	r3, #1
 800471a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2200      	movs	r2, #0
 8004720:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	2200      	movs	r2, #0
 8004726:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004728:	7fbb      	ldrb	r3, [r7, #30]
}
 800472a:	4618      	mov	r0, r3
 800472c:	3720      	adds	r7, #32
 800472e:	46bd      	mov	sp, r7
 8004730:	bd80      	pop	{r7, pc}
 8004732:	bf00      	nop
 8004734:	efff69f3 	.word	0xefff69f3
 8004738:	40013800 	.word	0x40013800
 800473c:	40021000 	.word	0x40021000
 8004740:	40004400 	.word	0x40004400
 8004744:	40004800 	.word	0x40004800
 8004748:	007a1200 	.word	0x007a1200

0800474c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800474c:	b480      	push	{r7}
 800474e:	b083      	sub	sp, #12
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004758:	f003 0301 	and.w	r3, r3, #1
 800475c:	2b00      	cmp	r3, #0
 800475e:	d00a      	beq.n	8004776 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	685b      	ldr	r3, [r3, #4]
 8004766:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	430a      	orrs	r2, r1
 8004774:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800477a:	f003 0302 	and.w	r3, r3, #2
 800477e:	2b00      	cmp	r3, #0
 8004780:	d00a      	beq.n	8004798 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	685b      	ldr	r3, [r3, #4]
 8004788:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	430a      	orrs	r2, r1
 8004796:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800479c:	f003 0304 	and.w	r3, r3, #4
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d00a      	beq.n	80047ba <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	685b      	ldr	r3, [r3, #4]
 80047aa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	430a      	orrs	r2, r1
 80047b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047be:	f003 0308 	and.w	r3, r3, #8
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d00a      	beq.n	80047dc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	685b      	ldr	r3, [r3, #4]
 80047cc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	430a      	orrs	r2, r1
 80047da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047e0:	f003 0310 	and.w	r3, r3, #16
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d00a      	beq.n	80047fe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	689b      	ldr	r3, [r3, #8]
 80047ee:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	430a      	orrs	r2, r1
 80047fc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004802:	f003 0320 	and.w	r3, r3, #32
 8004806:	2b00      	cmp	r3, #0
 8004808:	d00a      	beq.n	8004820 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	689b      	ldr	r3, [r3, #8]
 8004810:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	430a      	orrs	r2, r1
 800481e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004824:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004828:	2b00      	cmp	r3, #0
 800482a:	d01a      	beq.n	8004862 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	685b      	ldr	r3, [r3, #4]
 8004832:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	430a      	orrs	r2, r1
 8004840:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004846:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800484a:	d10a      	bne.n	8004862 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	685b      	ldr	r3, [r3, #4]
 8004852:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	430a      	orrs	r2, r1
 8004860:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004866:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800486a:	2b00      	cmp	r3, #0
 800486c:	d00a      	beq.n	8004884 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	685b      	ldr	r3, [r3, #4]
 8004874:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	430a      	orrs	r2, r1
 8004882:	605a      	str	r2, [r3, #4]
  }
}
 8004884:	bf00      	nop
 8004886:	370c      	adds	r7, #12
 8004888:	46bd      	mov	sp, r7
 800488a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488e:	4770      	bx	lr

08004890 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004890:	b580      	push	{r7, lr}
 8004892:	b098      	sub	sp, #96	; 0x60
 8004894:	af02      	add	r7, sp, #8
 8004896:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2200      	movs	r2, #0
 800489c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80048a0:	f7fc fc4e 	bl	8001140 <HAL_GetTick>
 80048a4:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f003 0308 	and.w	r3, r3, #8
 80048b0:	2b08      	cmp	r3, #8
 80048b2:	d12e      	bne.n	8004912 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80048b4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80048b8:	9300      	str	r3, [sp, #0]
 80048ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80048bc:	2200      	movs	r2, #0
 80048be:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80048c2:	6878      	ldr	r0, [r7, #4]
 80048c4:	f000 f88c 	bl	80049e0 <UART_WaitOnFlagUntilTimeout>
 80048c8:	4603      	mov	r3, r0
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d021      	beq.n	8004912 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048d6:	e853 3f00 	ldrex	r3, [r3]
 80048da:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80048dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048de:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80048e2:	653b      	str	r3, [r7, #80]	; 0x50
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	461a      	mov	r2, r3
 80048ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80048ec:	647b      	str	r3, [r7, #68]	; 0x44
 80048ee:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048f0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80048f2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80048f4:	e841 2300 	strex	r3, r2, [r1]
 80048f8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80048fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d1e6      	bne.n	80048ce <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2220      	movs	r2, #32
 8004904:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2200      	movs	r2, #0
 800490a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800490e:	2303      	movs	r3, #3
 8004910:	e062      	b.n	80049d8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f003 0304 	and.w	r3, r3, #4
 800491c:	2b04      	cmp	r3, #4
 800491e:	d149      	bne.n	80049b4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004920:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004924:	9300      	str	r3, [sp, #0]
 8004926:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004928:	2200      	movs	r2, #0
 800492a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800492e:	6878      	ldr	r0, [r7, #4]
 8004930:	f000 f856 	bl	80049e0 <UART_WaitOnFlagUntilTimeout>
 8004934:	4603      	mov	r3, r0
 8004936:	2b00      	cmp	r3, #0
 8004938:	d03c      	beq.n	80049b4 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004942:	e853 3f00 	ldrex	r3, [r3]
 8004946:	623b      	str	r3, [r7, #32]
   return(result);
 8004948:	6a3b      	ldr	r3, [r7, #32]
 800494a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800494e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	461a      	mov	r2, r3
 8004956:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004958:	633b      	str	r3, [r7, #48]	; 0x30
 800495a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800495c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800495e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004960:	e841 2300 	strex	r3, r2, [r1]
 8004964:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004966:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004968:	2b00      	cmp	r3, #0
 800496a:	d1e6      	bne.n	800493a <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	3308      	adds	r3, #8
 8004972:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004974:	693b      	ldr	r3, [r7, #16]
 8004976:	e853 3f00 	ldrex	r3, [r3]
 800497a:	60fb      	str	r3, [r7, #12]
   return(result);
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	f023 0301 	bic.w	r3, r3, #1
 8004982:	64bb      	str	r3, [r7, #72]	; 0x48
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	3308      	adds	r3, #8
 800498a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800498c:	61fa      	str	r2, [r7, #28]
 800498e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004990:	69b9      	ldr	r1, [r7, #24]
 8004992:	69fa      	ldr	r2, [r7, #28]
 8004994:	e841 2300 	strex	r3, r2, [r1]
 8004998:	617b      	str	r3, [r7, #20]
   return(result);
 800499a:	697b      	ldr	r3, [r7, #20]
 800499c:	2b00      	cmp	r3, #0
 800499e:	d1e5      	bne.n	800496c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2220      	movs	r2, #32
 80049a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2200      	movs	r2, #0
 80049ac:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80049b0:	2303      	movs	r3, #3
 80049b2:	e011      	b.n	80049d8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2220      	movs	r2, #32
 80049b8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	2220      	movs	r2, #32
 80049be:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	2200      	movs	r2, #0
 80049c6:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2200      	movs	r2, #0
 80049cc:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	2200      	movs	r2, #0
 80049d2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80049d6:	2300      	movs	r3, #0
}
 80049d8:	4618      	mov	r0, r3
 80049da:	3758      	adds	r7, #88	; 0x58
 80049dc:	46bd      	mov	sp, r7
 80049de:	bd80      	pop	{r7, pc}

080049e0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b084      	sub	sp, #16
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	60f8      	str	r0, [r7, #12]
 80049e8:	60b9      	str	r1, [r7, #8]
 80049ea:	603b      	str	r3, [r7, #0]
 80049ec:	4613      	mov	r3, r2
 80049ee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80049f0:	e049      	b.n	8004a86 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049f2:	69bb      	ldr	r3, [r7, #24]
 80049f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049f8:	d045      	beq.n	8004a86 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049fa:	f7fc fba1 	bl	8001140 <HAL_GetTick>
 80049fe:	4602      	mov	r2, r0
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	1ad3      	subs	r3, r2, r3
 8004a04:	69ba      	ldr	r2, [r7, #24]
 8004a06:	429a      	cmp	r2, r3
 8004a08:	d302      	bcc.n	8004a10 <UART_WaitOnFlagUntilTimeout+0x30>
 8004a0a:	69bb      	ldr	r3, [r7, #24]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d101      	bne.n	8004a14 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004a10:	2303      	movs	r3, #3
 8004a12:	e048      	b.n	8004aa6 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f003 0304 	and.w	r3, r3, #4
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d031      	beq.n	8004a86 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	69db      	ldr	r3, [r3, #28]
 8004a28:	f003 0308 	and.w	r3, r3, #8
 8004a2c:	2b08      	cmp	r3, #8
 8004a2e:	d110      	bne.n	8004a52 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	2208      	movs	r2, #8
 8004a36:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8004a38:	68f8      	ldr	r0, [r7, #12]
 8004a3a:	f000 f838 	bl	8004aae <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	2208      	movs	r2, #8
 8004a42:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	2200      	movs	r2, #0
 8004a4a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8004a4e:	2301      	movs	r3, #1
 8004a50:	e029      	b.n	8004aa6 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	69db      	ldr	r3, [r3, #28]
 8004a58:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a5c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a60:	d111      	bne.n	8004a86 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004a6a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004a6c:	68f8      	ldr	r0, [r7, #12]
 8004a6e:	f000 f81e 	bl	8004aae <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	2220      	movs	r2, #32
 8004a76:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004a82:	2303      	movs	r3, #3
 8004a84:	e00f      	b.n	8004aa6 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	69da      	ldr	r2, [r3, #28]
 8004a8c:	68bb      	ldr	r3, [r7, #8]
 8004a8e:	4013      	ands	r3, r2
 8004a90:	68ba      	ldr	r2, [r7, #8]
 8004a92:	429a      	cmp	r2, r3
 8004a94:	bf0c      	ite	eq
 8004a96:	2301      	moveq	r3, #1
 8004a98:	2300      	movne	r3, #0
 8004a9a:	b2db      	uxtb	r3, r3
 8004a9c:	461a      	mov	r2, r3
 8004a9e:	79fb      	ldrb	r3, [r7, #7]
 8004aa0:	429a      	cmp	r2, r3
 8004aa2:	d0a6      	beq.n	80049f2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004aa4:	2300      	movs	r3, #0
}
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	3710      	adds	r7, #16
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	bd80      	pop	{r7, pc}

08004aae <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004aae:	b480      	push	{r7}
 8004ab0:	b095      	sub	sp, #84	; 0x54
 8004ab2:	af00      	add	r7, sp, #0
 8004ab4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004abc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004abe:	e853 3f00 	ldrex	r3, [r3]
 8004ac2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004ac4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ac6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004aca:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	461a      	mov	r2, r3
 8004ad2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ad4:	643b      	str	r3, [r7, #64]	; 0x40
 8004ad6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ad8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004ada:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004adc:	e841 2300 	strex	r3, r2, [r1]
 8004ae0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004ae2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d1e6      	bne.n	8004ab6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	3308      	adds	r3, #8
 8004aee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004af0:	6a3b      	ldr	r3, [r7, #32]
 8004af2:	e853 3f00 	ldrex	r3, [r3]
 8004af6:	61fb      	str	r3, [r7, #28]
   return(result);
 8004af8:	69fb      	ldr	r3, [r7, #28]
 8004afa:	f023 0301 	bic.w	r3, r3, #1
 8004afe:	64bb      	str	r3, [r7, #72]	; 0x48
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	3308      	adds	r3, #8
 8004b06:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004b08:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004b0a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b0c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004b0e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004b10:	e841 2300 	strex	r3, r2, [r1]
 8004b14:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d1e5      	bne.n	8004ae8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b20:	2b01      	cmp	r3, #1
 8004b22:	d118      	bne.n	8004b56 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	e853 3f00 	ldrex	r3, [r3]
 8004b30:	60bb      	str	r3, [r7, #8]
   return(result);
 8004b32:	68bb      	ldr	r3, [r7, #8]
 8004b34:	f023 0310 	bic.w	r3, r3, #16
 8004b38:	647b      	str	r3, [r7, #68]	; 0x44
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	461a      	mov	r2, r3
 8004b40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b42:	61bb      	str	r3, [r7, #24]
 8004b44:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b46:	6979      	ldr	r1, [r7, #20]
 8004b48:	69ba      	ldr	r2, [r7, #24]
 8004b4a:	e841 2300 	strex	r3, r2, [r1]
 8004b4e:	613b      	str	r3, [r7, #16]
   return(result);
 8004b50:	693b      	ldr	r3, [r7, #16]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d1e6      	bne.n	8004b24 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	2220      	movs	r2, #32
 8004b5a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2200      	movs	r2, #0
 8004b62:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2200      	movs	r2, #0
 8004b68:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004b6a:	bf00      	nop
 8004b6c:	3754      	adds	r7, #84	; 0x54
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b74:	4770      	bx	lr

08004b76 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8004b76:	b480      	push	{r7}
 8004b78:	b085      	sub	sp, #20
 8004b7a:	af00      	add	r7, sp, #0
 8004b7c:	4603      	mov	r3, r0
 8004b7e:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8004b80:	2300      	movs	r3, #0
 8004b82:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8004b84:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004b88:	2b84      	cmp	r3, #132	; 0x84
 8004b8a:	d005      	beq.n	8004b98 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8004b8c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	4413      	add	r3, r2
 8004b94:	3303      	adds	r3, #3
 8004b96:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8004b98:	68fb      	ldr	r3, [r7, #12]
}
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	3714      	adds	r7, #20
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba4:	4770      	bx	lr

08004ba6 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004ba6:	b580      	push	{r7, lr}
 8004ba8:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8004baa:	f001 fbdd 	bl	8006368 <vTaskStartScheduler>
  
  return osOK;
 8004bae:	2300      	movs	r3, #0
}
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	bd80      	pop	{r7, pc}

08004bb4 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8004bb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004bb6:	b089      	sub	sp, #36	; 0x24
 8004bb8:	af04      	add	r7, sp, #16
 8004bba:	6078      	str	r0, [r7, #4]
 8004bbc:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	695b      	ldr	r3, [r3, #20]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d020      	beq.n	8004c08 <osThreadCreate+0x54>
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	699b      	ldr	r3, [r3, #24]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d01c      	beq.n	8004c08 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	685c      	ldr	r4, [r3, #4]
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681d      	ldr	r5, [r3, #0]
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	691e      	ldr	r6, [r3, #16]
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004be0:	4618      	mov	r0, r3
 8004be2:	f7ff ffc8 	bl	8004b76 <makeFreeRtosPriority>
 8004be6:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	695b      	ldr	r3, [r3, #20]
 8004bec:	687a      	ldr	r2, [r7, #4]
 8004bee:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004bf0:	9202      	str	r2, [sp, #8]
 8004bf2:	9301      	str	r3, [sp, #4]
 8004bf4:	9100      	str	r1, [sp, #0]
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	4632      	mov	r2, r6
 8004bfa:	4629      	mov	r1, r5
 8004bfc:	4620      	mov	r0, r4
 8004bfe:	f001 f94d 	bl	8005e9c <xTaskCreateStatic>
 8004c02:	4603      	mov	r3, r0
 8004c04:	60fb      	str	r3, [r7, #12]
 8004c06:	e01c      	b.n	8004c42 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	685c      	ldr	r4, [r3, #4]
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004c14:	b29e      	uxth	r6, r3
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	f7ff ffaa 	bl	8004b76 <makeFreeRtosPriority>
 8004c22:	4602      	mov	r2, r0
 8004c24:	f107 030c 	add.w	r3, r7, #12
 8004c28:	9301      	str	r3, [sp, #4]
 8004c2a:	9200      	str	r2, [sp, #0]
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	4632      	mov	r2, r6
 8004c30:	4629      	mov	r1, r5
 8004c32:	4620      	mov	r0, r4
 8004c34:	f001 f98e 	bl	8005f54 <xTaskCreate>
 8004c38:	4603      	mov	r3, r0
 8004c3a:	2b01      	cmp	r3, #1
 8004c3c:	d001      	beq.n	8004c42 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8004c3e:	2300      	movs	r3, #0
 8004c40:	e000      	b.n	8004c44 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8004c42:	68fb      	ldr	r3, [r7, #12]
}
 8004c44:	4618      	mov	r0, r3
 8004c46:	3714      	adds	r7, #20
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004c4c <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	b082      	sub	sp, #8
 8004c50:	af00      	add	r7, sp, #0
	EventGroup_t *pxEventBits;

		/* Allocate the event group. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) );
 8004c52:	201c      	movs	r0, #28
 8004c54:	f003 fa40 	bl	80080d8 <pvPortMalloc>
 8004c58:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d00a      	beq.n	8004c76 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2200      	movs	r2, #0
 8004c64:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	3304      	adds	r3, #4
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	f000 f990 	bl	8004f90 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2200      	movs	r2, #0
 8004c74:	761a      	strb	r2, [r3, #24]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return ( EventGroupHandle_t ) pxEventBits;
 8004c76:	687b      	ldr	r3, [r7, #4]
	}
 8004c78:	4618      	mov	r0, r3
 8004c7a:	3708      	adds	r7, #8
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	bd80      	pop	{r7, pc}

08004c80 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b090      	sub	sp, #64	; 0x40
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	60f8      	str	r0, [r7, #12]
 8004c88:	60b9      	str	r1, [r7, #8]
 8004c8a:	607a      	str	r2, [r7, #4]
 8004c8c:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 8004c92:	2300      	movs	r3, #0
 8004c94:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 8004c96:	2300      	movs	r3, #0
 8004c98:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d10a      	bne.n	8004cb6 <xEventGroupWaitBits+0x36>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004ca0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ca4:	f383 8811 	msr	BASEPRI, r3
 8004ca8:	f3bf 8f6f 	isb	sy
 8004cac:	f3bf 8f4f 	dsb	sy
 8004cb0:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004cb2:	bf00      	nop
 8004cb4:	e7fe      	b.n	8004cb4 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8004cb6:	68bb      	ldr	r3, [r7, #8]
 8004cb8:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d00a      	beq.n	8004cd6 <xEventGroupWaitBits+0x56>
	__asm volatile
 8004cc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cc4:	f383 8811 	msr	BASEPRI, r3
 8004cc8:	f3bf 8f6f 	isb	sy
 8004ccc:	f3bf 8f4f 	dsb	sy
 8004cd0:	61fb      	str	r3, [r7, #28]
}
 8004cd2:	bf00      	nop
 8004cd4:	e7fe      	b.n	8004cd4 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 8004cd6:	68bb      	ldr	r3, [r7, #8]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d10a      	bne.n	8004cf2 <xEventGroupWaitBits+0x72>
	__asm volatile
 8004cdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ce0:	f383 8811 	msr	BASEPRI, r3
 8004ce4:	f3bf 8f6f 	isb	sy
 8004ce8:	f3bf 8f4f 	dsb	sy
 8004cec:	61bb      	str	r3, [r7, #24]
}
 8004cee:	bf00      	nop
 8004cf0:	e7fe      	b.n	8004cf0 <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004cf2:	f002 f90d 	bl	8006f10 <xTaskGetSchedulerState>
 8004cf6:	4603      	mov	r3, r0
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d102      	bne.n	8004d02 <xEventGroupWaitBits+0x82>
 8004cfc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d101      	bne.n	8004d06 <xEventGroupWaitBits+0x86>
 8004d02:	2301      	movs	r3, #1
 8004d04:	e000      	b.n	8004d08 <xEventGroupWaitBits+0x88>
 8004d06:	2300      	movs	r3, #0
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d10a      	bne.n	8004d22 <xEventGroupWaitBits+0xa2>
	__asm volatile
 8004d0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d10:	f383 8811 	msr	BASEPRI, r3
 8004d14:	f3bf 8f6f 	isb	sy
 8004d18:	f3bf 8f4f 	dsb	sy
 8004d1c:	617b      	str	r3, [r7, #20]
}
 8004d1e:	bf00      	nop
 8004d20:	e7fe      	b.n	8004d20 <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 8004d22:	f001 fb91 	bl	8006448 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 8004d26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 8004d2c:	683a      	ldr	r2, [r7, #0]
 8004d2e:	68b9      	ldr	r1, [r7, #8]
 8004d30:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004d32:	f000 f90b 	bl	8004f4c <prvTestWaitCondition>
 8004d36:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 8004d38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d00e      	beq.n	8004d5c <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 8004d3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d40:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 8004d42:	2300      	movs	r3, #0
 8004d44:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d028      	beq.n	8004d9e <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8004d4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d4e:	681a      	ldr	r2, [r3, #0]
 8004d50:	68bb      	ldr	r3, [r7, #8]
 8004d52:	43db      	mvns	r3, r3
 8004d54:	401a      	ands	r2, r3
 8004d56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d58:	601a      	str	r2, [r3, #0]
 8004d5a:	e020      	b.n	8004d9e <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 8004d5c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d104      	bne.n	8004d6c <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 8004d62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d64:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 8004d66:	2301      	movs	r3, #1
 8004d68:	633b      	str	r3, [r7, #48]	; 0x30
 8004d6a:	e018      	b.n	8004d9e <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d003      	beq.n	8004d7a <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 8004d72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d74:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004d78:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d003      	beq.n	8004d88 <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8004d80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d82:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004d86:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8004d88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d8a:	1d18      	adds	r0, r3, #4
 8004d8c:	68ba      	ldr	r2, [r7, #8]
 8004d8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d90:	4313      	orrs	r3, r2
 8004d92:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004d94:	4619      	mov	r1, r3
 8004d96:	f001 fe29 	bl	80069ec <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 8004d9e:	f001 fb61 	bl	8006464 <xTaskResumeAll>
 8004da2:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 8004da4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d031      	beq.n	8004e0e <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 8004daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d107      	bne.n	8004dc0 <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 8004db0:	4b19      	ldr	r3, [pc, #100]	; (8004e18 <xEventGroupWaitBits+0x198>)
 8004db2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004db6:	601a      	str	r2, [r3, #0]
 8004db8:	f3bf 8f4f 	dsb	sy
 8004dbc:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 8004dc0:	f002 fa70 	bl	80072a4 <uxTaskResetEventItemValue>
 8004dc4:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8004dc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004dc8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d11a      	bne.n	8004e06 <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 8004dd0:	f003 f860 	bl	8007e94 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 8004dd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 8004dda:	683a      	ldr	r2, [r7, #0]
 8004ddc:	68b9      	ldr	r1, [r7, #8]
 8004dde:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8004de0:	f000 f8b4 	bl	8004f4c <prvTestWaitCondition>
 8004de4:	4603      	mov	r3, r0
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d009      	beq.n	8004dfe <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d006      	beq.n	8004dfe <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8004df0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004df2:	681a      	ldr	r2, [r3, #0]
 8004df4:	68bb      	ldr	r3, [r7, #8]
 8004df6:	43db      	mvns	r3, r3
 8004df8:	401a      	ands	r2, r3
 8004dfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004dfc:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 8004dfe:	2301      	movs	r3, #1
 8004e00:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 8004e02:	f003 f877 	bl	8007ef4 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 8004e06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e08:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004e0c:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 8004e0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8004e10:	4618      	mov	r0, r3
 8004e12:	3740      	adds	r7, #64	; 0x40
 8004e14:	46bd      	mov	sp, r7
 8004e16:	bd80      	pop	{r7, pc}
 8004e18:	e000ed04 	.word	0xe000ed04

08004e1c <xEventGroupSetBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	b08e      	sub	sp, #56	; 0x38
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
 8004e24:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t *pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 8004e26:	2300      	movs	r3, #0
 8004e28:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 8004e2e:	2300      	movs	r3, #0
 8004e30:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d10a      	bne.n	8004e4e <xEventGroupSetBits+0x32>
	__asm volatile
 8004e38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e3c:	f383 8811 	msr	BASEPRI, r3
 8004e40:	f3bf 8f6f 	isb	sy
 8004e44:	f3bf 8f4f 	dsb	sy
 8004e48:	613b      	str	r3, [r7, #16]
}
 8004e4a:	bf00      	nop
 8004e4c:	e7fe      	b.n	8004e4c <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d00a      	beq.n	8004e6e <xEventGroupSetBits+0x52>
	__asm volatile
 8004e58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e5c:	f383 8811 	msr	BASEPRI, r3
 8004e60:	f3bf 8f6f 	isb	sy
 8004e64:	f3bf 8f4f 	dsb	sy
 8004e68:	60fb      	str	r3, [r7, #12]
}
 8004e6a:	bf00      	nop
 8004e6c:	e7fe      	b.n	8004e6c <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 8004e6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e70:	3304      	adds	r3, #4
 8004e72:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e76:	3308      	adds	r3, #8
 8004e78:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 8004e7a:	f001 fae5 	bl	8006448 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 8004e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e80:	68db      	ldr	r3, [r3, #12]
 8004e82:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 8004e84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e86:	681a      	ldr	r2, [r3, #0]
 8004e88:	683b      	ldr	r3, [r7, #0]
 8004e8a:	431a      	orrs	r2, r3
 8004e8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e8e:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 8004e90:	e03c      	b.n	8004f0c <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 8004e92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e94:	685b      	ldr	r3, [r3, #4]
 8004e96:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8004e98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 8004ea2:	69bb      	ldr	r3, [r7, #24]
 8004ea4:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8004ea8:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8004eaa:	69bb      	ldr	r3, [r7, #24]
 8004eac:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004eb0:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8004eb2:	697b      	ldr	r3, [r7, #20]
 8004eb4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d108      	bne.n	8004ece <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8004ebc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ebe:	681a      	ldr	r2, [r3, #0]
 8004ec0:	69bb      	ldr	r3, [r7, #24]
 8004ec2:	4013      	ands	r3, r2
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d00b      	beq.n	8004ee0 <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 8004ec8:	2301      	movs	r3, #1
 8004eca:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004ecc:	e008      	b.n	8004ee0 <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8004ece:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ed0:	681a      	ldr	r2, [r3, #0]
 8004ed2:	69bb      	ldr	r3, [r7, #24]
 8004ed4:	4013      	ands	r3, r2
 8004ed6:	69ba      	ldr	r2, [r7, #24]
 8004ed8:	429a      	cmp	r2, r3
 8004eda:	d101      	bne.n	8004ee0 <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 8004edc:	2301      	movs	r3, #1
 8004ede:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 8004ee0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d010      	beq.n	8004f08 <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8004ee6:	697b      	ldr	r3, [r7, #20]
 8004ee8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d003      	beq.n	8004ef8 <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 8004ef0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ef2:	69bb      	ldr	r3, [r7, #24]
 8004ef4:	4313      	orrs	r3, r2
 8004ef6:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8004ef8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004f00:	4619      	mov	r1, r3
 8004f02:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004f04:	f001 fe3c 	bl	8006b80 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 8004f08:	69fb      	ldr	r3, [r7, #28]
 8004f0a:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 8004f0c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004f0e:	6a3b      	ldr	r3, [r7, #32]
 8004f10:	429a      	cmp	r2, r3
 8004f12:	d1be      	bne.n	8004e92 <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8004f14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f16:	681a      	ldr	r2, [r3, #0]
 8004f18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f1a:	43db      	mvns	r3, r3
 8004f1c:	401a      	ands	r2, r3
 8004f1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f20:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 8004f22:	f001 fa9f 	bl	8006464 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 8004f26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f28:	681b      	ldr	r3, [r3, #0]
}
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	3738      	adds	r7, #56	; 0x38
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	bd80      	pop	{r7, pc}

08004f32 <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 8004f32:	b580      	push	{r7, lr}
 8004f34:	b082      	sub	sp, #8
 8004f36:	af00      	add	r7, sp, #0
 8004f38:	6078      	str	r0, [r7, #4]
 8004f3a:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet );
 8004f3c:	6839      	ldr	r1, [r7, #0]
 8004f3e:	6878      	ldr	r0, [r7, #4]
 8004f40:	f7ff ff6c 	bl	8004e1c <xEventGroupSetBits>
}
 8004f44:	bf00      	nop
 8004f46:	3708      	adds	r7, #8
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	bd80      	pop	{r7, pc}

08004f4c <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear );
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 8004f4c:	b480      	push	{r7}
 8004f4e:	b087      	sub	sp, #28
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	60f8      	str	r0, [r7, #12]
 8004f54:	60b9      	str	r1, [r7, #8]
 8004f56:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 8004f58:	2300      	movs	r3, #0
 8004f5a:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d107      	bne.n	8004f72 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8004f62:	68fa      	ldr	r2, [r7, #12]
 8004f64:	68bb      	ldr	r3, [r7, #8]
 8004f66:	4013      	ands	r3, r2
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d00a      	beq.n	8004f82 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8004f6c:	2301      	movs	r3, #1
 8004f6e:	617b      	str	r3, [r7, #20]
 8004f70:	e007      	b.n	8004f82 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8004f72:	68fa      	ldr	r2, [r7, #12]
 8004f74:	68bb      	ldr	r3, [r7, #8]
 8004f76:	4013      	ands	r3, r2
 8004f78:	68ba      	ldr	r2, [r7, #8]
 8004f7a:	429a      	cmp	r2, r3
 8004f7c:	d101      	bne.n	8004f82 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8004f7e:	2301      	movs	r3, #1
 8004f80:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 8004f82:	697b      	ldr	r3, [r7, #20]
}
 8004f84:	4618      	mov	r0, r3
 8004f86:	371c      	adds	r7, #28
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8e:	4770      	bx	lr

08004f90 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004f90:	b480      	push	{r7}
 8004f92:	b083      	sub	sp, #12
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	f103 0208 	add.w	r2, r3, #8
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	f04f 32ff 	mov.w	r2, #4294967295
 8004fa8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	f103 0208 	add.w	r2, r3, #8
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	f103 0208 	add.w	r2, r3, #8
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004fc4:	bf00      	nop
 8004fc6:	370c      	adds	r7, #12
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fce:	4770      	bx	lr

08004fd0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004fd0:	b480      	push	{r7}
 8004fd2:	b083      	sub	sp, #12
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2200      	movs	r2, #0
 8004fdc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004fde:	bf00      	nop
 8004fe0:	370c      	adds	r7, #12
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe8:	4770      	bx	lr

08004fea <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004fea:	b480      	push	{r7}
 8004fec:	b085      	sub	sp, #20
 8004fee:	af00      	add	r7, sp, #0
 8004ff0:	6078      	str	r0, [r7, #4]
 8004ff2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	685b      	ldr	r3, [r3, #4]
 8004ff8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	68fa      	ldr	r2, [r7, #12]
 8004ffe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	689a      	ldr	r2, [r3, #8]
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	689b      	ldr	r3, [r3, #8]
 800500c:	683a      	ldr	r2, [r7, #0]
 800500e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	683a      	ldr	r2, [r7, #0]
 8005014:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	687a      	ldr	r2, [r7, #4]
 800501a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	1c5a      	adds	r2, r3, #1
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	601a      	str	r2, [r3, #0]
}
 8005026:	bf00      	nop
 8005028:	3714      	adds	r7, #20
 800502a:	46bd      	mov	sp, r7
 800502c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005030:	4770      	bx	lr

08005032 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005032:	b480      	push	{r7}
 8005034:	b085      	sub	sp, #20
 8005036:	af00      	add	r7, sp, #0
 8005038:	6078      	str	r0, [r7, #4]
 800503a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005042:	68bb      	ldr	r3, [r7, #8]
 8005044:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005048:	d103      	bne.n	8005052 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	691b      	ldr	r3, [r3, #16]
 800504e:	60fb      	str	r3, [r7, #12]
 8005050:	e00c      	b.n	800506c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	3308      	adds	r3, #8
 8005056:	60fb      	str	r3, [r7, #12]
 8005058:	e002      	b.n	8005060 <vListInsert+0x2e>
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	685b      	ldr	r3, [r3, #4]
 800505e:	60fb      	str	r3, [r7, #12]
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	685b      	ldr	r3, [r3, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	68ba      	ldr	r2, [r7, #8]
 8005068:	429a      	cmp	r2, r3
 800506a:	d2f6      	bcs.n	800505a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	685a      	ldr	r2, [r3, #4]
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	685b      	ldr	r3, [r3, #4]
 8005078:	683a      	ldr	r2, [r7, #0]
 800507a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	68fa      	ldr	r2, [r7, #12]
 8005080:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	683a      	ldr	r2, [r7, #0]
 8005086:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	687a      	ldr	r2, [r7, #4]
 800508c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	1c5a      	adds	r2, r3, #1
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	601a      	str	r2, [r3, #0]
}
 8005098:	bf00      	nop
 800509a:	3714      	adds	r7, #20
 800509c:	46bd      	mov	sp, r7
 800509e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a2:	4770      	bx	lr

080050a4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80050a4:	b480      	push	{r7}
 80050a6:	b085      	sub	sp, #20
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	691b      	ldr	r3, [r3, #16]
 80050b0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	685b      	ldr	r3, [r3, #4]
 80050b6:	687a      	ldr	r2, [r7, #4]
 80050b8:	6892      	ldr	r2, [r2, #8]
 80050ba:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	689b      	ldr	r3, [r3, #8]
 80050c0:	687a      	ldr	r2, [r7, #4]
 80050c2:	6852      	ldr	r2, [r2, #4]
 80050c4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	685b      	ldr	r3, [r3, #4]
 80050ca:	687a      	ldr	r2, [r7, #4]
 80050cc:	429a      	cmp	r2, r3
 80050ce:	d103      	bne.n	80050d8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	689a      	ldr	r2, [r3, #8]
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2200      	movs	r2, #0
 80050dc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	1e5a      	subs	r2, r3, #1
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	681b      	ldr	r3, [r3, #0]
}
 80050ec:	4618      	mov	r0, r3
 80050ee:	3714      	adds	r7, #20
 80050f0:	46bd      	mov	sp, r7
 80050f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f6:	4770      	bx	lr

080050f8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80050f8:	b580      	push	{r7, lr}
 80050fa:	b084      	sub	sp, #16
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
 8005100:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	2b00      	cmp	r3, #0
 800510a:	d10a      	bne.n	8005122 <xQueueGenericReset+0x2a>
	__asm volatile
 800510c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005110:	f383 8811 	msr	BASEPRI, r3
 8005114:	f3bf 8f6f 	isb	sy
 8005118:	f3bf 8f4f 	dsb	sy
 800511c:	60bb      	str	r3, [r7, #8]
}
 800511e:	bf00      	nop
 8005120:	e7fe      	b.n	8005120 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005122:	f002 feb7 	bl	8007e94 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	681a      	ldr	r2, [r3, #0]
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800512e:	68f9      	ldr	r1, [r7, #12]
 8005130:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005132:	fb01 f303 	mul.w	r3, r1, r3
 8005136:	441a      	add	r2, r3
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	2200      	movs	r2, #0
 8005140:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	681a      	ldr	r2, [r3, #0]
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	681a      	ldr	r2, [r3, #0]
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005152:	3b01      	subs	r3, #1
 8005154:	68f9      	ldr	r1, [r7, #12]
 8005156:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005158:	fb01 f303 	mul.w	r3, r1, r3
 800515c:	441a      	add	r2, r3
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	22ff      	movs	r2, #255	; 0xff
 8005166:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	22ff      	movs	r2, #255	; 0xff
 800516e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	2b00      	cmp	r3, #0
 8005176:	d114      	bne.n	80051a2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	691b      	ldr	r3, [r3, #16]
 800517c:	2b00      	cmp	r3, #0
 800517e:	d01a      	beq.n	80051b6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	3310      	adds	r3, #16
 8005184:	4618      	mov	r0, r3
 8005186:	f001 fc99 	bl	8006abc <xTaskRemoveFromEventList>
 800518a:	4603      	mov	r3, r0
 800518c:	2b00      	cmp	r3, #0
 800518e:	d012      	beq.n	80051b6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005190:	4b0c      	ldr	r3, [pc, #48]	; (80051c4 <xQueueGenericReset+0xcc>)
 8005192:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005196:	601a      	str	r2, [r3, #0]
 8005198:	f3bf 8f4f 	dsb	sy
 800519c:	f3bf 8f6f 	isb	sy
 80051a0:	e009      	b.n	80051b6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	3310      	adds	r3, #16
 80051a6:	4618      	mov	r0, r3
 80051a8:	f7ff fef2 	bl	8004f90 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	3324      	adds	r3, #36	; 0x24
 80051b0:	4618      	mov	r0, r3
 80051b2:	f7ff feed 	bl	8004f90 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80051b6:	f002 fe9d 	bl	8007ef4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80051ba:	2301      	movs	r3, #1
}
 80051bc:	4618      	mov	r0, r3
 80051be:	3710      	adds	r7, #16
 80051c0:	46bd      	mov	sp, r7
 80051c2:	bd80      	pop	{r7, pc}
 80051c4:	e000ed04 	.word	0xe000ed04

080051c8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80051c8:	b580      	push	{r7, lr}
 80051ca:	b08e      	sub	sp, #56	; 0x38
 80051cc:	af02      	add	r7, sp, #8
 80051ce:	60f8      	str	r0, [r7, #12]
 80051d0:	60b9      	str	r1, [r7, #8]
 80051d2:	607a      	str	r2, [r7, #4]
 80051d4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d10a      	bne.n	80051f2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80051dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051e0:	f383 8811 	msr	BASEPRI, r3
 80051e4:	f3bf 8f6f 	isb	sy
 80051e8:	f3bf 8f4f 	dsb	sy
 80051ec:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80051ee:	bf00      	nop
 80051f0:	e7fe      	b.n	80051f0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d10a      	bne.n	800520e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80051f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051fc:	f383 8811 	msr	BASEPRI, r3
 8005200:	f3bf 8f6f 	isb	sy
 8005204:	f3bf 8f4f 	dsb	sy
 8005208:	627b      	str	r3, [r7, #36]	; 0x24
}
 800520a:	bf00      	nop
 800520c:	e7fe      	b.n	800520c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2b00      	cmp	r3, #0
 8005212:	d002      	beq.n	800521a <xQueueGenericCreateStatic+0x52>
 8005214:	68bb      	ldr	r3, [r7, #8]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d001      	beq.n	800521e <xQueueGenericCreateStatic+0x56>
 800521a:	2301      	movs	r3, #1
 800521c:	e000      	b.n	8005220 <xQueueGenericCreateStatic+0x58>
 800521e:	2300      	movs	r3, #0
 8005220:	2b00      	cmp	r3, #0
 8005222:	d10a      	bne.n	800523a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8005224:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005228:	f383 8811 	msr	BASEPRI, r3
 800522c:	f3bf 8f6f 	isb	sy
 8005230:	f3bf 8f4f 	dsb	sy
 8005234:	623b      	str	r3, [r7, #32]
}
 8005236:	bf00      	nop
 8005238:	e7fe      	b.n	8005238 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	2b00      	cmp	r3, #0
 800523e:	d102      	bne.n	8005246 <xQueueGenericCreateStatic+0x7e>
 8005240:	68bb      	ldr	r3, [r7, #8]
 8005242:	2b00      	cmp	r3, #0
 8005244:	d101      	bne.n	800524a <xQueueGenericCreateStatic+0x82>
 8005246:	2301      	movs	r3, #1
 8005248:	e000      	b.n	800524c <xQueueGenericCreateStatic+0x84>
 800524a:	2300      	movs	r3, #0
 800524c:	2b00      	cmp	r3, #0
 800524e:	d10a      	bne.n	8005266 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8005250:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005254:	f383 8811 	msr	BASEPRI, r3
 8005258:	f3bf 8f6f 	isb	sy
 800525c:	f3bf 8f4f 	dsb	sy
 8005260:	61fb      	str	r3, [r7, #28]
}
 8005262:	bf00      	nop
 8005264:	e7fe      	b.n	8005264 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005266:	2348      	movs	r3, #72	; 0x48
 8005268:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800526a:	697b      	ldr	r3, [r7, #20]
 800526c:	2b48      	cmp	r3, #72	; 0x48
 800526e:	d00a      	beq.n	8005286 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8005270:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005274:	f383 8811 	msr	BASEPRI, r3
 8005278:	f3bf 8f6f 	isb	sy
 800527c:	f3bf 8f4f 	dsb	sy
 8005280:	61bb      	str	r3, [r7, #24]
}
 8005282:	bf00      	nop
 8005284:	e7fe      	b.n	8005284 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800528a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800528c:	2b00      	cmp	r3, #0
 800528e:	d00d      	beq.n	80052ac <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005290:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005292:	2201      	movs	r2, #1
 8005294:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005298:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800529c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800529e:	9300      	str	r3, [sp, #0]
 80052a0:	4613      	mov	r3, r2
 80052a2:	687a      	ldr	r2, [r7, #4]
 80052a4:	68b9      	ldr	r1, [r7, #8]
 80052a6:	68f8      	ldr	r0, [r7, #12]
 80052a8:	f000 f843 	bl	8005332 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80052ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80052ae:	4618      	mov	r0, r3
 80052b0:	3730      	adds	r7, #48	; 0x30
 80052b2:	46bd      	mov	sp, r7
 80052b4:	bd80      	pop	{r7, pc}

080052b6 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80052b6:	b580      	push	{r7, lr}
 80052b8:	b08a      	sub	sp, #40	; 0x28
 80052ba:	af02      	add	r7, sp, #8
 80052bc:	60f8      	str	r0, [r7, #12]
 80052be:	60b9      	str	r1, [r7, #8]
 80052c0:	4613      	mov	r3, r2
 80052c2:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d10a      	bne.n	80052e0 <xQueueGenericCreate+0x2a>
	__asm volatile
 80052ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052ce:	f383 8811 	msr	BASEPRI, r3
 80052d2:	f3bf 8f6f 	isb	sy
 80052d6:	f3bf 8f4f 	dsb	sy
 80052da:	613b      	str	r3, [r7, #16]
}
 80052dc:	bf00      	nop
 80052de:	e7fe      	b.n	80052de <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80052e0:	68bb      	ldr	r3, [r7, #8]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d102      	bne.n	80052ec <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80052e6:	2300      	movs	r3, #0
 80052e8:	61fb      	str	r3, [r7, #28]
 80052ea:	e004      	b.n	80052f6 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	68ba      	ldr	r2, [r7, #8]
 80052f0:	fb02 f303 	mul.w	r3, r2, r3
 80052f4:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 80052f6:	69fb      	ldr	r3, [r7, #28]
 80052f8:	3348      	adds	r3, #72	; 0x48
 80052fa:	4618      	mov	r0, r3
 80052fc:	f002 feec 	bl	80080d8 <pvPortMalloc>
 8005300:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005302:	69bb      	ldr	r3, [r7, #24]
 8005304:	2b00      	cmp	r3, #0
 8005306:	d00f      	beq.n	8005328 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8005308:	69bb      	ldr	r3, [r7, #24]
 800530a:	3348      	adds	r3, #72	; 0x48
 800530c:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800530e:	69bb      	ldr	r3, [r7, #24]
 8005310:	2200      	movs	r2, #0
 8005312:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005316:	79fa      	ldrb	r2, [r7, #7]
 8005318:	69bb      	ldr	r3, [r7, #24]
 800531a:	9300      	str	r3, [sp, #0]
 800531c:	4613      	mov	r3, r2
 800531e:	697a      	ldr	r2, [r7, #20]
 8005320:	68b9      	ldr	r1, [r7, #8]
 8005322:	68f8      	ldr	r0, [r7, #12]
 8005324:	f000 f805 	bl	8005332 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8005328:	69bb      	ldr	r3, [r7, #24]
	}
 800532a:	4618      	mov	r0, r3
 800532c:	3720      	adds	r7, #32
 800532e:	46bd      	mov	sp, r7
 8005330:	bd80      	pop	{r7, pc}

08005332 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005332:	b580      	push	{r7, lr}
 8005334:	b084      	sub	sp, #16
 8005336:	af00      	add	r7, sp, #0
 8005338:	60f8      	str	r0, [r7, #12]
 800533a:	60b9      	str	r1, [r7, #8]
 800533c:	607a      	str	r2, [r7, #4]
 800533e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005340:	68bb      	ldr	r3, [r7, #8]
 8005342:	2b00      	cmp	r3, #0
 8005344:	d103      	bne.n	800534e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005346:	69bb      	ldr	r3, [r7, #24]
 8005348:	69ba      	ldr	r2, [r7, #24]
 800534a:	601a      	str	r2, [r3, #0]
 800534c:	e002      	b.n	8005354 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800534e:	69bb      	ldr	r3, [r7, #24]
 8005350:	687a      	ldr	r2, [r7, #4]
 8005352:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005354:	69bb      	ldr	r3, [r7, #24]
 8005356:	68fa      	ldr	r2, [r7, #12]
 8005358:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800535a:	69bb      	ldr	r3, [r7, #24]
 800535c:	68ba      	ldr	r2, [r7, #8]
 800535e:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005360:	2101      	movs	r1, #1
 8005362:	69b8      	ldr	r0, [r7, #24]
 8005364:	f7ff fec8 	bl	80050f8 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005368:	bf00      	nop
 800536a:	3710      	adds	r7, #16
 800536c:	46bd      	mov	sp, r7
 800536e:	bd80      	pop	{r7, pc}

08005370 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005370:	b580      	push	{r7, lr}
 8005372:	b08e      	sub	sp, #56	; 0x38
 8005374:	af00      	add	r7, sp, #0
 8005376:	60f8      	str	r0, [r7, #12]
 8005378:	60b9      	str	r1, [r7, #8]
 800537a:	607a      	str	r2, [r7, #4]
 800537c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800537e:	2300      	movs	r3, #0
 8005380:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005386:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005388:	2b00      	cmp	r3, #0
 800538a:	d10a      	bne.n	80053a2 <xQueueGenericSend+0x32>
	__asm volatile
 800538c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005390:	f383 8811 	msr	BASEPRI, r3
 8005394:	f3bf 8f6f 	isb	sy
 8005398:	f3bf 8f4f 	dsb	sy
 800539c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800539e:	bf00      	nop
 80053a0:	e7fe      	b.n	80053a0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80053a2:	68bb      	ldr	r3, [r7, #8]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d103      	bne.n	80053b0 <xQueueGenericSend+0x40>
 80053a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d101      	bne.n	80053b4 <xQueueGenericSend+0x44>
 80053b0:	2301      	movs	r3, #1
 80053b2:	e000      	b.n	80053b6 <xQueueGenericSend+0x46>
 80053b4:	2300      	movs	r3, #0
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d10a      	bne.n	80053d0 <xQueueGenericSend+0x60>
	__asm volatile
 80053ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053be:	f383 8811 	msr	BASEPRI, r3
 80053c2:	f3bf 8f6f 	isb	sy
 80053c6:	f3bf 8f4f 	dsb	sy
 80053ca:	627b      	str	r3, [r7, #36]	; 0x24
}
 80053cc:	bf00      	nop
 80053ce:	e7fe      	b.n	80053ce <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80053d0:	683b      	ldr	r3, [r7, #0]
 80053d2:	2b02      	cmp	r3, #2
 80053d4:	d103      	bne.n	80053de <xQueueGenericSend+0x6e>
 80053d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053da:	2b01      	cmp	r3, #1
 80053dc:	d101      	bne.n	80053e2 <xQueueGenericSend+0x72>
 80053de:	2301      	movs	r3, #1
 80053e0:	e000      	b.n	80053e4 <xQueueGenericSend+0x74>
 80053e2:	2300      	movs	r3, #0
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d10a      	bne.n	80053fe <xQueueGenericSend+0x8e>
	__asm volatile
 80053e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053ec:	f383 8811 	msr	BASEPRI, r3
 80053f0:	f3bf 8f6f 	isb	sy
 80053f4:	f3bf 8f4f 	dsb	sy
 80053f8:	623b      	str	r3, [r7, #32]
}
 80053fa:	bf00      	nop
 80053fc:	e7fe      	b.n	80053fc <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80053fe:	f001 fd87 	bl	8006f10 <xTaskGetSchedulerState>
 8005402:	4603      	mov	r3, r0
 8005404:	2b00      	cmp	r3, #0
 8005406:	d102      	bne.n	800540e <xQueueGenericSend+0x9e>
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2b00      	cmp	r3, #0
 800540c:	d101      	bne.n	8005412 <xQueueGenericSend+0xa2>
 800540e:	2301      	movs	r3, #1
 8005410:	e000      	b.n	8005414 <xQueueGenericSend+0xa4>
 8005412:	2300      	movs	r3, #0
 8005414:	2b00      	cmp	r3, #0
 8005416:	d10a      	bne.n	800542e <xQueueGenericSend+0xbe>
	__asm volatile
 8005418:	f04f 0350 	mov.w	r3, #80	; 0x50
 800541c:	f383 8811 	msr	BASEPRI, r3
 8005420:	f3bf 8f6f 	isb	sy
 8005424:	f3bf 8f4f 	dsb	sy
 8005428:	61fb      	str	r3, [r7, #28]
}
 800542a:	bf00      	nop
 800542c:	e7fe      	b.n	800542c <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800542e:	f002 fd31 	bl	8007e94 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005434:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005436:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005438:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800543a:	429a      	cmp	r2, r3
 800543c:	d302      	bcc.n	8005444 <xQueueGenericSend+0xd4>
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	2b02      	cmp	r3, #2
 8005442:	d129      	bne.n	8005498 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005444:	683a      	ldr	r2, [r7, #0]
 8005446:	68b9      	ldr	r1, [r7, #8]
 8005448:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800544a:	f000 fbb9 	bl	8005bc0 <prvCopyDataToQueue>
 800544e:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005450:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005454:	2b00      	cmp	r3, #0
 8005456:	d010      	beq.n	800547a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005458:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800545a:	3324      	adds	r3, #36	; 0x24
 800545c:	4618      	mov	r0, r3
 800545e:	f001 fb2d 	bl	8006abc <xTaskRemoveFromEventList>
 8005462:	4603      	mov	r3, r0
 8005464:	2b00      	cmp	r3, #0
 8005466:	d013      	beq.n	8005490 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005468:	4b3f      	ldr	r3, [pc, #252]	; (8005568 <xQueueGenericSend+0x1f8>)
 800546a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800546e:	601a      	str	r2, [r3, #0]
 8005470:	f3bf 8f4f 	dsb	sy
 8005474:	f3bf 8f6f 	isb	sy
 8005478:	e00a      	b.n	8005490 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800547a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800547c:	2b00      	cmp	r3, #0
 800547e:	d007      	beq.n	8005490 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005480:	4b39      	ldr	r3, [pc, #228]	; (8005568 <xQueueGenericSend+0x1f8>)
 8005482:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005486:	601a      	str	r2, [r3, #0]
 8005488:	f3bf 8f4f 	dsb	sy
 800548c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005490:	f002 fd30 	bl	8007ef4 <vPortExitCritical>
				return pdPASS;
 8005494:	2301      	movs	r3, #1
 8005496:	e063      	b.n	8005560 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2b00      	cmp	r3, #0
 800549c:	d103      	bne.n	80054a6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800549e:	f002 fd29 	bl	8007ef4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80054a2:	2300      	movs	r3, #0
 80054a4:	e05c      	b.n	8005560 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80054a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d106      	bne.n	80054ba <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80054ac:	f107 0314 	add.w	r3, r7, #20
 80054b0:	4618      	mov	r0, r3
 80054b2:	f001 fbc7 	bl	8006c44 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80054b6:	2301      	movs	r3, #1
 80054b8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80054ba:	f002 fd1b 	bl	8007ef4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80054be:	f000 ffc3 	bl	8006448 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80054c2:	f002 fce7 	bl	8007e94 <vPortEnterCritical>
 80054c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054c8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80054cc:	b25b      	sxtb	r3, r3
 80054ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054d2:	d103      	bne.n	80054dc <xQueueGenericSend+0x16c>
 80054d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054d6:	2200      	movs	r2, #0
 80054d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80054dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054de:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80054e2:	b25b      	sxtb	r3, r3
 80054e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054e8:	d103      	bne.n	80054f2 <xQueueGenericSend+0x182>
 80054ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054ec:	2200      	movs	r2, #0
 80054ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80054f2:	f002 fcff 	bl	8007ef4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80054f6:	1d3a      	adds	r2, r7, #4
 80054f8:	f107 0314 	add.w	r3, r7, #20
 80054fc:	4611      	mov	r1, r2
 80054fe:	4618      	mov	r0, r3
 8005500:	f001 fbb6 	bl	8006c70 <xTaskCheckForTimeOut>
 8005504:	4603      	mov	r3, r0
 8005506:	2b00      	cmp	r3, #0
 8005508:	d124      	bne.n	8005554 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800550a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800550c:	f000 fc50 	bl	8005db0 <prvIsQueueFull>
 8005510:	4603      	mov	r3, r0
 8005512:	2b00      	cmp	r3, #0
 8005514:	d018      	beq.n	8005548 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005516:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005518:	3310      	adds	r3, #16
 800551a:	687a      	ldr	r2, [r7, #4]
 800551c:	4611      	mov	r1, r2
 800551e:	4618      	mov	r0, r3
 8005520:	f001 fa40 	bl	80069a4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005524:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005526:	f000 fbdb 	bl	8005ce0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800552a:	f000 ff9b 	bl	8006464 <xTaskResumeAll>
 800552e:	4603      	mov	r3, r0
 8005530:	2b00      	cmp	r3, #0
 8005532:	f47f af7c 	bne.w	800542e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8005536:	4b0c      	ldr	r3, [pc, #48]	; (8005568 <xQueueGenericSend+0x1f8>)
 8005538:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800553c:	601a      	str	r2, [r3, #0]
 800553e:	f3bf 8f4f 	dsb	sy
 8005542:	f3bf 8f6f 	isb	sy
 8005546:	e772      	b.n	800542e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005548:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800554a:	f000 fbc9 	bl	8005ce0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800554e:	f000 ff89 	bl	8006464 <xTaskResumeAll>
 8005552:	e76c      	b.n	800542e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005554:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005556:	f000 fbc3 	bl	8005ce0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800555a:	f000 ff83 	bl	8006464 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800555e:	2300      	movs	r3, #0
		}
	}
}
 8005560:	4618      	mov	r0, r3
 8005562:	3738      	adds	r7, #56	; 0x38
 8005564:	46bd      	mov	sp, r7
 8005566:	bd80      	pop	{r7, pc}
 8005568:	e000ed04 	.word	0xe000ed04

0800556c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800556c:	b580      	push	{r7, lr}
 800556e:	b08e      	sub	sp, #56	; 0x38
 8005570:	af00      	add	r7, sp, #0
 8005572:	60f8      	str	r0, [r7, #12]
 8005574:	60b9      	str	r1, [r7, #8]
 8005576:	607a      	str	r2, [r7, #4]
 8005578:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800557e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005580:	2b00      	cmp	r3, #0
 8005582:	d10a      	bne.n	800559a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8005584:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005588:	f383 8811 	msr	BASEPRI, r3
 800558c:	f3bf 8f6f 	isb	sy
 8005590:	f3bf 8f4f 	dsb	sy
 8005594:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005596:	bf00      	nop
 8005598:	e7fe      	b.n	8005598 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800559a:	68bb      	ldr	r3, [r7, #8]
 800559c:	2b00      	cmp	r3, #0
 800559e:	d103      	bne.n	80055a8 <xQueueGenericSendFromISR+0x3c>
 80055a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d101      	bne.n	80055ac <xQueueGenericSendFromISR+0x40>
 80055a8:	2301      	movs	r3, #1
 80055aa:	e000      	b.n	80055ae <xQueueGenericSendFromISR+0x42>
 80055ac:	2300      	movs	r3, #0
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d10a      	bne.n	80055c8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80055b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055b6:	f383 8811 	msr	BASEPRI, r3
 80055ba:	f3bf 8f6f 	isb	sy
 80055be:	f3bf 8f4f 	dsb	sy
 80055c2:	623b      	str	r3, [r7, #32]
}
 80055c4:	bf00      	nop
 80055c6:	e7fe      	b.n	80055c6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80055c8:	683b      	ldr	r3, [r7, #0]
 80055ca:	2b02      	cmp	r3, #2
 80055cc:	d103      	bne.n	80055d6 <xQueueGenericSendFromISR+0x6a>
 80055ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055d2:	2b01      	cmp	r3, #1
 80055d4:	d101      	bne.n	80055da <xQueueGenericSendFromISR+0x6e>
 80055d6:	2301      	movs	r3, #1
 80055d8:	e000      	b.n	80055dc <xQueueGenericSendFromISR+0x70>
 80055da:	2300      	movs	r3, #0
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d10a      	bne.n	80055f6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80055e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055e4:	f383 8811 	msr	BASEPRI, r3
 80055e8:	f3bf 8f6f 	isb	sy
 80055ec:	f3bf 8f4f 	dsb	sy
 80055f0:	61fb      	str	r3, [r7, #28]
}
 80055f2:	bf00      	nop
 80055f4:	e7fe      	b.n	80055f4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80055f6:	f002 fd2f 	bl	8008058 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80055fa:	f3ef 8211 	mrs	r2, BASEPRI
 80055fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005602:	f383 8811 	msr	BASEPRI, r3
 8005606:	f3bf 8f6f 	isb	sy
 800560a:	f3bf 8f4f 	dsb	sy
 800560e:	61ba      	str	r2, [r7, #24]
 8005610:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005612:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005614:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005618:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800561a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800561c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800561e:	429a      	cmp	r2, r3
 8005620:	d302      	bcc.n	8005628 <xQueueGenericSendFromISR+0xbc>
 8005622:	683b      	ldr	r3, [r7, #0]
 8005624:	2b02      	cmp	r3, #2
 8005626:	d12c      	bne.n	8005682 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005628:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800562a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800562e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005632:	683a      	ldr	r2, [r7, #0]
 8005634:	68b9      	ldr	r1, [r7, #8]
 8005636:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005638:	f000 fac2 	bl	8005bc0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800563c:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8005640:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005644:	d112      	bne.n	800566c <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800564a:	2b00      	cmp	r3, #0
 800564c:	d016      	beq.n	800567c <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800564e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005650:	3324      	adds	r3, #36	; 0x24
 8005652:	4618      	mov	r0, r3
 8005654:	f001 fa32 	bl	8006abc <xTaskRemoveFromEventList>
 8005658:	4603      	mov	r3, r0
 800565a:	2b00      	cmp	r3, #0
 800565c:	d00e      	beq.n	800567c <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	2b00      	cmp	r3, #0
 8005662:	d00b      	beq.n	800567c <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2201      	movs	r2, #1
 8005668:	601a      	str	r2, [r3, #0]
 800566a:	e007      	b.n	800567c <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800566c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005670:	3301      	adds	r3, #1
 8005672:	b2db      	uxtb	r3, r3
 8005674:	b25a      	sxtb	r2, r3
 8005676:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005678:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800567c:	2301      	movs	r3, #1
 800567e:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8005680:	e001      	b.n	8005686 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005682:	2300      	movs	r3, #0
 8005684:	637b      	str	r3, [r7, #52]	; 0x34
 8005686:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005688:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800568a:	693b      	ldr	r3, [r7, #16]
 800568c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005690:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005692:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005694:	4618      	mov	r0, r3
 8005696:	3738      	adds	r7, #56	; 0x38
 8005698:	46bd      	mov	sp, r7
 800569a:	bd80      	pop	{r7, pc}

0800569c <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800569c:	b580      	push	{r7, lr}
 800569e:	b08e      	sub	sp, #56	; 0x38
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	6078      	str	r0, [r7, #4]
 80056a4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80056aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d10a      	bne.n	80056c6 <xQueueGiveFromISR+0x2a>
	__asm volatile
 80056b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056b4:	f383 8811 	msr	BASEPRI, r3
 80056b8:	f3bf 8f6f 	isb	sy
 80056bc:	f3bf 8f4f 	dsb	sy
 80056c0:	623b      	str	r3, [r7, #32]
}
 80056c2:	bf00      	nop
 80056c4:	e7fe      	b.n	80056c4 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80056c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d00a      	beq.n	80056e4 <xQueueGiveFromISR+0x48>
	__asm volatile
 80056ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056d2:	f383 8811 	msr	BASEPRI, r3
 80056d6:	f3bf 8f6f 	isb	sy
 80056da:	f3bf 8f4f 	dsb	sy
 80056de:	61fb      	str	r3, [r7, #28]
}
 80056e0:	bf00      	nop
 80056e2:	e7fe      	b.n	80056e2 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 80056e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d103      	bne.n	80056f4 <xQueueGiveFromISR+0x58>
 80056ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056ee:	685b      	ldr	r3, [r3, #4]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d101      	bne.n	80056f8 <xQueueGiveFromISR+0x5c>
 80056f4:	2301      	movs	r3, #1
 80056f6:	e000      	b.n	80056fa <xQueueGiveFromISR+0x5e>
 80056f8:	2300      	movs	r3, #0
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d10a      	bne.n	8005714 <xQueueGiveFromISR+0x78>
	__asm volatile
 80056fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005702:	f383 8811 	msr	BASEPRI, r3
 8005706:	f3bf 8f6f 	isb	sy
 800570a:	f3bf 8f4f 	dsb	sy
 800570e:	61bb      	str	r3, [r7, #24]
}
 8005710:	bf00      	nop
 8005712:	e7fe      	b.n	8005712 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005714:	f002 fca0 	bl	8008058 <vPortValidateInterruptPriority>
	__asm volatile
 8005718:	f3ef 8211 	mrs	r2, BASEPRI
 800571c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005720:	f383 8811 	msr	BASEPRI, r3
 8005724:	f3bf 8f6f 	isb	sy
 8005728:	f3bf 8f4f 	dsb	sy
 800572c:	617a      	str	r2, [r7, #20]
 800572e:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8005730:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005732:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005734:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005736:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005738:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800573a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800573c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800573e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005740:	429a      	cmp	r2, r3
 8005742:	d22b      	bcs.n	800579c <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005744:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005746:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800574a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800574e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005750:	1c5a      	adds	r2, r3, #1
 8005752:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005754:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005756:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800575a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800575e:	d112      	bne.n	8005786 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005760:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005764:	2b00      	cmp	r3, #0
 8005766:	d016      	beq.n	8005796 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005768:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800576a:	3324      	adds	r3, #36	; 0x24
 800576c:	4618      	mov	r0, r3
 800576e:	f001 f9a5 	bl	8006abc <xTaskRemoveFromEventList>
 8005772:	4603      	mov	r3, r0
 8005774:	2b00      	cmp	r3, #0
 8005776:	d00e      	beq.n	8005796 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005778:	683b      	ldr	r3, [r7, #0]
 800577a:	2b00      	cmp	r3, #0
 800577c:	d00b      	beq.n	8005796 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800577e:	683b      	ldr	r3, [r7, #0]
 8005780:	2201      	movs	r2, #1
 8005782:	601a      	str	r2, [r3, #0]
 8005784:	e007      	b.n	8005796 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005786:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800578a:	3301      	adds	r3, #1
 800578c:	b2db      	uxtb	r3, r3
 800578e:	b25a      	sxtb	r2, r3
 8005790:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005792:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005796:	2301      	movs	r3, #1
 8005798:	637b      	str	r3, [r7, #52]	; 0x34
 800579a:	e001      	b.n	80057a0 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800579c:	2300      	movs	r3, #0
 800579e:	637b      	str	r3, [r7, #52]	; 0x34
 80057a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057a2:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	f383 8811 	msr	BASEPRI, r3
}
 80057aa:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80057ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80057ae:	4618      	mov	r0, r3
 80057b0:	3738      	adds	r7, #56	; 0x38
 80057b2:	46bd      	mov	sp, r7
 80057b4:	bd80      	pop	{r7, pc}
	...

080057b8 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80057b8:	b580      	push	{r7, lr}
 80057ba:	b08c      	sub	sp, #48	; 0x30
 80057bc:	af00      	add	r7, sp, #0
 80057be:	60f8      	str	r0, [r7, #12]
 80057c0:	60b9      	str	r1, [r7, #8]
 80057c2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80057c4:	2300      	movs	r3, #0
 80057c6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80057cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d10a      	bne.n	80057e8 <xQueueReceive+0x30>
	__asm volatile
 80057d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057d6:	f383 8811 	msr	BASEPRI, r3
 80057da:	f3bf 8f6f 	isb	sy
 80057de:	f3bf 8f4f 	dsb	sy
 80057e2:	623b      	str	r3, [r7, #32]
}
 80057e4:	bf00      	nop
 80057e6:	e7fe      	b.n	80057e6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80057e8:	68bb      	ldr	r3, [r7, #8]
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d103      	bne.n	80057f6 <xQueueReceive+0x3e>
 80057ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d101      	bne.n	80057fa <xQueueReceive+0x42>
 80057f6:	2301      	movs	r3, #1
 80057f8:	e000      	b.n	80057fc <xQueueReceive+0x44>
 80057fa:	2300      	movs	r3, #0
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d10a      	bne.n	8005816 <xQueueReceive+0x5e>
	__asm volatile
 8005800:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005804:	f383 8811 	msr	BASEPRI, r3
 8005808:	f3bf 8f6f 	isb	sy
 800580c:	f3bf 8f4f 	dsb	sy
 8005810:	61fb      	str	r3, [r7, #28]
}
 8005812:	bf00      	nop
 8005814:	e7fe      	b.n	8005814 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005816:	f001 fb7b 	bl	8006f10 <xTaskGetSchedulerState>
 800581a:	4603      	mov	r3, r0
 800581c:	2b00      	cmp	r3, #0
 800581e:	d102      	bne.n	8005826 <xQueueReceive+0x6e>
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2b00      	cmp	r3, #0
 8005824:	d101      	bne.n	800582a <xQueueReceive+0x72>
 8005826:	2301      	movs	r3, #1
 8005828:	e000      	b.n	800582c <xQueueReceive+0x74>
 800582a:	2300      	movs	r3, #0
 800582c:	2b00      	cmp	r3, #0
 800582e:	d10a      	bne.n	8005846 <xQueueReceive+0x8e>
	__asm volatile
 8005830:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005834:	f383 8811 	msr	BASEPRI, r3
 8005838:	f3bf 8f6f 	isb	sy
 800583c:	f3bf 8f4f 	dsb	sy
 8005840:	61bb      	str	r3, [r7, #24]
}
 8005842:	bf00      	nop
 8005844:	e7fe      	b.n	8005844 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8005846:	f002 fb25 	bl	8007e94 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800584a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800584c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800584e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005852:	2b00      	cmp	r3, #0
 8005854:	d01f      	beq.n	8005896 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005856:	68b9      	ldr	r1, [r7, #8]
 8005858:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800585a:	f000 fa1b 	bl	8005c94 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800585e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005860:	1e5a      	subs	r2, r3, #1
 8005862:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005864:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005866:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005868:	691b      	ldr	r3, [r3, #16]
 800586a:	2b00      	cmp	r3, #0
 800586c:	d00f      	beq.n	800588e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800586e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005870:	3310      	adds	r3, #16
 8005872:	4618      	mov	r0, r3
 8005874:	f001 f922 	bl	8006abc <xTaskRemoveFromEventList>
 8005878:	4603      	mov	r3, r0
 800587a:	2b00      	cmp	r3, #0
 800587c:	d007      	beq.n	800588e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800587e:	4b3d      	ldr	r3, [pc, #244]	; (8005974 <xQueueReceive+0x1bc>)
 8005880:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005884:	601a      	str	r2, [r3, #0]
 8005886:	f3bf 8f4f 	dsb	sy
 800588a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800588e:	f002 fb31 	bl	8007ef4 <vPortExitCritical>
				return pdPASS;
 8005892:	2301      	movs	r3, #1
 8005894:	e069      	b.n	800596a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	2b00      	cmp	r3, #0
 800589a:	d103      	bne.n	80058a4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800589c:	f002 fb2a 	bl	8007ef4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80058a0:	2300      	movs	r3, #0
 80058a2:	e062      	b.n	800596a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80058a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d106      	bne.n	80058b8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80058aa:	f107 0310 	add.w	r3, r7, #16
 80058ae:	4618      	mov	r0, r3
 80058b0:	f001 f9c8 	bl	8006c44 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80058b4:	2301      	movs	r3, #1
 80058b6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80058b8:	f002 fb1c 	bl	8007ef4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80058bc:	f000 fdc4 	bl	8006448 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80058c0:	f002 fae8 	bl	8007e94 <vPortEnterCritical>
 80058c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058c6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80058ca:	b25b      	sxtb	r3, r3
 80058cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058d0:	d103      	bne.n	80058da <xQueueReceive+0x122>
 80058d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058d4:	2200      	movs	r2, #0
 80058d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80058da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058dc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80058e0:	b25b      	sxtb	r3, r3
 80058e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058e6:	d103      	bne.n	80058f0 <xQueueReceive+0x138>
 80058e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058ea:	2200      	movs	r2, #0
 80058ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80058f0:	f002 fb00 	bl	8007ef4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80058f4:	1d3a      	adds	r2, r7, #4
 80058f6:	f107 0310 	add.w	r3, r7, #16
 80058fa:	4611      	mov	r1, r2
 80058fc:	4618      	mov	r0, r3
 80058fe:	f001 f9b7 	bl	8006c70 <xTaskCheckForTimeOut>
 8005902:	4603      	mov	r3, r0
 8005904:	2b00      	cmp	r3, #0
 8005906:	d123      	bne.n	8005950 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005908:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800590a:	f000 fa3b 	bl	8005d84 <prvIsQueueEmpty>
 800590e:	4603      	mov	r3, r0
 8005910:	2b00      	cmp	r3, #0
 8005912:	d017      	beq.n	8005944 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005914:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005916:	3324      	adds	r3, #36	; 0x24
 8005918:	687a      	ldr	r2, [r7, #4]
 800591a:	4611      	mov	r1, r2
 800591c:	4618      	mov	r0, r3
 800591e:	f001 f841 	bl	80069a4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005922:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005924:	f000 f9dc 	bl	8005ce0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005928:	f000 fd9c 	bl	8006464 <xTaskResumeAll>
 800592c:	4603      	mov	r3, r0
 800592e:	2b00      	cmp	r3, #0
 8005930:	d189      	bne.n	8005846 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8005932:	4b10      	ldr	r3, [pc, #64]	; (8005974 <xQueueReceive+0x1bc>)
 8005934:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005938:	601a      	str	r2, [r3, #0]
 800593a:	f3bf 8f4f 	dsb	sy
 800593e:	f3bf 8f6f 	isb	sy
 8005942:	e780      	b.n	8005846 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005944:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005946:	f000 f9cb 	bl	8005ce0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800594a:	f000 fd8b 	bl	8006464 <xTaskResumeAll>
 800594e:	e77a      	b.n	8005846 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005950:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005952:	f000 f9c5 	bl	8005ce0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005956:	f000 fd85 	bl	8006464 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800595a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800595c:	f000 fa12 	bl	8005d84 <prvIsQueueEmpty>
 8005960:	4603      	mov	r3, r0
 8005962:	2b00      	cmp	r3, #0
 8005964:	f43f af6f 	beq.w	8005846 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005968:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800596a:	4618      	mov	r0, r3
 800596c:	3730      	adds	r7, #48	; 0x30
 800596e:	46bd      	mov	sp, r7
 8005970:	bd80      	pop	{r7, pc}
 8005972:	bf00      	nop
 8005974:	e000ed04 	.word	0xe000ed04

08005978 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8005978:	b580      	push	{r7, lr}
 800597a:	b08e      	sub	sp, #56	; 0x38
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
 8005980:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8005982:	2300      	movs	r3, #0
 8005984:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800598a:	2300      	movs	r3, #0
 800598c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800598e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005990:	2b00      	cmp	r3, #0
 8005992:	d10a      	bne.n	80059aa <xQueueSemaphoreTake+0x32>
	__asm volatile
 8005994:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005998:	f383 8811 	msr	BASEPRI, r3
 800599c:	f3bf 8f6f 	isb	sy
 80059a0:	f3bf 8f4f 	dsb	sy
 80059a4:	623b      	str	r3, [r7, #32]
}
 80059a6:	bf00      	nop
 80059a8:	e7fe      	b.n	80059a8 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80059aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d00a      	beq.n	80059c8 <xQueueSemaphoreTake+0x50>
	__asm volatile
 80059b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059b6:	f383 8811 	msr	BASEPRI, r3
 80059ba:	f3bf 8f6f 	isb	sy
 80059be:	f3bf 8f4f 	dsb	sy
 80059c2:	61fb      	str	r3, [r7, #28]
}
 80059c4:	bf00      	nop
 80059c6:	e7fe      	b.n	80059c6 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80059c8:	f001 faa2 	bl	8006f10 <xTaskGetSchedulerState>
 80059cc:	4603      	mov	r3, r0
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d102      	bne.n	80059d8 <xQueueSemaphoreTake+0x60>
 80059d2:	683b      	ldr	r3, [r7, #0]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d101      	bne.n	80059dc <xQueueSemaphoreTake+0x64>
 80059d8:	2301      	movs	r3, #1
 80059da:	e000      	b.n	80059de <xQueueSemaphoreTake+0x66>
 80059dc:	2300      	movs	r3, #0
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d10a      	bne.n	80059f8 <xQueueSemaphoreTake+0x80>
	__asm volatile
 80059e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059e6:	f383 8811 	msr	BASEPRI, r3
 80059ea:	f3bf 8f6f 	isb	sy
 80059ee:	f3bf 8f4f 	dsb	sy
 80059f2:	61bb      	str	r3, [r7, #24]
}
 80059f4:	bf00      	nop
 80059f6:	e7fe      	b.n	80059f6 <xQueueSemaphoreTake+0x7e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80059f8:	f002 fa4c 	bl	8007e94 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80059fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a00:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8005a02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d024      	beq.n	8005a52 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8005a08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a0a:	1e5a      	subs	r2, r3, #1
 8005a0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a0e:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005a10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d104      	bne.n	8005a22 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8005a18:	f001 fc5c 	bl	80072d4 <pvTaskIncrementMutexHeldCount>
 8005a1c:	4602      	mov	r2, r0
 8005a1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a20:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005a22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a24:	691b      	ldr	r3, [r3, #16]
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d00f      	beq.n	8005a4a <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005a2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a2c:	3310      	adds	r3, #16
 8005a2e:	4618      	mov	r0, r3
 8005a30:	f001 f844 	bl	8006abc <xTaskRemoveFromEventList>
 8005a34:	4603      	mov	r3, r0
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d007      	beq.n	8005a4a <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005a3a:	4b54      	ldr	r3, [pc, #336]	; (8005b8c <xQueueSemaphoreTake+0x214>)
 8005a3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a40:	601a      	str	r2, [r3, #0]
 8005a42:	f3bf 8f4f 	dsb	sy
 8005a46:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005a4a:	f002 fa53 	bl	8007ef4 <vPortExitCritical>
				return pdPASS;
 8005a4e:	2301      	movs	r3, #1
 8005a50:	e097      	b.n	8005b82 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005a52:	683b      	ldr	r3, [r7, #0]
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d111      	bne.n	8005a7c <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8005a58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d00a      	beq.n	8005a74 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8005a5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a62:	f383 8811 	msr	BASEPRI, r3
 8005a66:	f3bf 8f6f 	isb	sy
 8005a6a:	f3bf 8f4f 	dsb	sy
 8005a6e:	617b      	str	r3, [r7, #20]
}
 8005a70:	bf00      	nop
 8005a72:	e7fe      	b.n	8005a72 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8005a74:	f002 fa3e 	bl	8007ef4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005a78:	2300      	movs	r3, #0
 8005a7a:	e082      	b.n	8005b82 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005a7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d106      	bne.n	8005a90 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005a82:	f107 030c 	add.w	r3, r7, #12
 8005a86:	4618      	mov	r0, r3
 8005a88:	f001 f8dc 	bl	8006c44 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005a8c:	2301      	movs	r3, #1
 8005a8e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005a90:	f002 fa30 	bl	8007ef4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005a94:	f000 fcd8 	bl	8006448 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005a98:	f002 f9fc 	bl	8007e94 <vPortEnterCritical>
 8005a9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a9e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005aa2:	b25b      	sxtb	r3, r3
 8005aa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005aa8:	d103      	bne.n	8005ab2 <xQueueSemaphoreTake+0x13a>
 8005aaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005aac:	2200      	movs	r2, #0
 8005aae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005ab2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ab4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005ab8:	b25b      	sxtb	r3, r3
 8005aba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005abe:	d103      	bne.n	8005ac8 <xQueueSemaphoreTake+0x150>
 8005ac0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005ac8:	f002 fa14 	bl	8007ef4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005acc:	463a      	mov	r2, r7
 8005ace:	f107 030c 	add.w	r3, r7, #12
 8005ad2:	4611      	mov	r1, r2
 8005ad4:	4618      	mov	r0, r3
 8005ad6:	f001 f8cb 	bl	8006c70 <xTaskCheckForTimeOut>
 8005ada:	4603      	mov	r3, r0
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d132      	bne.n	8005b46 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005ae0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005ae2:	f000 f94f 	bl	8005d84 <prvIsQueueEmpty>
 8005ae6:	4603      	mov	r3, r0
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d026      	beq.n	8005b3a <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005aec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d109      	bne.n	8005b08 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8005af4:	f002 f9ce 	bl	8007e94 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8005af8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005afa:	685b      	ldr	r3, [r3, #4]
 8005afc:	4618      	mov	r0, r3
 8005afe:	f001 fa25 	bl	8006f4c <xTaskPriorityInherit>
 8005b02:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8005b04:	f002 f9f6 	bl	8007ef4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005b08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b0a:	3324      	adds	r3, #36	; 0x24
 8005b0c:	683a      	ldr	r2, [r7, #0]
 8005b0e:	4611      	mov	r1, r2
 8005b10:	4618      	mov	r0, r3
 8005b12:	f000 ff47 	bl	80069a4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005b16:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005b18:	f000 f8e2 	bl	8005ce0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005b1c:	f000 fca2 	bl	8006464 <xTaskResumeAll>
 8005b20:	4603      	mov	r3, r0
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	f47f af68 	bne.w	80059f8 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8005b28:	4b18      	ldr	r3, [pc, #96]	; (8005b8c <xQueueSemaphoreTake+0x214>)
 8005b2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b2e:	601a      	str	r2, [r3, #0]
 8005b30:	f3bf 8f4f 	dsb	sy
 8005b34:	f3bf 8f6f 	isb	sy
 8005b38:	e75e      	b.n	80059f8 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8005b3a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005b3c:	f000 f8d0 	bl	8005ce0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005b40:	f000 fc90 	bl	8006464 <xTaskResumeAll>
 8005b44:	e758      	b.n	80059f8 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8005b46:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005b48:	f000 f8ca 	bl	8005ce0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005b4c:	f000 fc8a 	bl	8006464 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005b50:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005b52:	f000 f917 	bl	8005d84 <prvIsQueueEmpty>
 8005b56:	4603      	mov	r3, r0
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	f43f af4d 	beq.w	80059f8 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8005b5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d00d      	beq.n	8005b80 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8005b64:	f002 f996 	bl	8007e94 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8005b68:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005b6a:	f000 f811 	bl	8005b90 <prvGetDisinheritPriorityAfterTimeout>
 8005b6e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8005b70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b72:	685b      	ldr	r3, [r3, #4]
 8005b74:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005b76:	4618      	mov	r0, r3
 8005b78:	f001 faf4 	bl	8007164 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8005b7c:	f002 f9ba 	bl	8007ef4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005b80:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8005b82:	4618      	mov	r0, r3
 8005b84:	3738      	adds	r7, #56	; 0x38
 8005b86:	46bd      	mov	sp, r7
 8005b88:	bd80      	pop	{r7, pc}
 8005b8a:	bf00      	nop
 8005b8c:	e000ed04 	.word	0xe000ed04

08005b90 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8005b90:	b480      	push	{r7}
 8005b92:	b085      	sub	sp, #20
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d006      	beq.n	8005bae <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f1c3 0307 	rsb	r3, r3, #7
 8005baa:	60fb      	str	r3, [r7, #12]
 8005bac:	e001      	b.n	8005bb2 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8005bae:	2300      	movs	r3, #0
 8005bb0:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8005bb2:	68fb      	ldr	r3, [r7, #12]
	}
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	3714      	adds	r7, #20
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bbe:	4770      	bx	lr

08005bc0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	b086      	sub	sp, #24
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	60f8      	str	r0, [r7, #12]
 8005bc8:	60b9      	str	r1, [r7, #8]
 8005bca:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005bcc:	2300      	movs	r3, #0
 8005bce:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bd4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d10d      	bne.n	8005bfa <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d14d      	bne.n	8005c82 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	685b      	ldr	r3, [r3, #4]
 8005bea:	4618      	mov	r0, r3
 8005bec:	f001 fa34 	bl	8007058 <xTaskPriorityDisinherit>
 8005bf0:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	2200      	movs	r2, #0
 8005bf6:	605a      	str	r2, [r3, #4]
 8005bf8:	e043      	b.n	8005c82 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d119      	bne.n	8005c34 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	6898      	ldr	r0, [r3, #8]
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c08:	461a      	mov	r2, r3
 8005c0a:	68b9      	ldr	r1, [r7, #8]
 8005c0c:	f002 fc9a 	bl	8008544 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	689a      	ldr	r2, [r3, #8]
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c18:	441a      	add	r2, r3
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	689a      	ldr	r2, [r3, #8]
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	685b      	ldr	r3, [r3, #4]
 8005c26:	429a      	cmp	r2, r3
 8005c28:	d32b      	bcc.n	8005c82 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	681a      	ldr	r2, [r3, #0]
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	609a      	str	r2, [r3, #8]
 8005c32:	e026      	b.n	8005c82 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	68d8      	ldr	r0, [r3, #12]
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c3c:	461a      	mov	r2, r3
 8005c3e:	68b9      	ldr	r1, [r7, #8]
 8005c40:	f002 fc80 	bl	8008544 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	68da      	ldr	r2, [r3, #12]
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c4c:	425b      	negs	r3, r3
 8005c4e:	441a      	add	r2, r3
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	68da      	ldr	r2, [r3, #12]
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	429a      	cmp	r2, r3
 8005c5e:	d207      	bcs.n	8005c70 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	685a      	ldr	r2, [r3, #4]
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c68:	425b      	negs	r3, r3
 8005c6a:	441a      	add	r2, r3
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2b02      	cmp	r3, #2
 8005c74:	d105      	bne.n	8005c82 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005c76:	693b      	ldr	r3, [r7, #16]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d002      	beq.n	8005c82 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005c7c:	693b      	ldr	r3, [r7, #16]
 8005c7e:	3b01      	subs	r3, #1
 8005c80:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005c82:	693b      	ldr	r3, [r7, #16]
 8005c84:	1c5a      	adds	r2, r3, #1
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005c8a:	697b      	ldr	r3, [r7, #20]
}
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	3718      	adds	r7, #24
 8005c90:	46bd      	mov	sp, r7
 8005c92:	bd80      	pop	{r7, pc}

08005c94 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005c94:	b580      	push	{r7, lr}
 8005c96:	b082      	sub	sp, #8
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	6078      	str	r0, [r7, #4]
 8005c9c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d018      	beq.n	8005cd8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	68da      	ldr	r2, [r3, #12]
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cae:	441a      	add	r2, r3
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	68da      	ldr	r2, [r3, #12]
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	685b      	ldr	r3, [r3, #4]
 8005cbc:	429a      	cmp	r2, r3
 8005cbe:	d303      	bcc.n	8005cc8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681a      	ldr	r2, [r3, #0]
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	68d9      	ldr	r1, [r3, #12]
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cd0:	461a      	mov	r2, r3
 8005cd2:	6838      	ldr	r0, [r7, #0]
 8005cd4:	f002 fc36 	bl	8008544 <memcpy>
	}
}
 8005cd8:	bf00      	nop
 8005cda:	3708      	adds	r7, #8
 8005cdc:	46bd      	mov	sp, r7
 8005cde:	bd80      	pop	{r7, pc}

08005ce0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005ce0:	b580      	push	{r7, lr}
 8005ce2:	b084      	sub	sp, #16
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005ce8:	f002 f8d4 	bl	8007e94 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005cf2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005cf4:	e011      	b.n	8005d1a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d012      	beq.n	8005d24 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	3324      	adds	r3, #36	; 0x24
 8005d02:	4618      	mov	r0, r3
 8005d04:	f000 feda 	bl	8006abc <xTaskRemoveFromEventList>
 8005d08:	4603      	mov	r3, r0
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d001      	beq.n	8005d12 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005d0e:	f001 f811 	bl	8006d34 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005d12:	7bfb      	ldrb	r3, [r7, #15]
 8005d14:	3b01      	subs	r3, #1
 8005d16:	b2db      	uxtb	r3, r3
 8005d18:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005d1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	dce9      	bgt.n	8005cf6 <prvUnlockQueue+0x16>
 8005d22:	e000      	b.n	8005d26 <prvUnlockQueue+0x46>
					break;
 8005d24:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	22ff      	movs	r2, #255	; 0xff
 8005d2a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005d2e:	f002 f8e1 	bl	8007ef4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005d32:	f002 f8af 	bl	8007e94 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005d3c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005d3e:	e011      	b.n	8005d64 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	691b      	ldr	r3, [r3, #16]
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d012      	beq.n	8005d6e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	3310      	adds	r3, #16
 8005d4c:	4618      	mov	r0, r3
 8005d4e:	f000 feb5 	bl	8006abc <xTaskRemoveFromEventList>
 8005d52:	4603      	mov	r3, r0
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d001      	beq.n	8005d5c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005d58:	f000 ffec 	bl	8006d34 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005d5c:	7bbb      	ldrb	r3, [r7, #14]
 8005d5e:	3b01      	subs	r3, #1
 8005d60:	b2db      	uxtb	r3, r3
 8005d62:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005d64:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	dce9      	bgt.n	8005d40 <prvUnlockQueue+0x60>
 8005d6c:	e000      	b.n	8005d70 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005d6e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	22ff      	movs	r2, #255	; 0xff
 8005d74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005d78:	f002 f8bc 	bl	8007ef4 <vPortExitCritical>
}
 8005d7c:	bf00      	nop
 8005d7e:	3710      	adds	r7, #16
 8005d80:	46bd      	mov	sp, r7
 8005d82:	bd80      	pop	{r7, pc}

08005d84 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005d84:	b580      	push	{r7, lr}
 8005d86:	b084      	sub	sp, #16
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005d8c:	f002 f882 	bl	8007e94 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d102      	bne.n	8005d9e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005d98:	2301      	movs	r3, #1
 8005d9a:	60fb      	str	r3, [r7, #12]
 8005d9c:	e001      	b.n	8005da2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005d9e:	2300      	movs	r3, #0
 8005da0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005da2:	f002 f8a7 	bl	8007ef4 <vPortExitCritical>

	return xReturn;
 8005da6:	68fb      	ldr	r3, [r7, #12]
}
 8005da8:	4618      	mov	r0, r3
 8005daa:	3710      	adds	r7, #16
 8005dac:	46bd      	mov	sp, r7
 8005dae:	bd80      	pop	{r7, pc}

08005db0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005db0:	b580      	push	{r7, lr}
 8005db2:	b084      	sub	sp, #16
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005db8:	f002 f86c 	bl	8007e94 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005dc4:	429a      	cmp	r2, r3
 8005dc6:	d102      	bne.n	8005dce <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005dc8:	2301      	movs	r3, #1
 8005dca:	60fb      	str	r3, [r7, #12]
 8005dcc:	e001      	b.n	8005dd2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005dce:	2300      	movs	r3, #0
 8005dd0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005dd2:	f002 f88f 	bl	8007ef4 <vPortExitCritical>

	return xReturn;
 8005dd6:	68fb      	ldr	r3, [r7, #12]
}
 8005dd8:	4618      	mov	r0, r3
 8005dda:	3710      	adds	r7, #16
 8005ddc:	46bd      	mov	sp, r7
 8005dde:	bd80      	pop	{r7, pc}

08005de0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005de0:	b480      	push	{r7}
 8005de2:	b085      	sub	sp, #20
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	6078      	str	r0, [r7, #4]
 8005de8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005dea:	2300      	movs	r3, #0
 8005dec:	60fb      	str	r3, [r7, #12]
 8005dee:	e014      	b.n	8005e1a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005df0:	4a0f      	ldr	r2, [pc, #60]	; (8005e30 <vQueueAddToRegistry+0x50>)
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d10b      	bne.n	8005e14 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005dfc:	490c      	ldr	r1, [pc, #48]	; (8005e30 <vQueueAddToRegistry+0x50>)
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	683a      	ldr	r2, [r7, #0]
 8005e02:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005e06:	4a0a      	ldr	r2, [pc, #40]	; (8005e30 <vQueueAddToRegistry+0x50>)
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	00db      	lsls	r3, r3, #3
 8005e0c:	4413      	add	r3, r2
 8005e0e:	687a      	ldr	r2, [r7, #4]
 8005e10:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005e12:	e006      	b.n	8005e22 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	3301      	adds	r3, #1
 8005e18:	60fb      	str	r3, [r7, #12]
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	2b07      	cmp	r3, #7
 8005e1e:	d9e7      	bls.n	8005df0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005e20:	bf00      	nop
 8005e22:	bf00      	nop
 8005e24:	3714      	adds	r7, #20
 8005e26:	46bd      	mov	sp, r7
 8005e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2c:	4770      	bx	lr
 8005e2e:	bf00      	nop
 8005e30:	2000065c 	.word	0x2000065c

08005e34 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005e34:	b580      	push	{r7, lr}
 8005e36:	b086      	sub	sp, #24
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	60f8      	str	r0, [r7, #12]
 8005e3c:	60b9      	str	r1, [r7, #8]
 8005e3e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005e44:	f002 f826 	bl	8007e94 <vPortEnterCritical>
 8005e48:	697b      	ldr	r3, [r7, #20]
 8005e4a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005e4e:	b25b      	sxtb	r3, r3
 8005e50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e54:	d103      	bne.n	8005e5e <vQueueWaitForMessageRestricted+0x2a>
 8005e56:	697b      	ldr	r3, [r7, #20]
 8005e58:	2200      	movs	r2, #0
 8005e5a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005e5e:	697b      	ldr	r3, [r7, #20]
 8005e60:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005e64:	b25b      	sxtb	r3, r3
 8005e66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e6a:	d103      	bne.n	8005e74 <vQueueWaitForMessageRestricted+0x40>
 8005e6c:	697b      	ldr	r3, [r7, #20]
 8005e6e:	2200      	movs	r2, #0
 8005e70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005e74:	f002 f83e 	bl	8007ef4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005e78:	697b      	ldr	r3, [r7, #20]
 8005e7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d106      	bne.n	8005e8e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005e80:	697b      	ldr	r3, [r7, #20]
 8005e82:	3324      	adds	r3, #36	; 0x24
 8005e84:	687a      	ldr	r2, [r7, #4]
 8005e86:	68b9      	ldr	r1, [r7, #8]
 8005e88:	4618      	mov	r0, r3
 8005e8a:	f000 fdeb 	bl	8006a64 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005e8e:	6978      	ldr	r0, [r7, #20]
 8005e90:	f7ff ff26 	bl	8005ce0 <prvUnlockQueue>
	}
 8005e94:	bf00      	nop
 8005e96:	3718      	adds	r7, #24
 8005e98:	46bd      	mov	sp, r7
 8005e9a:	bd80      	pop	{r7, pc}

08005e9c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005e9c:	b580      	push	{r7, lr}
 8005e9e:	b08e      	sub	sp, #56	; 0x38
 8005ea0:	af04      	add	r7, sp, #16
 8005ea2:	60f8      	str	r0, [r7, #12]
 8005ea4:	60b9      	str	r1, [r7, #8]
 8005ea6:	607a      	str	r2, [r7, #4]
 8005ea8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005eaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d10a      	bne.n	8005ec6 <xTaskCreateStatic+0x2a>
	__asm volatile
 8005eb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005eb4:	f383 8811 	msr	BASEPRI, r3
 8005eb8:	f3bf 8f6f 	isb	sy
 8005ebc:	f3bf 8f4f 	dsb	sy
 8005ec0:	623b      	str	r3, [r7, #32]
}
 8005ec2:	bf00      	nop
 8005ec4:	e7fe      	b.n	8005ec4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005ec6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d10a      	bne.n	8005ee2 <xTaskCreateStatic+0x46>
	__asm volatile
 8005ecc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ed0:	f383 8811 	msr	BASEPRI, r3
 8005ed4:	f3bf 8f6f 	isb	sy
 8005ed8:	f3bf 8f4f 	dsb	sy
 8005edc:	61fb      	str	r3, [r7, #28]
}
 8005ede:	bf00      	nop
 8005ee0:	e7fe      	b.n	8005ee0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005ee2:	23b8      	movs	r3, #184	; 0xb8
 8005ee4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005ee6:	693b      	ldr	r3, [r7, #16]
 8005ee8:	2bb8      	cmp	r3, #184	; 0xb8
 8005eea:	d00a      	beq.n	8005f02 <xTaskCreateStatic+0x66>
	__asm volatile
 8005eec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ef0:	f383 8811 	msr	BASEPRI, r3
 8005ef4:	f3bf 8f6f 	isb	sy
 8005ef8:	f3bf 8f4f 	dsb	sy
 8005efc:	61bb      	str	r3, [r7, #24]
}
 8005efe:	bf00      	nop
 8005f00:	e7fe      	b.n	8005f00 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005f02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d01e      	beq.n	8005f46 <xTaskCreateStatic+0xaa>
 8005f08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d01b      	beq.n	8005f46 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005f0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f10:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f14:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005f16:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f1a:	2202      	movs	r2, #2
 8005f1c:	f883 20b5 	strb.w	r2, [r3, #181]	; 0xb5
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005f20:	2300      	movs	r3, #0
 8005f22:	9303      	str	r3, [sp, #12]
 8005f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f26:	9302      	str	r3, [sp, #8]
 8005f28:	f107 0314 	add.w	r3, r7, #20
 8005f2c:	9301      	str	r3, [sp, #4]
 8005f2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f30:	9300      	str	r3, [sp, #0]
 8005f32:	683b      	ldr	r3, [r7, #0]
 8005f34:	687a      	ldr	r2, [r7, #4]
 8005f36:	68b9      	ldr	r1, [r7, #8]
 8005f38:	68f8      	ldr	r0, [r7, #12]
 8005f3a:	f000 f851 	bl	8005fe0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005f3e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005f40:	f000 f8e4 	bl	800610c <prvAddNewTaskToReadyList>
 8005f44:	e001      	b.n	8005f4a <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8005f46:	2300      	movs	r3, #0
 8005f48:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005f4a:	697b      	ldr	r3, [r7, #20]
	}
 8005f4c:	4618      	mov	r0, r3
 8005f4e:	3728      	adds	r7, #40	; 0x28
 8005f50:	46bd      	mov	sp, r7
 8005f52:	bd80      	pop	{r7, pc}

08005f54 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005f54:	b580      	push	{r7, lr}
 8005f56:	b08c      	sub	sp, #48	; 0x30
 8005f58:	af04      	add	r7, sp, #16
 8005f5a:	60f8      	str	r0, [r7, #12]
 8005f5c:	60b9      	str	r1, [r7, #8]
 8005f5e:	603b      	str	r3, [r7, #0]
 8005f60:	4613      	mov	r3, r2
 8005f62:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005f64:	88fb      	ldrh	r3, [r7, #6]
 8005f66:	009b      	lsls	r3, r3, #2
 8005f68:	4618      	mov	r0, r3
 8005f6a:	f002 f8b5 	bl	80080d8 <pvPortMalloc>
 8005f6e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005f70:	697b      	ldr	r3, [r7, #20]
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d00e      	beq.n	8005f94 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8005f76:	20b8      	movs	r0, #184	; 0xb8
 8005f78:	f002 f8ae 	bl	80080d8 <pvPortMalloc>
 8005f7c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005f7e:	69fb      	ldr	r3, [r7, #28]
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d003      	beq.n	8005f8c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005f84:	69fb      	ldr	r3, [r7, #28]
 8005f86:	697a      	ldr	r2, [r7, #20]
 8005f88:	631a      	str	r2, [r3, #48]	; 0x30
 8005f8a:	e005      	b.n	8005f98 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005f8c:	6978      	ldr	r0, [r7, #20]
 8005f8e:	f002 f967 	bl	8008260 <vPortFree>
 8005f92:	e001      	b.n	8005f98 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005f94:	2300      	movs	r3, #0
 8005f96:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005f98:	69fb      	ldr	r3, [r7, #28]
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d017      	beq.n	8005fce <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005f9e:	69fb      	ldr	r3, [r7, #28]
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	f883 20b5 	strb.w	r2, [r3, #181]	; 0xb5
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005fa6:	88fa      	ldrh	r2, [r7, #6]
 8005fa8:	2300      	movs	r3, #0
 8005faa:	9303      	str	r3, [sp, #12]
 8005fac:	69fb      	ldr	r3, [r7, #28]
 8005fae:	9302      	str	r3, [sp, #8]
 8005fb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fb2:	9301      	str	r3, [sp, #4]
 8005fb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fb6:	9300      	str	r3, [sp, #0]
 8005fb8:	683b      	ldr	r3, [r7, #0]
 8005fba:	68b9      	ldr	r1, [r7, #8]
 8005fbc:	68f8      	ldr	r0, [r7, #12]
 8005fbe:	f000 f80f 	bl	8005fe0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005fc2:	69f8      	ldr	r0, [r7, #28]
 8005fc4:	f000 f8a2 	bl	800610c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005fc8:	2301      	movs	r3, #1
 8005fca:	61bb      	str	r3, [r7, #24]
 8005fcc:	e002      	b.n	8005fd4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005fce:	f04f 33ff 	mov.w	r3, #4294967295
 8005fd2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005fd4:	69bb      	ldr	r3, [r7, #24]
	}
 8005fd6:	4618      	mov	r0, r3
 8005fd8:	3720      	adds	r7, #32
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	bd80      	pop	{r7, pc}
	...

08005fe0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005fe0:	b580      	push	{r7, lr}
 8005fe2:	b088      	sub	sp, #32
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	60f8      	str	r0, [r7, #12]
 8005fe8:	60b9      	str	r1, [r7, #8]
 8005fea:	607a      	str	r2, [r7, #4]
 8005fec:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8005fee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ff0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005ff8:	3b01      	subs	r3, #1
 8005ffa:	009b      	lsls	r3, r3, #2
 8005ffc:	4413      	add	r3, r2
 8005ffe:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8006000:	69bb      	ldr	r3, [r7, #24]
 8006002:	f023 0307 	bic.w	r3, r3, #7
 8006006:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006008:	69bb      	ldr	r3, [r7, #24]
 800600a:	f003 0307 	and.w	r3, r3, #7
 800600e:	2b00      	cmp	r3, #0
 8006010:	d00a      	beq.n	8006028 <prvInitialiseNewTask+0x48>
	__asm volatile
 8006012:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006016:	f383 8811 	msr	BASEPRI, r3
 800601a:	f3bf 8f6f 	isb	sy
 800601e:	f3bf 8f4f 	dsb	sy
 8006022:	617b      	str	r3, [r7, #20]
}
 8006024:	bf00      	nop
 8006026:	e7fe      	b.n	8006026 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006028:	2300      	movs	r3, #0
 800602a:	61fb      	str	r3, [r7, #28]
 800602c:	e012      	b.n	8006054 <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800602e:	68ba      	ldr	r2, [r7, #8]
 8006030:	69fb      	ldr	r3, [r7, #28]
 8006032:	4413      	add	r3, r2
 8006034:	7819      	ldrb	r1, [r3, #0]
 8006036:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006038:	69fb      	ldr	r3, [r7, #28]
 800603a:	4413      	add	r3, r2
 800603c:	3334      	adds	r3, #52	; 0x34
 800603e:	460a      	mov	r2, r1
 8006040:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8006042:	68ba      	ldr	r2, [r7, #8]
 8006044:	69fb      	ldr	r3, [r7, #28]
 8006046:	4413      	add	r3, r2
 8006048:	781b      	ldrb	r3, [r3, #0]
 800604a:	2b00      	cmp	r3, #0
 800604c:	d006      	beq.n	800605c <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800604e:	69fb      	ldr	r3, [r7, #28]
 8006050:	3301      	adds	r3, #1
 8006052:	61fb      	str	r3, [r7, #28]
 8006054:	69fb      	ldr	r3, [r7, #28]
 8006056:	2b11      	cmp	r3, #17
 8006058:	d9e9      	bls.n	800602e <prvInitialiseNewTask+0x4e>
 800605a:	e000      	b.n	800605e <prvInitialiseNewTask+0x7e>
		{
			break;
 800605c:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800605e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006060:	2200      	movs	r2, #0
 8006062:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006066:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006068:	2b06      	cmp	r3, #6
 800606a:	d901      	bls.n	8006070 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800606c:	2306      	movs	r3, #6
 800606e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006070:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006072:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006074:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006076:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006078:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800607a:	649a      	str	r2, [r3, #72]	; 0x48
		pxNewTCB->uxMutexesHeld = 0;
 800607c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800607e:	2200      	movs	r2, #0
 8006080:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006082:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006084:	3304      	adds	r3, #4
 8006086:	4618      	mov	r0, r3
 8006088:	f7fe ffa2 	bl	8004fd0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800608c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800608e:	3318      	adds	r3, #24
 8006090:	4618      	mov	r0, r3
 8006092:	f7fe ff9d 	bl	8004fd0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006096:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006098:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800609a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800609c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800609e:	f1c3 0207 	rsb	r2, r3, #7
 80060a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060a4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80060a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80060aa:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80060ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060ae:	2200      	movs	r2, #0
 80060b0:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80060b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060b6:	2200      	movs	r2, #0
 80060b8:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80060bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060be:	3350      	adds	r3, #80	; 0x50
 80060c0:	2260      	movs	r2, #96	; 0x60
 80060c2:	2100      	movs	r1, #0
 80060c4:	4618      	mov	r0, r3
 80060c6:	f002 fa4b 	bl	8008560 <memset>
 80060ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060cc:	4a0c      	ldr	r2, [pc, #48]	; (8006100 <prvInitialiseNewTask+0x120>)
 80060ce:	655a      	str	r2, [r3, #84]	; 0x54
 80060d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060d2:	4a0c      	ldr	r2, [pc, #48]	; (8006104 <prvInitialiseNewTask+0x124>)
 80060d4:	659a      	str	r2, [r3, #88]	; 0x58
 80060d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060d8:	4a0b      	ldr	r2, [pc, #44]	; (8006108 <prvInitialiseNewTask+0x128>)
 80060da:	65da      	str	r2, [r3, #92]	; 0x5c
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80060dc:	683a      	ldr	r2, [r7, #0]
 80060de:	68f9      	ldr	r1, [r7, #12]
 80060e0:	69b8      	ldr	r0, [r7, #24]
 80060e2:	f001 fdad 	bl	8007c40 <pxPortInitialiseStack>
 80060e6:	4602      	mov	r2, r0
 80060e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060ea:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80060ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d002      	beq.n	80060f8 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80060f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80060f6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80060f8:	bf00      	nop
 80060fa:	3720      	adds	r7, #32
 80060fc:	46bd      	mov	sp, r7
 80060fe:	bd80      	pop	{r7, pc}
 8006100:	08009050 	.word	0x08009050
 8006104:	08009070 	.word	0x08009070
 8006108:	08009030 	.word	0x08009030

0800610c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800610c:	b580      	push	{r7, lr}
 800610e:	b082      	sub	sp, #8
 8006110:	af00      	add	r7, sp, #0
 8006112:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006114:	f001 febe 	bl	8007e94 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006118:	4b2a      	ldr	r3, [pc, #168]	; (80061c4 <prvAddNewTaskToReadyList+0xb8>)
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	3301      	adds	r3, #1
 800611e:	4a29      	ldr	r2, [pc, #164]	; (80061c4 <prvAddNewTaskToReadyList+0xb8>)
 8006120:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006122:	4b29      	ldr	r3, [pc, #164]	; (80061c8 <prvAddNewTaskToReadyList+0xbc>)
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	2b00      	cmp	r3, #0
 8006128:	d109      	bne.n	800613e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800612a:	4a27      	ldr	r2, [pc, #156]	; (80061c8 <prvAddNewTaskToReadyList+0xbc>)
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006130:	4b24      	ldr	r3, [pc, #144]	; (80061c4 <prvAddNewTaskToReadyList+0xb8>)
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	2b01      	cmp	r3, #1
 8006136:	d110      	bne.n	800615a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006138:	f000 fe22 	bl	8006d80 <prvInitialiseTaskLists>
 800613c:	e00d      	b.n	800615a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800613e:	4b23      	ldr	r3, [pc, #140]	; (80061cc <prvAddNewTaskToReadyList+0xc0>)
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	2b00      	cmp	r3, #0
 8006144:	d109      	bne.n	800615a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006146:	4b20      	ldr	r3, [pc, #128]	; (80061c8 <prvAddNewTaskToReadyList+0xbc>)
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006150:	429a      	cmp	r2, r3
 8006152:	d802      	bhi.n	800615a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006154:	4a1c      	ldr	r2, [pc, #112]	; (80061c8 <prvAddNewTaskToReadyList+0xbc>)
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800615a:	4b1d      	ldr	r3, [pc, #116]	; (80061d0 <prvAddNewTaskToReadyList+0xc4>)
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	3301      	adds	r3, #1
 8006160:	4a1b      	ldr	r2, [pc, #108]	; (80061d0 <prvAddNewTaskToReadyList+0xc4>)
 8006162:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006168:	2201      	movs	r2, #1
 800616a:	409a      	lsls	r2, r3
 800616c:	4b19      	ldr	r3, [pc, #100]	; (80061d4 <prvAddNewTaskToReadyList+0xc8>)
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	4313      	orrs	r3, r2
 8006172:	4a18      	ldr	r2, [pc, #96]	; (80061d4 <prvAddNewTaskToReadyList+0xc8>)
 8006174:	6013      	str	r3, [r2, #0]
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800617a:	4613      	mov	r3, r2
 800617c:	009b      	lsls	r3, r3, #2
 800617e:	4413      	add	r3, r2
 8006180:	009b      	lsls	r3, r3, #2
 8006182:	4a15      	ldr	r2, [pc, #84]	; (80061d8 <prvAddNewTaskToReadyList+0xcc>)
 8006184:	441a      	add	r2, r3
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	3304      	adds	r3, #4
 800618a:	4619      	mov	r1, r3
 800618c:	4610      	mov	r0, r2
 800618e:	f7fe ff2c 	bl	8004fea <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006192:	f001 feaf 	bl	8007ef4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006196:	4b0d      	ldr	r3, [pc, #52]	; (80061cc <prvAddNewTaskToReadyList+0xc0>)
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	2b00      	cmp	r3, #0
 800619c:	d00e      	beq.n	80061bc <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800619e:	4b0a      	ldr	r3, [pc, #40]	; (80061c8 <prvAddNewTaskToReadyList+0xbc>)
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061a8:	429a      	cmp	r2, r3
 80061aa:	d207      	bcs.n	80061bc <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80061ac:	4b0b      	ldr	r3, [pc, #44]	; (80061dc <prvAddNewTaskToReadyList+0xd0>)
 80061ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80061b2:	601a      	str	r2, [r3, #0]
 80061b4:	f3bf 8f4f 	dsb	sy
 80061b8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80061bc:	bf00      	nop
 80061be:	3708      	adds	r7, #8
 80061c0:	46bd      	mov	sp, r7
 80061c2:	bd80      	pop	{r7, pc}
 80061c4:	2000079c 	.word	0x2000079c
 80061c8:	2000069c 	.word	0x2000069c
 80061cc:	200007a8 	.word	0x200007a8
 80061d0:	200007b8 	.word	0x200007b8
 80061d4:	200007a4 	.word	0x200007a4
 80061d8:	200006a0 	.word	0x200006a0
 80061dc:	e000ed04 	.word	0xe000ed04

080061e0 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 80061e0:	b580      	push	{r7, lr}
 80061e2:	b084      	sub	sp, #16
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 80061e8:	f001 fe54 	bl	8007e94 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d102      	bne.n	80061f8 <vTaskDelete+0x18>
 80061f2:	4b39      	ldr	r3, [pc, #228]	; (80062d8 <vTaskDelete+0xf8>)
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	e000      	b.n	80061fa <vTaskDelete+0x1a>
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	3304      	adds	r3, #4
 8006200:	4618      	mov	r0, r3
 8006202:	f7fe ff4f 	bl	80050a4 <uxListRemove>
 8006206:	4603      	mov	r3, r0
 8006208:	2b00      	cmp	r3, #0
 800620a:	d115      	bne.n	8006238 <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006210:	4932      	ldr	r1, [pc, #200]	; (80062dc <vTaskDelete+0xfc>)
 8006212:	4613      	mov	r3, r2
 8006214:	009b      	lsls	r3, r3, #2
 8006216:	4413      	add	r3, r2
 8006218:	009b      	lsls	r3, r3, #2
 800621a:	440b      	add	r3, r1
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	2b00      	cmp	r3, #0
 8006220:	d10a      	bne.n	8006238 <vTaskDelete+0x58>
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006226:	2201      	movs	r2, #1
 8006228:	fa02 f303 	lsl.w	r3, r2, r3
 800622c:	43da      	mvns	r2, r3
 800622e:	4b2c      	ldr	r3, [pc, #176]	; (80062e0 <vTaskDelete+0x100>)
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	4013      	ands	r3, r2
 8006234:	4a2a      	ldr	r2, [pc, #168]	; (80062e0 <vTaskDelete+0x100>)
 8006236:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800623c:	2b00      	cmp	r3, #0
 800623e:	d004      	beq.n	800624a <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	3318      	adds	r3, #24
 8006244:	4618      	mov	r0, r3
 8006246:	f7fe ff2d 	bl	80050a4 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 800624a:	4b26      	ldr	r3, [pc, #152]	; (80062e4 <vTaskDelete+0x104>)
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	3301      	adds	r3, #1
 8006250:	4a24      	ldr	r2, [pc, #144]	; (80062e4 <vTaskDelete+0x104>)
 8006252:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8006254:	4b20      	ldr	r3, [pc, #128]	; (80062d8 <vTaskDelete+0xf8>)
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	68fa      	ldr	r2, [r7, #12]
 800625a:	429a      	cmp	r2, r3
 800625c:	d10b      	bne.n	8006276 <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	3304      	adds	r3, #4
 8006262:	4619      	mov	r1, r3
 8006264:	4820      	ldr	r0, [pc, #128]	; (80062e8 <vTaskDelete+0x108>)
 8006266:	f7fe fec0 	bl	8004fea <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 800626a:	4b20      	ldr	r3, [pc, #128]	; (80062ec <vTaskDelete+0x10c>)
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	3301      	adds	r3, #1
 8006270:	4a1e      	ldr	r2, [pc, #120]	; (80062ec <vTaskDelete+0x10c>)
 8006272:	6013      	str	r3, [r2, #0]
 8006274:	e009      	b.n	800628a <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8006276:	4b1e      	ldr	r3, [pc, #120]	; (80062f0 <vTaskDelete+0x110>)
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	3b01      	subs	r3, #1
 800627c:	4a1c      	ldr	r2, [pc, #112]	; (80062f0 <vTaskDelete+0x110>)
 800627e:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 8006280:	68f8      	ldr	r0, [r7, #12]
 8006282:	f000 fdeb 	bl	8006e5c <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8006286:	f000 fe1d 	bl	8006ec4 <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 800628a:	f001 fe33 	bl	8007ef4 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 800628e:	4b19      	ldr	r3, [pc, #100]	; (80062f4 <vTaskDelete+0x114>)
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	2b00      	cmp	r3, #0
 8006294:	d01b      	beq.n	80062ce <vTaskDelete+0xee>
		{
			if( pxTCB == pxCurrentTCB )
 8006296:	4b10      	ldr	r3, [pc, #64]	; (80062d8 <vTaskDelete+0xf8>)
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	68fa      	ldr	r2, [r7, #12]
 800629c:	429a      	cmp	r2, r3
 800629e:	d116      	bne.n	80062ce <vTaskDelete+0xee>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 80062a0:	4b15      	ldr	r3, [pc, #84]	; (80062f8 <vTaskDelete+0x118>)
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d00a      	beq.n	80062be <vTaskDelete+0xde>
	__asm volatile
 80062a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062ac:	f383 8811 	msr	BASEPRI, r3
 80062b0:	f3bf 8f6f 	isb	sy
 80062b4:	f3bf 8f4f 	dsb	sy
 80062b8:	60bb      	str	r3, [r7, #8]
}
 80062ba:	bf00      	nop
 80062bc:	e7fe      	b.n	80062bc <vTaskDelete+0xdc>
				portYIELD_WITHIN_API();
 80062be:	4b0f      	ldr	r3, [pc, #60]	; (80062fc <vTaskDelete+0x11c>)
 80062c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80062c4:	601a      	str	r2, [r3, #0]
 80062c6:	f3bf 8f4f 	dsb	sy
 80062ca:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80062ce:	bf00      	nop
 80062d0:	3710      	adds	r7, #16
 80062d2:	46bd      	mov	sp, r7
 80062d4:	bd80      	pop	{r7, pc}
 80062d6:	bf00      	nop
 80062d8:	2000069c 	.word	0x2000069c
 80062dc:	200006a0 	.word	0x200006a0
 80062e0:	200007a4 	.word	0x200007a4
 80062e4:	200007b8 	.word	0x200007b8
 80062e8:	20000770 	.word	0x20000770
 80062ec:	20000784 	.word	0x20000784
 80062f0:	2000079c 	.word	0x2000079c
 80062f4:	200007a8 	.word	0x200007a8
 80062f8:	200007c4 	.word	0x200007c4
 80062fc:	e000ed04 	.word	0xe000ed04

08006300 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006300:	b580      	push	{r7, lr}
 8006302:	b084      	sub	sp, #16
 8006304:	af00      	add	r7, sp, #0
 8006306:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006308:	2300      	movs	r3, #0
 800630a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2b00      	cmp	r3, #0
 8006310:	d017      	beq.n	8006342 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006312:	4b13      	ldr	r3, [pc, #76]	; (8006360 <vTaskDelay+0x60>)
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	2b00      	cmp	r3, #0
 8006318:	d00a      	beq.n	8006330 <vTaskDelay+0x30>
	__asm volatile
 800631a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800631e:	f383 8811 	msr	BASEPRI, r3
 8006322:	f3bf 8f6f 	isb	sy
 8006326:	f3bf 8f4f 	dsb	sy
 800632a:	60bb      	str	r3, [r7, #8]
}
 800632c:	bf00      	nop
 800632e:	e7fe      	b.n	800632e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006330:	f000 f88a 	bl	8006448 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006334:	2100      	movs	r1, #0
 8006336:	6878      	ldr	r0, [r7, #4]
 8006338:	f001 f8ea 	bl	8007510 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800633c:	f000 f892 	bl	8006464 <xTaskResumeAll>
 8006340:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	2b00      	cmp	r3, #0
 8006346:	d107      	bne.n	8006358 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006348:	4b06      	ldr	r3, [pc, #24]	; (8006364 <vTaskDelay+0x64>)
 800634a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800634e:	601a      	str	r2, [r3, #0]
 8006350:	f3bf 8f4f 	dsb	sy
 8006354:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006358:	bf00      	nop
 800635a:	3710      	adds	r7, #16
 800635c:	46bd      	mov	sp, r7
 800635e:	bd80      	pop	{r7, pc}
 8006360:	200007c4 	.word	0x200007c4
 8006364:	e000ed04 	.word	0xe000ed04

08006368 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006368:	b580      	push	{r7, lr}
 800636a:	b08a      	sub	sp, #40	; 0x28
 800636c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800636e:	2300      	movs	r3, #0
 8006370:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006372:	2300      	movs	r3, #0
 8006374:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006376:	463a      	mov	r2, r7
 8006378:	1d39      	adds	r1, r7, #4
 800637a:	f107 0308 	add.w	r3, r7, #8
 800637e:	4618      	mov	r0, r3
 8006380:	f7f9 ff8c 	bl	800029c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006384:	6839      	ldr	r1, [r7, #0]
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	68ba      	ldr	r2, [r7, #8]
 800638a:	9202      	str	r2, [sp, #8]
 800638c:	9301      	str	r3, [sp, #4]
 800638e:	2300      	movs	r3, #0
 8006390:	9300      	str	r3, [sp, #0]
 8006392:	2300      	movs	r3, #0
 8006394:	460a      	mov	r2, r1
 8006396:	4924      	ldr	r1, [pc, #144]	; (8006428 <vTaskStartScheduler+0xc0>)
 8006398:	4824      	ldr	r0, [pc, #144]	; (800642c <vTaskStartScheduler+0xc4>)
 800639a:	f7ff fd7f 	bl	8005e9c <xTaskCreateStatic>
 800639e:	4603      	mov	r3, r0
 80063a0:	4a23      	ldr	r2, [pc, #140]	; (8006430 <vTaskStartScheduler+0xc8>)
 80063a2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80063a4:	4b22      	ldr	r3, [pc, #136]	; (8006430 <vTaskStartScheduler+0xc8>)
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d002      	beq.n	80063b2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80063ac:	2301      	movs	r3, #1
 80063ae:	617b      	str	r3, [r7, #20]
 80063b0:	e001      	b.n	80063b6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80063b2:	2300      	movs	r3, #0
 80063b4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80063b6:	697b      	ldr	r3, [r7, #20]
 80063b8:	2b01      	cmp	r3, #1
 80063ba:	d102      	bne.n	80063c2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80063bc:	f001 f90e 	bl	80075dc <xTimerCreateTimerTask>
 80063c0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80063c2:	697b      	ldr	r3, [r7, #20]
 80063c4:	2b01      	cmp	r3, #1
 80063c6:	d11b      	bne.n	8006400 <vTaskStartScheduler+0x98>
	__asm volatile
 80063c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063cc:	f383 8811 	msr	BASEPRI, r3
 80063d0:	f3bf 8f6f 	isb	sy
 80063d4:	f3bf 8f4f 	dsb	sy
 80063d8:	613b      	str	r3, [r7, #16]
}
 80063da:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80063dc:	4b15      	ldr	r3, [pc, #84]	; (8006434 <vTaskStartScheduler+0xcc>)
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	3350      	adds	r3, #80	; 0x50
 80063e2:	4a15      	ldr	r2, [pc, #84]	; (8006438 <vTaskStartScheduler+0xd0>)
 80063e4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80063e6:	4b15      	ldr	r3, [pc, #84]	; (800643c <vTaskStartScheduler+0xd4>)
 80063e8:	f04f 32ff 	mov.w	r2, #4294967295
 80063ec:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80063ee:	4b14      	ldr	r3, [pc, #80]	; (8006440 <vTaskStartScheduler+0xd8>)
 80063f0:	2201      	movs	r2, #1
 80063f2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80063f4:	4b13      	ldr	r3, [pc, #76]	; (8006444 <vTaskStartScheduler+0xdc>)
 80063f6:	2200      	movs	r2, #0
 80063f8:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80063fa:	f001 fca9 	bl	8007d50 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80063fe:	e00e      	b.n	800641e <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006400:	697b      	ldr	r3, [r7, #20]
 8006402:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006406:	d10a      	bne.n	800641e <vTaskStartScheduler+0xb6>
	__asm volatile
 8006408:	f04f 0350 	mov.w	r3, #80	; 0x50
 800640c:	f383 8811 	msr	BASEPRI, r3
 8006410:	f3bf 8f6f 	isb	sy
 8006414:	f3bf 8f4f 	dsb	sy
 8006418:	60fb      	str	r3, [r7, #12]
}
 800641a:	bf00      	nop
 800641c:	e7fe      	b.n	800641c <vTaskStartScheduler+0xb4>
}
 800641e:	bf00      	nop
 8006420:	3718      	adds	r7, #24
 8006422:	46bd      	mov	sp, r7
 8006424:	bd80      	pop	{r7, pc}
 8006426:	bf00      	nop
 8006428:	08008fe0 	.word	0x08008fe0
 800642c:	08006d4d 	.word	0x08006d4d
 8006430:	200007c0 	.word	0x200007c0
 8006434:	2000069c 	.word	0x2000069c
 8006438:	20000010 	.word	0x20000010
 800643c:	200007bc 	.word	0x200007bc
 8006440:	200007a8 	.word	0x200007a8
 8006444:	200007a0 	.word	0x200007a0

08006448 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006448:	b480      	push	{r7}
 800644a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800644c:	4b04      	ldr	r3, [pc, #16]	; (8006460 <vTaskSuspendAll+0x18>)
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	3301      	adds	r3, #1
 8006452:	4a03      	ldr	r2, [pc, #12]	; (8006460 <vTaskSuspendAll+0x18>)
 8006454:	6013      	str	r3, [r2, #0]
}
 8006456:	bf00      	nop
 8006458:	46bd      	mov	sp, r7
 800645a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645e:	4770      	bx	lr
 8006460:	200007c4 	.word	0x200007c4

08006464 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006464:	b580      	push	{r7, lr}
 8006466:	b084      	sub	sp, #16
 8006468:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800646a:	2300      	movs	r3, #0
 800646c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800646e:	2300      	movs	r3, #0
 8006470:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006472:	4b41      	ldr	r3, [pc, #260]	; (8006578 <xTaskResumeAll+0x114>)
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	2b00      	cmp	r3, #0
 8006478:	d10a      	bne.n	8006490 <xTaskResumeAll+0x2c>
	__asm volatile
 800647a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800647e:	f383 8811 	msr	BASEPRI, r3
 8006482:	f3bf 8f6f 	isb	sy
 8006486:	f3bf 8f4f 	dsb	sy
 800648a:	603b      	str	r3, [r7, #0]
}
 800648c:	bf00      	nop
 800648e:	e7fe      	b.n	800648e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006490:	f001 fd00 	bl	8007e94 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006494:	4b38      	ldr	r3, [pc, #224]	; (8006578 <xTaskResumeAll+0x114>)
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	3b01      	subs	r3, #1
 800649a:	4a37      	ldr	r2, [pc, #220]	; (8006578 <xTaskResumeAll+0x114>)
 800649c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800649e:	4b36      	ldr	r3, [pc, #216]	; (8006578 <xTaskResumeAll+0x114>)
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d161      	bne.n	800656a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80064a6:	4b35      	ldr	r3, [pc, #212]	; (800657c <xTaskResumeAll+0x118>)
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d05d      	beq.n	800656a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80064ae:	e02e      	b.n	800650e <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80064b0:	4b33      	ldr	r3, [pc, #204]	; (8006580 <xTaskResumeAll+0x11c>)
 80064b2:	68db      	ldr	r3, [r3, #12]
 80064b4:	68db      	ldr	r3, [r3, #12]
 80064b6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	3318      	adds	r3, #24
 80064bc:	4618      	mov	r0, r3
 80064be:	f7fe fdf1 	bl	80050a4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	3304      	adds	r3, #4
 80064c6:	4618      	mov	r0, r3
 80064c8:	f7fe fdec 	bl	80050a4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064d0:	2201      	movs	r2, #1
 80064d2:	409a      	lsls	r2, r3
 80064d4:	4b2b      	ldr	r3, [pc, #172]	; (8006584 <xTaskResumeAll+0x120>)
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	4313      	orrs	r3, r2
 80064da:	4a2a      	ldr	r2, [pc, #168]	; (8006584 <xTaskResumeAll+0x120>)
 80064dc:	6013      	str	r3, [r2, #0]
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064e2:	4613      	mov	r3, r2
 80064e4:	009b      	lsls	r3, r3, #2
 80064e6:	4413      	add	r3, r2
 80064e8:	009b      	lsls	r3, r3, #2
 80064ea:	4a27      	ldr	r2, [pc, #156]	; (8006588 <xTaskResumeAll+0x124>)
 80064ec:	441a      	add	r2, r3
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	3304      	adds	r3, #4
 80064f2:	4619      	mov	r1, r3
 80064f4:	4610      	mov	r0, r2
 80064f6:	f7fe fd78 	bl	8004fea <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064fe:	4b23      	ldr	r3, [pc, #140]	; (800658c <xTaskResumeAll+0x128>)
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006504:	429a      	cmp	r2, r3
 8006506:	d302      	bcc.n	800650e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8006508:	4b21      	ldr	r3, [pc, #132]	; (8006590 <xTaskResumeAll+0x12c>)
 800650a:	2201      	movs	r2, #1
 800650c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800650e:	4b1c      	ldr	r3, [pc, #112]	; (8006580 <xTaskResumeAll+0x11c>)
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	2b00      	cmp	r3, #0
 8006514:	d1cc      	bne.n	80064b0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	2b00      	cmp	r3, #0
 800651a:	d001      	beq.n	8006520 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800651c:	f000 fcd2 	bl	8006ec4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8006520:	4b1c      	ldr	r3, [pc, #112]	; (8006594 <xTaskResumeAll+0x130>)
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	2b00      	cmp	r3, #0
 800652a:	d010      	beq.n	800654e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800652c:	f000 f912 	bl	8006754 <xTaskIncrementTick>
 8006530:	4603      	mov	r3, r0
 8006532:	2b00      	cmp	r3, #0
 8006534:	d002      	beq.n	800653c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8006536:	4b16      	ldr	r3, [pc, #88]	; (8006590 <xTaskResumeAll+0x12c>)
 8006538:	2201      	movs	r2, #1
 800653a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	3b01      	subs	r3, #1
 8006540:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	2b00      	cmp	r3, #0
 8006546:	d1f1      	bne.n	800652c <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8006548:	4b12      	ldr	r3, [pc, #72]	; (8006594 <xTaskResumeAll+0x130>)
 800654a:	2200      	movs	r2, #0
 800654c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800654e:	4b10      	ldr	r3, [pc, #64]	; (8006590 <xTaskResumeAll+0x12c>)
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	2b00      	cmp	r3, #0
 8006554:	d009      	beq.n	800656a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006556:	2301      	movs	r3, #1
 8006558:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800655a:	4b0f      	ldr	r3, [pc, #60]	; (8006598 <xTaskResumeAll+0x134>)
 800655c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006560:	601a      	str	r2, [r3, #0]
 8006562:	f3bf 8f4f 	dsb	sy
 8006566:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800656a:	f001 fcc3 	bl	8007ef4 <vPortExitCritical>

	return xAlreadyYielded;
 800656e:	68bb      	ldr	r3, [r7, #8]
}
 8006570:	4618      	mov	r0, r3
 8006572:	3710      	adds	r7, #16
 8006574:	46bd      	mov	sp, r7
 8006576:	bd80      	pop	{r7, pc}
 8006578:	200007c4 	.word	0x200007c4
 800657c:	2000079c 	.word	0x2000079c
 8006580:	2000075c 	.word	0x2000075c
 8006584:	200007a4 	.word	0x200007a4
 8006588:	200006a0 	.word	0x200006a0
 800658c:	2000069c 	.word	0x2000069c
 8006590:	200007b0 	.word	0x200007b0
 8006594:	200007ac 	.word	0x200007ac
 8006598:	e000ed04 	.word	0xe000ed04

0800659c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800659c:	b480      	push	{r7}
 800659e:	b083      	sub	sp, #12
 80065a0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80065a2:	4b05      	ldr	r3, [pc, #20]	; (80065b8 <xTaskGetTickCount+0x1c>)
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80065a8:	687b      	ldr	r3, [r7, #4]
}
 80065aa:	4618      	mov	r0, r3
 80065ac:	370c      	adds	r7, #12
 80065ae:	46bd      	mov	sp, r7
 80065b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b4:	4770      	bx	lr
 80065b6:	bf00      	nop
 80065b8:	200007a0 	.word	0x200007a0

080065bc <prvSearchForNameWithinSingleList>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_xTaskGetHandle == 1 )

	static TCB_t *prvSearchForNameWithinSingleList( List_t *pxList, const char pcNameToQuery[] )
	{
 80065bc:	b480      	push	{r7}
 80065be:	b08b      	sub	sp, #44	; 0x2c
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	6078      	str	r0, [r7, #4]
 80065c4:	6039      	str	r1, [r7, #0]
	TCB_t *pxNextTCB, *pxFirstTCB, *pxReturn = NULL;
 80065c6:	2300      	movs	r3, #0
 80065c8:	627b      	str	r3, [r7, #36]	; 0x24
	UBaseType_t x;
	char cNextChar;

		/* This function is called with the scheduler suspended. */

		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d052      	beq.n	8006678 <prvSearchForNameWithinSingleList+0xbc>
		{
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	61fb      	str	r3, [r7, #28]
 80065d6:	69fb      	ldr	r3, [r7, #28]
 80065d8:	685b      	ldr	r3, [r3, #4]
 80065da:	685a      	ldr	r2, [r3, #4]
 80065dc:	69fb      	ldr	r3, [r7, #28]
 80065de:	605a      	str	r2, [r3, #4]
 80065e0:	69fb      	ldr	r3, [r7, #28]
 80065e2:	685a      	ldr	r2, [r3, #4]
 80065e4:	69fb      	ldr	r3, [r7, #28]
 80065e6:	3308      	adds	r3, #8
 80065e8:	429a      	cmp	r2, r3
 80065ea:	d104      	bne.n	80065f6 <prvSearchForNameWithinSingleList+0x3a>
 80065ec:	69fb      	ldr	r3, [r7, #28]
 80065ee:	685b      	ldr	r3, [r3, #4]
 80065f0:	685a      	ldr	r2, [r3, #4]
 80065f2:	69fb      	ldr	r3, [r7, #28]
 80065f4:	605a      	str	r2, [r3, #4]
 80065f6:	69fb      	ldr	r3, [r7, #28]
 80065f8:	685b      	ldr	r3, [r3, #4]
 80065fa:	68db      	ldr	r3, [r3, #12]
 80065fc:	61bb      	str	r3, [r7, #24]

			do
			{
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	617b      	str	r3, [r7, #20]
 8006602:	697b      	ldr	r3, [r7, #20]
 8006604:	685b      	ldr	r3, [r3, #4]
 8006606:	685a      	ldr	r2, [r3, #4]
 8006608:	697b      	ldr	r3, [r7, #20]
 800660a:	605a      	str	r2, [r3, #4]
 800660c:	697b      	ldr	r3, [r7, #20]
 800660e:	685a      	ldr	r2, [r3, #4]
 8006610:	697b      	ldr	r3, [r7, #20]
 8006612:	3308      	adds	r3, #8
 8006614:	429a      	cmp	r2, r3
 8006616:	d104      	bne.n	8006622 <prvSearchForNameWithinSingleList+0x66>
 8006618:	697b      	ldr	r3, [r7, #20]
 800661a:	685b      	ldr	r3, [r3, #4]
 800661c:	685a      	ldr	r2, [r3, #4]
 800661e:	697b      	ldr	r3, [r7, #20]
 8006620:	605a      	str	r2, [r3, #4]
 8006622:	697b      	ldr	r3, [r7, #20]
 8006624:	685b      	ldr	r3, [r3, #4]
 8006626:	68db      	ldr	r3, [r3, #12]
 8006628:	613b      	str	r3, [r7, #16]

				/* Check each character in the name looking for a match or
				mismatch. */
				for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800662a:	2300      	movs	r3, #0
 800662c:	623b      	str	r3, [r7, #32]
 800662e:	e015      	b.n	800665c <prvSearchForNameWithinSingleList+0xa0>
				{
					cNextChar = pxNextTCB->pcTaskName[ x ];
 8006630:	693a      	ldr	r2, [r7, #16]
 8006632:	6a3b      	ldr	r3, [r7, #32]
 8006634:	4413      	add	r3, r2
 8006636:	3334      	adds	r3, #52	; 0x34
 8006638:	781b      	ldrb	r3, [r3, #0]
 800663a:	73fb      	strb	r3, [r7, #15]

					if( cNextChar != pcNameToQuery[ x ] )
 800663c:	683a      	ldr	r2, [r7, #0]
 800663e:	6a3b      	ldr	r3, [r7, #32]
 8006640:	4413      	add	r3, r2
 8006642:	781b      	ldrb	r3, [r3, #0]
 8006644:	7bfa      	ldrb	r2, [r7, #15]
 8006646:	429a      	cmp	r2, r3
 8006648:	d10c      	bne.n	8006664 <prvSearchForNameWithinSingleList+0xa8>
					{
						/* Characters didn't match. */
						break;
					}
					else if( cNextChar == 0x00 )
 800664a:	7bfb      	ldrb	r3, [r7, #15]
 800664c:	2b00      	cmp	r3, #0
 800664e:	d102      	bne.n	8006656 <prvSearchForNameWithinSingleList+0x9a>
					{
						/* Both strings terminated, a match must have been
						found. */
						pxReturn = pxNextTCB;
 8006650:	693b      	ldr	r3, [r7, #16]
 8006652:	627b      	str	r3, [r7, #36]	; 0x24
						break;
 8006654:	e007      	b.n	8006666 <prvSearchForNameWithinSingleList+0xaa>
				for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006656:	6a3b      	ldr	r3, [r7, #32]
 8006658:	3301      	adds	r3, #1
 800665a:	623b      	str	r3, [r7, #32]
 800665c:	6a3b      	ldr	r3, [r7, #32]
 800665e:	2b11      	cmp	r3, #17
 8006660:	d9e6      	bls.n	8006630 <prvSearchForNameWithinSingleList+0x74>
 8006662:	e000      	b.n	8006666 <prvSearchForNameWithinSingleList+0xaa>
						break;
 8006664:	bf00      	nop
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxReturn != NULL )
 8006666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006668:	2b00      	cmp	r3, #0
 800666a:	d104      	bne.n	8006676 <prvSearchForNameWithinSingleList+0xba>
				{
					/* The handle has been found. */
					break;
				}

			} while( pxNextTCB != pxFirstTCB );
 800666c:	693a      	ldr	r2, [r7, #16]
 800666e:	69bb      	ldr	r3, [r7, #24]
 8006670:	429a      	cmp	r2, r3
 8006672:	d1c4      	bne.n	80065fe <prvSearchForNameWithinSingleList+0x42>
 8006674:	e000      	b.n	8006678 <prvSearchForNameWithinSingleList+0xbc>
					break;
 8006676:	bf00      	nop
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return pxReturn;
 8006678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800667a:	4618      	mov	r0, r3
 800667c:	372c      	adds	r7, #44	; 0x2c
 800667e:	46bd      	mov	sp, r7
 8006680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006684:	4770      	bx	lr
	...

08006688 <xTaskGetHandle>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_xTaskGetHandle == 1 )

	TaskHandle_t xTaskGetHandle( const char *pcNameToQuery ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006688:	b580      	push	{r7, lr}
 800668a:	b086      	sub	sp, #24
 800668c:	af00      	add	r7, sp, #0
 800668e:	6078      	str	r0, [r7, #4]
	UBaseType_t uxQueue = configMAX_PRIORITIES;
 8006690:	2307      	movs	r3, #7
 8006692:	617b      	str	r3, [r7, #20]
	TCB_t* pxTCB;

		/* Task names will be truncated to configMAX_TASK_NAME_LEN - 1 bytes. */
		configASSERT( strlen( pcNameToQuery ) < configMAX_TASK_NAME_LEN );
 8006694:	6878      	ldr	r0, [r7, #4]
 8006696:	f7f9 fd9b 	bl	80001d0 <strlen>
 800669a:	4603      	mov	r3, r0
 800669c:	2b11      	cmp	r3, #17
 800669e:	d90a      	bls.n	80066b6 <xTaskGetHandle+0x2e>
	__asm volatile
 80066a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066a4:	f383 8811 	msr	BASEPRI, r3
 80066a8:	f3bf 8f6f 	isb	sy
 80066ac:	f3bf 8f4f 	dsb	sy
 80066b0:	60fb      	str	r3, [r7, #12]
}
 80066b2:	bf00      	nop
 80066b4:	e7fe      	b.n	80066b4 <xTaskGetHandle+0x2c>

		vTaskSuspendAll();
 80066b6:	f7ff fec7 	bl	8006448 <vTaskSuspendAll>
		{
			/* Search the ready lists. */
			do
			{
				uxQueue--;
 80066ba:	697b      	ldr	r3, [r7, #20]
 80066bc:	3b01      	subs	r3, #1
 80066be:	617b      	str	r3, [r7, #20]
				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) &( pxReadyTasksLists[ uxQueue ] ), pcNameToQuery );
 80066c0:	697a      	ldr	r2, [r7, #20]
 80066c2:	4613      	mov	r3, r2
 80066c4:	009b      	lsls	r3, r3, #2
 80066c6:	4413      	add	r3, r2
 80066c8:	009b      	lsls	r3, r3, #2
 80066ca:	4a1d      	ldr	r2, [pc, #116]	; (8006740 <xTaskGetHandle+0xb8>)
 80066cc:	4413      	add	r3, r2
 80066ce:	6879      	ldr	r1, [r7, #4]
 80066d0:	4618      	mov	r0, r3
 80066d2:	f7ff ff73 	bl	80065bc <prvSearchForNameWithinSingleList>
 80066d6:	6138      	str	r0, [r7, #16]

				if( pxTCB != NULL )
 80066d8:	693b      	ldr	r3, [r7, #16]
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d103      	bne.n	80066e6 <xTaskGetHandle+0x5e>
				{
					/* Found the handle. */
					break;
				}

			} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80066de:	697b      	ldr	r3, [r7, #20]
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d1ea      	bne.n	80066ba <xTaskGetHandle+0x32>
 80066e4:	e000      	b.n	80066e8 <xTaskGetHandle+0x60>
					break;
 80066e6:	bf00      	nop

			/* Search the delayed lists. */
			if( pxTCB == NULL )
 80066e8:	693b      	ldr	r3, [r7, #16]
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d106      	bne.n	80066fc <xTaskGetHandle+0x74>
			{
				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxDelayedTaskList, pcNameToQuery );
 80066ee:	4b15      	ldr	r3, [pc, #84]	; (8006744 <xTaskGetHandle+0xbc>)
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	6879      	ldr	r1, [r7, #4]
 80066f4:	4618      	mov	r0, r3
 80066f6:	f7ff ff61 	bl	80065bc <prvSearchForNameWithinSingleList>
 80066fa:	6138      	str	r0, [r7, #16]
			}

			if( pxTCB == NULL )
 80066fc:	693b      	ldr	r3, [r7, #16]
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d106      	bne.n	8006710 <xTaskGetHandle+0x88>
			{
				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxOverflowDelayedTaskList, pcNameToQuery );
 8006702:	4b11      	ldr	r3, [pc, #68]	; (8006748 <xTaskGetHandle+0xc0>)
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	6879      	ldr	r1, [r7, #4]
 8006708:	4618      	mov	r0, r3
 800670a:	f7ff ff57 	bl	80065bc <prvSearchForNameWithinSingleList>
 800670e:	6138      	str	r0, [r7, #16]
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
			{
				if( pxTCB == NULL )
 8006710:	693b      	ldr	r3, [r7, #16]
 8006712:	2b00      	cmp	r3, #0
 8006714:	d104      	bne.n	8006720 <xTaskGetHandle+0x98>
				{
					/* Search the suspended list. */
					pxTCB = prvSearchForNameWithinSingleList( &xSuspendedTaskList, pcNameToQuery );
 8006716:	6879      	ldr	r1, [r7, #4]
 8006718:	480c      	ldr	r0, [pc, #48]	; (800674c <xTaskGetHandle+0xc4>)
 800671a:	f7ff ff4f 	bl	80065bc <prvSearchForNameWithinSingleList>
 800671e:	6138      	str	r0, [r7, #16]
			}
			#endif

			#if( INCLUDE_vTaskDelete == 1 )
			{
				if( pxTCB == NULL )
 8006720:	693b      	ldr	r3, [r7, #16]
 8006722:	2b00      	cmp	r3, #0
 8006724:	d104      	bne.n	8006730 <xTaskGetHandle+0xa8>
				{
					/* Search the deleted list. */
					pxTCB = prvSearchForNameWithinSingleList( &xTasksWaitingTermination, pcNameToQuery );
 8006726:	6879      	ldr	r1, [r7, #4]
 8006728:	4809      	ldr	r0, [pc, #36]	; (8006750 <xTaskGetHandle+0xc8>)
 800672a:	f7ff ff47 	bl	80065bc <prvSearchForNameWithinSingleList>
 800672e:	6138      	str	r0, [r7, #16]
				}
			}
			#endif
		}
		( void ) xTaskResumeAll();
 8006730:	f7ff fe98 	bl	8006464 <xTaskResumeAll>

		return ( TaskHandle_t ) pxTCB;
 8006734:	693b      	ldr	r3, [r7, #16]
	}
 8006736:	4618      	mov	r0, r3
 8006738:	3718      	adds	r7, #24
 800673a:	46bd      	mov	sp, r7
 800673c:	bd80      	pop	{r7, pc}
 800673e:	bf00      	nop
 8006740:	200006a0 	.word	0x200006a0
 8006744:	20000754 	.word	0x20000754
 8006748:	20000758 	.word	0x20000758
 800674c:	20000788 	.word	0x20000788
 8006750:	20000770 	.word	0x20000770

08006754 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006754:	b580      	push	{r7, lr}
 8006756:	b086      	sub	sp, #24
 8006758:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800675a:	2300      	movs	r3, #0
 800675c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800675e:	4b55      	ldr	r3, [pc, #340]	; (80068b4 <xTaskIncrementTick+0x160>)
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	2b00      	cmp	r3, #0
 8006764:	f040 8093 	bne.w	800688e <xTaskIncrementTick+0x13a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006768:	4b53      	ldr	r3, [pc, #332]	; (80068b8 <xTaskIncrementTick+0x164>)
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	3301      	adds	r3, #1
 800676e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006770:	4a51      	ldr	r2, [pc, #324]	; (80068b8 <xTaskIncrementTick+0x164>)
 8006772:	693b      	ldr	r3, [r7, #16]
 8006774:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006776:	693b      	ldr	r3, [r7, #16]
 8006778:	2b00      	cmp	r3, #0
 800677a:	d120      	bne.n	80067be <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800677c:	4b4f      	ldr	r3, [pc, #316]	; (80068bc <xTaskIncrementTick+0x168>)
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	2b00      	cmp	r3, #0
 8006784:	d00a      	beq.n	800679c <xTaskIncrementTick+0x48>
	__asm volatile
 8006786:	f04f 0350 	mov.w	r3, #80	; 0x50
 800678a:	f383 8811 	msr	BASEPRI, r3
 800678e:	f3bf 8f6f 	isb	sy
 8006792:	f3bf 8f4f 	dsb	sy
 8006796:	603b      	str	r3, [r7, #0]
}
 8006798:	bf00      	nop
 800679a:	e7fe      	b.n	800679a <xTaskIncrementTick+0x46>
 800679c:	4b47      	ldr	r3, [pc, #284]	; (80068bc <xTaskIncrementTick+0x168>)
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	60fb      	str	r3, [r7, #12]
 80067a2:	4b47      	ldr	r3, [pc, #284]	; (80068c0 <xTaskIncrementTick+0x16c>)
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	4a45      	ldr	r2, [pc, #276]	; (80068bc <xTaskIncrementTick+0x168>)
 80067a8:	6013      	str	r3, [r2, #0]
 80067aa:	4a45      	ldr	r2, [pc, #276]	; (80068c0 <xTaskIncrementTick+0x16c>)
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	6013      	str	r3, [r2, #0]
 80067b0:	4b44      	ldr	r3, [pc, #272]	; (80068c4 <xTaskIncrementTick+0x170>)
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	3301      	adds	r3, #1
 80067b6:	4a43      	ldr	r2, [pc, #268]	; (80068c4 <xTaskIncrementTick+0x170>)
 80067b8:	6013      	str	r3, [r2, #0]
 80067ba:	f000 fb83 	bl	8006ec4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80067be:	4b42      	ldr	r3, [pc, #264]	; (80068c8 <xTaskIncrementTick+0x174>)
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	693a      	ldr	r2, [r7, #16]
 80067c4:	429a      	cmp	r2, r3
 80067c6:	d34d      	bcc.n	8006864 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80067c8:	4b3c      	ldr	r3, [pc, #240]	; (80068bc <xTaskIncrementTick+0x168>)
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d101      	bne.n	80067d6 <xTaskIncrementTick+0x82>
 80067d2:	2301      	movs	r3, #1
 80067d4:	e000      	b.n	80067d8 <xTaskIncrementTick+0x84>
 80067d6:	2300      	movs	r3, #0
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d004      	beq.n	80067e6 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80067dc:	4b3a      	ldr	r3, [pc, #232]	; (80068c8 <xTaskIncrementTick+0x174>)
 80067de:	f04f 32ff 	mov.w	r2, #4294967295
 80067e2:	601a      	str	r2, [r3, #0]
					break;
 80067e4:	e03e      	b.n	8006864 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80067e6:	4b35      	ldr	r3, [pc, #212]	; (80068bc <xTaskIncrementTick+0x168>)
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	68db      	ldr	r3, [r3, #12]
 80067ec:	68db      	ldr	r3, [r3, #12]
 80067ee:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80067f0:	68bb      	ldr	r3, [r7, #8]
 80067f2:	685b      	ldr	r3, [r3, #4]
 80067f4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80067f6:	693a      	ldr	r2, [r7, #16]
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	429a      	cmp	r2, r3
 80067fc:	d203      	bcs.n	8006806 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80067fe:	4a32      	ldr	r2, [pc, #200]	; (80068c8 <xTaskIncrementTick+0x174>)
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	6013      	str	r3, [r2, #0]
						break;
 8006804:	e02e      	b.n	8006864 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006806:	68bb      	ldr	r3, [r7, #8]
 8006808:	3304      	adds	r3, #4
 800680a:	4618      	mov	r0, r3
 800680c:	f7fe fc4a 	bl	80050a4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006810:	68bb      	ldr	r3, [r7, #8]
 8006812:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006814:	2b00      	cmp	r3, #0
 8006816:	d004      	beq.n	8006822 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006818:	68bb      	ldr	r3, [r7, #8]
 800681a:	3318      	adds	r3, #24
 800681c:	4618      	mov	r0, r3
 800681e:	f7fe fc41 	bl	80050a4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006822:	68bb      	ldr	r3, [r7, #8]
 8006824:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006826:	2201      	movs	r2, #1
 8006828:	409a      	lsls	r2, r3
 800682a:	4b28      	ldr	r3, [pc, #160]	; (80068cc <xTaskIncrementTick+0x178>)
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	4313      	orrs	r3, r2
 8006830:	4a26      	ldr	r2, [pc, #152]	; (80068cc <xTaskIncrementTick+0x178>)
 8006832:	6013      	str	r3, [r2, #0]
 8006834:	68bb      	ldr	r3, [r7, #8]
 8006836:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006838:	4613      	mov	r3, r2
 800683a:	009b      	lsls	r3, r3, #2
 800683c:	4413      	add	r3, r2
 800683e:	009b      	lsls	r3, r3, #2
 8006840:	4a23      	ldr	r2, [pc, #140]	; (80068d0 <xTaskIncrementTick+0x17c>)
 8006842:	441a      	add	r2, r3
 8006844:	68bb      	ldr	r3, [r7, #8]
 8006846:	3304      	adds	r3, #4
 8006848:	4619      	mov	r1, r3
 800684a:	4610      	mov	r0, r2
 800684c:	f7fe fbcd 	bl	8004fea <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006850:	68bb      	ldr	r3, [r7, #8]
 8006852:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006854:	4b1f      	ldr	r3, [pc, #124]	; (80068d4 <xTaskIncrementTick+0x180>)
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800685a:	429a      	cmp	r2, r3
 800685c:	d3b4      	bcc.n	80067c8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800685e:	2301      	movs	r3, #1
 8006860:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006862:	e7b1      	b.n	80067c8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006864:	4b1b      	ldr	r3, [pc, #108]	; (80068d4 <xTaskIncrementTick+0x180>)
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800686a:	4919      	ldr	r1, [pc, #100]	; (80068d0 <xTaskIncrementTick+0x17c>)
 800686c:	4613      	mov	r3, r2
 800686e:	009b      	lsls	r3, r3, #2
 8006870:	4413      	add	r3, r2
 8006872:	009b      	lsls	r3, r3, #2
 8006874:	440b      	add	r3, r1
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	2b01      	cmp	r3, #1
 800687a:	d901      	bls.n	8006880 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 800687c:	2301      	movs	r3, #1
 800687e:	617b      	str	r3, [r7, #20]

		#if ( configUSE_TICK_HOOK == 1 )
		{
			/* Guard against the tick hook being called when the pended tick
			count is being unwound (when the scheduler is being unlocked). */
			if( uxPendedTicks == ( UBaseType_t ) 0U )
 8006880:	4b15      	ldr	r3, [pc, #84]	; (80068d8 <xTaskIncrementTick+0x184>)
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	2b00      	cmp	r3, #0
 8006886:	d109      	bne.n	800689c <xTaskIncrementTick+0x148>
			{
				vApplicationTickHook();
 8006888:	f7f9 fd01 	bl	800028e <vApplicationTickHook>
 800688c:	e006      	b.n	800689c <xTaskIncrementTick+0x148>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800688e:	4b12      	ldr	r3, [pc, #72]	; (80068d8 <xTaskIncrementTick+0x184>)
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	3301      	adds	r3, #1
 8006894:	4a10      	ldr	r2, [pc, #64]	; (80068d8 <xTaskIncrementTick+0x184>)
 8006896:	6013      	str	r3, [r2, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
 8006898:	f7f9 fcf9 	bl	800028e <vApplicationTickHook>
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800689c:	4b0f      	ldr	r3, [pc, #60]	; (80068dc <xTaskIncrementTick+0x188>)
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d001      	beq.n	80068a8 <xTaskIncrementTick+0x154>
		{
			xSwitchRequired = pdTRUE;
 80068a4:	2301      	movs	r3, #1
 80068a6:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80068a8:	697b      	ldr	r3, [r7, #20]
}
 80068aa:	4618      	mov	r0, r3
 80068ac:	3718      	adds	r7, #24
 80068ae:	46bd      	mov	sp, r7
 80068b0:	bd80      	pop	{r7, pc}
 80068b2:	bf00      	nop
 80068b4:	200007c4 	.word	0x200007c4
 80068b8:	200007a0 	.word	0x200007a0
 80068bc:	20000754 	.word	0x20000754
 80068c0:	20000758 	.word	0x20000758
 80068c4:	200007b4 	.word	0x200007b4
 80068c8:	200007bc 	.word	0x200007bc
 80068cc:	200007a4 	.word	0x200007a4
 80068d0:	200006a0 	.word	0x200006a0
 80068d4:	2000069c 	.word	0x2000069c
 80068d8:	200007ac 	.word	0x200007ac
 80068dc:	200007b0 	.word	0x200007b0

080068e0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80068e0:	b480      	push	{r7}
 80068e2:	b087      	sub	sp, #28
 80068e4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80068e6:	4b29      	ldr	r3, [pc, #164]	; (800698c <vTaskSwitchContext+0xac>)
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d003      	beq.n	80068f6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80068ee:	4b28      	ldr	r3, [pc, #160]	; (8006990 <vTaskSwitchContext+0xb0>)
 80068f0:	2201      	movs	r2, #1
 80068f2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80068f4:	e044      	b.n	8006980 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 80068f6:	4b26      	ldr	r3, [pc, #152]	; (8006990 <vTaskSwitchContext+0xb0>)
 80068f8:	2200      	movs	r2, #0
 80068fa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80068fc:	4b25      	ldr	r3, [pc, #148]	; (8006994 <vTaskSwitchContext+0xb4>)
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	fab3 f383 	clz	r3, r3
 8006908:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800690a:	7afb      	ldrb	r3, [r7, #11]
 800690c:	f1c3 031f 	rsb	r3, r3, #31
 8006910:	617b      	str	r3, [r7, #20]
 8006912:	4921      	ldr	r1, [pc, #132]	; (8006998 <vTaskSwitchContext+0xb8>)
 8006914:	697a      	ldr	r2, [r7, #20]
 8006916:	4613      	mov	r3, r2
 8006918:	009b      	lsls	r3, r3, #2
 800691a:	4413      	add	r3, r2
 800691c:	009b      	lsls	r3, r3, #2
 800691e:	440b      	add	r3, r1
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	2b00      	cmp	r3, #0
 8006924:	d10a      	bne.n	800693c <vTaskSwitchContext+0x5c>
	__asm volatile
 8006926:	f04f 0350 	mov.w	r3, #80	; 0x50
 800692a:	f383 8811 	msr	BASEPRI, r3
 800692e:	f3bf 8f6f 	isb	sy
 8006932:	f3bf 8f4f 	dsb	sy
 8006936:	607b      	str	r3, [r7, #4]
}
 8006938:	bf00      	nop
 800693a:	e7fe      	b.n	800693a <vTaskSwitchContext+0x5a>
 800693c:	697a      	ldr	r2, [r7, #20]
 800693e:	4613      	mov	r3, r2
 8006940:	009b      	lsls	r3, r3, #2
 8006942:	4413      	add	r3, r2
 8006944:	009b      	lsls	r3, r3, #2
 8006946:	4a14      	ldr	r2, [pc, #80]	; (8006998 <vTaskSwitchContext+0xb8>)
 8006948:	4413      	add	r3, r2
 800694a:	613b      	str	r3, [r7, #16]
 800694c:	693b      	ldr	r3, [r7, #16]
 800694e:	685b      	ldr	r3, [r3, #4]
 8006950:	685a      	ldr	r2, [r3, #4]
 8006952:	693b      	ldr	r3, [r7, #16]
 8006954:	605a      	str	r2, [r3, #4]
 8006956:	693b      	ldr	r3, [r7, #16]
 8006958:	685a      	ldr	r2, [r3, #4]
 800695a:	693b      	ldr	r3, [r7, #16]
 800695c:	3308      	adds	r3, #8
 800695e:	429a      	cmp	r2, r3
 8006960:	d104      	bne.n	800696c <vTaskSwitchContext+0x8c>
 8006962:	693b      	ldr	r3, [r7, #16]
 8006964:	685b      	ldr	r3, [r3, #4]
 8006966:	685a      	ldr	r2, [r3, #4]
 8006968:	693b      	ldr	r3, [r7, #16]
 800696a:	605a      	str	r2, [r3, #4]
 800696c:	693b      	ldr	r3, [r7, #16]
 800696e:	685b      	ldr	r3, [r3, #4]
 8006970:	68db      	ldr	r3, [r3, #12]
 8006972:	4a0a      	ldr	r2, [pc, #40]	; (800699c <vTaskSwitchContext+0xbc>)
 8006974:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006976:	4b09      	ldr	r3, [pc, #36]	; (800699c <vTaskSwitchContext+0xbc>)
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	3350      	adds	r3, #80	; 0x50
 800697c:	4a08      	ldr	r2, [pc, #32]	; (80069a0 <vTaskSwitchContext+0xc0>)
 800697e:	6013      	str	r3, [r2, #0]
}
 8006980:	bf00      	nop
 8006982:	371c      	adds	r7, #28
 8006984:	46bd      	mov	sp, r7
 8006986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698a:	4770      	bx	lr
 800698c:	200007c4 	.word	0x200007c4
 8006990:	200007b0 	.word	0x200007b0
 8006994:	200007a4 	.word	0x200007a4
 8006998:	200006a0 	.word	0x200006a0
 800699c:	2000069c 	.word	0x2000069c
 80069a0:	20000010 	.word	0x20000010

080069a4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80069a4:	b580      	push	{r7, lr}
 80069a6:	b084      	sub	sp, #16
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	6078      	str	r0, [r7, #4]
 80069ac:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d10a      	bne.n	80069ca <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80069b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069b8:	f383 8811 	msr	BASEPRI, r3
 80069bc:	f3bf 8f6f 	isb	sy
 80069c0:	f3bf 8f4f 	dsb	sy
 80069c4:	60fb      	str	r3, [r7, #12]
}
 80069c6:	bf00      	nop
 80069c8:	e7fe      	b.n	80069c8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80069ca:	4b07      	ldr	r3, [pc, #28]	; (80069e8 <vTaskPlaceOnEventList+0x44>)
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	3318      	adds	r3, #24
 80069d0:	4619      	mov	r1, r3
 80069d2:	6878      	ldr	r0, [r7, #4]
 80069d4:	f7fe fb2d 	bl	8005032 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80069d8:	2101      	movs	r1, #1
 80069da:	6838      	ldr	r0, [r7, #0]
 80069dc:	f000 fd98 	bl	8007510 <prvAddCurrentTaskToDelayedList>
}
 80069e0:	bf00      	nop
 80069e2:	3710      	adds	r7, #16
 80069e4:	46bd      	mov	sp, r7
 80069e6:	bd80      	pop	{r7, pc}
 80069e8:	2000069c 	.word	0x2000069c

080069ec <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 80069ec:	b580      	push	{r7, lr}
 80069ee:	b086      	sub	sp, #24
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	60f8      	str	r0, [r7, #12]
 80069f4:	60b9      	str	r1, [r7, #8]
 80069f6:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d10a      	bne.n	8006a14 <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 80069fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a02:	f383 8811 	msr	BASEPRI, r3
 8006a06:	f3bf 8f6f 	isb	sy
 8006a0a:	f3bf 8f4f 	dsb	sy
 8006a0e:	617b      	str	r3, [r7, #20]
}
 8006a10:	bf00      	nop
 8006a12:	e7fe      	b.n	8006a12 <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 8006a14:	4b11      	ldr	r3, [pc, #68]	; (8006a5c <vTaskPlaceOnUnorderedEventList+0x70>)
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d10a      	bne.n	8006a32 <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 8006a1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a20:	f383 8811 	msr	BASEPRI, r3
 8006a24:	f3bf 8f6f 	isb	sy
 8006a28:	f3bf 8f4f 	dsb	sy
 8006a2c:	613b      	str	r3, [r7, #16]
}
 8006a2e:	bf00      	nop
 8006a30:	e7fe      	b.n	8006a30 <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8006a32:	4b0b      	ldr	r3, [pc, #44]	; (8006a60 <vTaskPlaceOnUnorderedEventList+0x74>)
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	68ba      	ldr	r2, [r7, #8]
 8006a38:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8006a3c:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006a3e:	4b08      	ldr	r3, [pc, #32]	; (8006a60 <vTaskPlaceOnUnorderedEventList+0x74>)
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	3318      	adds	r3, #24
 8006a44:	4619      	mov	r1, r3
 8006a46:	68f8      	ldr	r0, [r7, #12]
 8006a48:	f7fe facf 	bl	8004fea <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006a4c:	2101      	movs	r1, #1
 8006a4e:	6878      	ldr	r0, [r7, #4]
 8006a50:	f000 fd5e 	bl	8007510 <prvAddCurrentTaskToDelayedList>
}
 8006a54:	bf00      	nop
 8006a56:	3718      	adds	r7, #24
 8006a58:	46bd      	mov	sp, r7
 8006a5a:	bd80      	pop	{r7, pc}
 8006a5c:	200007c4 	.word	0x200007c4
 8006a60:	2000069c 	.word	0x2000069c

08006a64 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006a64:	b580      	push	{r7, lr}
 8006a66:	b086      	sub	sp, #24
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	60f8      	str	r0, [r7, #12]
 8006a6c:	60b9      	str	r1, [r7, #8]
 8006a6e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d10a      	bne.n	8006a8c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8006a76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a7a:	f383 8811 	msr	BASEPRI, r3
 8006a7e:	f3bf 8f6f 	isb	sy
 8006a82:	f3bf 8f4f 	dsb	sy
 8006a86:	617b      	str	r3, [r7, #20]
}
 8006a88:	bf00      	nop
 8006a8a:	e7fe      	b.n	8006a8a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006a8c:	4b0a      	ldr	r3, [pc, #40]	; (8006ab8 <vTaskPlaceOnEventListRestricted+0x54>)
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	3318      	adds	r3, #24
 8006a92:	4619      	mov	r1, r3
 8006a94:	68f8      	ldr	r0, [r7, #12]
 8006a96:	f7fe faa8 	bl	8004fea <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d002      	beq.n	8006aa6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8006aa0:	f04f 33ff 	mov.w	r3, #4294967295
 8006aa4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006aa6:	6879      	ldr	r1, [r7, #4]
 8006aa8:	68b8      	ldr	r0, [r7, #8]
 8006aaa:	f000 fd31 	bl	8007510 <prvAddCurrentTaskToDelayedList>
	}
 8006aae:	bf00      	nop
 8006ab0:	3718      	adds	r7, #24
 8006ab2:	46bd      	mov	sp, r7
 8006ab4:	bd80      	pop	{r7, pc}
 8006ab6:	bf00      	nop
 8006ab8:	2000069c 	.word	0x2000069c

08006abc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006abc:	b580      	push	{r7, lr}
 8006abe:	b086      	sub	sp, #24
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	68db      	ldr	r3, [r3, #12]
 8006ac8:	68db      	ldr	r3, [r3, #12]
 8006aca:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006acc:	693b      	ldr	r3, [r7, #16]
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d10a      	bne.n	8006ae8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8006ad2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ad6:	f383 8811 	msr	BASEPRI, r3
 8006ada:	f3bf 8f6f 	isb	sy
 8006ade:	f3bf 8f4f 	dsb	sy
 8006ae2:	60fb      	str	r3, [r7, #12]
}
 8006ae4:	bf00      	nop
 8006ae6:	e7fe      	b.n	8006ae6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006ae8:	693b      	ldr	r3, [r7, #16]
 8006aea:	3318      	adds	r3, #24
 8006aec:	4618      	mov	r0, r3
 8006aee:	f7fe fad9 	bl	80050a4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006af2:	4b1d      	ldr	r3, [pc, #116]	; (8006b68 <xTaskRemoveFromEventList+0xac>)
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d11c      	bne.n	8006b34 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006afa:	693b      	ldr	r3, [r7, #16]
 8006afc:	3304      	adds	r3, #4
 8006afe:	4618      	mov	r0, r3
 8006b00:	f7fe fad0 	bl	80050a4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006b04:	693b      	ldr	r3, [r7, #16]
 8006b06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b08:	2201      	movs	r2, #1
 8006b0a:	409a      	lsls	r2, r3
 8006b0c:	4b17      	ldr	r3, [pc, #92]	; (8006b6c <xTaskRemoveFromEventList+0xb0>)
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	4313      	orrs	r3, r2
 8006b12:	4a16      	ldr	r2, [pc, #88]	; (8006b6c <xTaskRemoveFromEventList+0xb0>)
 8006b14:	6013      	str	r3, [r2, #0]
 8006b16:	693b      	ldr	r3, [r7, #16]
 8006b18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b1a:	4613      	mov	r3, r2
 8006b1c:	009b      	lsls	r3, r3, #2
 8006b1e:	4413      	add	r3, r2
 8006b20:	009b      	lsls	r3, r3, #2
 8006b22:	4a13      	ldr	r2, [pc, #76]	; (8006b70 <xTaskRemoveFromEventList+0xb4>)
 8006b24:	441a      	add	r2, r3
 8006b26:	693b      	ldr	r3, [r7, #16]
 8006b28:	3304      	adds	r3, #4
 8006b2a:	4619      	mov	r1, r3
 8006b2c:	4610      	mov	r0, r2
 8006b2e:	f7fe fa5c 	bl	8004fea <vListInsertEnd>
 8006b32:	e005      	b.n	8006b40 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006b34:	693b      	ldr	r3, [r7, #16]
 8006b36:	3318      	adds	r3, #24
 8006b38:	4619      	mov	r1, r3
 8006b3a:	480e      	ldr	r0, [pc, #56]	; (8006b74 <xTaskRemoveFromEventList+0xb8>)
 8006b3c:	f7fe fa55 	bl	8004fea <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006b40:	693b      	ldr	r3, [r7, #16]
 8006b42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b44:	4b0c      	ldr	r3, [pc, #48]	; (8006b78 <xTaskRemoveFromEventList+0xbc>)
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b4a:	429a      	cmp	r2, r3
 8006b4c:	d905      	bls.n	8006b5a <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006b4e:	2301      	movs	r3, #1
 8006b50:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006b52:	4b0a      	ldr	r3, [pc, #40]	; (8006b7c <xTaskRemoveFromEventList+0xc0>)
 8006b54:	2201      	movs	r2, #1
 8006b56:	601a      	str	r2, [r3, #0]
 8006b58:	e001      	b.n	8006b5e <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8006b5a:	2300      	movs	r3, #0
 8006b5c:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8006b5e:	697b      	ldr	r3, [r7, #20]
}
 8006b60:	4618      	mov	r0, r3
 8006b62:	3718      	adds	r7, #24
 8006b64:	46bd      	mov	sp, r7
 8006b66:	bd80      	pop	{r7, pc}
 8006b68:	200007c4 	.word	0x200007c4
 8006b6c:	200007a4 	.word	0x200007a4
 8006b70:	200006a0 	.word	0x200006a0
 8006b74:	2000075c 	.word	0x2000075c
 8006b78:	2000069c 	.word	0x2000069c
 8006b7c:	200007b0 	.word	0x200007b0

08006b80 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 8006b80:	b580      	push	{r7, lr}
 8006b82:	b086      	sub	sp, #24
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	6078      	str	r0, [r7, #4]
 8006b88:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 8006b8a:	4b29      	ldr	r3, [pc, #164]	; (8006c30 <vTaskRemoveFromUnorderedEventList+0xb0>)
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d10a      	bne.n	8006ba8 <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 8006b92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b96:	f383 8811 	msr	BASEPRI, r3
 8006b9a:	f3bf 8f6f 	isb	sy
 8006b9e:	f3bf 8f4f 	dsb	sy
 8006ba2:	613b      	str	r3, [r7, #16]
}
 8006ba4:	bf00      	nop
 8006ba6:	e7fe      	b.n	8006ba6 <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8006ba8:	683b      	ldr	r3, [r7, #0]
 8006baa:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = ( TCB_t * ) listGET_LIST_ITEM_OWNER( pxEventListItem );
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	68db      	ldr	r3, [r3, #12]
 8006bb6:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 8006bb8:	697b      	ldr	r3, [r7, #20]
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d10a      	bne.n	8006bd4 <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 8006bbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bc2:	f383 8811 	msr	BASEPRI, r3
 8006bc6:	f3bf 8f6f 	isb	sy
 8006bca:	f3bf 8f4f 	dsb	sy
 8006bce:	60fb      	str	r3, [r7, #12]
}
 8006bd0:	bf00      	nop
 8006bd2:	e7fe      	b.n	8006bd2 <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 8006bd4:	6878      	ldr	r0, [r7, #4]
 8006bd6:	f7fe fa65 	bl	80050a4 <uxListRemove>

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006bda:	697b      	ldr	r3, [r7, #20]
 8006bdc:	3304      	adds	r3, #4
 8006bde:	4618      	mov	r0, r3
 8006be0:	f7fe fa60 	bl	80050a4 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8006be4:	697b      	ldr	r3, [r7, #20]
 8006be6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006be8:	2201      	movs	r2, #1
 8006bea:	409a      	lsls	r2, r3
 8006bec:	4b11      	ldr	r3, [pc, #68]	; (8006c34 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	4313      	orrs	r3, r2
 8006bf2:	4a10      	ldr	r2, [pc, #64]	; (8006c34 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8006bf4:	6013      	str	r3, [r2, #0]
 8006bf6:	697b      	ldr	r3, [r7, #20]
 8006bf8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bfa:	4613      	mov	r3, r2
 8006bfc:	009b      	lsls	r3, r3, #2
 8006bfe:	4413      	add	r3, r2
 8006c00:	009b      	lsls	r3, r3, #2
 8006c02:	4a0d      	ldr	r2, [pc, #52]	; (8006c38 <vTaskRemoveFromUnorderedEventList+0xb8>)
 8006c04:	441a      	add	r2, r3
 8006c06:	697b      	ldr	r3, [r7, #20]
 8006c08:	3304      	adds	r3, #4
 8006c0a:	4619      	mov	r1, r3
 8006c0c:	4610      	mov	r0, r2
 8006c0e:	f7fe f9ec 	bl	8004fea <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006c12:	697b      	ldr	r3, [r7, #20]
 8006c14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c16:	4b09      	ldr	r3, [pc, #36]	; (8006c3c <vTaskRemoveFromUnorderedEventList+0xbc>)
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c1c:	429a      	cmp	r2, r3
 8006c1e:	d902      	bls.n	8006c26 <vTaskRemoveFromUnorderedEventList+0xa6>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 8006c20:	4b07      	ldr	r3, [pc, #28]	; (8006c40 <vTaskRemoveFromUnorderedEventList+0xc0>)
 8006c22:	2201      	movs	r2, #1
 8006c24:	601a      	str	r2, [r3, #0]
	}
}
 8006c26:	bf00      	nop
 8006c28:	3718      	adds	r7, #24
 8006c2a:	46bd      	mov	sp, r7
 8006c2c:	bd80      	pop	{r7, pc}
 8006c2e:	bf00      	nop
 8006c30:	200007c4 	.word	0x200007c4
 8006c34:	200007a4 	.word	0x200007a4
 8006c38:	200006a0 	.word	0x200006a0
 8006c3c:	2000069c 	.word	0x2000069c
 8006c40:	200007b0 	.word	0x200007b0

08006c44 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006c44:	b480      	push	{r7}
 8006c46:	b083      	sub	sp, #12
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006c4c:	4b06      	ldr	r3, [pc, #24]	; (8006c68 <vTaskInternalSetTimeOutState+0x24>)
 8006c4e:	681a      	ldr	r2, [r3, #0]
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006c54:	4b05      	ldr	r3, [pc, #20]	; (8006c6c <vTaskInternalSetTimeOutState+0x28>)
 8006c56:	681a      	ldr	r2, [r3, #0]
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	605a      	str	r2, [r3, #4]
}
 8006c5c:	bf00      	nop
 8006c5e:	370c      	adds	r7, #12
 8006c60:	46bd      	mov	sp, r7
 8006c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c66:	4770      	bx	lr
 8006c68:	200007b4 	.word	0x200007b4
 8006c6c:	200007a0 	.word	0x200007a0

08006c70 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006c70:	b580      	push	{r7, lr}
 8006c72:	b088      	sub	sp, #32
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	6078      	str	r0, [r7, #4]
 8006c78:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d10a      	bne.n	8006c96 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8006c80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c84:	f383 8811 	msr	BASEPRI, r3
 8006c88:	f3bf 8f6f 	isb	sy
 8006c8c:	f3bf 8f4f 	dsb	sy
 8006c90:	613b      	str	r3, [r7, #16]
}
 8006c92:	bf00      	nop
 8006c94:	e7fe      	b.n	8006c94 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006c96:	683b      	ldr	r3, [r7, #0]
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d10a      	bne.n	8006cb2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006c9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ca0:	f383 8811 	msr	BASEPRI, r3
 8006ca4:	f3bf 8f6f 	isb	sy
 8006ca8:	f3bf 8f4f 	dsb	sy
 8006cac:	60fb      	str	r3, [r7, #12]
}
 8006cae:	bf00      	nop
 8006cb0:	e7fe      	b.n	8006cb0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8006cb2:	f001 f8ef 	bl	8007e94 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006cb6:	4b1d      	ldr	r3, [pc, #116]	; (8006d2c <xTaskCheckForTimeOut+0xbc>)
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	685b      	ldr	r3, [r3, #4]
 8006cc0:	69ba      	ldr	r2, [r7, #24]
 8006cc2:	1ad3      	subs	r3, r2, r3
 8006cc4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006cc6:	683b      	ldr	r3, [r7, #0]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cce:	d102      	bne.n	8006cd6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006cd0:	2300      	movs	r3, #0
 8006cd2:	61fb      	str	r3, [r7, #28]
 8006cd4:	e023      	b.n	8006d1e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681a      	ldr	r2, [r3, #0]
 8006cda:	4b15      	ldr	r3, [pc, #84]	; (8006d30 <xTaskCheckForTimeOut+0xc0>)
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	429a      	cmp	r2, r3
 8006ce0:	d007      	beq.n	8006cf2 <xTaskCheckForTimeOut+0x82>
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	685b      	ldr	r3, [r3, #4]
 8006ce6:	69ba      	ldr	r2, [r7, #24]
 8006ce8:	429a      	cmp	r2, r3
 8006cea:	d302      	bcc.n	8006cf2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006cec:	2301      	movs	r3, #1
 8006cee:	61fb      	str	r3, [r7, #28]
 8006cf0:	e015      	b.n	8006d1e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006cf2:	683b      	ldr	r3, [r7, #0]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	697a      	ldr	r2, [r7, #20]
 8006cf8:	429a      	cmp	r2, r3
 8006cfa:	d20b      	bcs.n	8006d14 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006cfc:	683b      	ldr	r3, [r7, #0]
 8006cfe:	681a      	ldr	r2, [r3, #0]
 8006d00:	697b      	ldr	r3, [r7, #20]
 8006d02:	1ad2      	subs	r2, r2, r3
 8006d04:	683b      	ldr	r3, [r7, #0]
 8006d06:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006d08:	6878      	ldr	r0, [r7, #4]
 8006d0a:	f7ff ff9b 	bl	8006c44 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006d0e:	2300      	movs	r3, #0
 8006d10:	61fb      	str	r3, [r7, #28]
 8006d12:	e004      	b.n	8006d1e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8006d14:	683b      	ldr	r3, [r7, #0]
 8006d16:	2200      	movs	r2, #0
 8006d18:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006d1a:	2301      	movs	r3, #1
 8006d1c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006d1e:	f001 f8e9 	bl	8007ef4 <vPortExitCritical>

	return xReturn;
 8006d22:	69fb      	ldr	r3, [r7, #28]
}
 8006d24:	4618      	mov	r0, r3
 8006d26:	3720      	adds	r7, #32
 8006d28:	46bd      	mov	sp, r7
 8006d2a:	bd80      	pop	{r7, pc}
 8006d2c:	200007a0 	.word	0x200007a0
 8006d30:	200007b4 	.word	0x200007b4

08006d34 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006d34:	b480      	push	{r7}
 8006d36:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006d38:	4b03      	ldr	r3, [pc, #12]	; (8006d48 <vTaskMissedYield+0x14>)
 8006d3a:	2201      	movs	r2, #1
 8006d3c:	601a      	str	r2, [r3, #0]
}
 8006d3e:	bf00      	nop
 8006d40:	46bd      	mov	sp, r7
 8006d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d46:	4770      	bx	lr
 8006d48:	200007b0 	.word	0x200007b0

08006d4c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006d4c:	b580      	push	{r7, lr}
 8006d4e:	b082      	sub	sp, #8
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006d54:	f000 f854 	bl	8006e00 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006d58:	4b07      	ldr	r3, [pc, #28]	; (8006d78 <prvIdleTask+0x2c>)
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	2b01      	cmp	r3, #1
 8006d5e:	d907      	bls.n	8006d70 <prvIdleTask+0x24>
			{
				taskYIELD();
 8006d60:	4b06      	ldr	r3, [pc, #24]	; (8006d7c <prvIdleTask+0x30>)
 8006d62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d66:	601a      	str	r2, [r3, #0]
 8006d68:	f3bf 8f4f 	dsb	sy
 8006d6c:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 8006d70:	f7f9 fa86 	bl	8000280 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8006d74:	e7ee      	b.n	8006d54 <prvIdleTask+0x8>
 8006d76:	bf00      	nop
 8006d78:	200006a0 	.word	0x200006a0
 8006d7c:	e000ed04 	.word	0xe000ed04

08006d80 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006d80:	b580      	push	{r7, lr}
 8006d82:	b082      	sub	sp, #8
 8006d84:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006d86:	2300      	movs	r3, #0
 8006d88:	607b      	str	r3, [r7, #4]
 8006d8a:	e00c      	b.n	8006da6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006d8c:	687a      	ldr	r2, [r7, #4]
 8006d8e:	4613      	mov	r3, r2
 8006d90:	009b      	lsls	r3, r3, #2
 8006d92:	4413      	add	r3, r2
 8006d94:	009b      	lsls	r3, r3, #2
 8006d96:	4a12      	ldr	r2, [pc, #72]	; (8006de0 <prvInitialiseTaskLists+0x60>)
 8006d98:	4413      	add	r3, r2
 8006d9a:	4618      	mov	r0, r3
 8006d9c:	f7fe f8f8 	bl	8004f90 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	3301      	adds	r3, #1
 8006da4:	607b      	str	r3, [r7, #4]
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	2b06      	cmp	r3, #6
 8006daa:	d9ef      	bls.n	8006d8c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006dac:	480d      	ldr	r0, [pc, #52]	; (8006de4 <prvInitialiseTaskLists+0x64>)
 8006dae:	f7fe f8ef 	bl	8004f90 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006db2:	480d      	ldr	r0, [pc, #52]	; (8006de8 <prvInitialiseTaskLists+0x68>)
 8006db4:	f7fe f8ec 	bl	8004f90 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006db8:	480c      	ldr	r0, [pc, #48]	; (8006dec <prvInitialiseTaskLists+0x6c>)
 8006dba:	f7fe f8e9 	bl	8004f90 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006dbe:	480c      	ldr	r0, [pc, #48]	; (8006df0 <prvInitialiseTaskLists+0x70>)
 8006dc0:	f7fe f8e6 	bl	8004f90 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006dc4:	480b      	ldr	r0, [pc, #44]	; (8006df4 <prvInitialiseTaskLists+0x74>)
 8006dc6:	f7fe f8e3 	bl	8004f90 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006dca:	4b0b      	ldr	r3, [pc, #44]	; (8006df8 <prvInitialiseTaskLists+0x78>)
 8006dcc:	4a05      	ldr	r2, [pc, #20]	; (8006de4 <prvInitialiseTaskLists+0x64>)
 8006dce:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006dd0:	4b0a      	ldr	r3, [pc, #40]	; (8006dfc <prvInitialiseTaskLists+0x7c>)
 8006dd2:	4a05      	ldr	r2, [pc, #20]	; (8006de8 <prvInitialiseTaskLists+0x68>)
 8006dd4:	601a      	str	r2, [r3, #0]
}
 8006dd6:	bf00      	nop
 8006dd8:	3708      	adds	r7, #8
 8006dda:	46bd      	mov	sp, r7
 8006ddc:	bd80      	pop	{r7, pc}
 8006dde:	bf00      	nop
 8006de0:	200006a0 	.word	0x200006a0
 8006de4:	2000072c 	.word	0x2000072c
 8006de8:	20000740 	.word	0x20000740
 8006dec:	2000075c 	.word	0x2000075c
 8006df0:	20000770 	.word	0x20000770
 8006df4:	20000788 	.word	0x20000788
 8006df8:	20000754 	.word	0x20000754
 8006dfc:	20000758 	.word	0x20000758

08006e00 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006e00:	b580      	push	{r7, lr}
 8006e02:	b082      	sub	sp, #8
 8006e04:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006e06:	e019      	b.n	8006e3c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006e08:	f001 f844 	bl	8007e94 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8006e0c:	4b10      	ldr	r3, [pc, #64]	; (8006e50 <prvCheckTasksWaitingTermination+0x50>)
 8006e0e:	68db      	ldr	r3, [r3, #12]
 8006e10:	68db      	ldr	r3, [r3, #12]
 8006e12:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	3304      	adds	r3, #4
 8006e18:	4618      	mov	r0, r3
 8006e1a:	f7fe f943 	bl	80050a4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006e1e:	4b0d      	ldr	r3, [pc, #52]	; (8006e54 <prvCheckTasksWaitingTermination+0x54>)
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	3b01      	subs	r3, #1
 8006e24:	4a0b      	ldr	r2, [pc, #44]	; (8006e54 <prvCheckTasksWaitingTermination+0x54>)
 8006e26:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006e28:	4b0b      	ldr	r3, [pc, #44]	; (8006e58 <prvCheckTasksWaitingTermination+0x58>)
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	3b01      	subs	r3, #1
 8006e2e:	4a0a      	ldr	r2, [pc, #40]	; (8006e58 <prvCheckTasksWaitingTermination+0x58>)
 8006e30:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006e32:	f001 f85f 	bl	8007ef4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006e36:	6878      	ldr	r0, [r7, #4]
 8006e38:	f000 f810 	bl	8006e5c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006e3c:	4b06      	ldr	r3, [pc, #24]	; (8006e58 <prvCheckTasksWaitingTermination+0x58>)
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d1e1      	bne.n	8006e08 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006e44:	bf00      	nop
 8006e46:	bf00      	nop
 8006e48:	3708      	adds	r7, #8
 8006e4a:	46bd      	mov	sp, r7
 8006e4c:	bd80      	pop	{r7, pc}
 8006e4e:	bf00      	nop
 8006e50:	20000770 	.word	0x20000770
 8006e54:	2000079c 	.word	0x2000079c
 8006e58:	20000784 	.word	0x20000784

08006e5c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006e5c:	b580      	push	{r7, lr}
 8006e5e:	b084      	sub	sp, #16
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	3350      	adds	r3, #80	; 0x50
 8006e68:	4618      	mov	r0, r3
 8006e6a:	f001 fc23 	bl	80086b4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	f893 30b5 	ldrb.w	r3, [r3, #181]	; 0xb5
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d108      	bne.n	8006e8a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e7c:	4618      	mov	r0, r3
 8006e7e:	f001 f9ef 	bl	8008260 <vPortFree>
				vPortFree( pxTCB );
 8006e82:	6878      	ldr	r0, [r7, #4]
 8006e84:	f001 f9ec 	bl	8008260 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006e88:	e018      	b.n	8006ebc <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	f893 30b5 	ldrb.w	r3, [r3, #181]	; 0xb5
 8006e90:	2b01      	cmp	r3, #1
 8006e92:	d103      	bne.n	8006e9c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006e94:	6878      	ldr	r0, [r7, #4]
 8006e96:	f001 f9e3 	bl	8008260 <vPortFree>
	}
 8006e9a:	e00f      	b.n	8006ebc <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	f893 30b5 	ldrb.w	r3, [r3, #181]	; 0xb5
 8006ea2:	2b02      	cmp	r3, #2
 8006ea4:	d00a      	beq.n	8006ebc <prvDeleteTCB+0x60>
	__asm volatile
 8006ea6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006eaa:	f383 8811 	msr	BASEPRI, r3
 8006eae:	f3bf 8f6f 	isb	sy
 8006eb2:	f3bf 8f4f 	dsb	sy
 8006eb6:	60fb      	str	r3, [r7, #12]
}
 8006eb8:	bf00      	nop
 8006eba:	e7fe      	b.n	8006eba <prvDeleteTCB+0x5e>
	}
 8006ebc:	bf00      	nop
 8006ebe:	3710      	adds	r7, #16
 8006ec0:	46bd      	mov	sp, r7
 8006ec2:	bd80      	pop	{r7, pc}

08006ec4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006ec4:	b480      	push	{r7}
 8006ec6:	b083      	sub	sp, #12
 8006ec8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006eca:	4b0f      	ldr	r3, [pc, #60]	; (8006f08 <prvResetNextTaskUnblockTime+0x44>)
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d101      	bne.n	8006ed8 <prvResetNextTaskUnblockTime+0x14>
 8006ed4:	2301      	movs	r3, #1
 8006ed6:	e000      	b.n	8006eda <prvResetNextTaskUnblockTime+0x16>
 8006ed8:	2300      	movs	r3, #0
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d004      	beq.n	8006ee8 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006ede:	4b0b      	ldr	r3, [pc, #44]	; (8006f0c <prvResetNextTaskUnblockTime+0x48>)
 8006ee0:	f04f 32ff 	mov.w	r2, #4294967295
 8006ee4:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006ee6:	e008      	b.n	8006efa <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006ee8:	4b07      	ldr	r3, [pc, #28]	; (8006f08 <prvResetNextTaskUnblockTime+0x44>)
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	68db      	ldr	r3, [r3, #12]
 8006eee:	68db      	ldr	r3, [r3, #12]
 8006ef0:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	685b      	ldr	r3, [r3, #4]
 8006ef6:	4a05      	ldr	r2, [pc, #20]	; (8006f0c <prvResetNextTaskUnblockTime+0x48>)
 8006ef8:	6013      	str	r3, [r2, #0]
}
 8006efa:	bf00      	nop
 8006efc:	370c      	adds	r7, #12
 8006efe:	46bd      	mov	sp, r7
 8006f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f04:	4770      	bx	lr
 8006f06:	bf00      	nop
 8006f08:	20000754 	.word	0x20000754
 8006f0c:	200007bc 	.word	0x200007bc

08006f10 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006f10:	b480      	push	{r7}
 8006f12:	b083      	sub	sp, #12
 8006f14:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006f16:	4b0b      	ldr	r3, [pc, #44]	; (8006f44 <xTaskGetSchedulerState+0x34>)
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d102      	bne.n	8006f24 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006f1e:	2301      	movs	r3, #1
 8006f20:	607b      	str	r3, [r7, #4]
 8006f22:	e008      	b.n	8006f36 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006f24:	4b08      	ldr	r3, [pc, #32]	; (8006f48 <xTaskGetSchedulerState+0x38>)
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d102      	bne.n	8006f32 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006f2c:	2302      	movs	r3, #2
 8006f2e:	607b      	str	r3, [r7, #4]
 8006f30:	e001      	b.n	8006f36 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006f32:	2300      	movs	r3, #0
 8006f34:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006f36:	687b      	ldr	r3, [r7, #4]
	}
 8006f38:	4618      	mov	r0, r3
 8006f3a:	370c      	adds	r7, #12
 8006f3c:	46bd      	mov	sp, r7
 8006f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f42:	4770      	bx	lr
 8006f44:	200007a8 	.word	0x200007a8
 8006f48:	200007c4 	.word	0x200007c4

08006f4c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8006f4c:	b580      	push	{r7, lr}
 8006f4e:	b084      	sub	sp, #16
 8006f50:	af00      	add	r7, sp, #0
 8006f52:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8006f58:	2300      	movs	r3, #0
 8006f5a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d06e      	beq.n	8007040 <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8006f62:	68bb      	ldr	r3, [r7, #8]
 8006f64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f66:	4b39      	ldr	r3, [pc, #228]	; (800704c <xTaskPriorityInherit+0x100>)
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f6c:	429a      	cmp	r2, r3
 8006f6e:	d25e      	bcs.n	800702e <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006f70:	68bb      	ldr	r3, [r7, #8]
 8006f72:	699b      	ldr	r3, [r3, #24]
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	db06      	blt.n	8006f86 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006f78:	4b34      	ldr	r3, [pc, #208]	; (800704c <xTaskPriorityInherit+0x100>)
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f7e:	f1c3 0207 	rsb	r2, r3, #7
 8006f82:	68bb      	ldr	r3, [r7, #8]
 8006f84:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8006f86:	68bb      	ldr	r3, [r7, #8]
 8006f88:	6959      	ldr	r1, [r3, #20]
 8006f8a:	68bb      	ldr	r3, [r7, #8]
 8006f8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f8e:	4613      	mov	r3, r2
 8006f90:	009b      	lsls	r3, r3, #2
 8006f92:	4413      	add	r3, r2
 8006f94:	009b      	lsls	r3, r3, #2
 8006f96:	4a2e      	ldr	r2, [pc, #184]	; (8007050 <xTaskPriorityInherit+0x104>)
 8006f98:	4413      	add	r3, r2
 8006f9a:	4299      	cmp	r1, r3
 8006f9c:	d101      	bne.n	8006fa2 <xTaskPriorityInherit+0x56>
 8006f9e:	2301      	movs	r3, #1
 8006fa0:	e000      	b.n	8006fa4 <xTaskPriorityInherit+0x58>
 8006fa2:	2300      	movs	r3, #0
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d03a      	beq.n	800701e <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006fa8:	68bb      	ldr	r3, [r7, #8]
 8006faa:	3304      	adds	r3, #4
 8006fac:	4618      	mov	r0, r3
 8006fae:	f7fe f879 	bl	80050a4 <uxListRemove>
 8006fb2:	4603      	mov	r3, r0
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d115      	bne.n	8006fe4 <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8006fb8:	68bb      	ldr	r3, [r7, #8]
 8006fba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fbc:	4924      	ldr	r1, [pc, #144]	; (8007050 <xTaskPriorityInherit+0x104>)
 8006fbe:	4613      	mov	r3, r2
 8006fc0:	009b      	lsls	r3, r3, #2
 8006fc2:	4413      	add	r3, r2
 8006fc4:	009b      	lsls	r3, r3, #2
 8006fc6:	440b      	add	r3, r1
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d10a      	bne.n	8006fe4 <xTaskPriorityInherit+0x98>
 8006fce:	68bb      	ldr	r3, [r7, #8]
 8006fd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fd2:	2201      	movs	r2, #1
 8006fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8006fd8:	43da      	mvns	r2, r3
 8006fda:	4b1e      	ldr	r3, [pc, #120]	; (8007054 <xTaskPriorityInherit+0x108>)
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	4013      	ands	r3, r2
 8006fe0:	4a1c      	ldr	r2, [pc, #112]	; (8007054 <xTaskPriorityInherit+0x108>)
 8006fe2:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006fe4:	4b19      	ldr	r3, [pc, #100]	; (800704c <xTaskPriorityInherit+0x100>)
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fea:	68bb      	ldr	r3, [r7, #8]
 8006fec:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8006fee:	68bb      	ldr	r3, [r7, #8]
 8006ff0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ff2:	2201      	movs	r2, #1
 8006ff4:	409a      	lsls	r2, r3
 8006ff6:	4b17      	ldr	r3, [pc, #92]	; (8007054 <xTaskPriorityInherit+0x108>)
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	4313      	orrs	r3, r2
 8006ffc:	4a15      	ldr	r2, [pc, #84]	; (8007054 <xTaskPriorityInherit+0x108>)
 8006ffe:	6013      	str	r3, [r2, #0]
 8007000:	68bb      	ldr	r3, [r7, #8]
 8007002:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007004:	4613      	mov	r3, r2
 8007006:	009b      	lsls	r3, r3, #2
 8007008:	4413      	add	r3, r2
 800700a:	009b      	lsls	r3, r3, #2
 800700c:	4a10      	ldr	r2, [pc, #64]	; (8007050 <xTaskPriorityInherit+0x104>)
 800700e:	441a      	add	r2, r3
 8007010:	68bb      	ldr	r3, [r7, #8]
 8007012:	3304      	adds	r3, #4
 8007014:	4619      	mov	r1, r3
 8007016:	4610      	mov	r0, r2
 8007018:	f7fd ffe7 	bl	8004fea <vListInsertEnd>
 800701c:	e004      	b.n	8007028 <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800701e:	4b0b      	ldr	r3, [pc, #44]	; (800704c <xTaskPriorityInherit+0x100>)
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007024:	68bb      	ldr	r3, [r7, #8]
 8007026:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8007028:	2301      	movs	r3, #1
 800702a:	60fb      	str	r3, [r7, #12]
 800702c:	e008      	b.n	8007040 <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800702e:	68bb      	ldr	r3, [r7, #8]
 8007030:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007032:	4b06      	ldr	r3, [pc, #24]	; (800704c <xTaskPriorityInherit+0x100>)
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007038:	429a      	cmp	r2, r3
 800703a:	d201      	bcs.n	8007040 <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800703c:	2301      	movs	r3, #1
 800703e:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007040:	68fb      	ldr	r3, [r7, #12]
	}
 8007042:	4618      	mov	r0, r3
 8007044:	3710      	adds	r7, #16
 8007046:	46bd      	mov	sp, r7
 8007048:	bd80      	pop	{r7, pc}
 800704a:	bf00      	nop
 800704c:	2000069c 	.word	0x2000069c
 8007050:	200006a0 	.word	0x200006a0
 8007054:	200007a4 	.word	0x200007a4

08007058 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007058:	b580      	push	{r7, lr}
 800705a:	b086      	sub	sp, #24
 800705c:	af00      	add	r7, sp, #0
 800705e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007064:	2300      	movs	r3, #0
 8007066:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	2b00      	cmp	r3, #0
 800706c:	d06e      	beq.n	800714c <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800706e:	4b3a      	ldr	r3, [pc, #232]	; (8007158 <xTaskPriorityDisinherit+0x100>)
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	693a      	ldr	r2, [r7, #16]
 8007074:	429a      	cmp	r2, r3
 8007076:	d00a      	beq.n	800708e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8007078:	f04f 0350 	mov.w	r3, #80	; 0x50
 800707c:	f383 8811 	msr	BASEPRI, r3
 8007080:	f3bf 8f6f 	isb	sy
 8007084:	f3bf 8f4f 	dsb	sy
 8007088:	60fb      	str	r3, [r7, #12]
}
 800708a:	bf00      	nop
 800708c:	e7fe      	b.n	800708c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800708e:	693b      	ldr	r3, [r7, #16]
 8007090:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007092:	2b00      	cmp	r3, #0
 8007094:	d10a      	bne.n	80070ac <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8007096:	f04f 0350 	mov.w	r3, #80	; 0x50
 800709a:	f383 8811 	msr	BASEPRI, r3
 800709e:	f3bf 8f6f 	isb	sy
 80070a2:	f3bf 8f4f 	dsb	sy
 80070a6:	60bb      	str	r3, [r7, #8]
}
 80070a8:	bf00      	nop
 80070aa:	e7fe      	b.n	80070aa <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80070ac:	693b      	ldr	r3, [r7, #16]
 80070ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80070b0:	1e5a      	subs	r2, r3, #1
 80070b2:	693b      	ldr	r3, [r7, #16]
 80070b4:	64da      	str	r2, [r3, #76]	; 0x4c

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80070b6:	693b      	ldr	r3, [r7, #16]
 80070b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070ba:	693b      	ldr	r3, [r7, #16]
 80070bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80070be:	429a      	cmp	r2, r3
 80070c0:	d044      	beq.n	800714c <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80070c2:	693b      	ldr	r3, [r7, #16]
 80070c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d140      	bne.n	800714c <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80070ca:	693b      	ldr	r3, [r7, #16]
 80070cc:	3304      	adds	r3, #4
 80070ce:	4618      	mov	r0, r3
 80070d0:	f7fd ffe8 	bl	80050a4 <uxListRemove>
 80070d4:	4603      	mov	r3, r0
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d115      	bne.n	8007106 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80070da:	693b      	ldr	r3, [r7, #16]
 80070dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070de:	491f      	ldr	r1, [pc, #124]	; (800715c <xTaskPriorityDisinherit+0x104>)
 80070e0:	4613      	mov	r3, r2
 80070e2:	009b      	lsls	r3, r3, #2
 80070e4:	4413      	add	r3, r2
 80070e6:	009b      	lsls	r3, r3, #2
 80070e8:	440b      	add	r3, r1
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d10a      	bne.n	8007106 <xTaskPriorityDisinherit+0xae>
 80070f0:	693b      	ldr	r3, [r7, #16]
 80070f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070f4:	2201      	movs	r2, #1
 80070f6:	fa02 f303 	lsl.w	r3, r2, r3
 80070fa:	43da      	mvns	r2, r3
 80070fc:	4b18      	ldr	r3, [pc, #96]	; (8007160 <xTaskPriorityDisinherit+0x108>)
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	4013      	ands	r3, r2
 8007102:	4a17      	ldr	r2, [pc, #92]	; (8007160 <xTaskPriorityDisinherit+0x108>)
 8007104:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007106:	693b      	ldr	r3, [r7, #16]
 8007108:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800710a:	693b      	ldr	r3, [r7, #16]
 800710c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800710e:	693b      	ldr	r3, [r7, #16]
 8007110:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007112:	f1c3 0207 	rsb	r2, r3, #7
 8007116:	693b      	ldr	r3, [r7, #16]
 8007118:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800711a:	693b      	ldr	r3, [r7, #16]
 800711c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800711e:	2201      	movs	r2, #1
 8007120:	409a      	lsls	r2, r3
 8007122:	4b0f      	ldr	r3, [pc, #60]	; (8007160 <xTaskPriorityDisinherit+0x108>)
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	4313      	orrs	r3, r2
 8007128:	4a0d      	ldr	r2, [pc, #52]	; (8007160 <xTaskPriorityDisinherit+0x108>)
 800712a:	6013      	str	r3, [r2, #0]
 800712c:	693b      	ldr	r3, [r7, #16]
 800712e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007130:	4613      	mov	r3, r2
 8007132:	009b      	lsls	r3, r3, #2
 8007134:	4413      	add	r3, r2
 8007136:	009b      	lsls	r3, r3, #2
 8007138:	4a08      	ldr	r2, [pc, #32]	; (800715c <xTaskPriorityDisinherit+0x104>)
 800713a:	441a      	add	r2, r3
 800713c:	693b      	ldr	r3, [r7, #16]
 800713e:	3304      	adds	r3, #4
 8007140:	4619      	mov	r1, r3
 8007142:	4610      	mov	r0, r2
 8007144:	f7fd ff51 	bl	8004fea <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007148:	2301      	movs	r3, #1
 800714a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800714c:	697b      	ldr	r3, [r7, #20]
	}
 800714e:	4618      	mov	r0, r3
 8007150:	3718      	adds	r7, #24
 8007152:	46bd      	mov	sp, r7
 8007154:	bd80      	pop	{r7, pc}
 8007156:	bf00      	nop
 8007158:	2000069c 	.word	0x2000069c
 800715c:	200006a0 	.word	0x200006a0
 8007160:	200007a4 	.word	0x200007a4

08007164 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8007164:	b580      	push	{r7, lr}
 8007166:	b088      	sub	sp, #32
 8007168:	af00      	add	r7, sp, #0
 800716a:	6078      	str	r0, [r7, #4]
 800716c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8007172:	2301      	movs	r3, #1
 8007174:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	2b00      	cmp	r3, #0
 800717a:	f000 8088 	beq.w	800728e <vTaskPriorityDisinheritAfterTimeout+0x12a>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800717e:	69bb      	ldr	r3, [r7, #24]
 8007180:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007182:	2b00      	cmp	r3, #0
 8007184:	d10a      	bne.n	800719c <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8007186:	f04f 0350 	mov.w	r3, #80	; 0x50
 800718a:	f383 8811 	msr	BASEPRI, r3
 800718e:	f3bf 8f6f 	isb	sy
 8007192:	f3bf 8f4f 	dsb	sy
 8007196:	60fb      	str	r3, [r7, #12]
}
 8007198:	bf00      	nop
 800719a:	e7fe      	b.n	800719a <vTaskPriorityDisinheritAfterTimeout+0x36>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800719c:	69bb      	ldr	r3, [r7, #24]
 800719e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80071a0:	683a      	ldr	r2, [r7, #0]
 80071a2:	429a      	cmp	r2, r3
 80071a4:	d902      	bls.n	80071ac <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80071a6:	683b      	ldr	r3, [r7, #0]
 80071a8:	61fb      	str	r3, [r7, #28]
 80071aa:	e002      	b.n	80071b2 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80071ac:	69bb      	ldr	r3, [r7, #24]
 80071ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80071b0:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80071b2:	69bb      	ldr	r3, [r7, #24]
 80071b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071b6:	69fa      	ldr	r2, [r7, #28]
 80071b8:	429a      	cmp	r2, r3
 80071ba:	d068      	beq.n	800728e <vTaskPriorityDisinheritAfterTimeout+0x12a>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80071bc:	69bb      	ldr	r3, [r7, #24]
 80071be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80071c0:	697a      	ldr	r2, [r7, #20]
 80071c2:	429a      	cmp	r2, r3
 80071c4:	d163      	bne.n	800728e <vTaskPriorityDisinheritAfterTimeout+0x12a>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80071c6:	4b34      	ldr	r3, [pc, #208]	; (8007298 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	69ba      	ldr	r2, [r7, #24]
 80071cc:	429a      	cmp	r2, r3
 80071ce:	d10a      	bne.n	80071e6 <vTaskPriorityDisinheritAfterTimeout+0x82>
	__asm volatile
 80071d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071d4:	f383 8811 	msr	BASEPRI, r3
 80071d8:	f3bf 8f6f 	isb	sy
 80071dc:	f3bf 8f4f 	dsb	sy
 80071e0:	60bb      	str	r3, [r7, #8]
}
 80071e2:	bf00      	nop
 80071e4:	e7fe      	b.n	80071e4 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80071e6:	69bb      	ldr	r3, [r7, #24]
 80071e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071ea:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80071ec:	69bb      	ldr	r3, [r7, #24]
 80071ee:	69fa      	ldr	r2, [r7, #28]
 80071f0:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80071f2:	69bb      	ldr	r3, [r7, #24]
 80071f4:	699b      	ldr	r3, [r3, #24]
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	db04      	blt.n	8007204 <vTaskPriorityDisinheritAfterTimeout+0xa0>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80071fa:	69fb      	ldr	r3, [r7, #28]
 80071fc:	f1c3 0207 	rsb	r2, r3, #7
 8007200:	69bb      	ldr	r3, [r7, #24]
 8007202:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007204:	69bb      	ldr	r3, [r7, #24]
 8007206:	6959      	ldr	r1, [r3, #20]
 8007208:	693a      	ldr	r2, [r7, #16]
 800720a:	4613      	mov	r3, r2
 800720c:	009b      	lsls	r3, r3, #2
 800720e:	4413      	add	r3, r2
 8007210:	009b      	lsls	r3, r3, #2
 8007212:	4a22      	ldr	r2, [pc, #136]	; (800729c <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8007214:	4413      	add	r3, r2
 8007216:	4299      	cmp	r1, r3
 8007218:	d101      	bne.n	800721e <vTaskPriorityDisinheritAfterTimeout+0xba>
 800721a:	2301      	movs	r3, #1
 800721c:	e000      	b.n	8007220 <vTaskPriorityDisinheritAfterTimeout+0xbc>
 800721e:	2300      	movs	r3, #0
 8007220:	2b00      	cmp	r3, #0
 8007222:	d034      	beq.n	800728e <vTaskPriorityDisinheritAfterTimeout+0x12a>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007224:	69bb      	ldr	r3, [r7, #24]
 8007226:	3304      	adds	r3, #4
 8007228:	4618      	mov	r0, r3
 800722a:	f7fd ff3b 	bl	80050a4 <uxListRemove>
 800722e:	4603      	mov	r3, r0
 8007230:	2b00      	cmp	r3, #0
 8007232:	d115      	bne.n	8007260 <vTaskPriorityDisinheritAfterTimeout+0xfc>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8007234:	69bb      	ldr	r3, [r7, #24]
 8007236:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007238:	4918      	ldr	r1, [pc, #96]	; (800729c <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800723a:	4613      	mov	r3, r2
 800723c:	009b      	lsls	r3, r3, #2
 800723e:	4413      	add	r3, r2
 8007240:	009b      	lsls	r3, r3, #2
 8007242:	440b      	add	r3, r1
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	2b00      	cmp	r3, #0
 8007248:	d10a      	bne.n	8007260 <vTaskPriorityDisinheritAfterTimeout+0xfc>
 800724a:	69bb      	ldr	r3, [r7, #24]
 800724c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800724e:	2201      	movs	r2, #1
 8007250:	fa02 f303 	lsl.w	r3, r2, r3
 8007254:	43da      	mvns	r2, r3
 8007256:	4b12      	ldr	r3, [pc, #72]	; (80072a0 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	4013      	ands	r3, r2
 800725c:	4a10      	ldr	r2, [pc, #64]	; (80072a0 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800725e:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8007260:	69bb      	ldr	r3, [r7, #24]
 8007262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007264:	2201      	movs	r2, #1
 8007266:	409a      	lsls	r2, r3
 8007268:	4b0d      	ldr	r3, [pc, #52]	; (80072a0 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	4313      	orrs	r3, r2
 800726e:	4a0c      	ldr	r2, [pc, #48]	; (80072a0 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8007270:	6013      	str	r3, [r2, #0]
 8007272:	69bb      	ldr	r3, [r7, #24]
 8007274:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007276:	4613      	mov	r3, r2
 8007278:	009b      	lsls	r3, r3, #2
 800727a:	4413      	add	r3, r2
 800727c:	009b      	lsls	r3, r3, #2
 800727e:	4a07      	ldr	r2, [pc, #28]	; (800729c <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8007280:	441a      	add	r2, r3
 8007282:	69bb      	ldr	r3, [r7, #24]
 8007284:	3304      	adds	r3, #4
 8007286:	4619      	mov	r1, r3
 8007288:	4610      	mov	r0, r2
 800728a:	f7fd feae 	bl	8004fea <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800728e:	bf00      	nop
 8007290:	3720      	adds	r7, #32
 8007292:	46bd      	mov	sp, r7
 8007294:	bd80      	pop	{r7, pc}
 8007296:	bf00      	nop
 8007298:	2000069c 	.word	0x2000069c
 800729c:	200006a0 	.word	0x200006a0
 80072a0:	200007a4 	.word	0x200007a4

080072a4 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 80072a4:	b480      	push	{r7}
 80072a6:	b083      	sub	sp, #12
 80072a8:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 80072aa:	4b09      	ldr	r3, [pc, #36]	; (80072d0 <uxTaskResetEventItemValue+0x2c>)
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	699b      	ldr	r3, [r3, #24]
 80072b0:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80072b2:	4b07      	ldr	r3, [pc, #28]	; (80072d0 <uxTaskResetEventItemValue+0x2c>)
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072b8:	4b05      	ldr	r3, [pc, #20]	; (80072d0 <uxTaskResetEventItemValue+0x2c>)
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	f1c2 0207 	rsb	r2, r2, #7
 80072c0:	619a      	str	r2, [r3, #24]

	return uxReturn;
 80072c2:	687b      	ldr	r3, [r7, #4]
}
 80072c4:	4618      	mov	r0, r3
 80072c6:	370c      	adds	r7, #12
 80072c8:	46bd      	mov	sp, r7
 80072ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ce:	4770      	bx	lr
 80072d0:	2000069c 	.word	0x2000069c

080072d4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 80072d4:	b480      	push	{r7}
 80072d6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80072d8:	4b07      	ldr	r3, [pc, #28]	; (80072f8 <pvTaskIncrementMutexHeldCount+0x24>)
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d004      	beq.n	80072ea <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80072e0:	4b05      	ldr	r3, [pc, #20]	; (80072f8 <pvTaskIncrementMutexHeldCount+0x24>)
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80072e6:	3201      	adds	r2, #1
 80072e8:	64da      	str	r2, [r3, #76]	; 0x4c
		}

		return pxCurrentTCB;
 80072ea:	4b03      	ldr	r3, [pc, #12]	; (80072f8 <pvTaskIncrementMutexHeldCount+0x24>)
 80072ec:	681b      	ldr	r3, [r3, #0]
	}
 80072ee:	4618      	mov	r0, r3
 80072f0:	46bd      	mov	sp, r7
 80072f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f6:	4770      	bx	lr
 80072f8:	2000069c 	.word	0x2000069c

080072fc <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 80072fc:	b580      	push	{r7, lr}
 80072fe:	b086      	sub	sp, #24
 8007300:	af00      	add	r7, sp, #0
 8007302:	60f8      	str	r0, [r7, #12]
 8007304:	60b9      	str	r1, [r7, #8]
 8007306:	607a      	str	r2, [r7, #4]
 8007308:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 800730a:	f000 fdc3 	bl	8007e94 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800730e:	4b29      	ldr	r3, [pc, #164]	; (80073b4 <xTaskNotifyWait+0xb8>)
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	f893 30b4 	ldrb.w	r3, [r3, #180]	; 0xb4
 8007316:	b2db      	uxtb	r3, r3
 8007318:	2b02      	cmp	r3, #2
 800731a:	d01c      	beq.n	8007356 <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 800731c:	4b25      	ldr	r3, [pc, #148]	; (80073b4 <xTaskNotifyWait+0xb8>)
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8007324:	68fa      	ldr	r2, [r7, #12]
 8007326:	43d2      	mvns	r2, r2
 8007328:	400a      	ands	r2, r1
 800732a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800732e:	4b21      	ldr	r3, [pc, #132]	; (80073b4 <xTaskNotifyWait+0xb8>)
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	2201      	movs	r2, #1
 8007334:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4

				if( xTicksToWait > ( TickType_t ) 0 )
 8007338:	683b      	ldr	r3, [r7, #0]
 800733a:	2b00      	cmp	r3, #0
 800733c:	d00b      	beq.n	8007356 <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800733e:	2101      	movs	r1, #1
 8007340:	6838      	ldr	r0, [r7, #0]
 8007342:	f000 f8e5 	bl	8007510 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8007346:	4b1c      	ldr	r3, [pc, #112]	; (80073b8 <xTaskNotifyWait+0xbc>)
 8007348:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800734c:	601a      	str	r2, [r3, #0]
 800734e:	f3bf 8f4f 	dsb	sy
 8007352:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8007356:	f000 fdcd 	bl	8007ef4 <vPortExitCritical>

		taskENTER_CRITICAL();
 800735a:	f000 fd9b 	bl	8007e94 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	2b00      	cmp	r3, #0
 8007362:	d005      	beq.n	8007370 <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8007364:	4b13      	ldr	r3, [pc, #76]	; (80073b4 <xTaskNotifyWait+0xb8>)
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8007370:	4b10      	ldr	r3, [pc, #64]	; (80073b4 <xTaskNotifyWait+0xb8>)
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	f893 30b4 	ldrb.w	r3, [r3, #180]	; 0xb4
 8007378:	b2db      	uxtb	r3, r3
 800737a:	2b02      	cmp	r3, #2
 800737c:	d002      	beq.n	8007384 <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 800737e:	2300      	movs	r3, #0
 8007380:	617b      	str	r3, [r7, #20]
 8007382:	e00a      	b.n	800739a <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8007384:	4b0b      	ldr	r3, [pc, #44]	; (80073b4 <xTaskNotifyWait+0xb8>)
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 800738c:	68ba      	ldr	r2, [r7, #8]
 800738e:	43d2      	mvns	r2, r2
 8007390:	400a      	ands	r2, r1
 8007392:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
				xReturn = pdTRUE;
 8007396:	2301      	movs	r3, #1
 8007398:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800739a:	4b06      	ldr	r3, [pc, #24]	; (80073b4 <xTaskNotifyWait+0xb8>)
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	2200      	movs	r2, #0
 80073a0:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
		}
		taskEXIT_CRITICAL();
 80073a4:	f000 fda6 	bl	8007ef4 <vPortExitCritical>

		return xReturn;
 80073a8:	697b      	ldr	r3, [r7, #20]
	}
 80073aa:	4618      	mov	r0, r3
 80073ac:	3718      	adds	r7, #24
 80073ae:	46bd      	mov	sp, r7
 80073b0:	bd80      	pop	{r7, pc}
 80073b2:	bf00      	nop
 80073b4:	2000069c 	.word	0x2000069c
 80073b8:	e000ed04 	.word	0xe000ed04

080073bc <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 80073bc:	b580      	push	{r7, lr}
 80073be:	b08a      	sub	sp, #40	; 0x28
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	60f8      	str	r0, [r7, #12]
 80073c4:	60b9      	str	r1, [r7, #8]
 80073c6:	603b      	str	r3, [r7, #0]
 80073c8:	4613      	mov	r3, r2
 80073ca:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 80073cc:	2301      	movs	r3, #1
 80073ce:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d10a      	bne.n	80073ec <xTaskGenericNotify+0x30>
	__asm volatile
 80073d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073da:	f383 8811 	msr	BASEPRI, r3
 80073de:	f3bf 8f6f 	isb	sy
 80073e2:	f3bf 8f4f 	dsb	sy
 80073e6:	61bb      	str	r3, [r7, #24]
}
 80073e8:	bf00      	nop
 80073ea:	e7fe      	b.n	80073ea <xTaskGenericNotify+0x2e>
		pxTCB = ( TCB_t * ) xTaskToNotify;
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 80073f0:	f000 fd50 	bl	8007e94 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 80073f4:	683b      	ldr	r3, [r7, #0]
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d004      	beq.n	8007404 <xTaskGenericNotify+0x48>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 80073fa:	6a3b      	ldr	r3, [r7, #32]
 80073fc:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8007400:	683b      	ldr	r3, [r7, #0]
 8007402:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8007404:	6a3b      	ldr	r3, [r7, #32]
 8007406:	f893 30b4 	ldrb.w	r3, [r3, #180]	; 0xb4
 800740a:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800740c:	6a3b      	ldr	r3, [r7, #32]
 800740e:	2202      	movs	r2, #2
 8007410:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4

			switch( eAction )
 8007414:	79fb      	ldrb	r3, [r7, #7]
 8007416:	2b04      	cmp	r3, #4
 8007418:	d82d      	bhi.n	8007476 <xTaskGenericNotify+0xba>
 800741a:	a201      	add	r2, pc, #4	; (adr r2, 8007420 <xTaskGenericNotify+0x64>)
 800741c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007420:	08007477 	.word	0x08007477
 8007424:	08007435 	.word	0x08007435
 8007428:	08007447 	.word	0x08007447
 800742c:	08007457 	.word	0x08007457
 8007430:	08007461 	.word	0x08007461
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8007434:	6a3b      	ldr	r3, [r7, #32]
 8007436:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800743a:	68bb      	ldr	r3, [r7, #8]
 800743c:	431a      	orrs	r2, r3
 800743e:	6a3b      	ldr	r3, [r7, #32]
 8007440:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
					break;
 8007444:	e017      	b.n	8007476 <xTaskGenericNotify+0xba>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8007446:	6a3b      	ldr	r3, [r7, #32]
 8007448:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800744c:	1c5a      	adds	r2, r3, #1
 800744e:	6a3b      	ldr	r3, [r7, #32]
 8007450:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
					break;
 8007454:	e00f      	b.n	8007476 <xTaskGenericNotify+0xba>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8007456:	6a3b      	ldr	r3, [r7, #32]
 8007458:	68ba      	ldr	r2, [r7, #8]
 800745a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
					break;
 800745e:	e00a      	b.n	8007476 <xTaskGenericNotify+0xba>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8007460:	7ffb      	ldrb	r3, [r7, #31]
 8007462:	2b02      	cmp	r3, #2
 8007464:	d004      	beq.n	8007470 <xTaskGenericNotify+0xb4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8007466:	6a3b      	ldr	r3, [r7, #32]
 8007468:	68ba      	ldr	r2, [r7, #8]
 800746a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800746e:	e001      	b.n	8007474 <xTaskGenericNotify+0xb8>
						xReturn = pdFAIL;
 8007470:	2300      	movs	r3, #0
 8007472:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 8007474:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8007476:	7ffb      	ldrb	r3, [r7, #31]
 8007478:	2b01      	cmp	r3, #1
 800747a:	d139      	bne.n	80074f0 <xTaskGenericNotify+0x134>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800747c:	6a3b      	ldr	r3, [r7, #32]
 800747e:	3304      	adds	r3, #4
 8007480:	4618      	mov	r0, r3
 8007482:	f7fd fe0f 	bl	80050a4 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8007486:	6a3b      	ldr	r3, [r7, #32]
 8007488:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800748a:	2201      	movs	r2, #1
 800748c:	409a      	lsls	r2, r3
 800748e:	4b1c      	ldr	r3, [pc, #112]	; (8007500 <xTaskGenericNotify+0x144>)
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	4313      	orrs	r3, r2
 8007494:	4a1a      	ldr	r2, [pc, #104]	; (8007500 <xTaskGenericNotify+0x144>)
 8007496:	6013      	str	r3, [r2, #0]
 8007498:	6a3b      	ldr	r3, [r7, #32]
 800749a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800749c:	4613      	mov	r3, r2
 800749e:	009b      	lsls	r3, r3, #2
 80074a0:	4413      	add	r3, r2
 80074a2:	009b      	lsls	r3, r3, #2
 80074a4:	4a17      	ldr	r2, [pc, #92]	; (8007504 <xTaskGenericNotify+0x148>)
 80074a6:	441a      	add	r2, r3
 80074a8:	6a3b      	ldr	r3, [r7, #32]
 80074aa:	3304      	adds	r3, #4
 80074ac:	4619      	mov	r1, r3
 80074ae:	4610      	mov	r0, r2
 80074b0:	f7fd fd9b 	bl	8004fea <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80074b4:	6a3b      	ldr	r3, [r7, #32]
 80074b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d00a      	beq.n	80074d2 <xTaskGenericNotify+0x116>
	__asm volatile
 80074bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074c0:	f383 8811 	msr	BASEPRI, r3
 80074c4:	f3bf 8f6f 	isb	sy
 80074c8:	f3bf 8f4f 	dsb	sy
 80074cc:	617b      	str	r3, [r7, #20]
}
 80074ce:	bf00      	nop
 80074d0:	e7fe      	b.n	80074d0 <xTaskGenericNotify+0x114>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80074d2:	6a3b      	ldr	r3, [r7, #32]
 80074d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074d6:	4b0c      	ldr	r3, [pc, #48]	; (8007508 <xTaskGenericNotify+0x14c>)
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074dc:	429a      	cmp	r2, r3
 80074de:	d907      	bls.n	80074f0 <xTaskGenericNotify+0x134>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 80074e0:	4b0a      	ldr	r3, [pc, #40]	; (800750c <xTaskGenericNotify+0x150>)
 80074e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80074e6:	601a      	str	r2, [r3, #0]
 80074e8:	f3bf 8f4f 	dsb	sy
 80074ec:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80074f0:	f000 fd00 	bl	8007ef4 <vPortExitCritical>

		return xReturn;
 80074f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 80074f6:	4618      	mov	r0, r3
 80074f8:	3728      	adds	r7, #40	; 0x28
 80074fa:	46bd      	mov	sp, r7
 80074fc:	bd80      	pop	{r7, pc}
 80074fe:	bf00      	nop
 8007500:	200007a4 	.word	0x200007a4
 8007504:	200006a0 	.word	0x200006a0
 8007508:	2000069c 	.word	0x2000069c
 800750c:	e000ed04 	.word	0xe000ed04

08007510 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007510:	b580      	push	{r7, lr}
 8007512:	b084      	sub	sp, #16
 8007514:	af00      	add	r7, sp, #0
 8007516:	6078      	str	r0, [r7, #4]
 8007518:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800751a:	4b29      	ldr	r3, [pc, #164]	; (80075c0 <prvAddCurrentTaskToDelayedList+0xb0>)
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007520:	4b28      	ldr	r3, [pc, #160]	; (80075c4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	3304      	adds	r3, #4
 8007526:	4618      	mov	r0, r3
 8007528:	f7fd fdbc 	bl	80050a4 <uxListRemove>
 800752c:	4603      	mov	r3, r0
 800752e:	2b00      	cmp	r3, #0
 8007530:	d10b      	bne.n	800754a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8007532:	4b24      	ldr	r3, [pc, #144]	; (80075c4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007538:	2201      	movs	r2, #1
 800753a:	fa02 f303 	lsl.w	r3, r2, r3
 800753e:	43da      	mvns	r2, r3
 8007540:	4b21      	ldr	r3, [pc, #132]	; (80075c8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	4013      	ands	r3, r2
 8007546:	4a20      	ldr	r2, [pc, #128]	; (80075c8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007548:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007550:	d10a      	bne.n	8007568 <prvAddCurrentTaskToDelayedList+0x58>
 8007552:	683b      	ldr	r3, [r7, #0]
 8007554:	2b00      	cmp	r3, #0
 8007556:	d007      	beq.n	8007568 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007558:	4b1a      	ldr	r3, [pc, #104]	; (80075c4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	3304      	adds	r3, #4
 800755e:	4619      	mov	r1, r3
 8007560:	481a      	ldr	r0, [pc, #104]	; (80075cc <prvAddCurrentTaskToDelayedList+0xbc>)
 8007562:	f7fd fd42 	bl	8004fea <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007566:	e026      	b.n	80075b6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007568:	68fa      	ldr	r2, [r7, #12]
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	4413      	add	r3, r2
 800756e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007570:	4b14      	ldr	r3, [pc, #80]	; (80075c4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	68ba      	ldr	r2, [r7, #8]
 8007576:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007578:	68ba      	ldr	r2, [r7, #8]
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	429a      	cmp	r2, r3
 800757e:	d209      	bcs.n	8007594 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007580:	4b13      	ldr	r3, [pc, #76]	; (80075d0 <prvAddCurrentTaskToDelayedList+0xc0>)
 8007582:	681a      	ldr	r2, [r3, #0]
 8007584:	4b0f      	ldr	r3, [pc, #60]	; (80075c4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	3304      	adds	r3, #4
 800758a:	4619      	mov	r1, r3
 800758c:	4610      	mov	r0, r2
 800758e:	f7fd fd50 	bl	8005032 <vListInsert>
}
 8007592:	e010      	b.n	80075b6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007594:	4b0f      	ldr	r3, [pc, #60]	; (80075d4 <prvAddCurrentTaskToDelayedList+0xc4>)
 8007596:	681a      	ldr	r2, [r3, #0]
 8007598:	4b0a      	ldr	r3, [pc, #40]	; (80075c4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	3304      	adds	r3, #4
 800759e:	4619      	mov	r1, r3
 80075a0:	4610      	mov	r0, r2
 80075a2:	f7fd fd46 	bl	8005032 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80075a6:	4b0c      	ldr	r3, [pc, #48]	; (80075d8 <prvAddCurrentTaskToDelayedList+0xc8>)
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	68ba      	ldr	r2, [r7, #8]
 80075ac:	429a      	cmp	r2, r3
 80075ae:	d202      	bcs.n	80075b6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80075b0:	4a09      	ldr	r2, [pc, #36]	; (80075d8 <prvAddCurrentTaskToDelayedList+0xc8>)
 80075b2:	68bb      	ldr	r3, [r7, #8]
 80075b4:	6013      	str	r3, [r2, #0]
}
 80075b6:	bf00      	nop
 80075b8:	3710      	adds	r7, #16
 80075ba:	46bd      	mov	sp, r7
 80075bc:	bd80      	pop	{r7, pc}
 80075be:	bf00      	nop
 80075c0:	200007a0 	.word	0x200007a0
 80075c4:	2000069c 	.word	0x2000069c
 80075c8:	200007a4 	.word	0x200007a4
 80075cc:	20000788 	.word	0x20000788
 80075d0:	20000758 	.word	0x20000758
 80075d4:	20000754 	.word	0x20000754
 80075d8:	200007bc 	.word	0x200007bc

080075dc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80075dc:	b580      	push	{r7, lr}
 80075de:	b08a      	sub	sp, #40	; 0x28
 80075e0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80075e2:	2300      	movs	r3, #0
 80075e4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80075e6:	f000 facb 	bl	8007b80 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80075ea:	4b1c      	ldr	r3, [pc, #112]	; (800765c <xTimerCreateTimerTask+0x80>)
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d021      	beq.n	8007636 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80075f2:	2300      	movs	r3, #0
 80075f4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80075f6:	2300      	movs	r3, #0
 80075f8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80075fa:	1d3a      	adds	r2, r7, #4
 80075fc:	f107 0108 	add.w	r1, r7, #8
 8007600:	f107 030c 	add.w	r3, r7, #12
 8007604:	4618      	mov	r0, r3
 8007606:	f7f8 fe63 	bl	80002d0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800760a:	6879      	ldr	r1, [r7, #4]
 800760c:	68bb      	ldr	r3, [r7, #8]
 800760e:	68fa      	ldr	r2, [r7, #12]
 8007610:	9202      	str	r2, [sp, #8]
 8007612:	9301      	str	r3, [sp, #4]
 8007614:	2302      	movs	r3, #2
 8007616:	9300      	str	r3, [sp, #0]
 8007618:	2300      	movs	r3, #0
 800761a:	460a      	mov	r2, r1
 800761c:	4910      	ldr	r1, [pc, #64]	; (8007660 <xTimerCreateTimerTask+0x84>)
 800761e:	4811      	ldr	r0, [pc, #68]	; (8007664 <xTimerCreateTimerTask+0x88>)
 8007620:	f7fe fc3c 	bl	8005e9c <xTaskCreateStatic>
 8007624:	4603      	mov	r3, r0
 8007626:	4a10      	ldr	r2, [pc, #64]	; (8007668 <xTimerCreateTimerTask+0x8c>)
 8007628:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800762a:	4b0f      	ldr	r3, [pc, #60]	; (8007668 <xTimerCreateTimerTask+0x8c>)
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	2b00      	cmp	r3, #0
 8007630:	d001      	beq.n	8007636 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007632:	2301      	movs	r3, #1
 8007634:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007636:	697b      	ldr	r3, [r7, #20]
 8007638:	2b00      	cmp	r3, #0
 800763a:	d10a      	bne.n	8007652 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800763c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007640:	f383 8811 	msr	BASEPRI, r3
 8007644:	f3bf 8f6f 	isb	sy
 8007648:	f3bf 8f4f 	dsb	sy
 800764c:	613b      	str	r3, [r7, #16]
}
 800764e:	bf00      	nop
 8007650:	e7fe      	b.n	8007650 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007652:	697b      	ldr	r3, [r7, #20]
}
 8007654:	4618      	mov	r0, r3
 8007656:	3718      	adds	r7, #24
 8007658:	46bd      	mov	sp, r7
 800765a:	bd80      	pop	{r7, pc}
 800765c:	200007f8 	.word	0x200007f8
 8007660:	08008fe8 	.word	0x08008fe8
 8007664:	08007789 	.word	0x08007789
 8007668:	200007fc 	.word	0x200007fc

0800766c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800766c:	b580      	push	{r7, lr}
 800766e:	b08a      	sub	sp, #40	; 0x28
 8007670:	af00      	add	r7, sp, #0
 8007672:	60f8      	str	r0, [r7, #12]
 8007674:	60b9      	str	r1, [r7, #8]
 8007676:	607a      	str	r2, [r7, #4]
 8007678:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800767a:	2300      	movs	r3, #0
 800767c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	2b00      	cmp	r3, #0
 8007682:	d10a      	bne.n	800769a <xTimerGenericCommand+0x2e>
	__asm volatile
 8007684:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007688:	f383 8811 	msr	BASEPRI, r3
 800768c:	f3bf 8f6f 	isb	sy
 8007690:	f3bf 8f4f 	dsb	sy
 8007694:	623b      	str	r3, [r7, #32]
}
 8007696:	bf00      	nop
 8007698:	e7fe      	b.n	8007698 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800769a:	4b1a      	ldr	r3, [pc, #104]	; (8007704 <xTimerGenericCommand+0x98>)
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d02a      	beq.n	80076f8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80076a2:	68bb      	ldr	r3, [r7, #8]
 80076a4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80076ae:	68bb      	ldr	r3, [r7, #8]
 80076b0:	2b05      	cmp	r3, #5
 80076b2:	dc18      	bgt.n	80076e6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80076b4:	f7ff fc2c 	bl	8006f10 <xTaskGetSchedulerState>
 80076b8:	4603      	mov	r3, r0
 80076ba:	2b02      	cmp	r3, #2
 80076bc:	d109      	bne.n	80076d2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80076be:	4b11      	ldr	r3, [pc, #68]	; (8007704 <xTimerGenericCommand+0x98>)
 80076c0:	6818      	ldr	r0, [r3, #0]
 80076c2:	f107 0110 	add.w	r1, r7, #16
 80076c6:	2300      	movs	r3, #0
 80076c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80076ca:	f7fd fe51 	bl	8005370 <xQueueGenericSend>
 80076ce:	6278      	str	r0, [r7, #36]	; 0x24
 80076d0:	e012      	b.n	80076f8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80076d2:	4b0c      	ldr	r3, [pc, #48]	; (8007704 <xTimerGenericCommand+0x98>)
 80076d4:	6818      	ldr	r0, [r3, #0]
 80076d6:	f107 0110 	add.w	r1, r7, #16
 80076da:	2300      	movs	r3, #0
 80076dc:	2200      	movs	r2, #0
 80076de:	f7fd fe47 	bl	8005370 <xQueueGenericSend>
 80076e2:	6278      	str	r0, [r7, #36]	; 0x24
 80076e4:	e008      	b.n	80076f8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80076e6:	4b07      	ldr	r3, [pc, #28]	; (8007704 <xTimerGenericCommand+0x98>)
 80076e8:	6818      	ldr	r0, [r3, #0]
 80076ea:	f107 0110 	add.w	r1, r7, #16
 80076ee:	2300      	movs	r3, #0
 80076f0:	683a      	ldr	r2, [r7, #0]
 80076f2:	f7fd ff3b 	bl	800556c <xQueueGenericSendFromISR>
 80076f6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80076f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80076fa:	4618      	mov	r0, r3
 80076fc:	3728      	adds	r7, #40	; 0x28
 80076fe:	46bd      	mov	sp, r7
 8007700:	bd80      	pop	{r7, pc}
 8007702:	bf00      	nop
 8007704:	200007f8 	.word	0x200007f8

08007708 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007708:	b580      	push	{r7, lr}
 800770a:	b088      	sub	sp, #32
 800770c:	af02      	add	r7, sp, #8
 800770e:	6078      	str	r0, [r7, #4]
 8007710:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007712:	4b1c      	ldr	r3, [pc, #112]	; (8007784 <prvProcessExpiredTimer+0x7c>)
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	68db      	ldr	r3, [r3, #12]
 8007718:	68db      	ldr	r3, [r3, #12]
 800771a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800771c:	697b      	ldr	r3, [r7, #20]
 800771e:	3304      	adds	r3, #4
 8007720:	4618      	mov	r0, r3
 8007722:	f7fd fcbf 	bl	80050a4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8007726:	697b      	ldr	r3, [r7, #20]
 8007728:	69db      	ldr	r3, [r3, #28]
 800772a:	2b01      	cmp	r3, #1
 800772c:	d122      	bne.n	8007774 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800772e:	697b      	ldr	r3, [r7, #20]
 8007730:	699a      	ldr	r2, [r3, #24]
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	18d1      	adds	r1, r2, r3
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	683a      	ldr	r2, [r7, #0]
 800773a:	6978      	ldr	r0, [r7, #20]
 800773c:	f000 f8c8 	bl	80078d0 <prvInsertTimerInActiveList>
 8007740:	4603      	mov	r3, r0
 8007742:	2b00      	cmp	r3, #0
 8007744:	d016      	beq.n	8007774 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007746:	2300      	movs	r3, #0
 8007748:	9300      	str	r3, [sp, #0]
 800774a:	2300      	movs	r3, #0
 800774c:	687a      	ldr	r2, [r7, #4]
 800774e:	2100      	movs	r1, #0
 8007750:	6978      	ldr	r0, [r7, #20]
 8007752:	f7ff ff8b 	bl	800766c <xTimerGenericCommand>
 8007756:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007758:	693b      	ldr	r3, [r7, #16]
 800775a:	2b00      	cmp	r3, #0
 800775c:	d10a      	bne.n	8007774 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 800775e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007762:	f383 8811 	msr	BASEPRI, r3
 8007766:	f3bf 8f6f 	isb	sy
 800776a:	f3bf 8f4f 	dsb	sy
 800776e:	60fb      	str	r3, [r7, #12]
}
 8007770:	bf00      	nop
 8007772:	e7fe      	b.n	8007772 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007774:	697b      	ldr	r3, [r7, #20]
 8007776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007778:	6978      	ldr	r0, [r7, #20]
 800777a:	4798      	blx	r3
}
 800777c:	bf00      	nop
 800777e:	3718      	adds	r7, #24
 8007780:	46bd      	mov	sp, r7
 8007782:	bd80      	pop	{r7, pc}
 8007784:	200007f0 	.word	0x200007f0

08007788 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8007788:	b580      	push	{r7, lr}
 800778a:	b084      	sub	sp, #16
 800778c:	af00      	add	r7, sp, #0
 800778e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007790:	f107 0308 	add.w	r3, r7, #8
 8007794:	4618      	mov	r0, r3
 8007796:	f000 f857 	bl	8007848 <prvGetNextExpireTime>
 800779a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800779c:	68bb      	ldr	r3, [r7, #8]
 800779e:	4619      	mov	r1, r3
 80077a0:	68f8      	ldr	r0, [r7, #12]
 80077a2:	f000 f803 	bl	80077ac <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80077a6:	f000 f8d5 	bl	8007954 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80077aa:	e7f1      	b.n	8007790 <prvTimerTask+0x8>

080077ac <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80077ac:	b580      	push	{r7, lr}
 80077ae:	b084      	sub	sp, #16
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	6078      	str	r0, [r7, #4]
 80077b4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80077b6:	f7fe fe47 	bl	8006448 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80077ba:	f107 0308 	add.w	r3, r7, #8
 80077be:	4618      	mov	r0, r3
 80077c0:	f000 f866 	bl	8007890 <prvSampleTimeNow>
 80077c4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80077c6:	68bb      	ldr	r3, [r7, #8]
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d130      	bne.n	800782e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80077cc:	683b      	ldr	r3, [r7, #0]
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d10a      	bne.n	80077e8 <prvProcessTimerOrBlockTask+0x3c>
 80077d2:	687a      	ldr	r2, [r7, #4]
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	429a      	cmp	r2, r3
 80077d8:	d806      	bhi.n	80077e8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80077da:	f7fe fe43 	bl	8006464 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80077de:	68f9      	ldr	r1, [r7, #12]
 80077e0:	6878      	ldr	r0, [r7, #4]
 80077e2:	f7ff ff91 	bl	8007708 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80077e6:	e024      	b.n	8007832 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80077e8:	683b      	ldr	r3, [r7, #0]
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d008      	beq.n	8007800 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80077ee:	4b13      	ldr	r3, [pc, #76]	; (800783c <prvProcessTimerOrBlockTask+0x90>)
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	bf0c      	ite	eq
 80077f8:	2301      	moveq	r3, #1
 80077fa:	2300      	movne	r3, #0
 80077fc:	b2db      	uxtb	r3, r3
 80077fe:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007800:	4b0f      	ldr	r3, [pc, #60]	; (8007840 <prvProcessTimerOrBlockTask+0x94>)
 8007802:	6818      	ldr	r0, [r3, #0]
 8007804:	687a      	ldr	r2, [r7, #4]
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	1ad3      	subs	r3, r2, r3
 800780a:	683a      	ldr	r2, [r7, #0]
 800780c:	4619      	mov	r1, r3
 800780e:	f7fe fb11 	bl	8005e34 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007812:	f7fe fe27 	bl	8006464 <xTaskResumeAll>
 8007816:	4603      	mov	r3, r0
 8007818:	2b00      	cmp	r3, #0
 800781a:	d10a      	bne.n	8007832 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800781c:	4b09      	ldr	r3, [pc, #36]	; (8007844 <prvProcessTimerOrBlockTask+0x98>)
 800781e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007822:	601a      	str	r2, [r3, #0]
 8007824:	f3bf 8f4f 	dsb	sy
 8007828:	f3bf 8f6f 	isb	sy
}
 800782c:	e001      	b.n	8007832 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800782e:	f7fe fe19 	bl	8006464 <xTaskResumeAll>
}
 8007832:	bf00      	nop
 8007834:	3710      	adds	r7, #16
 8007836:	46bd      	mov	sp, r7
 8007838:	bd80      	pop	{r7, pc}
 800783a:	bf00      	nop
 800783c:	200007f4 	.word	0x200007f4
 8007840:	200007f8 	.word	0x200007f8
 8007844:	e000ed04 	.word	0xe000ed04

08007848 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007848:	b480      	push	{r7}
 800784a:	b085      	sub	sp, #20
 800784c:	af00      	add	r7, sp, #0
 800784e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007850:	4b0e      	ldr	r3, [pc, #56]	; (800788c <prvGetNextExpireTime+0x44>)
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	2b00      	cmp	r3, #0
 8007858:	bf0c      	ite	eq
 800785a:	2301      	moveq	r3, #1
 800785c:	2300      	movne	r3, #0
 800785e:	b2db      	uxtb	r3, r3
 8007860:	461a      	mov	r2, r3
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	2b00      	cmp	r3, #0
 800786c:	d105      	bne.n	800787a <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800786e:	4b07      	ldr	r3, [pc, #28]	; (800788c <prvGetNextExpireTime+0x44>)
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	68db      	ldr	r3, [r3, #12]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	60fb      	str	r3, [r7, #12]
 8007878:	e001      	b.n	800787e <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800787a:	2300      	movs	r3, #0
 800787c:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800787e:	68fb      	ldr	r3, [r7, #12]
}
 8007880:	4618      	mov	r0, r3
 8007882:	3714      	adds	r7, #20
 8007884:	46bd      	mov	sp, r7
 8007886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800788a:	4770      	bx	lr
 800788c:	200007f0 	.word	0x200007f0

08007890 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007890:	b580      	push	{r7, lr}
 8007892:	b084      	sub	sp, #16
 8007894:	af00      	add	r7, sp, #0
 8007896:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007898:	f7fe fe80 	bl	800659c <xTaskGetTickCount>
 800789c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800789e:	4b0b      	ldr	r3, [pc, #44]	; (80078cc <prvSampleTimeNow+0x3c>)
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	68fa      	ldr	r2, [r7, #12]
 80078a4:	429a      	cmp	r2, r3
 80078a6:	d205      	bcs.n	80078b4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80078a8:	f000 f908 	bl	8007abc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	2201      	movs	r2, #1
 80078b0:	601a      	str	r2, [r3, #0]
 80078b2:	e002      	b.n	80078ba <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	2200      	movs	r2, #0
 80078b8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80078ba:	4a04      	ldr	r2, [pc, #16]	; (80078cc <prvSampleTimeNow+0x3c>)
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80078c0:	68fb      	ldr	r3, [r7, #12]
}
 80078c2:	4618      	mov	r0, r3
 80078c4:	3710      	adds	r7, #16
 80078c6:	46bd      	mov	sp, r7
 80078c8:	bd80      	pop	{r7, pc}
 80078ca:	bf00      	nop
 80078cc:	20000800 	.word	0x20000800

080078d0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80078d0:	b580      	push	{r7, lr}
 80078d2:	b086      	sub	sp, #24
 80078d4:	af00      	add	r7, sp, #0
 80078d6:	60f8      	str	r0, [r7, #12]
 80078d8:	60b9      	str	r1, [r7, #8]
 80078da:	607a      	str	r2, [r7, #4]
 80078dc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80078de:	2300      	movs	r3, #0
 80078e0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	68ba      	ldr	r2, [r7, #8]
 80078e6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	68fa      	ldr	r2, [r7, #12]
 80078ec:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80078ee:	68ba      	ldr	r2, [r7, #8]
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	429a      	cmp	r2, r3
 80078f4:	d812      	bhi.n	800791c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80078f6:	687a      	ldr	r2, [r7, #4]
 80078f8:	683b      	ldr	r3, [r7, #0]
 80078fa:	1ad2      	subs	r2, r2, r3
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	699b      	ldr	r3, [r3, #24]
 8007900:	429a      	cmp	r2, r3
 8007902:	d302      	bcc.n	800790a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007904:	2301      	movs	r3, #1
 8007906:	617b      	str	r3, [r7, #20]
 8007908:	e01b      	b.n	8007942 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800790a:	4b10      	ldr	r3, [pc, #64]	; (800794c <prvInsertTimerInActiveList+0x7c>)
 800790c:	681a      	ldr	r2, [r3, #0]
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	3304      	adds	r3, #4
 8007912:	4619      	mov	r1, r3
 8007914:	4610      	mov	r0, r2
 8007916:	f7fd fb8c 	bl	8005032 <vListInsert>
 800791a:	e012      	b.n	8007942 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800791c:	687a      	ldr	r2, [r7, #4]
 800791e:	683b      	ldr	r3, [r7, #0]
 8007920:	429a      	cmp	r2, r3
 8007922:	d206      	bcs.n	8007932 <prvInsertTimerInActiveList+0x62>
 8007924:	68ba      	ldr	r2, [r7, #8]
 8007926:	683b      	ldr	r3, [r7, #0]
 8007928:	429a      	cmp	r2, r3
 800792a:	d302      	bcc.n	8007932 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800792c:	2301      	movs	r3, #1
 800792e:	617b      	str	r3, [r7, #20]
 8007930:	e007      	b.n	8007942 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007932:	4b07      	ldr	r3, [pc, #28]	; (8007950 <prvInsertTimerInActiveList+0x80>)
 8007934:	681a      	ldr	r2, [r3, #0]
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	3304      	adds	r3, #4
 800793a:	4619      	mov	r1, r3
 800793c:	4610      	mov	r0, r2
 800793e:	f7fd fb78 	bl	8005032 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007942:	697b      	ldr	r3, [r7, #20]
}
 8007944:	4618      	mov	r0, r3
 8007946:	3718      	adds	r7, #24
 8007948:	46bd      	mov	sp, r7
 800794a:	bd80      	pop	{r7, pc}
 800794c:	200007f4 	.word	0x200007f4
 8007950:	200007f0 	.word	0x200007f0

08007954 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007954:	b580      	push	{r7, lr}
 8007956:	b08e      	sub	sp, #56	; 0x38
 8007958:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800795a:	e09d      	b.n	8007a98 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	2b00      	cmp	r3, #0
 8007960:	da18      	bge.n	8007994 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007962:	1d3b      	adds	r3, r7, #4
 8007964:	3304      	adds	r3, #4
 8007966:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007968:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800796a:	2b00      	cmp	r3, #0
 800796c:	d10a      	bne.n	8007984 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800796e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007972:	f383 8811 	msr	BASEPRI, r3
 8007976:	f3bf 8f6f 	isb	sy
 800797a:	f3bf 8f4f 	dsb	sy
 800797e:	61fb      	str	r3, [r7, #28]
}
 8007980:	bf00      	nop
 8007982:	e7fe      	b.n	8007982 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007984:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800798a:	6850      	ldr	r0, [r2, #4]
 800798c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800798e:	6892      	ldr	r2, [r2, #8]
 8007990:	4611      	mov	r1, r2
 8007992:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	2b00      	cmp	r3, #0
 8007998:	db7d      	blt.n	8007a96 <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800799e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079a0:	695b      	ldr	r3, [r3, #20]
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d004      	beq.n	80079b0 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80079a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079a8:	3304      	adds	r3, #4
 80079aa:	4618      	mov	r0, r3
 80079ac:	f7fd fb7a 	bl	80050a4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80079b0:	463b      	mov	r3, r7
 80079b2:	4618      	mov	r0, r3
 80079b4:	f7ff ff6c 	bl	8007890 <prvSampleTimeNow>
 80079b8:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	2b09      	cmp	r3, #9
 80079be:	d86b      	bhi.n	8007a98 <prvProcessReceivedCommands+0x144>
 80079c0:	a201      	add	r2, pc, #4	; (adr r2, 80079c8 <prvProcessReceivedCommands+0x74>)
 80079c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079c6:	bf00      	nop
 80079c8:	080079f1 	.word	0x080079f1
 80079cc:	080079f1 	.word	0x080079f1
 80079d0:	080079f1 	.word	0x080079f1
 80079d4:	08007a99 	.word	0x08007a99
 80079d8:	08007a4d 	.word	0x08007a4d
 80079dc:	08007a85 	.word	0x08007a85
 80079e0:	080079f1 	.word	0x080079f1
 80079e4:	080079f1 	.word	0x080079f1
 80079e8:	08007a99 	.word	0x08007a99
 80079ec:	08007a4d 	.word	0x08007a4d
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80079f0:	68ba      	ldr	r2, [r7, #8]
 80079f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079f4:	699b      	ldr	r3, [r3, #24]
 80079f6:	18d1      	adds	r1, r2, r3
 80079f8:	68bb      	ldr	r3, [r7, #8]
 80079fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80079fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80079fe:	f7ff ff67 	bl	80078d0 <prvInsertTimerInActiveList>
 8007a02:	4603      	mov	r3, r0
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d047      	beq.n	8007a98 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007a08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a0c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007a0e:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8007a10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a12:	69db      	ldr	r3, [r3, #28]
 8007a14:	2b01      	cmp	r3, #1
 8007a16:	d13f      	bne.n	8007a98 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007a18:	68ba      	ldr	r2, [r7, #8]
 8007a1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a1c:	699b      	ldr	r3, [r3, #24]
 8007a1e:	441a      	add	r2, r3
 8007a20:	2300      	movs	r3, #0
 8007a22:	9300      	str	r3, [sp, #0]
 8007a24:	2300      	movs	r3, #0
 8007a26:	2100      	movs	r1, #0
 8007a28:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007a2a:	f7ff fe1f 	bl	800766c <xTimerGenericCommand>
 8007a2e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007a30:	6a3b      	ldr	r3, [r7, #32]
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d130      	bne.n	8007a98 <prvProcessReceivedCommands+0x144>
	__asm volatile
 8007a36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a3a:	f383 8811 	msr	BASEPRI, r3
 8007a3e:	f3bf 8f6f 	isb	sy
 8007a42:	f3bf 8f4f 	dsb	sy
 8007a46:	61bb      	str	r3, [r7, #24]
}
 8007a48:	bf00      	nop
 8007a4a:	e7fe      	b.n	8007a4a <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007a4c:	68ba      	ldr	r2, [r7, #8]
 8007a4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a50:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007a52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a54:	699b      	ldr	r3, [r3, #24]
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d10a      	bne.n	8007a70 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 8007a5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a5e:	f383 8811 	msr	BASEPRI, r3
 8007a62:	f3bf 8f6f 	isb	sy
 8007a66:	f3bf 8f4f 	dsb	sy
 8007a6a:	617b      	str	r3, [r7, #20]
}
 8007a6c:	bf00      	nop
 8007a6e:	e7fe      	b.n	8007a6e <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007a70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a72:	699a      	ldr	r2, [r3, #24]
 8007a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a76:	18d1      	adds	r1, r2, r3
 8007a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a7c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007a7e:	f7ff ff27 	bl	80078d0 <prvInsertTimerInActiveList>
					break;
 8007a82:	e009      	b.n	8007a98 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8007a84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a86:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d104      	bne.n	8007a98 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 8007a8e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007a90:	f000 fbe6 	bl	8008260 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007a94:	e000      	b.n	8007a98 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8007a96:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007a98:	4b07      	ldr	r3, [pc, #28]	; (8007ab8 <prvProcessReceivedCommands+0x164>)
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	1d39      	adds	r1, r7, #4
 8007a9e:	2200      	movs	r2, #0
 8007aa0:	4618      	mov	r0, r3
 8007aa2:	f7fd fe89 	bl	80057b8 <xQueueReceive>
 8007aa6:	4603      	mov	r3, r0
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	f47f af57 	bne.w	800795c <prvProcessReceivedCommands+0x8>
	}
}
 8007aae:	bf00      	nop
 8007ab0:	bf00      	nop
 8007ab2:	3730      	adds	r7, #48	; 0x30
 8007ab4:	46bd      	mov	sp, r7
 8007ab6:	bd80      	pop	{r7, pc}
 8007ab8:	200007f8 	.word	0x200007f8

08007abc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007abc:	b580      	push	{r7, lr}
 8007abe:	b088      	sub	sp, #32
 8007ac0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007ac2:	e045      	b.n	8007b50 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007ac4:	4b2c      	ldr	r3, [pc, #176]	; (8007b78 <prvSwitchTimerLists+0xbc>)
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	68db      	ldr	r3, [r3, #12]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007ace:	4b2a      	ldr	r3, [pc, #168]	; (8007b78 <prvSwitchTimerLists+0xbc>)
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	68db      	ldr	r3, [r3, #12]
 8007ad4:	68db      	ldr	r3, [r3, #12]
 8007ad6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	3304      	adds	r3, #4
 8007adc:	4618      	mov	r0, r3
 8007ade:	f7fd fae1 	bl	80050a4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ae6:	68f8      	ldr	r0, [r7, #12]
 8007ae8:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	69db      	ldr	r3, [r3, #28]
 8007aee:	2b01      	cmp	r3, #1
 8007af0:	d12e      	bne.n	8007b50 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	699b      	ldr	r3, [r3, #24]
 8007af6:	693a      	ldr	r2, [r7, #16]
 8007af8:	4413      	add	r3, r2
 8007afa:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007afc:	68ba      	ldr	r2, [r7, #8]
 8007afe:	693b      	ldr	r3, [r7, #16]
 8007b00:	429a      	cmp	r2, r3
 8007b02:	d90e      	bls.n	8007b22 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	68ba      	ldr	r2, [r7, #8]
 8007b08:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	68fa      	ldr	r2, [r7, #12]
 8007b0e:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007b10:	4b19      	ldr	r3, [pc, #100]	; (8007b78 <prvSwitchTimerLists+0xbc>)
 8007b12:	681a      	ldr	r2, [r3, #0]
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	3304      	adds	r3, #4
 8007b18:	4619      	mov	r1, r3
 8007b1a:	4610      	mov	r0, r2
 8007b1c:	f7fd fa89 	bl	8005032 <vListInsert>
 8007b20:	e016      	b.n	8007b50 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007b22:	2300      	movs	r3, #0
 8007b24:	9300      	str	r3, [sp, #0]
 8007b26:	2300      	movs	r3, #0
 8007b28:	693a      	ldr	r2, [r7, #16]
 8007b2a:	2100      	movs	r1, #0
 8007b2c:	68f8      	ldr	r0, [r7, #12]
 8007b2e:	f7ff fd9d 	bl	800766c <xTimerGenericCommand>
 8007b32:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d10a      	bne.n	8007b50 <prvSwitchTimerLists+0x94>
	__asm volatile
 8007b3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b3e:	f383 8811 	msr	BASEPRI, r3
 8007b42:	f3bf 8f6f 	isb	sy
 8007b46:	f3bf 8f4f 	dsb	sy
 8007b4a:	603b      	str	r3, [r7, #0]
}
 8007b4c:	bf00      	nop
 8007b4e:	e7fe      	b.n	8007b4e <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007b50:	4b09      	ldr	r3, [pc, #36]	; (8007b78 <prvSwitchTimerLists+0xbc>)
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d1b4      	bne.n	8007ac4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007b5a:	4b07      	ldr	r3, [pc, #28]	; (8007b78 <prvSwitchTimerLists+0xbc>)
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007b60:	4b06      	ldr	r3, [pc, #24]	; (8007b7c <prvSwitchTimerLists+0xc0>)
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	4a04      	ldr	r2, [pc, #16]	; (8007b78 <prvSwitchTimerLists+0xbc>)
 8007b66:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007b68:	4a04      	ldr	r2, [pc, #16]	; (8007b7c <prvSwitchTimerLists+0xc0>)
 8007b6a:	697b      	ldr	r3, [r7, #20]
 8007b6c:	6013      	str	r3, [r2, #0]
}
 8007b6e:	bf00      	nop
 8007b70:	3718      	adds	r7, #24
 8007b72:	46bd      	mov	sp, r7
 8007b74:	bd80      	pop	{r7, pc}
 8007b76:	bf00      	nop
 8007b78:	200007f0 	.word	0x200007f0
 8007b7c:	200007f4 	.word	0x200007f4

08007b80 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007b80:	b580      	push	{r7, lr}
 8007b82:	b082      	sub	sp, #8
 8007b84:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007b86:	f000 f985 	bl	8007e94 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007b8a:	4b15      	ldr	r3, [pc, #84]	; (8007be0 <prvCheckForValidListAndQueue+0x60>)
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d120      	bne.n	8007bd4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007b92:	4814      	ldr	r0, [pc, #80]	; (8007be4 <prvCheckForValidListAndQueue+0x64>)
 8007b94:	f7fd f9fc 	bl	8004f90 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007b98:	4813      	ldr	r0, [pc, #76]	; (8007be8 <prvCheckForValidListAndQueue+0x68>)
 8007b9a:	f7fd f9f9 	bl	8004f90 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007b9e:	4b13      	ldr	r3, [pc, #76]	; (8007bec <prvCheckForValidListAndQueue+0x6c>)
 8007ba0:	4a10      	ldr	r2, [pc, #64]	; (8007be4 <prvCheckForValidListAndQueue+0x64>)
 8007ba2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007ba4:	4b12      	ldr	r3, [pc, #72]	; (8007bf0 <prvCheckForValidListAndQueue+0x70>)
 8007ba6:	4a10      	ldr	r2, [pc, #64]	; (8007be8 <prvCheckForValidListAndQueue+0x68>)
 8007ba8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007baa:	2300      	movs	r3, #0
 8007bac:	9300      	str	r3, [sp, #0]
 8007bae:	4b11      	ldr	r3, [pc, #68]	; (8007bf4 <prvCheckForValidListAndQueue+0x74>)
 8007bb0:	4a11      	ldr	r2, [pc, #68]	; (8007bf8 <prvCheckForValidListAndQueue+0x78>)
 8007bb2:	2110      	movs	r1, #16
 8007bb4:	200a      	movs	r0, #10
 8007bb6:	f7fd fb07 	bl	80051c8 <xQueueGenericCreateStatic>
 8007bba:	4603      	mov	r3, r0
 8007bbc:	4a08      	ldr	r2, [pc, #32]	; (8007be0 <prvCheckForValidListAndQueue+0x60>)
 8007bbe:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007bc0:	4b07      	ldr	r3, [pc, #28]	; (8007be0 <prvCheckForValidListAndQueue+0x60>)
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d005      	beq.n	8007bd4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007bc8:	4b05      	ldr	r3, [pc, #20]	; (8007be0 <prvCheckForValidListAndQueue+0x60>)
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	490b      	ldr	r1, [pc, #44]	; (8007bfc <prvCheckForValidListAndQueue+0x7c>)
 8007bce:	4618      	mov	r0, r3
 8007bd0:	f7fe f906 	bl	8005de0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007bd4:	f000 f98e 	bl	8007ef4 <vPortExitCritical>
}
 8007bd8:	bf00      	nop
 8007bda:	46bd      	mov	sp, r7
 8007bdc:	bd80      	pop	{r7, pc}
 8007bde:	bf00      	nop
 8007be0:	200007f8 	.word	0x200007f8
 8007be4:	200007c8 	.word	0x200007c8
 8007be8:	200007dc 	.word	0x200007dc
 8007bec:	200007f0 	.word	0x200007f0
 8007bf0:	200007f4 	.word	0x200007f4
 8007bf4:	200008a4 	.word	0x200008a4
 8007bf8:	20000804 	.word	0x20000804
 8007bfc:	08008ff0 	.word	0x08008ff0

08007c00 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8007c00:	b580      	push	{r7, lr}
 8007c02:	b08a      	sub	sp, #40	; 0x28
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	60f8      	str	r0, [r7, #12]
 8007c08:	60b9      	str	r1, [r7, #8]
 8007c0a:	607a      	str	r2, [r7, #4]
 8007c0c:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 8007c0e:	f06f 0301 	mvn.w	r3, #1
 8007c12:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 8007c18:	68bb      	ldr	r3, [r7, #8]
 8007c1a:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007c20:	4b06      	ldr	r3, [pc, #24]	; (8007c3c <xTimerPendFunctionCallFromISR+0x3c>)
 8007c22:	6818      	ldr	r0, [r3, #0]
 8007c24:	f107 0114 	add.w	r1, r7, #20
 8007c28:	2300      	movs	r3, #0
 8007c2a:	683a      	ldr	r2, [r7, #0]
 8007c2c:	f7fd fc9e 	bl	800556c <xQueueGenericSendFromISR>
 8007c30:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 8007c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8007c34:	4618      	mov	r0, r3
 8007c36:	3728      	adds	r7, #40	; 0x28
 8007c38:	46bd      	mov	sp, r7
 8007c3a:	bd80      	pop	{r7, pc}
 8007c3c:	200007f8 	.word	0x200007f8

08007c40 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007c40:	b480      	push	{r7}
 8007c42:	b085      	sub	sp, #20
 8007c44:	af00      	add	r7, sp, #0
 8007c46:	60f8      	str	r0, [r7, #12]
 8007c48:	60b9      	str	r1, [r7, #8]
 8007c4a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	3b04      	subs	r3, #4
 8007c50:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007c58:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	3b04      	subs	r3, #4
 8007c5e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007c60:	68bb      	ldr	r3, [r7, #8]
 8007c62:	f023 0201 	bic.w	r2, r3, #1
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	3b04      	subs	r3, #4
 8007c6e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007c70:	4a0c      	ldr	r2, [pc, #48]	; (8007ca4 <pxPortInitialiseStack+0x64>)
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	3b14      	subs	r3, #20
 8007c7a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007c7c:	687a      	ldr	r2, [r7, #4]
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	3b04      	subs	r3, #4
 8007c86:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	f06f 0202 	mvn.w	r2, #2
 8007c8e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	3b20      	subs	r3, #32
 8007c94:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007c96:	68fb      	ldr	r3, [r7, #12]
}
 8007c98:	4618      	mov	r0, r3
 8007c9a:	3714      	adds	r7, #20
 8007c9c:	46bd      	mov	sp, r7
 8007c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca2:	4770      	bx	lr
 8007ca4:	08007ca9 	.word	0x08007ca9

08007ca8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007ca8:	b480      	push	{r7}
 8007caa:	b085      	sub	sp, #20
 8007cac:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007cae:	2300      	movs	r3, #0
 8007cb0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007cb2:	4b12      	ldr	r3, [pc, #72]	; (8007cfc <prvTaskExitError+0x54>)
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cba:	d00a      	beq.n	8007cd2 <prvTaskExitError+0x2a>
	__asm volatile
 8007cbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cc0:	f383 8811 	msr	BASEPRI, r3
 8007cc4:	f3bf 8f6f 	isb	sy
 8007cc8:	f3bf 8f4f 	dsb	sy
 8007ccc:	60fb      	str	r3, [r7, #12]
}
 8007cce:	bf00      	nop
 8007cd0:	e7fe      	b.n	8007cd0 <prvTaskExitError+0x28>
	__asm volatile
 8007cd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cd6:	f383 8811 	msr	BASEPRI, r3
 8007cda:	f3bf 8f6f 	isb	sy
 8007cde:	f3bf 8f4f 	dsb	sy
 8007ce2:	60bb      	str	r3, [r7, #8]
}
 8007ce4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007ce6:	bf00      	nop
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d0fc      	beq.n	8007ce8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007cee:	bf00      	nop
 8007cf0:	bf00      	nop
 8007cf2:	3714      	adds	r7, #20
 8007cf4:	46bd      	mov	sp, r7
 8007cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cfa:	4770      	bx	lr
 8007cfc:	2000000c 	.word	0x2000000c

08007d00 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007d00:	4b07      	ldr	r3, [pc, #28]	; (8007d20 <pxCurrentTCBConst2>)
 8007d02:	6819      	ldr	r1, [r3, #0]
 8007d04:	6808      	ldr	r0, [r1, #0]
 8007d06:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d0a:	f380 8809 	msr	PSP, r0
 8007d0e:	f3bf 8f6f 	isb	sy
 8007d12:	f04f 0000 	mov.w	r0, #0
 8007d16:	f380 8811 	msr	BASEPRI, r0
 8007d1a:	4770      	bx	lr
 8007d1c:	f3af 8000 	nop.w

08007d20 <pxCurrentTCBConst2>:
 8007d20:	2000069c 	.word	0x2000069c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007d24:	bf00      	nop
 8007d26:	bf00      	nop

08007d28 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007d28:	4808      	ldr	r0, [pc, #32]	; (8007d4c <prvPortStartFirstTask+0x24>)
 8007d2a:	6800      	ldr	r0, [r0, #0]
 8007d2c:	6800      	ldr	r0, [r0, #0]
 8007d2e:	f380 8808 	msr	MSP, r0
 8007d32:	f04f 0000 	mov.w	r0, #0
 8007d36:	f380 8814 	msr	CONTROL, r0
 8007d3a:	b662      	cpsie	i
 8007d3c:	b661      	cpsie	f
 8007d3e:	f3bf 8f4f 	dsb	sy
 8007d42:	f3bf 8f6f 	isb	sy
 8007d46:	df00      	svc	0
 8007d48:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007d4a:	bf00      	nop
 8007d4c:	e000ed08 	.word	0xe000ed08

08007d50 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007d50:	b580      	push	{r7, lr}
 8007d52:	b086      	sub	sp, #24
 8007d54:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007d56:	4b46      	ldr	r3, [pc, #280]	; (8007e70 <xPortStartScheduler+0x120>)
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	4a46      	ldr	r2, [pc, #280]	; (8007e74 <xPortStartScheduler+0x124>)
 8007d5c:	4293      	cmp	r3, r2
 8007d5e:	d10a      	bne.n	8007d76 <xPortStartScheduler+0x26>
	__asm volatile
 8007d60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d64:	f383 8811 	msr	BASEPRI, r3
 8007d68:	f3bf 8f6f 	isb	sy
 8007d6c:	f3bf 8f4f 	dsb	sy
 8007d70:	613b      	str	r3, [r7, #16]
}
 8007d72:	bf00      	nop
 8007d74:	e7fe      	b.n	8007d74 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007d76:	4b3e      	ldr	r3, [pc, #248]	; (8007e70 <xPortStartScheduler+0x120>)
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	4a3f      	ldr	r2, [pc, #252]	; (8007e78 <xPortStartScheduler+0x128>)
 8007d7c:	4293      	cmp	r3, r2
 8007d7e:	d10a      	bne.n	8007d96 <xPortStartScheduler+0x46>
	__asm volatile
 8007d80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d84:	f383 8811 	msr	BASEPRI, r3
 8007d88:	f3bf 8f6f 	isb	sy
 8007d8c:	f3bf 8f4f 	dsb	sy
 8007d90:	60fb      	str	r3, [r7, #12]
}
 8007d92:	bf00      	nop
 8007d94:	e7fe      	b.n	8007d94 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007d96:	4b39      	ldr	r3, [pc, #228]	; (8007e7c <xPortStartScheduler+0x12c>)
 8007d98:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007d9a:	697b      	ldr	r3, [r7, #20]
 8007d9c:	781b      	ldrb	r3, [r3, #0]
 8007d9e:	b2db      	uxtb	r3, r3
 8007da0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007da2:	697b      	ldr	r3, [r7, #20]
 8007da4:	22ff      	movs	r2, #255	; 0xff
 8007da6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007da8:	697b      	ldr	r3, [r7, #20]
 8007daa:	781b      	ldrb	r3, [r3, #0]
 8007dac:	b2db      	uxtb	r3, r3
 8007dae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007db0:	78fb      	ldrb	r3, [r7, #3]
 8007db2:	b2db      	uxtb	r3, r3
 8007db4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007db8:	b2da      	uxtb	r2, r3
 8007dba:	4b31      	ldr	r3, [pc, #196]	; (8007e80 <xPortStartScheduler+0x130>)
 8007dbc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007dbe:	4b31      	ldr	r3, [pc, #196]	; (8007e84 <xPortStartScheduler+0x134>)
 8007dc0:	2207      	movs	r2, #7
 8007dc2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007dc4:	e009      	b.n	8007dda <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007dc6:	4b2f      	ldr	r3, [pc, #188]	; (8007e84 <xPortStartScheduler+0x134>)
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	3b01      	subs	r3, #1
 8007dcc:	4a2d      	ldr	r2, [pc, #180]	; (8007e84 <xPortStartScheduler+0x134>)
 8007dce:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007dd0:	78fb      	ldrb	r3, [r7, #3]
 8007dd2:	b2db      	uxtb	r3, r3
 8007dd4:	005b      	lsls	r3, r3, #1
 8007dd6:	b2db      	uxtb	r3, r3
 8007dd8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007dda:	78fb      	ldrb	r3, [r7, #3]
 8007ddc:	b2db      	uxtb	r3, r3
 8007dde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007de2:	2b80      	cmp	r3, #128	; 0x80
 8007de4:	d0ef      	beq.n	8007dc6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007de6:	4b27      	ldr	r3, [pc, #156]	; (8007e84 <xPortStartScheduler+0x134>)
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	f1c3 0307 	rsb	r3, r3, #7
 8007dee:	2b04      	cmp	r3, #4
 8007df0:	d00a      	beq.n	8007e08 <xPortStartScheduler+0xb8>
	__asm volatile
 8007df2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007df6:	f383 8811 	msr	BASEPRI, r3
 8007dfa:	f3bf 8f6f 	isb	sy
 8007dfe:	f3bf 8f4f 	dsb	sy
 8007e02:	60bb      	str	r3, [r7, #8]
}
 8007e04:	bf00      	nop
 8007e06:	e7fe      	b.n	8007e06 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007e08:	4b1e      	ldr	r3, [pc, #120]	; (8007e84 <xPortStartScheduler+0x134>)
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	021b      	lsls	r3, r3, #8
 8007e0e:	4a1d      	ldr	r2, [pc, #116]	; (8007e84 <xPortStartScheduler+0x134>)
 8007e10:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007e12:	4b1c      	ldr	r3, [pc, #112]	; (8007e84 <xPortStartScheduler+0x134>)
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007e1a:	4a1a      	ldr	r2, [pc, #104]	; (8007e84 <xPortStartScheduler+0x134>)
 8007e1c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	b2da      	uxtb	r2, r3
 8007e22:	697b      	ldr	r3, [r7, #20]
 8007e24:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007e26:	4b18      	ldr	r3, [pc, #96]	; (8007e88 <xPortStartScheduler+0x138>)
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	4a17      	ldr	r2, [pc, #92]	; (8007e88 <xPortStartScheduler+0x138>)
 8007e2c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007e30:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007e32:	4b15      	ldr	r3, [pc, #84]	; (8007e88 <xPortStartScheduler+0x138>)
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	4a14      	ldr	r2, [pc, #80]	; (8007e88 <xPortStartScheduler+0x138>)
 8007e38:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007e3c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007e3e:	f000 f8dd 	bl	8007ffc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007e42:	4b12      	ldr	r3, [pc, #72]	; (8007e8c <xPortStartScheduler+0x13c>)
 8007e44:	2200      	movs	r2, #0
 8007e46:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007e48:	f000 f8fc 	bl	8008044 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007e4c:	4b10      	ldr	r3, [pc, #64]	; (8007e90 <xPortStartScheduler+0x140>)
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	4a0f      	ldr	r2, [pc, #60]	; (8007e90 <xPortStartScheduler+0x140>)
 8007e52:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007e56:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007e58:	f7ff ff66 	bl	8007d28 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007e5c:	f7fe fd40 	bl	80068e0 <vTaskSwitchContext>
	prvTaskExitError();
 8007e60:	f7ff ff22 	bl	8007ca8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007e64:	2300      	movs	r3, #0
}
 8007e66:	4618      	mov	r0, r3
 8007e68:	3718      	adds	r7, #24
 8007e6a:	46bd      	mov	sp, r7
 8007e6c:	bd80      	pop	{r7, pc}
 8007e6e:	bf00      	nop
 8007e70:	e000ed00 	.word	0xe000ed00
 8007e74:	410fc271 	.word	0x410fc271
 8007e78:	410fc270 	.word	0x410fc270
 8007e7c:	e000e400 	.word	0xe000e400
 8007e80:	200008ec 	.word	0x200008ec
 8007e84:	200008f0 	.word	0x200008f0
 8007e88:	e000ed20 	.word	0xe000ed20
 8007e8c:	2000000c 	.word	0x2000000c
 8007e90:	e000ef34 	.word	0xe000ef34

08007e94 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007e94:	b480      	push	{r7}
 8007e96:	b083      	sub	sp, #12
 8007e98:	af00      	add	r7, sp, #0
	__asm volatile
 8007e9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e9e:	f383 8811 	msr	BASEPRI, r3
 8007ea2:	f3bf 8f6f 	isb	sy
 8007ea6:	f3bf 8f4f 	dsb	sy
 8007eaa:	607b      	str	r3, [r7, #4]
}
 8007eac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007eae:	4b0f      	ldr	r3, [pc, #60]	; (8007eec <vPortEnterCritical+0x58>)
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	3301      	adds	r3, #1
 8007eb4:	4a0d      	ldr	r2, [pc, #52]	; (8007eec <vPortEnterCritical+0x58>)
 8007eb6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007eb8:	4b0c      	ldr	r3, [pc, #48]	; (8007eec <vPortEnterCritical+0x58>)
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	2b01      	cmp	r3, #1
 8007ebe:	d10f      	bne.n	8007ee0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007ec0:	4b0b      	ldr	r3, [pc, #44]	; (8007ef0 <vPortEnterCritical+0x5c>)
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	b2db      	uxtb	r3, r3
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d00a      	beq.n	8007ee0 <vPortEnterCritical+0x4c>
	__asm volatile
 8007eca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ece:	f383 8811 	msr	BASEPRI, r3
 8007ed2:	f3bf 8f6f 	isb	sy
 8007ed6:	f3bf 8f4f 	dsb	sy
 8007eda:	603b      	str	r3, [r7, #0]
}
 8007edc:	bf00      	nop
 8007ede:	e7fe      	b.n	8007ede <vPortEnterCritical+0x4a>
	}
}
 8007ee0:	bf00      	nop
 8007ee2:	370c      	adds	r7, #12
 8007ee4:	46bd      	mov	sp, r7
 8007ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eea:	4770      	bx	lr
 8007eec:	2000000c 	.word	0x2000000c
 8007ef0:	e000ed04 	.word	0xe000ed04

08007ef4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007ef4:	b480      	push	{r7}
 8007ef6:	b083      	sub	sp, #12
 8007ef8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007efa:	4b12      	ldr	r3, [pc, #72]	; (8007f44 <vPortExitCritical+0x50>)
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d10a      	bne.n	8007f18 <vPortExitCritical+0x24>
	__asm volatile
 8007f02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f06:	f383 8811 	msr	BASEPRI, r3
 8007f0a:	f3bf 8f6f 	isb	sy
 8007f0e:	f3bf 8f4f 	dsb	sy
 8007f12:	607b      	str	r3, [r7, #4]
}
 8007f14:	bf00      	nop
 8007f16:	e7fe      	b.n	8007f16 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007f18:	4b0a      	ldr	r3, [pc, #40]	; (8007f44 <vPortExitCritical+0x50>)
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	3b01      	subs	r3, #1
 8007f1e:	4a09      	ldr	r2, [pc, #36]	; (8007f44 <vPortExitCritical+0x50>)
 8007f20:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007f22:	4b08      	ldr	r3, [pc, #32]	; (8007f44 <vPortExitCritical+0x50>)
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d105      	bne.n	8007f36 <vPortExitCritical+0x42>
 8007f2a:	2300      	movs	r3, #0
 8007f2c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007f2e:	683b      	ldr	r3, [r7, #0]
 8007f30:	f383 8811 	msr	BASEPRI, r3
}
 8007f34:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007f36:	bf00      	nop
 8007f38:	370c      	adds	r7, #12
 8007f3a:	46bd      	mov	sp, r7
 8007f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f40:	4770      	bx	lr
 8007f42:	bf00      	nop
 8007f44:	2000000c 	.word	0x2000000c
	...

08007f50 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007f50:	f3ef 8009 	mrs	r0, PSP
 8007f54:	f3bf 8f6f 	isb	sy
 8007f58:	4b15      	ldr	r3, [pc, #84]	; (8007fb0 <pxCurrentTCBConst>)
 8007f5a:	681a      	ldr	r2, [r3, #0]
 8007f5c:	f01e 0f10 	tst.w	lr, #16
 8007f60:	bf08      	it	eq
 8007f62:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007f66:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f6a:	6010      	str	r0, [r2, #0]
 8007f6c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007f70:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007f74:	f380 8811 	msr	BASEPRI, r0
 8007f78:	f3bf 8f4f 	dsb	sy
 8007f7c:	f3bf 8f6f 	isb	sy
 8007f80:	f7fe fcae 	bl	80068e0 <vTaskSwitchContext>
 8007f84:	f04f 0000 	mov.w	r0, #0
 8007f88:	f380 8811 	msr	BASEPRI, r0
 8007f8c:	bc09      	pop	{r0, r3}
 8007f8e:	6819      	ldr	r1, [r3, #0]
 8007f90:	6808      	ldr	r0, [r1, #0]
 8007f92:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f96:	f01e 0f10 	tst.w	lr, #16
 8007f9a:	bf08      	it	eq
 8007f9c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007fa0:	f380 8809 	msr	PSP, r0
 8007fa4:	f3bf 8f6f 	isb	sy
 8007fa8:	4770      	bx	lr
 8007faa:	bf00      	nop
 8007fac:	f3af 8000 	nop.w

08007fb0 <pxCurrentTCBConst>:
 8007fb0:	2000069c 	.word	0x2000069c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007fb4:	bf00      	nop
 8007fb6:	bf00      	nop

08007fb8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007fb8:	b580      	push	{r7, lr}
 8007fba:	b082      	sub	sp, #8
 8007fbc:	af00      	add	r7, sp, #0
	__asm volatile
 8007fbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fc2:	f383 8811 	msr	BASEPRI, r3
 8007fc6:	f3bf 8f6f 	isb	sy
 8007fca:	f3bf 8f4f 	dsb	sy
 8007fce:	607b      	str	r3, [r7, #4]
}
 8007fd0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007fd2:	f7fe fbbf 	bl	8006754 <xTaskIncrementTick>
 8007fd6:	4603      	mov	r3, r0
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d003      	beq.n	8007fe4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007fdc:	4b06      	ldr	r3, [pc, #24]	; (8007ff8 <SysTick_Handler+0x40>)
 8007fde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007fe2:	601a      	str	r2, [r3, #0]
 8007fe4:	2300      	movs	r3, #0
 8007fe6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007fe8:	683b      	ldr	r3, [r7, #0]
 8007fea:	f383 8811 	msr	BASEPRI, r3
}
 8007fee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007ff0:	bf00      	nop
 8007ff2:	3708      	adds	r7, #8
 8007ff4:	46bd      	mov	sp, r7
 8007ff6:	bd80      	pop	{r7, pc}
 8007ff8:	e000ed04 	.word	0xe000ed04

08007ffc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007ffc:	b480      	push	{r7}
 8007ffe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008000:	4b0b      	ldr	r3, [pc, #44]	; (8008030 <vPortSetupTimerInterrupt+0x34>)
 8008002:	2200      	movs	r2, #0
 8008004:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008006:	4b0b      	ldr	r3, [pc, #44]	; (8008034 <vPortSetupTimerInterrupt+0x38>)
 8008008:	2200      	movs	r2, #0
 800800a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800800c:	4b0a      	ldr	r3, [pc, #40]	; (8008038 <vPortSetupTimerInterrupt+0x3c>)
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	4a0a      	ldr	r2, [pc, #40]	; (800803c <vPortSetupTimerInterrupt+0x40>)
 8008012:	fba2 2303 	umull	r2, r3, r2, r3
 8008016:	099b      	lsrs	r3, r3, #6
 8008018:	4a09      	ldr	r2, [pc, #36]	; (8008040 <vPortSetupTimerInterrupt+0x44>)
 800801a:	3b01      	subs	r3, #1
 800801c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800801e:	4b04      	ldr	r3, [pc, #16]	; (8008030 <vPortSetupTimerInterrupt+0x34>)
 8008020:	2207      	movs	r2, #7
 8008022:	601a      	str	r2, [r3, #0]
}
 8008024:	bf00      	nop
 8008026:	46bd      	mov	sp, r7
 8008028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800802c:	4770      	bx	lr
 800802e:	bf00      	nop
 8008030:	e000e010 	.word	0xe000e010
 8008034:	e000e018 	.word	0xe000e018
 8008038:	20000000 	.word	0x20000000
 800803c:	10624dd3 	.word	0x10624dd3
 8008040:	e000e014 	.word	0xe000e014

08008044 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008044:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008054 <vPortEnableVFP+0x10>
 8008048:	6801      	ldr	r1, [r0, #0]
 800804a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800804e:	6001      	str	r1, [r0, #0]
 8008050:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008052:	bf00      	nop
 8008054:	e000ed88 	.word	0xe000ed88

08008058 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008058:	b480      	push	{r7}
 800805a:	b085      	sub	sp, #20
 800805c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800805e:	f3ef 8305 	mrs	r3, IPSR
 8008062:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	2b0f      	cmp	r3, #15
 8008068:	d914      	bls.n	8008094 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800806a:	4a17      	ldr	r2, [pc, #92]	; (80080c8 <vPortValidateInterruptPriority+0x70>)
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	4413      	add	r3, r2
 8008070:	781b      	ldrb	r3, [r3, #0]
 8008072:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008074:	4b15      	ldr	r3, [pc, #84]	; (80080cc <vPortValidateInterruptPriority+0x74>)
 8008076:	781b      	ldrb	r3, [r3, #0]
 8008078:	7afa      	ldrb	r2, [r7, #11]
 800807a:	429a      	cmp	r2, r3
 800807c:	d20a      	bcs.n	8008094 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800807e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008082:	f383 8811 	msr	BASEPRI, r3
 8008086:	f3bf 8f6f 	isb	sy
 800808a:	f3bf 8f4f 	dsb	sy
 800808e:	607b      	str	r3, [r7, #4]
}
 8008090:	bf00      	nop
 8008092:	e7fe      	b.n	8008092 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008094:	4b0e      	ldr	r3, [pc, #56]	; (80080d0 <vPortValidateInterruptPriority+0x78>)
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800809c:	4b0d      	ldr	r3, [pc, #52]	; (80080d4 <vPortValidateInterruptPriority+0x7c>)
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	429a      	cmp	r2, r3
 80080a2:	d90a      	bls.n	80080ba <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80080a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080a8:	f383 8811 	msr	BASEPRI, r3
 80080ac:	f3bf 8f6f 	isb	sy
 80080b0:	f3bf 8f4f 	dsb	sy
 80080b4:	603b      	str	r3, [r7, #0]
}
 80080b6:	bf00      	nop
 80080b8:	e7fe      	b.n	80080b8 <vPortValidateInterruptPriority+0x60>
	}
 80080ba:	bf00      	nop
 80080bc:	3714      	adds	r7, #20
 80080be:	46bd      	mov	sp, r7
 80080c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c4:	4770      	bx	lr
 80080c6:	bf00      	nop
 80080c8:	e000e3f0 	.word	0xe000e3f0
 80080cc:	200008ec 	.word	0x200008ec
 80080d0:	e000ed0c 	.word	0xe000ed0c
 80080d4:	200008f0 	.word	0x200008f0

080080d8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80080d8:	b580      	push	{r7, lr}
 80080da:	b08a      	sub	sp, #40	; 0x28
 80080dc:	af00      	add	r7, sp, #0
 80080de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80080e0:	2300      	movs	r3, #0
 80080e2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80080e4:	f7fe f9b0 	bl	8006448 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80080e8:	4b58      	ldr	r3, [pc, #352]	; (800824c <pvPortMalloc+0x174>)
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d101      	bne.n	80080f4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80080f0:	f000 f910 	bl	8008314 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80080f4:	4b56      	ldr	r3, [pc, #344]	; (8008250 <pvPortMalloc+0x178>)
 80080f6:	681a      	ldr	r2, [r3, #0]
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	4013      	ands	r3, r2
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	f040 808e 	bne.w	800821e <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	2b00      	cmp	r3, #0
 8008106:	d01d      	beq.n	8008144 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8008108:	2208      	movs	r2, #8
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	4413      	add	r3, r2
 800810e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	f003 0307 	and.w	r3, r3, #7
 8008116:	2b00      	cmp	r3, #0
 8008118:	d014      	beq.n	8008144 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	f023 0307 	bic.w	r3, r3, #7
 8008120:	3308      	adds	r3, #8
 8008122:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	f003 0307 	and.w	r3, r3, #7
 800812a:	2b00      	cmp	r3, #0
 800812c:	d00a      	beq.n	8008144 <pvPortMalloc+0x6c>
	__asm volatile
 800812e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008132:	f383 8811 	msr	BASEPRI, r3
 8008136:	f3bf 8f6f 	isb	sy
 800813a:	f3bf 8f4f 	dsb	sy
 800813e:	617b      	str	r3, [r7, #20]
}
 8008140:	bf00      	nop
 8008142:	e7fe      	b.n	8008142 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	2b00      	cmp	r3, #0
 8008148:	d069      	beq.n	800821e <pvPortMalloc+0x146>
 800814a:	4b42      	ldr	r3, [pc, #264]	; (8008254 <pvPortMalloc+0x17c>)
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	687a      	ldr	r2, [r7, #4]
 8008150:	429a      	cmp	r2, r3
 8008152:	d864      	bhi.n	800821e <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008154:	4b40      	ldr	r3, [pc, #256]	; (8008258 <pvPortMalloc+0x180>)
 8008156:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008158:	4b3f      	ldr	r3, [pc, #252]	; (8008258 <pvPortMalloc+0x180>)
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800815e:	e004      	b.n	800816a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008162:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800816a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800816c:	685b      	ldr	r3, [r3, #4]
 800816e:	687a      	ldr	r2, [r7, #4]
 8008170:	429a      	cmp	r2, r3
 8008172:	d903      	bls.n	800817c <pvPortMalloc+0xa4>
 8008174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	2b00      	cmp	r3, #0
 800817a:	d1f1      	bne.n	8008160 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800817c:	4b33      	ldr	r3, [pc, #204]	; (800824c <pvPortMalloc+0x174>)
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008182:	429a      	cmp	r2, r3
 8008184:	d04b      	beq.n	800821e <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008186:	6a3b      	ldr	r3, [r7, #32]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	2208      	movs	r2, #8
 800818c:	4413      	add	r3, r2
 800818e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008192:	681a      	ldr	r2, [r3, #0]
 8008194:	6a3b      	ldr	r3, [r7, #32]
 8008196:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800819a:	685a      	ldr	r2, [r3, #4]
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	1ad2      	subs	r2, r2, r3
 80081a0:	2308      	movs	r3, #8
 80081a2:	005b      	lsls	r3, r3, #1
 80081a4:	429a      	cmp	r2, r3
 80081a6:	d91f      	bls.n	80081e8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80081a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	4413      	add	r3, r2
 80081ae:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80081b0:	69bb      	ldr	r3, [r7, #24]
 80081b2:	f003 0307 	and.w	r3, r3, #7
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d00a      	beq.n	80081d0 <pvPortMalloc+0xf8>
	__asm volatile
 80081ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081be:	f383 8811 	msr	BASEPRI, r3
 80081c2:	f3bf 8f6f 	isb	sy
 80081c6:	f3bf 8f4f 	dsb	sy
 80081ca:	613b      	str	r3, [r7, #16]
}
 80081cc:	bf00      	nop
 80081ce:	e7fe      	b.n	80081ce <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80081d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081d2:	685a      	ldr	r2, [r3, #4]
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	1ad2      	subs	r2, r2, r3
 80081d8:	69bb      	ldr	r3, [r7, #24]
 80081da:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80081dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081de:	687a      	ldr	r2, [r7, #4]
 80081e0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80081e2:	69b8      	ldr	r0, [r7, #24]
 80081e4:	f000 f8f8 	bl	80083d8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80081e8:	4b1a      	ldr	r3, [pc, #104]	; (8008254 <pvPortMalloc+0x17c>)
 80081ea:	681a      	ldr	r2, [r3, #0]
 80081ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081ee:	685b      	ldr	r3, [r3, #4]
 80081f0:	1ad3      	subs	r3, r2, r3
 80081f2:	4a18      	ldr	r2, [pc, #96]	; (8008254 <pvPortMalloc+0x17c>)
 80081f4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80081f6:	4b17      	ldr	r3, [pc, #92]	; (8008254 <pvPortMalloc+0x17c>)
 80081f8:	681a      	ldr	r2, [r3, #0]
 80081fa:	4b18      	ldr	r3, [pc, #96]	; (800825c <pvPortMalloc+0x184>)
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	429a      	cmp	r2, r3
 8008200:	d203      	bcs.n	800820a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008202:	4b14      	ldr	r3, [pc, #80]	; (8008254 <pvPortMalloc+0x17c>)
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	4a15      	ldr	r2, [pc, #84]	; (800825c <pvPortMalloc+0x184>)
 8008208:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800820a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800820c:	685a      	ldr	r2, [r3, #4]
 800820e:	4b10      	ldr	r3, [pc, #64]	; (8008250 <pvPortMalloc+0x178>)
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	431a      	orrs	r2, r3
 8008214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008216:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800821a:	2200      	movs	r2, #0
 800821c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800821e:	f7fe f921 	bl	8006464 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008222:	69fb      	ldr	r3, [r7, #28]
 8008224:	f003 0307 	and.w	r3, r3, #7
 8008228:	2b00      	cmp	r3, #0
 800822a:	d00a      	beq.n	8008242 <pvPortMalloc+0x16a>
	__asm volatile
 800822c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008230:	f383 8811 	msr	BASEPRI, r3
 8008234:	f3bf 8f6f 	isb	sy
 8008238:	f3bf 8f4f 	dsb	sy
 800823c:	60fb      	str	r3, [r7, #12]
}
 800823e:	bf00      	nop
 8008240:	e7fe      	b.n	8008240 <pvPortMalloc+0x168>
	return pvReturn;
 8008242:	69fb      	ldr	r3, [r7, #28]
}
 8008244:	4618      	mov	r0, r3
 8008246:	3728      	adds	r7, #40	; 0x28
 8008248:	46bd      	mov	sp, r7
 800824a:	bd80      	pop	{r7, pc}
 800824c:	20002454 	.word	0x20002454
 8008250:	20002460 	.word	0x20002460
 8008254:	20002458 	.word	0x20002458
 8008258:	2000244c 	.word	0x2000244c
 800825c:	2000245c 	.word	0x2000245c

08008260 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008260:	b580      	push	{r7, lr}
 8008262:	b086      	sub	sp, #24
 8008264:	af00      	add	r7, sp, #0
 8008266:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	2b00      	cmp	r3, #0
 8008270:	d048      	beq.n	8008304 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008272:	2308      	movs	r3, #8
 8008274:	425b      	negs	r3, r3
 8008276:	697a      	ldr	r2, [r7, #20]
 8008278:	4413      	add	r3, r2
 800827a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800827c:	697b      	ldr	r3, [r7, #20]
 800827e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008280:	693b      	ldr	r3, [r7, #16]
 8008282:	685a      	ldr	r2, [r3, #4]
 8008284:	4b21      	ldr	r3, [pc, #132]	; (800830c <vPortFree+0xac>)
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	4013      	ands	r3, r2
 800828a:	2b00      	cmp	r3, #0
 800828c:	d10a      	bne.n	80082a4 <vPortFree+0x44>
	__asm volatile
 800828e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008292:	f383 8811 	msr	BASEPRI, r3
 8008296:	f3bf 8f6f 	isb	sy
 800829a:	f3bf 8f4f 	dsb	sy
 800829e:	60fb      	str	r3, [r7, #12]
}
 80082a0:	bf00      	nop
 80082a2:	e7fe      	b.n	80082a2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80082a4:	693b      	ldr	r3, [r7, #16]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d00a      	beq.n	80082c2 <vPortFree+0x62>
	__asm volatile
 80082ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082b0:	f383 8811 	msr	BASEPRI, r3
 80082b4:	f3bf 8f6f 	isb	sy
 80082b8:	f3bf 8f4f 	dsb	sy
 80082bc:	60bb      	str	r3, [r7, #8]
}
 80082be:	bf00      	nop
 80082c0:	e7fe      	b.n	80082c0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80082c2:	693b      	ldr	r3, [r7, #16]
 80082c4:	685a      	ldr	r2, [r3, #4]
 80082c6:	4b11      	ldr	r3, [pc, #68]	; (800830c <vPortFree+0xac>)
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	4013      	ands	r3, r2
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d019      	beq.n	8008304 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80082d0:	693b      	ldr	r3, [r7, #16]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d115      	bne.n	8008304 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80082d8:	693b      	ldr	r3, [r7, #16]
 80082da:	685a      	ldr	r2, [r3, #4]
 80082dc:	4b0b      	ldr	r3, [pc, #44]	; (800830c <vPortFree+0xac>)
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	43db      	mvns	r3, r3
 80082e2:	401a      	ands	r2, r3
 80082e4:	693b      	ldr	r3, [r7, #16]
 80082e6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80082e8:	f7fe f8ae 	bl	8006448 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80082ec:	693b      	ldr	r3, [r7, #16]
 80082ee:	685a      	ldr	r2, [r3, #4]
 80082f0:	4b07      	ldr	r3, [pc, #28]	; (8008310 <vPortFree+0xb0>)
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	4413      	add	r3, r2
 80082f6:	4a06      	ldr	r2, [pc, #24]	; (8008310 <vPortFree+0xb0>)
 80082f8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80082fa:	6938      	ldr	r0, [r7, #16]
 80082fc:	f000 f86c 	bl	80083d8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8008300:	f7fe f8b0 	bl	8006464 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008304:	bf00      	nop
 8008306:	3718      	adds	r7, #24
 8008308:	46bd      	mov	sp, r7
 800830a:	bd80      	pop	{r7, pc}
 800830c:	20002460 	.word	0x20002460
 8008310:	20002458 	.word	0x20002458

08008314 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008314:	b480      	push	{r7}
 8008316:	b085      	sub	sp, #20
 8008318:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800831a:	f641 3358 	movw	r3, #7000	; 0x1b58
 800831e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008320:	4b27      	ldr	r3, [pc, #156]	; (80083c0 <prvHeapInit+0xac>)
 8008322:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	f003 0307 	and.w	r3, r3, #7
 800832a:	2b00      	cmp	r3, #0
 800832c:	d00c      	beq.n	8008348 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	3307      	adds	r3, #7
 8008332:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	f023 0307 	bic.w	r3, r3, #7
 800833a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800833c:	68ba      	ldr	r2, [r7, #8]
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	1ad3      	subs	r3, r2, r3
 8008342:	4a1f      	ldr	r2, [pc, #124]	; (80083c0 <prvHeapInit+0xac>)
 8008344:	4413      	add	r3, r2
 8008346:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800834c:	4a1d      	ldr	r2, [pc, #116]	; (80083c4 <prvHeapInit+0xb0>)
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008352:	4b1c      	ldr	r3, [pc, #112]	; (80083c4 <prvHeapInit+0xb0>)
 8008354:	2200      	movs	r2, #0
 8008356:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	68ba      	ldr	r2, [r7, #8]
 800835c:	4413      	add	r3, r2
 800835e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008360:	2208      	movs	r2, #8
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	1a9b      	subs	r3, r3, r2
 8008366:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	f023 0307 	bic.w	r3, r3, #7
 800836e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	4a15      	ldr	r2, [pc, #84]	; (80083c8 <prvHeapInit+0xb4>)
 8008374:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008376:	4b14      	ldr	r3, [pc, #80]	; (80083c8 <prvHeapInit+0xb4>)
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	2200      	movs	r2, #0
 800837c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800837e:	4b12      	ldr	r3, [pc, #72]	; (80083c8 <prvHeapInit+0xb4>)
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	2200      	movs	r2, #0
 8008384:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800838a:	683b      	ldr	r3, [r7, #0]
 800838c:	68fa      	ldr	r2, [r7, #12]
 800838e:	1ad2      	subs	r2, r2, r3
 8008390:	683b      	ldr	r3, [r7, #0]
 8008392:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008394:	4b0c      	ldr	r3, [pc, #48]	; (80083c8 <prvHeapInit+0xb4>)
 8008396:	681a      	ldr	r2, [r3, #0]
 8008398:	683b      	ldr	r3, [r7, #0]
 800839a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800839c:	683b      	ldr	r3, [r7, #0]
 800839e:	685b      	ldr	r3, [r3, #4]
 80083a0:	4a0a      	ldr	r2, [pc, #40]	; (80083cc <prvHeapInit+0xb8>)
 80083a2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80083a4:	683b      	ldr	r3, [r7, #0]
 80083a6:	685b      	ldr	r3, [r3, #4]
 80083a8:	4a09      	ldr	r2, [pc, #36]	; (80083d0 <prvHeapInit+0xbc>)
 80083aa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80083ac:	4b09      	ldr	r3, [pc, #36]	; (80083d4 <prvHeapInit+0xc0>)
 80083ae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80083b2:	601a      	str	r2, [r3, #0]
}
 80083b4:	bf00      	nop
 80083b6:	3714      	adds	r7, #20
 80083b8:	46bd      	mov	sp, r7
 80083ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083be:	4770      	bx	lr
 80083c0:	200008f4 	.word	0x200008f4
 80083c4:	2000244c 	.word	0x2000244c
 80083c8:	20002454 	.word	0x20002454
 80083cc:	2000245c 	.word	0x2000245c
 80083d0:	20002458 	.word	0x20002458
 80083d4:	20002460 	.word	0x20002460

080083d8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80083d8:	b480      	push	{r7}
 80083da:	b085      	sub	sp, #20
 80083dc:	af00      	add	r7, sp, #0
 80083de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80083e0:	4b28      	ldr	r3, [pc, #160]	; (8008484 <prvInsertBlockIntoFreeList+0xac>)
 80083e2:	60fb      	str	r3, [r7, #12]
 80083e4:	e002      	b.n	80083ec <prvInsertBlockIntoFreeList+0x14>
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	60fb      	str	r3, [r7, #12]
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	687a      	ldr	r2, [r7, #4]
 80083f2:	429a      	cmp	r2, r3
 80083f4:	d8f7      	bhi.n	80083e6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	685b      	ldr	r3, [r3, #4]
 80083fe:	68ba      	ldr	r2, [r7, #8]
 8008400:	4413      	add	r3, r2
 8008402:	687a      	ldr	r2, [r7, #4]
 8008404:	429a      	cmp	r2, r3
 8008406:	d108      	bne.n	800841a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	685a      	ldr	r2, [r3, #4]
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	685b      	ldr	r3, [r3, #4]
 8008410:	441a      	add	r2, r3
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	685b      	ldr	r3, [r3, #4]
 8008422:	68ba      	ldr	r2, [r7, #8]
 8008424:	441a      	add	r2, r3
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	429a      	cmp	r2, r3
 800842c:	d118      	bne.n	8008460 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	681a      	ldr	r2, [r3, #0]
 8008432:	4b15      	ldr	r3, [pc, #84]	; (8008488 <prvInsertBlockIntoFreeList+0xb0>)
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	429a      	cmp	r2, r3
 8008438:	d00d      	beq.n	8008456 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	685a      	ldr	r2, [r3, #4]
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	685b      	ldr	r3, [r3, #4]
 8008444:	441a      	add	r2, r3
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	681a      	ldr	r2, [r3, #0]
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	601a      	str	r2, [r3, #0]
 8008454:	e008      	b.n	8008468 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008456:	4b0c      	ldr	r3, [pc, #48]	; (8008488 <prvInsertBlockIntoFreeList+0xb0>)
 8008458:	681a      	ldr	r2, [r3, #0]
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	601a      	str	r2, [r3, #0]
 800845e:	e003      	b.n	8008468 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	681a      	ldr	r2, [r3, #0]
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008468:	68fa      	ldr	r2, [r7, #12]
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	429a      	cmp	r2, r3
 800846e:	d002      	beq.n	8008476 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	687a      	ldr	r2, [r7, #4]
 8008474:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008476:	bf00      	nop
 8008478:	3714      	adds	r7, #20
 800847a:	46bd      	mov	sp, r7
 800847c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008480:	4770      	bx	lr
 8008482:	bf00      	nop
 8008484:	2000244c 	.word	0x2000244c
 8008488:	20002454 	.word	0x20002454

0800848c <arm_mean_q15>:
 800848c:	ea5f 0c91 	movs.w	ip, r1, lsr #2
 8008490:	b4f0      	push	{r4, r5, r6, r7}
 8008492:	d028      	beq.n	80084e6 <arm_mean_q15+0x5a>
 8008494:	4604      	mov	r4, r0
 8008496:	4665      	mov	r5, ip
 8008498:	2300      	movs	r3, #0
 800849a:	6827      	ldr	r7, [r4, #0]
 800849c:	6866      	ldr	r6, [r4, #4]
 800849e:	fa03 f387 	sxtah	r3, r3, r7
 80084a2:	eb03 4327 	add.w	r3, r3, r7, asr #16
 80084a6:	fa03 f386 	sxtah	r3, r3, r6
 80084aa:	3d01      	subs	r5, #1
 80084ac:	eb03 4326 	add.w	r3, r3, r6, asr #16
 80084b0:	f104 0408 	add.w	r4, r4, #8
 80084b4:	d1f1      	bne.n	800849a <arm_mean_q15+0xe>
 80084b6:	eb00 00cc 	add.w	r0, r0, ip, lsl #3
 80084ba:	f011 0403 	ands.w	r4, r1, #3
 80084be:	d00d      	beq.n	80084dc <arm_mean_q15+0x50>
 80084c0:	f9b0 5000 	ldrsh.w	r5, [r0]
 80084c4:	3c01      	subs	r4, #1
 80084c6:	442b      	add	r3, r5
 80084c8:	d008      	beq.n	80084dc <arm_mean_q15+0x50>
 80084ca:	f9b0 5002 	ldrsh.w	r5, [r0, #2]
 80084ce:	2c01      	cmp	r4, #1
 80084d0:	bf18      	it	ne
 80084d2:	f9b0 0004 	ldrshne.w	r0, [r0, #4]
 80084d6:	442b      	add	r3, r5
 80084d8:	bf18      	it	ne
 80084da:	181b      	addne	r3, r3, r0
 80084dc:	fb93 f3f1 	sdiv	r3, r3, r1
 80084e0:	bcf0      	pop	{r4, r5, r6, r7}
 80084e2:	8013      	strh	r3, [r2, #0]
 80084e4:	4770      	bx	lr
 80084e6:	4663      	mov	r3, ip
 80084e8:	e7e7      	b.n	80084ba <arm_mean_q15+0x2e>
 80084ea:	bf00      	nop

080084ec <__errno>:
 80084ec:	4b01      	ldr	r3, [pc, #4]	; (80084f4 <__errno+0x8>)
 80084ee:	6818      	ldr	r0, [r3, #0]
 80084f0:	4770      	bx	lr
 80084f2:	bf00      	nop
 80084f4:	20000010 	.word	0x20000010

080084f8 <__libc_init_array>:
 80084f8:	b570      	push	{r4, r5, r6, lr}
 80084fa:	4d0d      	ldr	r5, [pc, #52]	; (8008530 <__libc_init_array+0x38>)
 80084fc:	4c0d      	ldr	r4, [pc, #52]	; (8008534 <__libc_init_array+0x3c>)
 80084fe:	1b64      	subs	r4, r4, r5
 8008500:	10a4      	asrs	r4, r4, #2
 8008502:	2600      	movs	r6, #0
 8008504:	42a6      	cmp	r6, r4
 8008506:	d109      	bne.n	800851c <__libc_init_array+0x24>
 8008508:	4d0b      	ldr	r5, [pc, #44]	; (8008538 <__libc_init_array+0x40>)
 800850a:	4c0c      	ldr	r4, [pc, #48]	; (800853c <__libc_init_array+0x44>)
 800850c:	f000 fcf8 	bl	8008f00 <_init>
 8008510:	1b64      	subs	r4, r4, r5
 8008512:	10a4      	asrs	r4, r4, #2
 8008514:	2600      	movs	r6, #0
 8008516:	42a6      	cmp	r6, r4
 8008518:	d105      	bne.n	8008526 <__libc_init_array+0x2e>
 800851a:	bd70      	pop	{r4, r5, r6, pc}
 800851c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008520:	4798      	blx	r3
 8008522:	3601      	adds	r6, #1
 8008524:	e7ee      	b.n	8008504 <__libc_init_array+0xc>
 8008526:	f855 3b04 	ldr.w	r3, [r5], #4
 800852a:	4798      	blx	r3
 800852c:	3601      	adds	r6, #1
 800852e:	e7f2      	b.n	8008516 <__libc_init_array+0x1e>
 8008530:	080090c4 	.word	0x080090c4
 8008534:	080090c4 	.word	0x080090c4
 8008538:	080090c4 	.word	0x080090c4
 800853c:	080090c8 	.word	0x080090c8

08008540 <__retarget_lock_acquire_recursive>:
 8008540:	4770      	bx	lr

08008542 <__retarget_lock_release_recursive>:
 8008542:	4770      	bx	lr

08008544 <memcpy>:
 8008544:	440a      	add	r2, r1
 8008546:	4291      	cmp	r1, r2
 8008548:	f100 33ff 	add.w	r3, r0, #4294967295
 800854c:	d100      	bne.n	8008550 <memcpy+0xc>
 800854e:	4770      	bx	lr
 8008550:	b510      	push	{r4, lr}
 8008552:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008556:	f803 4f01 	strb.w	r4, [r3, #1]!
 800855a:	4291      	cmp	r1, r2
 800855c:	d1f9      	bne.n	8008552 <memcpy+0xe>
 800855e:	bd10      	pop	{r4, pc}

08008560 <memset>:
 8008560:	4402      	add	r2, r0
 8008562:	4603      	mov	r3, r0
 8008564:	4293      	cmp	r3, r2
 8008566:	d100      	bne.n	800856a <memset+0xa>
 8008568:	4770      	bx	lr
 800856a:	f803 1b01 	strb.w	r1, [r3], #1
 800856e:	e7f9      	b.n	8008564 <memset+0x4>

08008570 <sbrk_aligned>:
 8008570:	b570      	push	{r4, r5, r6, lr}
 8008572:	4e0e      	ldr	r6, [pc, #56]	; (80085ac <sbrk_aligned+0x3c>)
 8008574:	460c      	mov	r4, r1
 8008576:	6831      	ldr	r1, [r6, #0]
 8008578:	4605      	mov	r5, r0
 800857a:	b911      	cbnz	r1, 8008582 <sbrk_aligned+0x12>
 800857c:	f000 f8f6 	bl	800876c <_sbrk_r>
 8008580:	6030      	str	r0, [r6, #0]
 8008582:	4621      	mov	r1, r4
 8008584:	4628      	mov	r0, r5
 8008586:	f000 f8f1 	bl	800876c <_sbrk_r>
 800858a:	1c43      	adds	r3, r0, #1
 800858c:	d00a      	beq.n	80085a4 <sbrk_aligned+0x34>
 800858e:	1cc4      	adds	r4, r0, #3
 8008590:	f024 0403 	bic.w	r4, r4, #3
 8008594:	42a0      	cmp	r0, r4
 8008596:	d007      	beq.n	80085a8 <sbrk_aligned+0x38>
 8008598:	1a21      	subs	r1, r4, r0
 800859a:	4628      	mov	r0, r5
 800859c:	f000 f8e6 	bl	800876c <_sbrk_r>
 80085a0:	3001      	adds	r0, #1
 80085a2:	d101      	bne.n	80085a8 <sbrk_aligned+0x38>
 80085a4:	f04f 34ff 	mov.w	r4, #4294967295
 80085a8:	4620      	mov	r0, r4
 80085aa:	bd70      	pop	{r4, r5, r6, pc}
 80085ac:	2000246c 	.word	0x2000246c

080085b0 <_malloc_r>:
 80085b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80085b4:	1ccd      	adds	r5, r1, #3
 80085b6:	f025 0503 	bic.w	r5, r5, #3
 80085ba:	3508      	adds	r5, #8
 80085bc:	2d0c      	cmp	r5, #12
 80085be:	bf38      	it	cc
 80085c0:	250c      	movcc	r5, #12
 80085c2:	2d00      	cmp	r5, #0
 80085c4:	4607      	mov	r7, r0
 80085c6:	db01      	blt.n	80085cc <_malloc_r+0x1c>
 80085c8:	42a9      	cmp	r1, r5
 80085ca:	d905      	bls.n	80085d8 <_malloc_r+0x28>
 80085cc:	230c      	movs	r3, #12
 80085ce:	603b      	str	r3, [r7, #0]
 80085d0:	2600      	movs	r6, #0
 80085d2:	4630      	mov	r0, r6
 80085d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80085d8:	4e2e      	ldr	r6, [pc, #184]	; (8008694 <_malloc_r+0xe4>)
 80085da:	f000 f8f7 	bl	80087cc <__malloc_lock>
 80085de:	6833      	ldr	r3, [r6, #0]
 80085e0:	461c      	mov	r4, r3
 80085e2:	bb34      	cbnz	r4, 8008632 <_malloc_r+0x82>
 80085e4:	4629      	mov	r1, r5
 80085e6:	4638      	mov	r0, r7
 80085e8:	f7ff ffc2 	bl	8008570 <sbrk_aligned>
 80085ec:	1c43      	adds	r3, r0, #1
 80085ee:	4604      	mov	r4, r0
 80085f0:	d14d      	bne.n	800868e <_malloc_r+0xde>
 80085f2:	6834      	ldr	r4, [r6, #0]
 80085f4:	4626      	mov	r6, r4
 80085f6:	2e00      	cmp	r6, #0
 80085f8:	d140      	bne.n	800867c <_malloc_r+0xcc>
 80085fa:	6823      	ldr	r3, [r4, #0]
 80085fc:	4631      	mov	r1, r6
 80085fe:	4638      	mov	r0, r7
 8008600:	eb04 0803 	add.w	r8, r4, r3
 8008604:	f000 f8b2 	bl	800876c <_sbrk_r>
 8008608:	4580      	cmp	r8, r0
 800860a:	d13a      	bne.n	8008682 <_malloc_r+0xd2>
 800860c:	6821      	ldr	r1, [r4, #0]
 800860e:	3503      	adds	r5, #3
 8008610:	1a6d      	subs	r5, r5, r1
 8008612:	f025 0503 	bic.w	r5, r5, #3
 8008616:	3508      	adds	r5, #8
 8008618:	2d0c      	cmp	r5, #12
 800861a:	bf38      	it	cc
 800861c:	250c      	movcc	r5, #12
 800861e:	4629      	mov	r1, r5
 8008620:	4638      	mov	r0, r7
 8008622:	f7ff ffa5 	bl	8008570 <sbrk_aligned>
 8008626:	3001      	adds	r0, #1
 8008628:	d02b      	beq.n	8008682 <_malloc_r+0xd2>
 800862a:	6823      	ldr	r3, [r4, #0]
 800862c:	442b      	add	r3, r5
 800862e:	6023      	str	r3, [r4, #0]
 8008630:	e00e      	b.n	8008650 <_malloc_r+0xa0>
 8008632:	6822      	ldr	r2, [r4, #0]
 8008634:	1b52      	subs	r2, r2, r5
 8008636:	d41e      	bmi.n	8008676 <_malloc_r+0xc6>
 8008638:	2a0b      	cmp	r2, #11
 800863a:	d916      	bls.n	800866a <_malloc_r+0xba>
 800863c:	1961      	adds	r1, r4, r5
 800863e:	42a3      	cmp	r3, r4
 8008640:	6025      	str	r5, [r4, #0]
 8008642:	bf18      	it	ne
 8008644:	6059      	strne	r1, [r3, #4]
 8008646:	6863      	ldr	r3, [r4, #4]
 8008648:	bf08      	it	eq
 800864a:	6031      	streq	r1, [r6, #0]
 800864c:	5162      	str	r2, [r4, r5]
 800864e:	604b      	str	r3, [r1, #4]
 8008650:	4638      	mov	r0, r7
 8008652:	f104 060b 	add.w	r6, r4, #11
 8008656:	f000 f8bf 	bl	80087d8 <__malloc_unlock>
 800865a:	f026 0607 	bic.w	r6, r6, #7
 800865e:	1d23      	adds	r3, r4, #4
 8008660:	1af2      	subs	r2, r6, r3
 8008662:	d0b6      	beq.n	80085d2 <_malloc_r+0x22>
 8008664:	1b9b      	subs	r3, r3, r6
 8008666:	50a3      	str	r3, [r4, r2]
 8008668:	e7b3      	b.n	80085d2 <_malloc_r+0x22>
 800866a:	6862      	ldr	r2, [r4, #4]
 800866c:	42a3      	cmp	r3, r4
 800866e:	bf0c      	ite	eq
 8008670:	6032      	streq	r2, [r6, #0]
 8008672:	605a      	strne	r2, [r3, #4]
 8008674:	e7ec      	b.n	8008650 <_malloc_r+0xa0>
 8008676:	4623      	mov	r3, r4
 8008678:	6864      	ldr	r4, [r4, #4]
 800867a:	e7b2      	b.n	80085e2 <_malloc_r+0x32>
 800867c:	4634      	mov	r4, r6
 800867e:	6876      	ldr	r6, [r6, #4]
 8008680:	e7b9      	b.n	80085f6 <_malloc_r+0x46>
 8008682:	230c      	movs	r3, #12
 8008684:	603b      	str	r3, [r7, #0]
 8008686:	4638      	mov	r0, r7
 8008688:	f000 f8a6 	bl	80087d8 <__malloc_unlock>
 800868c:	e7a1      	b.n	80085d2 <_malloc_r+0x22>
 800868e:	6025      	str	r5, [r4, #0]
 8008690:	e7de      	b.n	8008650 <_malloc_r+0xa0>
 8008692:	bf00      	nop
 8008694:	20002468 	.word	0x20002468

08008698 <cleanup_glue>:
 8008698:	b538      	push	{r3, r4, r5, lr}
 800869a:	460c      	mov	r4, r1
 800869c:	6809      	ldr	r1, [r1, #0]
 800869e:	4605      	mov	r5, r0
 80086a0:	b109      	cbz	r1, 80086a6 <cleanup_glue+0xe>
 80086a2:	f7ff fff9 	bl	8008698 <cleanup_glue>
 80086a6:	4621      	mov	r1, r4
 80086a8:	4628      	mov	r0, r5
 80086aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80086ae:	f000 b899 	b.w	80087e4 <_free_r>
	...

080086b4 <_reclaim_reent>:
 80086b4:	4b2c      	ldr	r3, [pc, #176]	; (8008768 <_reclaim_reent+0xb4>)
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	4283      	cmp	r3, r0
 80086ba:	b570      	push	{r4, r5, r6, lr}
 80086bc:	4604      	mov	r4, r0
 80086be:	d051      	beq.n	8008764 <_reclaim_reent+0xb0>
 80086c0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80086c2:	b143      	cbz	r3, 80086d6 <_reclaim_reent+0x22>
 80086c4:	68db      	ldr	r3, [r3, #12]
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d14a      	bne.n	8008760 <_reclaim_reent+0xac>
 80086ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80086cc:	6819      	ldr	r1, [r3, #0]
 80086ce:	b111      	cbz	r1, 80086d6 <_reclaim_reent+0x22>
 80086d0:	4620      	mov	r0, r4
 80086d2:	f000 f887 	bl	80087e4 <_free_r>
 80086d6:	6961      	ldr	r1, [r4, #20]
 80086d8:	b111      	cbz	r1, 80086e0 <_reclaim_reent+0x2c>
 80086da:	4620      	mov	r0, r4
 80086dc:	f000 f882 	bl	80087e4 <_free_r>
 80086e0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80086e2:	b111      	cbz	r1, 80086ea <_reclaim_reent+0x36>
 80086e4:	4620      	mov	r0, r4
 80086e6:	f000 f87d 	bl	80087e4 <_free_r>
 80086ea:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80086ec:	b111      	cbz	r1, 80086f4 <_reclaim_reent+0x40>
 80086ee:	4620      	mov	r0, r4
 80086f0:	f000 f878 	bl	80087e4 <_free_r>
 80086f4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80086f6:	b111      	cbz	r1, 80086fe <_reclaim_reent+0x4a>
 80086f8:	4620      	mov	r0, r4
 80086fa:	f000 f873 	bl	80087e4 <_free_r>
 80086fe:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8008700:	b111      	cbz	r1, 8008708 <_reclaim_reent+0x54>
 8008702:	4620      	mov	r0, r4
 8008704:	f000 f86e 	bl	80087e4 <_free_r>
 8008708:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800870a:	b111      	cbz	r1, 8008712 <_reclaim_reent+0x5e>
 800870c:	4620      	mov	r0, r4
 800870e:	f000 f869 	bl	80087e4 <_free_r>
 8008712:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8008714:	b111      	cbz	r1, 800871c <_reclaim_reent+0x68>
 8008716:	4620      	mov	r0, r4
 8008718:	f000 f864 	bl	80087e4 <_free_r>
 800871c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800871e:	b111      	cbz	r1, 8008726 <_reclaim_reent+0x72>
 8008720:	4620      	mov	r0, r4
 8008722:	f000 f85f 	bl	80087e4 <_free_r>
 8008726:	69a3      	ldr	r3, [r4, #24]
 8008728:	b1e3      	cbz	r3, 8008764 <_reclaim_reent+0xb0>
 800872a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800872c:	4620      	mov	r0, r4
 800872e:	4798      	blx	r3
 8008730:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8008732:	b1b9      	cbz	r1, 8008764 <_reclaim_reent+0xb0>
 8008734:	4620      	mov	r0, r4
 8008736:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800873a:	f7ff bfad 	b.w	8008698 <cleanup_glue>
 800873e:	5949      	ldr	r1, [r1, r5]
 8008740:	b941      	cbnz	r1, 8008754 <_reclaim_reent+0xa0>
 8008742:	3504      	adds	r5, #4
 8008744:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008746:	2d80      	cmp	r5, #128	; 0x80
 8008748:	68d9      	ldr	r1, [r3, #12]
 800874a:	d1f8      	bne.n	800873e <_reclaim_reent+0x8a>
 800874c:	4620      	mov	r0, r4
 800874e:	f000 f849 	bl	80087e4 <_free_r>
 8008752:	e7ba      	b.n	80086ca <_reclaim_reent+0x16>
 8008754:	680e      	ldr	r6, [r1, #0]
 8008756:	4620      	mov	r0, r4
 8008758:	f000 f844 	bl	80087e4 <_free_r>
 800875c:	4631      	mov	r1, r6
 800875e:	e7ef      	b.n	8008740 <_reclaim_reent+0x8c>
 8008760:	2500      	movs	r5, #0
 8008762:	e7ef      	b.n	8008744 <_reclaim_reent+0x90>
 8008764:	bd70      	pop	{r4, r5, r6, pc}
 8008766:	bf00      	nop
 8008768:	20000010 	.word	0x20000010

0800876c <_sbrk_r>:
 800876c:	b538      	push	{r3, r4, r5, lr}
 800876e:	4d06      	ldr	r5, [pc, #24]	; (8008788 <_sbrk_r+0x1c>)
 8008770:	2300      	movs	r3, #0
 8008772:	4604      	mov	r4, r0
 8008774:	4608      	mov	r0, r1
 8008776:	602b      	str	r3, [r5, #0]
 8008778:	f7f8 fc46 	bl	8001008 <_sbrk>
 800877c:	1c43      	adds	r3, r0, #1
 800877e:	d102      	bne.n	8008786 <_sbrk_r+0x1a>
 8008780:	682b      	ldr	r3, [r5, #0]
 8008782:	b103      	cbz	r3, 8008786 <_sbrk_r+0x1a>
 8008784:	6023      	str	r3, [r4, #0]
 8008786:	bd38      	pop	{r3, r4, r5, pc}
 8008788:	20002470 	.word	0x20002470

0800878c <siprintf>:
 800878c:	b40e      	push	{r1, r2, r3}
 800878e:	b500      	push	{lr}
 8008790:	b09c      	sub	sp, #112	; 0x70
 8008792:	ab1d      	add	r3, sp, #116	; 0x74
 8008794:	9002      	str	r0, [sp, #8]
 8008796:	9006      	str	r0, [sp, #24]
 8008798:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800879c:	4809      	ldr	r0, [pc, #36]	; (80087c4 <siprintf+0x38>)
 800879e:	9107      	str	r1, [sp, #28]
 80087a0:	9104      	str	r1, [sp, #16]
 80087a2:	4909      	ldr	r1, [pc, #36]	; (80087c8 <siprintf+0x3c>)
 80087a4:	f853 2b04 	ldr.w	r2, [r3], #4
 80087a8:	9105      	str	r1, [sp, #20]
 80087aa:	6800      	ldr	r0, [r0, #0]
 80087ac:	9301      	str	r3, [sp, #4]
 80087ae:	a902      	add	r1, sp, #8
 80087b0:	f000 f8c0 	bl	8008934 <_svfiprintf_r>
 80087b4:	9b02      	ldr	r3, [sp, #8]
 80087b6:	2200      	movs	r2, #0
 80087b8:	701a      	strb	r2, [r3, #0]
 80087ba:	b01c      	add	sp, #112	; 0x70
 80087bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80087c0:	b003      	add	sp, #12
 80087c2:	4770      	bx	lr
 80087c4:	20000010 	.word	0x20000010
 80087c8:	ffff0208 	.word	0xffff0208

080087cc <__malloc_lock>:
 80087cc:	4801      	ldr	r0, [pc, #4]	; (80087d4 <__malloc_lock+0x8>)
 80087ce:	f7ff beb7 	b.w	8008540 <__retarget_lock_acquire_recursive>
 80087d2:	bf00      	nop
 80087d4:	20002464 	.word	0x20002464

080087d8 <__malloc_unlock>:
 80087d8:	4801      	ldr	r0, [pc, #4]	; (80087e0 <__malloc_unlock+0x8>)
 80087da:	f7ff beb2 	b.w	8008542 <__retarget_lock_release_recursive>
 80087de:	bf00      	nop
 80087e0:	20002464 	.word	0x20002464

080087e4 <_free_r>:
 80087e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80087e6:	2900      	cmp	r1, #0
 80087e8:	d044      	beq.n	8008874 <_free_r+0x90>
 80087ea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80087ee:	9001      	str	r0, [sp, #4]
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	f1a1 0404 	sub.w	r4, r1, #4
 80087f6:	bfb8      	it	lt
 80087f8:	18e4      	addlt	r4, r4, r3
 80087fa:	f7ff ffe7 	bl	80087cc <__malloc_lock>
 80087fe:	4a1e      	ldr	r2, [pc, #120]	; (8008878 <_free_r+0x94>)
 8008800:	9801      	ldr	r0, [sp, #4]
 8008802:	6813      	ldr	r3, [r2, #0]
 8008804:	b933      	cbnz	r3, 8008814 <_free_r+0x30>
 8008806:	6063      	str	r3, [r4, #4]
 8008808:	6014      	str	r4, [r2, #0]
 800880a:	b003      	add	sp, #12
 800880c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008810:	f7ff bfe2 	b.w	80087d8 <__malloc_unlock>
 8008814:	42a3      	cmp	r3, r4
 8008816:	d908      	bls.n	800882a <_free_r+0x46>
 8008818:	6825      	ldr	r5, [r4, #0]
 800881a:	1961      	adds	r1, r4, r5
 800881c:	428b      	cmp	r3, r1
 800881e:	bf01      	itttt	eq
 8008820:	6819      	ldreq	r1, [r3, #0]
 8008822:	685b      	ldreq	r3, [r3, #4]
 8008824:	1949      	addeq	r1, r1, r5
 8008826:	6021      	streq	r1, [r4, #0]
 8008828:	e7ed      	b.n	8008806 <_free_r+0x22>
 800882a:	461a      	mov	r2, r3
 800882c:	685b      	ldr	r3, [r3, #4]
 800882e:	b10b      	cbz	r3, 8008834 <_free_r+0x50>
 8008830:	42a3      	cmp	r3, r4
 8008832:	d9fa      	bls.n	800882a <_free_r+0x46>
 8008834:	6811      	ldr	r1, [r2, #0]
 8008836:	1855      	adds	r5, r2, r1
 8008838:	42a5      	cmp	r5, r4
 800883a:	d10b      	bne.n	8008854 <_free_r+0x70>
 800883c:	6824      	ldr	r4, [r4, #0]
 800883e:	4421      	add	r1, r4
 8008840:	1854      	adds	r4, r2, r1
 8008842:	42a3      	cmp	r3, r4
 8008844:	6011      	str	r1, [r2, #0]
 8008846:	d1e0      	bne.n	800880a <_free_r+0x26>
 8008848:	681c      	ldr	r4, [r3, #0]
 800884a:	685b      	ldr	r3, [r3, #4]
 800884c:	6053      	str	r3, [r2, #4]
 800884e:	4421      	add	r1, r4
 8008850:	6011      	str	r1, [r2, #0]
 8008852:	e7da      	b.n	800880a <_free_r+0x26>
 8008854:	d902      	bls.n	800885c <_free_r+0x78>
 8008856:	230c      	movs	r3, #12
 8008858:	6003      	str	r3, [r0, #0]
 800885a:	e7d6      	b.n	800880a <_free_r+0x26>
 800885c:	6825      	ldr	r5, [r4, #0]
 800885e:	1961      	adds	r1, r4, r5
 8008860:	428b      	cmp	r3, r1
 8008862:	bf04      	itt	eq
 8008864:	6819      	ldreq	r1, [r3, #0]
 8008866:	685b      	ldreq	r3, [r3, #4]
 8008868:	6063      	str	r3, [r4, #4]
 800886a:	bf04      	itt	eq
 800886c:	1949      	addeq	r1, r1, r5
 800886e:	6021      	streq	r1, [r4, #0]
 8008870:	6054      	str	r4, [r2, #4]
 8008872:	e7ca      	b.n	800880a <_free_r+0x26>
 8008874:	b003      	add	sp, #12
 8008876:	bd30      	pop	{r4, r5, pc}
 8008878:	20002468 	.word	0x20002468

0800887c <__ssputs_r>:
 800887c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008880:	688e      	ldr	r6, [r1, #8]
 8008882:	429e      	cmp	r6, r3
 8008884:	4682      	mov	sl, r0
 8008886:	460c      	mov	r4, r1
 8008888:	4690      	mov	r8, r2
 800888a:	461f      	mov	r7, r3
 800888c:	d838      	bhi.n	8008900 <__ssputs_r+0x84>
 800888e:	898a      	ldrh	r2, [r1, #12]
 8008890:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008894:	d032      	beq.n	80088fc <__ssputs_r+0x80>
 8008896:	6825      	ldr	r5, [r4, #0]
 8008898:	6909      	ldr	r1, [r1, #16]
 800889a:	eba5 0901 	sub.w	r9, r5, r1
 800889e:	6965      	ldr	r5, [r4, #20]
 80088a0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80088a4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80088a8:	3301      	adds	r3, #1
 80088aa:	444b      	add	r3, r9
 80088ac:	106d      	asrs	r5, r5, #1
 80088ae:	429d      	cmp	r5, r3
 80088b0:	bf38      	it	cc
 80088b2:	461d      	movcc	r5, r3
 80088b4:	0553      	lsls	r3, r2, #21
 80088b6:	d531      	bpl.n	800891c <__ssputs_r+0xa0>
 80088b8:	4629      	mov	r1, r5
 80088ba:	f7ff fe79 	bl	80085b0 <_malloc_r>
 80088be:	4606      	mov	r6, r0
 80088c0:	b950      	cbnz	r0, 80088d8 <__ssputs_r+0x5c>
 80088c2:	230c      	movs	r3, #12
 80088c4:	f8ca 3000 	str.w	r3, [sl]
 80088c8:	89a3      	ldrh	r3, [r4, #12]
 80088ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80088ce:	81a3      	strh	r3, [r4, #12]
 80088d0:	f04f 30ff 	mov.w	r0, #4294967295
 80088d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80088d8:	6921      	ldr	r1, [r4, #16]
 80088da:	464a      	mov	r2, r9
 80088dc:	f7ff fe32 	bl	8008544 <memcpy>
 80088e0:	89a3      	ldrh	r3, [r4, #12]
 80088e2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80088e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80088ea:	81a3      	strh	r3, [r4, #12]
 80088ec:	6126      	str	r6, [r4, #16]
 80088ee:	6165      	str	r5, [r4, #20]
 80088f0:	444e      	add	r6, r9
 80088f2:	eba5 0509 	sub.w	r5, r5, r9
 80088f6:	6026      	str	r6, [r4, #0]
 80088f8:	60a5      	str	r5, [r4, #8]
 80088fa:	463e      	mov	r6, r7
 80088fc:	42be      	cmp	r6, r7
 80088fe:	d900      	bls.n	8008902 <__ssputs_r+0x86>
 8008900:	463e      	mov	r6, r7
 8008902:	6820      	ldr	r0, [r4, #0]
 8008904:	4632      	mov	r2, r6
 8008906:	4641      	mov	r1, r8
 8008908:	f000 faa8 	bl	8008e5c <memmove>
 800890c:	68a3      	ldr	r3, [r4, #8]
 800890e:	1b9b      	subs	r3, r3, r6
 8008910:	60a3      	str	r3, [r4, #8]
 8008912:	6823      	ldr	r3, [r4, #0]
 8008914:	4433      	add	r3, r6
 8008916:	6023      	str	r3, [r4, #0]
 8008918:	2000      	movs	r0, #0
 800891a:	e7db      	b.n	80088d4 <__ssputs_r+0x58>
 800891c:	462a      	mov	r2, r5
 800891e:	f000 fab7 	bl	8008e90 <_realloc_r>
 8008922:	4606      	mov	r6, r0
 8008924:	2800      	cmp	r0, #0
 8008926:	d1e1      	bne.n	80088ec <__ssputs_r+0x70>
 8008928:	6921      	ldr	r1, [r4, #16]
 800892a:	4650      	mov	r0, sl
 800892c:	f7ff ff5a 	bl	80087e4 <_free_r>
 8008930:	e7c7      	b.n	80088c2 <__ssputs_r+0x46>
	...

08008934 <_svfiprintf_r>:
 8008934:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008938:	4698      	mov	r8, r3
 800893a:	898b      	ldrh	r3, [r1, #12]
 800893c:	061b      	lsls	r3, r3, #24
 800893e:	b09d      	sub	sp, #116	; 0x74
 8008940:	4607      	mov	r7, r0
 8008942:	460d      	mov	r5, r1
 8008944:	4614      	mov	r4, r2
 8008946:	d50e      	bpl.n	8008966 <_svfiprintf_r+0x32>
 8008948:	690b      	ldr	r3, [r1, #16]
 800894a:	b963      	cbnz	r3, 8008966 <_svfiprintf_r+0x32>
 800894c:	2140      	movs	r1, #64	; 0x40
 800894e:	f7ff fe2f 	bl	80085b0 <_malloc_r>
 8008952:	6028      	str	r0, [r5, #0]
 8008954:	6128      	str	r0, [r5, #16]
 8008956:	b920      	cbnz	r0, 8008962 <_svfiprintf_r+0x2e>
 8008958:	230c      	movs	r3, #12
 800895a:	603b      	str	r3, [r7, #0]
 800895c:	f04f 30ff 	mov.w	r0, #4294967295
 8008960:	e0d1      	b.n	8008b06 <_svfiprintf_r+0x1d2>
 8008962:	2340      	movs	r3, #64	; 0x40
 8008964:	616b      	str	r3, [r5, #20]
 8008966:	2300      	movs	r3, #0
 8008968:	9309      	str	r3, [sp, #36]	; 0x24
 800896a:	2320      	movs	r3, #32
 800896c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008970:	f8cd 800c 	str.w	r8, [sp, #12]
 8008974:	2330      	movs	r3, #48	; 0x30
 8008976:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008b20 <_svfiprintf_r+0x1ec>
 800897a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800897e:	f04f 0901 	mov.w	r9, #1
 8008982:	4623      	mov	r3, r4
 8008984:	469a      	mov	sl, r3
 8008986:	f813 2b01 	ldrb.w	r2, [r3], #1
 800898a:	b10a      	cbz	r2, 8008990 <_svfiprintf_r+0x5c>
 800898c:	2a25      	cmp	r2, #37	; 0x25
 800898e:	d1f9      	bne.n	8008984 <_svfiprintf_r+0x50>
 8008990:	ebba 0b04 	subs.w	fp, sl, r4
 8008994:	d00b      	beq.n	80089ae <_svfiprintf_r+0x7a>
 8008996:	465b      	mov	r3, fp
 8008998:	4622      	mov	r2, r4
 800899a:	4629      	mov	r1, r5
 800899c:	4638      	mov	r0, r7
 800899e:	f7ff ff6d 	bl	800887c <__ssputs_r>
 80089a2:	3001      	adds	r0, #1
 80089a4:	f000 80aa 	beq.w	8008afc <_svfiprintf_r+0x1c8>
 80089a8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80089aa:	445a      	add	r2, fp
 80089ac:	9209      	str	r2, [sp, #36]	; 0x24
 80089ae:	f89a 3000 	ldrb.w	r3, [sl]
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	f000 80a2 	beq.w	8008afc <_svfiprintf_r+0x1c8>
 80089b8:	2300      	movs	r3, #0
 80089ba:	f04f 32ff 	mov.w	r2, #4294967295
 80089be:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80089c2:	f10a 0a01 	add.w	sl, sl, #1
 80089c6:	9304      	str	r3, [sp, #16]
 80089c8:	9307      	str	r3, [sp, #28]
 80089ca:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80089ce:	931a      	str	r3, [sp, #104]	; 0x68
 80089d0:	4654      	mov	r4, sl
 80089d2:	2205      	movs	r2, #5
 80089d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80089d8:	4851      	ldr	r0, [pc, #324]	; (8008b20 <_svfiprintf_r+0x1ec>)
 80089da:	f7f7 fc01 	bl	80001e0 <memchr>
 80089de:	9a04      	ldr	r2, [sp, #16]
 80089e0:	b9d8      	cbnz	r0, 8008a1a <_svfiprintf_r+0xe6>
 80089e2:	06d0      	lsls	r0, r2, #27
 80089e4:	bf44      	itt	mi
 80089e6:	2320      	movmi	r3, #32
 80089e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80089ec:	0711      	lsls	r1, r2, #28
 80089ee:	bf44      	itt	mi
 80089f0:	232b      	movmi	r3, #43	; 0x2b
 80089f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80089f6:	f89a 3000 	ldrb.w	r3, [sl]
 80089fa:	2b2a      	cmp	r3, #42	; 0x2a
 80089fc:	d015      	beq.n	8008a2a <_svfiprintf_r+0xf6>
 80089fe:	9a07      	ldr	r2, [sp, #28]
 8008a00:	4654      	mov	r4, sl
 8008a02:	2000      	movs	r0, #0
 8008a04:	f04f 0c0a 	mov.w	ip, #10
 8008a08:	4621      	mov	r1, r4
 8008a0a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008a0e:	3b30      	subs	r3, #48	; 0x30
 8008a10:	2b09      	cmp	r3, #9
 8008a12:	d94e      	bls.n	8008ab2 <_svfiprintf_r+0x17e>
 8008a14:	b1b0      	cbz	r0, 8008a44 <_svfiprintf_r+0x110>
 8008a16:	9207      	str	r2, [sp, #28]
 8008a18:	e014      	b.n	8008a44 <_svfiprintf_r+0x110>
 8008a1a:	eba0 0308 	sub.w	r3, r0, r8
 8008a1e:	fa09 f303 	lsl.w	r3, r9, r3
 8008a22:	4313      	orrs	r3, r2
 8008a24:	9304      	str	r3, [sp, #16]
 8008a26:	46a2      	mov	sl, r4
 8008a28:	e7d2      	b.n	80089d0 <_svfiprintf_r+0x9c>
 8008a2a:	9b03      	ldr	r3, [sp, #12]
 8008a2c:	1d19      	adds	r1, r3, #4
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	9103      	str	r1, [sp, #12]
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	bfbb      	ittet	lt
 8008a36:	425b      	neglt	r3, r3
 8008a38:	f042 0202 	orrlt.w	r2, r2, #2
 8008a3c:	9307      	strge	r3, [sp, #28]
 8008a3e:	9307      	strlt	r3, [sp, #28]
 8008a40:	bfb8      	it	lt
 8008a42:	9204      	strlt	r2, [sp, #16]
 8008a44:	7823      	ldrb	r3, [r4, #0]
 8008a46:	2b2e      	cmp	r3, #46	; 0x2e
 8008a48:	d10c      	bne.n	8008a64 <_svfiprintf_r+0x130>
 8008a4a:	7863      	ldrb	r3, [r4, #1]
 8008a4c:	2b2a      	cmp	r3, #42	; 0x2a
 8008a4e:	d135      	bne.n	8008abc <_svfiprintf_r+0x188>
 8008a50:	9b03      	ldr	r3, [sp, #12]
 8008a52:	1d1a      	adds	r2, r3, #4
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	9203      	str	r2, [sp, #12]
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	bfb8      	it	lt
 8008a5c:	f04f 33ff 	movlt.w	r3, #4294967295
 8008a60:	3402      	adds	r4, #2
 8008a62:	9305      	str	r3, [sp, #20]
 8008a64:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008b30 <_svfiprintf_r+0x1fc>
 8008a68:	7821      	ldrb	r1, [r4, #0]
 8008a6a:	2203      	movs	r2, #3
 8008a6c:	4650      	mov	r0, sl
 8008a6e:	f7f7 fbb7 	bl	80001e0 <memchr>
 8008a72:	b140      	cbz	r0, 8008a86 <_svfiprintf_r+0x152>
 8008a74:	2340      	movs	r3, #64	; 0x40
 8008a76:	eba0 000a 	sub.w	r0, r0, sl
 8008a7a:	fa03 f000 	lsl.w	r0, r3, r0
 8008a7e:	9b04      	ldr	r3, [sp, #16]
 8008a80:	4303      	orrs	r3, r0
 8008a82:	3401      	adds	r4, #1
 8008a84:	9304      	str	r3, [sp, #16]
 8008a86:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a8a:	4826      	ldr	r0, [pc, #152]	; (8008b24 <_svfiprintf_r+0x1f0>)
 8008a8c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008a90:	2206      	movs	r2, #6
 8008a92:	f7f7 fba5 	bl	80001e0 <memchr>
 8008a96:	2800      	cmp	r0, #0
 8008a98:	d038      	beq.n	8008b0c <_svfiprintf_r+0x1d8>
 8008a9a:	4b23      	ldr	r3, [pc, #140]	; (8008b28 <_svfiprintf_r+0x1f4>)
 8008a9c:	bb1b      	cbnz	r3, 8008ae6 <_svfiprintf_r+0x1b2>
 8008a9e:	9b03      	ldr	r3, [sp, #12]
 8008aa0:	3307      	adds	r3, #7
 8008aa2:	f023 0307 	bic.w	r3, r3, #7
 8008aa6:	3308      	adds	r3, #8
 8008aa8:	9303      	str	r3, [sp, #12]
 8008aaa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008aac:	4433      	add	r3, r6
 8008aae:	9309      	str	r3, [sp, #36]	; 0x24
 8008ab0:	e767      	b.n	8008982 <_svfiprintf_r+0x4e>
 8008ab2:	fb0c 3202 	mla	r2, ip, r2, r3
 8008ab6:	460c      	mov	r4, r1
 8008ab8:	2001      	movs	r0, #1
 8008aba:	e7a5      	b.n	8008a08 <_svfiprintf_r+0xd4>
 8008abc:	2300      	movs	r3, #0
 8008abe:	3401      	adds	r4, #1
 8008ac0:	9305      	str	r3, [sp, #20]
 8008ac2:	4619      	mov	r1, r3
 8008ac4:	f04f 0c0a 	mov.w	ip, #10
 8008ac8:	4620      	mov	r0, r4
 8008aca:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008ace:	3a30      	subs	r2, #48	; 0x30
 8008ad0:	2a09      	cmp	r2, #9
 8008ad2:	d903      	bls.n	8008adc <_svfiprintf_r+0x1a8>
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d0c5      	beq.n	8008a64 <_svfiprintf_r+0x130>
 8008ad8:	9105      	str	r1, [sp, #20]
 8008ada:	e7c3      	b.n	8008a64 <_svfiprintf_r+0x130>
 8008adc:	fb0c 2101 	mla	r1, ip, r1, r2
 8008ae0:	4604      	mov	r4, r0
 8008ae2:	2301      	movs	r3, #1
 8008ae4:	e7f0      	b.n	8008ac8 <_svfiprintf_r+0x194>
 8008ae6:	ab03      	add	r3, sp, #12
 8008ae8:	9300      	str	r3, [sp, #0]
 8008aea:	462a      	mov	r2, r5
 8008aec:	4b0f      	ldr	r3, [pc, #60]	; (8008b2c <_svfiprintf_r+0x1f8>)
 8008aee:	a904      	add	r1, sp, #16
 8008af0:	4638      	mov	r0, r7
 8008af2:	f3af 8000 	nop.w
 8008af6:	1c42      	adds	r2, r0, #1
 8008af8:	4606      	mov	r6, r0
 8008afa:	d1d6      	bne.n	8008aaa <_svfiprintf_r+0x176>
 8008afc:	89ab      	ldrh	r3, [r5, #12]
 8008afe:	065b      	lsls	r3, r3, #25
 8008b00:	f53f af2c 	bmi.w	800895c <_svfiprintf_r+0x28>
 8008b04:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008b06:	b01d      	add	sp, #116	; 0x74
 8008b08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b0c:	ab03      	add	r3, sp, #12
 8008b0e:	9300      	str	r3, [sp, #0]
 8008b10:	462a      	mov	r2, r5
 8008b12:	4b06      	ldr	r3, [pc, #24]	; (8008b2c <_svfiprintf_r+0x1f8>)
 8008b14:	a904      	add	r1, sp, #16
 8008b16:	4638      	mov	r0, r7
 8008b18:	f000 f87a 	bl	8008c10 <_printf_i>
 8008b1c:	e7eb      	b.n	8008af6 <_svfiprintf_r+0x1c2>
 8008b1e:	bf00      	nop
 8008b20:	08009090 	.word	0x08009090
 8008b24:	0800909a 	.word	0x0800909a
 8008b28:	00000000 	.word	0x00000000
 8008b2c:	0800887d 	.word	0x0800887d
 8008b30:	08009096 	.word	0x08009096

08008b34 <_printf_common>:
 8008b34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b38:	4616      	mov	r6, r2
 8008b3a:	4699      	mov	r9, r3
 8008b3c:	688a      	ldr	r2, [r1, #8]
 8008b3e:	690b      	ldr	r3, [r1, #16]
 8008b40:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008b44:	4293      	cmp	r3, r2
 8008b46:	bfb8      	it	lt
 8008b48:	4613      	movlt	r3, r2
 8008b4a:	6033      	str	r3, [r6, #0]
 8008b4c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008b50:	4607      	mov	r7, r0
 8008b52:	460c      	mov	r4, r1
 8008b54:	b10a      	cbz	r2, 8008b5a <_printf_common+0x26>
 8008b56:	3301      	adds	r3, #1
 8008b58:	6033      	str	r3, [r6, #0]
 8008b5a:	6823      	ldr	r3, [r4, #0]
 8008b5c:	0699      	lsls	r1, r3, #26
 8008b5e:	bf42      	ittt	mi
 8008b60:	6833      	ldrmi	r3, [r6, #0]
 8008b62:	3302      	addmi	r3, #2
 8008b64:	6033      	strmi	r3, [r6, #0]
 8008b66:	6825      	ldr	r5, [r4, #0]
 8008b68:	f015 0506 	ands.w	r5, r5, #6
 8008b6c:	d106      	bne.n	8008b7c <_printf_common+0x48>
 8008b6e:	f104 0a19 	add.w	sl, r4, #25
 8008b72:	68e3      	ldr	r3, [r4, #12]
 8008b74:	6832      	ldr	r2, [r6, #0]
 8008b76:	1a9b      	subs	r3, r3, r2
 8008b78:	42ab      	cmp	r3, r5
 8008b7a:	dc26      	bgt.n	8008bca <_printf_common+0x96>
 8008b7c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008b80:	1e13      	subs	r3, r2, #0
 8008b82:	6822      	ldr	r2, [r4, #0]
 8008b84:	bf18      	it	ne
 8008b86:	2301      	movne	r3, #1
 8008b88:	0692      	lsls	r2, r2, #26
 8008b8a:	d42b      	bmi.n	8008be4 <_printf_common+0xb0>
 8008b8c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008b90:	4649      	mov	r1, r9
 8008b92:	4638      	mov	r0, r7
 8008b94:	47c0      	blx	r8
 8008b96:	3001      	adds	r0, #1
 8008b98:	d01e      	beq.n	8008bd8 <_printf_common+0xa4>
 8008b9a:	6823      	ldr	r3, [r4, #0]
 8008b9c:	68e5      	ldr	r5, [r4, #12]
 8008b9e:	6832      	ldr	r2, [r6, #0]
 8008ba0:	f003 0306 	and.w	r3, r3, #6
 8008ba4:	2b04      	cmp	r3, #4
 8008ba6:	bf08      	it	eq
 8008ba8:	1aad      	subeq	r5, r5, r2
 8008baa:	68a3      	ldr	r3, [r4, #8]
 8008bac:	6922      	ldr	r2, [r4, #16]
 8008bae:	bf0c      	ite	eq
 8008bb0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008bb4:	2500      	movne	r5, #0
 8008bb6:	4293      	cmp	r3, r2
 8008bb8:	bfc4      	itt	gt
 8008bba:	1a9b      	subgt	r3, r3, r2
 8008bbc:	18ed      	addgt	r5, r5, r3
 8008bbe:	2600      	movs	r6, #0
 8008bc0:	341a      	adds	r4, #26
 8008bc2:	42b5      	cmp	r5, r6
 8008bc4:	d11a      	bne.n	8008bfc <_printf_common+0xc8>
 8008bc6:	2000      	movs	r0, #0
 8008bc8:	e008      	b.n	8008bdc <_printf_common+0xa8>
 8008bca:	2301      	movs	r3, #1
 8008bcc:	4652      	mov	r2, sl
 8008bce:	4649      	mov	r1, r9
 8008bd0:	4638      	mov	r0, r7
 8008bd2:	47c0      	blx	r8
 8008bd4:	3001      	adds	r0, #1
 8008bd6:	d103      	bne.n	8008be0 <_printf_common+0xac>
 8008bd8:	f04f 30ff 	mov.w	r0, #4294967295
 8008bdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008be0:	3501      	adds	r5, #1
 8008be2:	e7c6      	b.n	8008b72 <_printf_common+0x3e>
 8008be4:	18e1      	adds	r1, r4, r3
 8008be6:	1c5a      	adds	r2, r3, #1
 8008be8:	2030      	movs	r0, #48	; 0x30
 8008bea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008bee:	4422      	add	r2, r4
 8008bf0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008bf4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008bf8:	3302      	adds	r3, #2
 8008bfa:	e7c7      	b.n	8008b8c <_printf_common+0x58>
 8008bfc:	2301      	movs	r3, #1
 8008bfe:	4622      	mov	r2, r4
 8008c00:	4649      	mov	r1, r9
 8008c02:	4638      	mov	r0, r7
 8008c04:	47c0      	blx	r8
 8008c06:	3001      	adds	r0, #1
 8008c08:	d0e6      	beq.n	8008bd8 <_printf_common+0xa4>
 8008c0a:	3601      	adds	r6, #1
 8008c0c:	e7d9      	b.n	8008bc2 <_printf_common+0x8e>
	...

08008c10 <_printf_i>:
 8008c10:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008c14:	7e0f      	ldrb	r7, [r1, #24]
 8008c16:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008c18:	2f78      	cmp	r7, #120	; 0x78
 8008c1a:	4691      	mov	r9, r2
 8008c1c:	4680      	mov	r8, r0
 8008c1e:	460c      	mov	r4, r1
 8008c20:	469a      	mov	sl, r3
 8008c22:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008c26:	d807      	bhi.n	8008c38 <_printf_i+0x28>
 8008c28:	2f62      	cmp	r7, #98	; 0x62
 8008c2a:	d80a      	bhi.n	8008c42 <_printf_i+0x32>
 8008c2c:	2f00      	cmp	r7, #0
 8008c2e:	f000 80d8 	beq.w	8008de2 <_printf_i+0x1d2>
 8008c32:	2f58      	cmp	r7, #88	; 0x58
 8008c34:	f000 80a3 	beq.w	8008d7e <_printf_i+0x16e>
 8008c38:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008c3c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008c40:	e03a      	b.n	8008cb8 <_printf_i+0xa8>
 8008c42:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008c46:	2b15      	cmp	r3, #21
 8008c48:	d8f6      	bhi.n	8008c38 <_printf_i+0x28>
 8008c4a:	a101      	add	r1, pc, #4	; (adr r1, 8008c50 <_printf_i+0x40>)
 8008c4c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008c50:	08008ca9 	.word	0x08008ca9
 8008c54:	08008cbd 	.word	0x08008cbd
 8008c58:	08008c39 	.word	0x08008c39
 8008c5c:	08008c39 	.word	0x08008c39
 8008c60:	08008c39 	.word	0x08008c39
 8008c64:	08008c39 	.word	0x08008c39
 8008c68:	08008cbd 	.word	0x08008cbd
 8008c6c:	08008c39 	.word	0x08008c39
 8008c70:	08008c39 	.word	0x08008c39
 8008c74:	08008c39 	.word	0x08008c39
 8008c78:	08008c39 	.word	0x08008c39
 8008c7c:	08008dc9 	.word	0x08008dc9
 8008c80:	08008ced 	.word	0x08008ced
 8008c84:	08008dab 	.word	0x08008dab
 8008c88:	08008c39 	.word	0x08008c39
 8008c8c:	08008c39 	.word	0x08008c39
 8008c90:	08008deb 	.word	0x08008deb
 8008c94:	08008c39 	.word	0x08008c39
 8008c98:	08008ced 	.word	0x08008ced
 8008c9c:	08008c39 	.word	0x08008c39
 8008ca0:	08008c39 	.word	0x08008c39
 8008ca4:	08008db3 	.word	0x08008db3
 8008ca8:	682b      	ldr	r3, [r5, #0]
 8008caa:	1d1a      	adds	r2, r3, #4
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	602a      	str	r2, [r5, #0]
 8008cb0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008cb4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008cb8:	2301      	movs	r3, #1
 8008cba:	e0a3      	b.n	8008e04 <_printf_i+0x1f4>
 8008cbc:	6820      	ldr	r0, [r4, #0]
 8008cbe:	6829      	ldr	r1, [r5, #0]
 8008cc0:	0606      	lsls	r6, r0, #24
 8008cc2:	f101 0304 	add.w	r3, r1, #4
 8008cc6:	d50a      	bpl.n	8008cde <_printf_i+0xce>
 8008cc8:	680e      	ldr	r6, [r1, #0]
 8008cca:	602b      	str	r3, [r5, #0]
 8008ccc:	2e00      	cmp	r6, #0
 8008cce:	da03      	bge.n	8008cd8 <_printf_i+0xc8>
 8008cd0:	232d      	movs	r3, #45	; 0x2d
 8008cd2:	4276      	negs	r6, r6
 8008cd4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008cd8:	485e      	ldr	r0, [pc, #376]	; (8008e54 <_printf_i+0x244>)
 8008cda:	230a      	movs	r3, #10
 8008cdc:	e019      	b.n	8008d12 <_printf_i+0x102>
 8008cde:	680e      	ldr	r6, [r1, #0]
 8008ce0:	602b      	str	r3, [r5, #0]
 8008ce2:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008ce6:	bf18      	it	ne
 8008ce8:	b236      	sxthne	r6, r6
 8008cea:	e7ef      	b.n	8008ccc <_printf_i+0xbc>
 8008cec:	682b      	ldr	r3, [r5, #0]
 8008cee:	6820      	ldr	r0, [r4, #0]
 8008cf0:	1d19      	adds	r1, r3, #4
 8008cf2:	6029      	str	r1, [r5, #0]
 8008cf4:	0601      	lsls	r1, r0, #24
 8008cf6:	d501      	bpl.n	8008cfc <_printf_i+0xec>
 8008cf8:	681e      	ldr	r6, [r3, #0]
 8008cfa:	e002      	b.n	8008d02 <_printf_i+0xf2>
 8008cfc:	0646      	lsls	r6, r0, #25
 8008cfe:	d5fb      	bpl.n	8008cf8 <_printf_i+0xe8>
 8008d00:	881e      	ldrh	r6, [r3, #0]
 8008d02:	4854      	ldr	r0, [pc, #336]	; (8008e54 <_printf_i+0x244>)
 8008d04:	2f6f      	cmp	r7, #111	; 0x6f
 8008d06:	bf0c      	ite	eq
 8008d08:	2308      	moveq	r3, #8
 8008d0a:	230a      	movne	r3, #10
 8008d0c:	2100      	movs	r1, #0
 8008d0e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008d12:	6865      	ldr	r5, [r4, #4]
 8008d14:	60a5      	str	r5, [r4, #8]
 8008d16:	2d00      	cmp	r5, #0
 8008d18:	bfa2      	ittt	ge
 8008d1a:	6821      	ldrge	r1, [r4, #0]
 8008d1c:	f021 0104 	bicge.w	r1, r1, #4
 8008d20:	6021      	strge	r1, [r4, #0]
 8008d22:	b90e      	cbnz	r6, 8008d28 <_printf_i+0x118>
 8008d24:	2d00      	cmp	r5, #0
 8008d26:	d04d      	beq.n	8008dc4 <_printf_i+0x1b4>
 8008d28:	4615      	mov	r5, r2
 8008d2a:	fbb6 f1f3 	udiv	r1, r6, r3
 8008d2e:	fb03 6711 	mls	r7, r3, r1, r6
 8008d32:	5dc7      	ldrb	r7, [r0, r7]
 8008d34:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008d38:	4637      	mov	r7, r6
 8008d3a:	42bb      	cmp	r3, r7
 8008d3c:	460e      	mov	r6, r1
 8008d3e:	d9f4      	bls.n	8008d2a <_printf_i+0x11a>
 8008d40:	2b08      	cmp	r3, #8
 8008d42:	d10b      	bne.n	8008d5c <_printf_i+0x14c>
 8008d44:	6823      	ldr	r3, [r4, #0]
 8008d46:	07de      	lsls	r6, r3, #31
 8008d48:	d508      	bpl.n	8008d5c <_printf_i+0x14c>
 8008d4a:	6923      	ldr	r3, [r4, #16]
 8008d4c:	6861      	ldr	r1, [r4, #4]
 8008d4e:	4299      	cmp	r1, r3
 8008d50:	bfde      	ittt	le
 8008d52:	2330      	movle	r3, #48	; 0x30
 8008d54:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008d58:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008d5c:	1b52      	subs	r2, r2, r5
 8008d5e:	6122      	str	r2, [r4, #16]
 8008d60:	f8cd a000 	str.w	sl, [sp]
 8008d64:	464b      	mov	r3, r9
 8008d66:	aa03      	add	r2, sp, #12
 8008d68:	4621      	mov	r1, r4
 8008d6a:	4640      	mov	r0, r8
 8008d6c:	f7ff fee2 	bl	8008b34 <_printf_common>
 8008d70:	3001      	adds	r0, #1
 8008d72:	d14c      	bne.n	8008e0e <_printf_i+0x1fe>
 8008d74:	f04f 30ff 	mov.w	r0, #4294967295
 8008d78:	b004      	add	sp, #16
 8008d7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d7e:	4835      	ldr	r0, [pc, #212]	; (8008e54 <_printf_i+0x244>)
 8008d80:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008d84:	6829      	ldr	r1, [r5, #0]
 8008d86:	6823      	ldr	r3, [r4, #0]
 8008d88:	f851 6b04 	ldr.w	r6, [r1], #4
 8008d8c:	6029      	str	r1, [r5, #0]
 8008d8e:	061d      	lsls	r5, r3, #24
 8008d90:	d514      	bpl.n	8008dbc <_printf_i+0x1ac>
 8008d92:	07df      	lsls	r7, r3, #31
 8008d94:	bf44      	itt	mi
 8008d96:	f043 0320 	orrmi.w	r3, r3, #32
 8008d9a:	6023      	strmi	r3, [r4, #0]
 8008d9c:	b91e      	cbnz	r6, 8008da6 <_printf_i+0x196>
 8008d9e:	6823      	ldr	r3, [r4, #0]
 8008da0:	f023 0320 	bic.w	r3, r3, #32
 8008da4:	6023      	str	r3, [r4, #0]
 8008da6:	2310      	movs	r3, #16
 8008da8:	e7b0      	b.n	8008d0c <_printf_i+0xfc>
 8008daa:	6823      	ldr	r3, [r4, #0]
 8008dac:	f043 0320 	orr.w	r3, r3, #32
 8008db0:	6023      	str	r3, [r4, #0]
 8008db2:	2378      	movs	r3, #120	; 0x78
 8008db4:	4828      	ldr	r0, [pc, #160]	; (8008e58 <_printf_i+0x248>)
 8008db6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008dba:	e7e3      	b.n	8008d84 <_printf_i+0x174>
 8008dbc:	0659      	lsls	r1, r3, #25
 8008dbe:	bf48      	it	mi
 8008dc0:	b2b6      	uxthmi	r6, r6
 8008dc2:	e7e6      	b.n	8008d92 <_printf_i+0x182>
 8008dc4:	4615      	mov	r5, r2
 8008dc6:	e7bb      	b.n	8008d40 <_printf_i+0x130>
 8008dc8:	682b      	ldr	r3, [r5, #0]
 8008dca:	6826      	ldr	r6, [r4, #0]
 8008dcc:	6961      	ldr	r1, [r4, #20]
 8008dce:	1d18      	adds	r0, r3, #4
 8008dd0:	6028      	str	r0, [r5, #0]
 8008dd2:	0635      	lsls	r5, r6, #24
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	d501      	bpl.n	8008ddc <_printf_i+0x1cc>
 8008dd8:	6019      	str	r1, [r3, #0]
 8008dda:	e002      	b.n	8008de2 <_printf_i+0x1d2>
 8008ddc:	0670      	lsls	r0, r6, #25
 8008dde:	d5fb      	bpl.n	8008dd8 <_printf_i+0x1c8>
 8008de0:	8019      	strh	r1, [r3, #0]
 8008de2:	2300      	movs	r3, #0
 8008de4:	6123      	str	r3, [r4, #16]
 8008de6:	4615      	mov	r5, r2
 8008de8:	e7ba      	b.n	8008d60 <_printf_i+0x150>
 8008dea:	682b      	ldr	r3, [r5, #0]
 8008dec:	1d1a      	adds	r2, r3, #4
 8008dee:	602a      	str	r2, [r5, #0]
 8008df0:	681d      	ldr	r5, [r3, #0]
 8008df2:	6862      	ldr	r2, [r4, #4]
 8008df4:	2100      	movs	r1, #0
 8008df6:	4628      	mov	r0, r5
 8008df8:	f7f7 f9f2 	bl	80001e0 <memchr>
 8008dfc:	b108      	cbz	r0, 8008e02 <_printf_i+0x1f2>
 8008dfe:	1b40      	subs	r0, r0, r5
 8008e00:	6060      	str	r0, [r4, #4]
 8008e02:	6863      	ldr	r3, [r4, #4]
 8008e04:	6123      	str	r3, [r4, #16]
 8008e06:	2300      	movs	r3, #0
 8008e08:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008e0c:	e7a8      	b.n	8008d60 <_printf_i+0x150>
 8008e0e:	6923      	ldr	r3, [r4, #16]
 8008e10:	462a      	mov	r2, r5
 8008e12:	4649      	mov	r1, r9
 8008e14:	4640      	mov	r0, r8
 8008e16:	47d0      	blx	sl
 8008e18:	3001      	adds	r0, #1
 8008e1a:	d0ab      	beq.n	8008d74 <_printf_i+0x164>
 8008e1c:	6823      	ldr	r3, [r4, #0]
 8008e1e:	079b      	lsls	r3, r3, #30
 8008e20:	d413      	bmi.n	8008e4a <_printf_i+0x23a>
 8008e22:	68e0      	ldr	r0, [r4, #12]
 8008e24:	9b03      	ldr	r3, [sp, #12]
 8008e26:	4298      	cmp	r0, r3
 8008e28:	bfb8      	it	lt
 8008e2a:	4618      	movlt	r0, r3
 8008e2c:	e7a4      	b.n	8008d78 <_printf_i+0x168>
 8008e2e:	2301      	movs	r3, #1
 8008e30:	4632      	mov	r2, r6
 8008e32:	4649      	mov	r1, r9
 8008e34:	4640      	mov	r0, r8
 8008e36:	47d0      	blx	sl
 8008e38:	3001      	adds	r0, #1
 8008e3a:	d09b      	beq.n	8008d74 <_printf_i+0x164>
 8008e3c:	3501      	adds	r5, #1
 8008e3e:	68e3      	ldr	r3, [r4, #12]
 8008e40:	9903      	ldr	r1, [sp, #12]
 8008e42:	1a5b      	subs	r3, r3, r1
 8008e44:	42ab      	cmp	r3, r5
 8008e46:	dcf2      	bgt.n	8008e2e <_printf_i+0x21e>
 8008e48:	e7eb      	b.n	8008e22 <_printf_i+0x212>
 8008e4a:	2500      	movs	r5, #0
 8008e4c:	f104 0619 	add.w	r6, r4, #25
 8008e50:	e7f5      	b.n	8008e3e <_printf_i+0x22e>
 8008e52:	bf00      	nop
 8008e54:	080090a1 	.word	0x080090a1
 8008e58:	080090b2 	.word	0x080090b2

08008e5c <memmove>:
 8008e5c:	4288      	cmp	r0, r1
 8008e5e:	b510      	push	{r4, lr}
 8008e60:	eb01 0402 	add.w	r4, r1, r2
 8008e64:	d902      	bls.n	8008e6c <memmove+0x10>
 8008e66:	4284      	cmp	r4, r0
 8008e68:	4623      	mov	r3, r4
 8008e6a:	d807      	bhi.n	8008e7c <memmove+0x20>
 8008e6c:	1e43      	subs	r3, r0, #1
 8008e6e:	42a1      	cmp	r1, r4
 8008e70:	d008      	beq.n	8008e84 <memmove+0x28>
 8008e72:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008e76:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008e7a:	e7f8      	b.n	8008e6e <memmove+0x12>
 8008e7c:	4402      	add	r2, r0
 8008e7e:	4601      	mov	r1, r0
 8008e80:	428a      	cmp	r2, r1
 8008e82:	d100      	bne.n	8008e86 <memmove+0x2a>
 8008e84:	bd10      	pop	{r4, pc}
 8008e86:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008e8a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008e8e:	e7f7      	b.n	8008e80 <memmove+0x24>

08008e90 <_realloc_r>:
 8008e90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e94:	4680      	mov	r8, r0
 8008e96:	4614      	mov	r4, r2
 8008e98:	460e      	mov	r6, r1
 8008e9a:	b921      	cbnz	r1, 8008ea6 <_realloc_r+0x16>
 8008e9c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008ea0:	4611      	mov	r1, r2
 8008ea2:	f7ff bb85 	b.w	80085b0 <_malloc_r>
 8008ea6:	b92a      	cbnz	r2, 8008eb4 <_realloc_r+0x24>
 8008ea8:	f7ff fc9c 	bl	80087e4 <_free_r>
 8008eac:	4625      	mov	r5, r4
 8008eae:	4628      	mov	r0, r5
 8008eb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008eb4:	f000 f81b 	bl	8008eee <_malloc_usable_size_r>
 8008eb8:	4284      	cmp	r4, r0
 8008eba:	4607      	mov	r7, r0
 8008ebc:	d802      	bhi.n	8008ec4 <_realloc_r+0x34>
 8008ebe:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008ec2:	d812      	bhi.n	8008eea <_realloc_r+0x5a>
 8008ec4:	4621      	mov	r1, r4
 8008ec6:	4640      	mov	r0, r8
 8008ec8:	f7ff fb72 	bl	80085b0 <_malloc_r>
 8008ecc:	4605      	mov	r5, r0
 8008ece:	2800      	cmp	r0, #0
 8008ed0:	d0ed      	beq.n	8008eae <_realloc_r+0x1e>
 8008ed2:	42bc      	cmp	r4, r7
 8008ed4:	4622      	mov	r2, r4
 8008ed6:	4631      	mov	r1, r6
 8008ed8:	bf28      	it	cs
 8008eda:	463a      	movcs	r2, r7
 8008edc:	f7ff fb32 	bl	8008544 <memcpy>
 8008ee0:	4631      	mov	r1, r6
 8008ee2:	4640      	mov	r0, r8
 8008ee4:	f7ff fc7e 	bl	80087e4 <_free_r>
 8008ee8:	e7e1      	b.n	8008eae <_realloc_r+0x1e>
 8008eea:	4635      	mov	r5, r6
 8008eec:	e7df      	b.n	8008eae <_realloc_r+0x1e>

08008eee <_malloc_usable_size_r>:
 8008eee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008ef2:	1f18      	subs	r0, r3, #4
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	bfbc      	itt	lt
 8008ef8:	580b      	ldrlt	r3, [r1, r0]
 8008efa:	18c0      	addlt	r0, r0, r3
 8008efc:	4770      	bx	lr
	...

08008f00 <_init>:
 8008f00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f02:	bf00      	nop
 8008f04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f06:	bc08      	pop	{r3}
 8008f08:	469e      	mov	lr, r3
 8008f0a:	4770      	bx	lr

08008f0c <_fini>:
 8008f0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f0e:	bf00      	nop
 8008f10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f12:	bc08      	pop	{r3}
 8008f14:	469e      	mov	lr, r3
 8008f16:	4770      	bx	lr
