
Weighing_machine.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007b84  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e8  08007d14  08007d14  00017d14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007dfc  08007dfc  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08007dfc  08007dfc  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007dfc  08007dfc  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007dfc  08007dfc  00017dfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007e00  08007e00  00017e00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08007e04  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001f30  20000074  08007e78  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001fa4  08007e78  00021fa4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a001  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003a6a  00000000  00000000  0003a0a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001590  00000000  00000000  0003db10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001438  00000000  00000000  0003f0a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001eb72  00000000  00000000  000404d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001aa59  00000000  00000000  0005f04a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b613f  00000000  00000000  00079aa3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000c5  00000000  00000000  0012fbe2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005d78  00000000  00000000  0012fca8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    00000210  00000000  00000000  00135a20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007cfc 	.word	0x08007cfc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08007cfc 	.word	0x08007cfc

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <vApplicationIdleHook>:
void vApplicationIdleHook(void);
void vApplicationTickHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 8000280:	b480      	push	{r7}
 8000282:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 8000284:	bf00      	nop
 8000286:	46bd      	mov	sp, r7
 8000288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800028c:	4770      	bx	lr

0800028e <vApplicationTickHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 3 */
__weak void vApplicationTickHook( void )
{
 800028e:	b480      	push	{r7}
 8000290:	af00      	add	r7, sp, #0
   /* This function will be called by each tick interrupt if
   configUSE_TICK_HOOK is set to 1 in FreeRTOSConfig.h. User code can be
   added here, but the tick hook is called from an interrupt context, so
   code must not attempt to block, and only the interrupt safe FreeRTOS API
   functions can be used (those that end in FromISR()). */
}
 8000292:	bf00      	nop
 8000294:	46bd      	mov	sp, r7
 8000296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800029a:	4770      	bx	lr

0800029c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800029c:	b480      	push	{r7}
 800029e:	b085      	sub	sp, #20
 80002a0:	af00      	add	r7, sp, #0
 80002a2:	60f8      	str	r0, [r7, #12]
 80002a4:	60b9      	str	r1, [r7, #8]
 80002a6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80002a8:	68fb      	ldr	r3, [r7, #12]
 80002aa:	4a07      	ldr	r2, [pc, #28]	; (80002c8 <vApplicationGetIdleTaskMemory+0x2c>)
 80002ac:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80002ae:	68bb      	ldr	r3, [r7, #8]
 80002b0:	4a06      	ldr	r2, [pc, #24]	; (80002cc <vApplicationGetIdleTaskMemory+0x30>)
 80002b2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	2250      	movs	r2, #80	; 0x50
 80002b8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80002ba:	bf00      	nop
 80002bc:	3714      	adds	r7, #20
 80002be:	46bd      	mov	sp, r7
 80002c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002c4:	4770      	bx	lr
 80002c6:	bf00      	nop
 80002c8:	20000090 	.word	0x20000090
 80002cc:	200000e4 	.word	0x200000e4

080002d0 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 80002d0:	b480      	push	{r7}
 80002d2:	b085      	sub	sp, #20
 80002d4:	af00      	add	r7, sp, #0
 80002d6:	60f8      	str	r0, [r7, #12]
 80002d8:	60b9      	str	r1, [r7, #8]
 80002da:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 80002dc:	68fb      	ldr	r3, [r7, #12]
 80002de:	4a07      	ldr	r2, [pc, #28]	; (80002fc <vApplicationGetTimerTaskMemory+0x2c>)
 80002e0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 80002e2:	68bb      	ldr	r3, [r7, #8]
 80002e4:	4a06      	ldr	r2, [pc, #24]	; (8000300 <vApplicationGetTimerTaskMemory+0x30>)
 80002e6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 80002e8:	687b      	ldr	r3, [r7, #4]
 80002ea:	2250      	movs	r2, #80	; 0x50
 80002ec:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80002ee:	bf00      	nop
 80002f0:	3714      	adds	r7, #20
 80002f2:	46bd      	mov	sp, r7
 80002f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f8:	4770      	bx	lr
 80002fa:	bf00      	nop
 80002fc:	20000224 	.word	0x20000224
 8000300:	20000278 	.word	0x20000278

08000304 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000304:	b5b0      	push	{r4, r5, r7, lr}
 8000306:	b08a      	sub	sp, #40	; 0x28
 8000308:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800030a:	f000 fc25 	bl	8000b58 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800030e:	f000 f87d 	bl	800040c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000312:	f000 f98d 	bl	8000630 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000316:	f000 f8d3 	bl	80004c0 <MX_ADC1_Init>
  MX_DMA_Init();
 800031a:	f000 f96b 	bl	80005f4 <MX_DMA_Init>
  MX_USART1_UART_Init();
 800031e:	f000 f939 	bl	8000594 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000322:	482c      	ldr	r0, [pc, #176]	; (80003d4 <main+0xd0>)
 8000324:	f001 fb56 	bl	80019d4 <HAL_DMA_Init>
 8000328:	4603      	mov	r3, r0
 800032a:	2b00      	cmp	r3, #0
 800032c:	d001      	beq.n	8000332 <main+0x2e>
  {
    Error_Handler();
 800032e:	f000 fa43 	bl	80007b8 <Error_Handler>
  }

  __HAL_LINKDMA(&hadc1,DMA_Handle,hdma_adc1);
 8000332:	4b29      	ldr	r3, [pc, #164]	; (80003d8 <main+0xd4>)
 8000334:	4a27      	ldr	r2, [pc, #156]	; (80003d4 <main+0xd0>)
 8000336:	639a      	str	r2, [r3, #56]	; 0x38
 8000338:	4b26      	ldr	r3, [pc, #152]	; (80003d4 <main+0xd0>)
 800033a:	4a27      	ldr	r2, [pc, #156]	; (80003d8 <main+0xd4>)
 800033c:	625a      	str	r2, [r3, #36]	; 0x24
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&buffer.adc_buf, sizeof(buffer.adc_buf)/2);
 800033e:	2232      	movs	r2, #50	; 0x32
 8000340:	4926      	ldr	r1, [pc, #152]	; (80003dc <main+0xd8>)
 8000342:	4825      	ldr	r0, [pc, #148]	; (80003d8 <main+0xd4>)
 8000344:	f000 fde2 	bl	8000f0c <HAL_ADC_Start_DMA>
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  QueueHandle_t myQueue1;
  myQueue1 = xQueueCreate(40, sizeof(char));
 8000348:	2200      	movs	r2, #0
 800034a:	2101      	movs	r1, #1
 800034c:	2028      	movs	r0, #40	; 0x28
 800034e:	f004 fb2e 	bl	80049ae <xQueueGenericCreate>
 8000352:	61f8      	str	r0, [r7, #28]
  buffer.queueh = myQueue1;
 8000354:	4a22      	ldr	r2, [pc, #136]	; (80003e0 <main+0xdc>)
 8000356:	69fb      	ldr	r3, [r7, #28]
 8000358:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityIdle, 0, 80);
 800035a:	4b22      	ldr	r3, [pc, #136]	; (80003e4 <main+0xe0>)
 800035c:	463c      	mov	r4, r7
 800035e:	461d      	mov	r5, r3
 8000360:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000362:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000364:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000368:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800036c:	463b      	mov	r3, r7
 800036e:	2100      	movs	r1, #0
 8000370:	4618      	mov	r0, r3
 8000372:	f004 f93d 	bl	80045f0 <osThreadCreate>
 8000376:	4603      	mov	r3, r0
 8000378:	4a1b      	ldr	r2, [pc, #108]	; (80003e8 <main+0xe4>)
 800037a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  xTaskCreate(calibration, "calibration", 64, NULL, 5, NULL);
 800037c:	2300      	movs	r3, #0
 800037e:	9301      	str	r3, [sp, #4]
 8000380:	2305      	movs	r3, #5
 8000382:	9300      	str	r3, [sp, #0]
 8000384:	2300      	movs	r3, #0
 8000386:	2240      	movs	r2, #64	; 0x40
 8000388:	4918      	ldr	r1, [pc, #96]	; (80003ec <main+0xe8>)
 800038a:	4819      	ldr	r0, [pc, #100]	; (80003f0 <main+0xec>)
 800038c:	f004 ffac 	bl	80052e8 <xTaskCreate>
  xTaskCreate(weighing, "weighing", 64, NULL, 3, NULL);
 8000390:	2300      	movs	r3, #0
 8000392:	9301      	str	r3, [sp, #4]
 8000394:	2303      	movs	r3, #3
 8000396:	9300      	str	r3, [sp, #0]
 8000398:	2300      	movs	r3, #0
 800039a:	2240      	movs	r2, #64	; 0x40
 800039c:	4915      	ldr	r1, [pc, #84]	; (80003f4 <main+0xf0>)
 800039e:	4816      	ldr	r0, [pc, #88]	; (80003f8 <main+0xf4>)
 80003a0:	f004 ffa2 	bl	80052e8 <xTaskCreate>
  xTaskCreate(sendUSART1, "send data", 128, NULL, 4, NULL);
 80003a4:	2300      	movs	r3, #0
 80003a6:	9301      	str	r3, [sp, #4]
 80003a8:	2304      	movs	r3, #4
 80003aa:	9300      	str	r3, [sp, #0]
 80003ac:	2300      	movs	r3, #0
 80003ae:	2280      	movs	r2, #128	; 0x80
 80003b0:	4912      	ldr	r1, [pc, #72]	; (80003fc <main+0xf8>)
 80003b2:	4813      	ldr	r0, [pc, #76]	; (8000400 <main+0xfc>)
 80003b4:	f004 ff98 	bl	80052e8 <xTaskCreate>
  xTaskCreate(receiveUSART1, "receive data", 64, NULL, 3, NULL);
 80003b8:	2300      	movs	r3, #0
 80003ba:	9301      	str	r3, [sp, #4]
 80003bc:	2303      	movs	r3, #3
 80003be:	9300      	str	r3, [sp, #0]
 80003c0:	2300      	movs	r3, #0
 80003c2:	2240      	movs	r2, #64	; 0x40
 80003c4:	490f      	ldr	r1, [pc, #60]	; (8000404 <main+0x100>)
 80003c6:	4810      	ldr	r0, [pc, #64]	; (8000408 <main+0x104>)
 80003c8:	f004 ff8e 	bl	80052e8 <xTaskCreate>
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80003cc:	f004 f909 	bl	80045e2 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80003d0:	e7fe      	b.n	80003d0 <main+0xcc>
 80003d2:	bf00      	nop
 80003d4:	20000408 	.word	0x20000408
 80003d8:	200003b8 	.word	0x200003b8
 80003dc:	200004e0 	.word	0x200004e0
 80003e0:	200004d8 	.word	0x200004d8
 80003e4:	08007d54 	.word	0x08007d54
 80003e8:	200004d4 	.word	0x200004d4
 80003ec:	08007d20 	.word	0x08007d20
 80003f0:	08000679 	.word	0x08000679
 80003f4:	08007d2c 	.word	0x08007d2c
 80003f8:	08000691 	.word	0x08000691
 80003fc:	08007d38 	.word	0x08007d38
 8000400:	080006fd 	.word	0x080006fd
 8000404:	08007d44 	.word	0x08007d44
 8000408:	08000779 	.word	0x08000779

0800040c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800040c:	b580      	push	{r7, lr}
 800040e:	b09c      	sub	sp, #112	; 0x70
 8000410:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000412:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000416:	2228      	movs	r2, #40	; 0x28
 8000418:	2100      	movs	r1, #0
 800041a:	4618      	mov	r0, r3
 800041c:	f007 f806 	bl	800742c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000420:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000424:	2200      	movs	r2, #0
 8000426:	601a      	str	r2, [r3, #0]
 8000428:	605a      	str	r2, [r3, #4]
 800042a:	609a      	str	r2, [r3, #8]
 800042c:	60da      	str	r2, [r3, #12]
 800042e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000430:	463b      	mov	r3, r7
 8000432:	2234      	movs	r2, #52	; 0x34
 8000434:	2100      	movs	r1, #0
 8000436:	4618      	mov	r0, r3
 8000438:	f006 fff8 	bl	800742c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800043c:	2302      	movs	r3, #2
 800043e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000440:	2301      	movs	r3, #1
 8000442:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000444:	2310      	movs	r3, #16
 8000446:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000448:	2302      	movs	r3, #2
 800044a:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800044c:	2300      	movs	r3, #0
 800044e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000450:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000454:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000456:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800045a:	4618      	mov	r0, r3
 800045c:	f001 fdc4 	bl	8001fe8 <HAL_RCC_OscConfig>
 8000460:	4603      	mov	r3, r0
 8000462:	2b00      	cmp	r3, #0
 8000464:	d001      	beq.n	800046a <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000466:	f000 f9a7 	bl	80007b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800046a:	230f      	movs	r3, #15
 800046c:	637b      	str	r3, [r7, #52]	; 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800046e:	2302      	movs	r3, #2
 8000470:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000472:	2300      	movs	r3, #0
 8000474:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000476:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800047a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800047c:	2300      	movs	r3, #0
 800047e:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000480:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000484:	2102      	movs	r1, #2
 8000486:	4618      	mov	r0, r3
 8000488:	f002 fdec 	bl	8003064 <HAL_RCC_ClockConfig>
 800048c:	4603      	mov	r3, r0
 800048e:	2b00      	cmp	r3, #0
 8000490:	d001      	beq.n	8000496 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000492:	f000 f991 	bl	80007b8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_ADC1;
 8000496:	2381      	movs	r3, #129	; 0x81
 8000498:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 800049a:	2300      	movs	r3, #0
 800049c:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.Adc1ClockSelection = RCC_ADC1PLLCLK_DIV1;
 800049e:	f44f 7380 	mov.w	r3, #256	; 0x100
 80004a2:	61bb      	str	r3, [r7, #24]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80004a4:	463b      	mov	r3, r7
 80004a6:	4618      	mov	r0, r3
 80004a8:	f003 f844 	bl	8003534 <HAL_RCCEx_PeriphCLKConfig>
 80004ac:	4603      	mov	r3, r0
 80004ae:	2b00      	cmp	r3, #0
 80004b0:	d001      	beq.n	80004b6 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80004b2:	f000 f981 	bl	80007b8 <Error_Handler>
  }
}
 80004b6:	bf00      	nop
 80004b8:	3770      	adds	r7, #112	; 0x70
 80004ba:	46bd      	mov	sp, r7
 80004bc:	bd80      	pop	{r7, pc}
	...

080004c0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b086      	sub	sp, #24
 80004c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80004c6:	463b      	mov	r3, r7
 80004c8:	2200      	movs	r2, #0
 80004ca:	601a      	str	r2, [r3, #0]
 80004cc:	605a      	str	r2, [r3, #4]
 80004ce:	609a      	str	r2, [r3, #8]
 80004d0:	60da      	str	r2, [r3, #12]
 80004d2:	611a      	str	r2, [r3, #16]
 80004d4:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80004d6:	4b2e      	ldr	r3, [pc, #184]	; (8000590 <MX_ADC1_Init+0xd0>)
 80004d8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80004dc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80004de:	4b2c      	ldr	r3, [pc, #176]	; (8000590 <MX_ADC1_Init+0xd0>)
 80004e0:	2200      	movs	r2, #0
 80004e2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80004e4:	4b2a      	ldr	r3, [pc, #168]	; (8000590 <MX_ADC1_Init+0xd0>)
 80004e6:	2200      	movs	r2, #0
 80004e8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80004ea:	4b29      	ldr	r3, [pc, #164]	; (8000590 <MX_ADC1_Init+0xd0>)
 80004ec:	2201      	movs	r2, #1
 80004ee:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80004f0:	4b27      	ldr	r3, [pc, #156]	; (8000590 <MX_ADC1_Init+0xd0>)
 80004f2:	2201      	movs	r2, #1
 80004f4:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80004f6:	4b26      	ldr	r3, [pc, #152]	; (8000590 <MX_ADC1_Init+0xd0>)
 80004f8:	2200      	movs	r2, #0
 80004fa:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80004fe:	4b24      	ldr	r3, [pc, #144]	; (8000590 <MX_ADC1_Init+0xd0>)
 8000500:	2200      	movs	r2, #0
 8000502:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000504:	4b22      	ldr	r3, [pc, #136]	; (8000590 <MX_ADC1_Init+0xd0>)
 8000506:	2201      	movs	r2, #1
 8000508:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800050a:	4b21      	ldr	r3, [pc, #132]	; (8000590 <MX_ADC1_Init+0xd0>)
 800050c:	2200      	movs	r2, #0
 800050e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8000510:	4b1f      	ldr	r3, [pc, #124]	; (8000590 <MX_ADC1_Init+0xd0>)
 8000512:	2202      	movs	r2, #2
 8000514:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000516:	4b1e      	ldr	r3, [pc, #120]	; (8000590 <MX_ADC1_Init+0xd0>)
 8000518:	2201      	movs	r2, #1
 800051a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800051e:	4b1c      	ldr	r3, [pc, #112]	; (8000590 <MX_ADC1_Init+0xd0>)
 8000520:	2204      	movs	r2, #4
 8000522:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000524:	4b1a      	ldr	r3, [pc, #104]	; (8000590 <MX_ADC1_Init+0xd0>)
 8000526:	2200      	movs	r2, #0
 8000528:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800052a:	4b19      	ldr	r3, [pc, #100]	; (8000590 <MX_ADC1_Init+0xd0>)
 800052c:	2200      	movs	r2, #0
 800052e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000530:	4817      	ldr	r0, [pc, #92]	; (8000590 <MX_ADC1_Init+0xd0>)
 8000532:	f000 fb65 	bl	8000c00 <HAL_ADC_Init>
 8000536:	4603      	mov	r3, r0
 8000538:	2b00      	cmp	r3, #0
 800053a:	d001      	beq.n	8000540 <MX_ADC1_Init+0x80>
  {
    Error_Handler();
 800053c:	f000 f93c 	bl	80007b8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000540:	2301      	movs	r3, #1
 8000542:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000544:	2301      	movs	r3, #1
 8000546:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000548:	2300      	movs	r3, #0
 800054a:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800054c:	2300      	movs	r3, #0
 800054e:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000550:	2300      	movs	r3, #0
 8000552:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000554:	2300      	movs	r3, #0
 8000556:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000558:	463b      	mov	r3, r7
 800055a:	4619      	mov	r1, r3
 800055c:	480c      	ldr	r0, [pc, #48]	; (8000590 <MX_ADC1_Init+0xd0>)
 800055e:	f000 fd71 	bl	8001044 <HAL_ADC_ConfigChannel>
 8000562:	4603      	mov	r3, r0
 8000564:	2b00      	cmp	r3, #0
 8000566:	d001      	beq.n	800056c <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000568:	f000 f926 	bl	80007b8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800056c:	2302      	movs	r3, #2
 800056e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000570:	2302      	movs	r3, #2
 8000572:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000574:	463b      	mov	r3, r7
 8000576:	4619      	mov	r1, r3
 8000578:	4805      	ldr	r0, [pc, #20]	; (8000590 <MX_ADC1_Init+0xd0>)
 800057a:	f000 fd63 	bl	8001044 <HAL_ADC_ConfigChannel>
 800057e:	4603      	mov	r3, r0
 8000580:	2b00      	cmp	r3, #0
 8000582:	d001      	beq.n	8000588 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8000584:	f000 f918 	bl	80007b8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000588:	bf00      	nop
 800058a:	3718      	adds	r7, #24
 800058c:	46bd      	mov	sp, r7
 800058e:	bd80      	pop	{r7, pc}
 8000590:	200003b8 	.word	0x200003b8

08000594 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000598:	4b14      	ldr	r3, [pc, #80]	; (80005ec <MX_USART1_UART_Init+0x58>)
 800059a:	4a15      	ldr	r2, [pc, #84]	; (80005f0 <MX_USART1_UART_Init+0x5c>)
 800059c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800059e:	4b13      	ldr	r3, [pc, #76]	; (80005ec <MX_USART1_UART_Init+0x58>)
 80005a0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80005a4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80005a6:	4b11      	ldr	r3, [pc, #68]	; (80005ec <MX_USART1_UART_Init+0x58>)
 80005a8:	2200      	movs	r2, #0
 80005aa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80005ac:	4b0f      	ldr	r3, [pc, #60]	; (80005ec <MX_USART1_UART_Init+0x58>)
 80005ae:	2200      	movs	r2, #0
 80005b0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80005b2:	4b0e      	ldr	r3, [pc, #56]	; (80005ec <MX_USART1_UART_Init+0x58>)
 80005b4:	2200      	movs	r2, #0
 80005b6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80005b8:	4b0c      	ldr	r3, [pc, #48]	; (80005ec <MX_USART1_UART_Init+0x58>)
 80005ba:	220c      	movs	r2, #12
 80005bc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005be:	4b0b      	ldr	r3, [pc, #44]	; (80005ec <MX_USART1_UART_Init+0x58>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80005c4:	4b09      	ldr	r3, [pc, #36]	; (80005ec <MX_USART1_UART_Init+0x58>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80005ca:	4b08      	ldr	r3, [pc, #32]	; (80005ec <MX_USART1_UART_Init+0x58>)
 80005cc:	2200      	movs	r2, #0
 80005ce:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80005d0:	4b06      	ldr	r3, [pc, #24]	; (80005ec <MX_USART1_UART_Init+0x58>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80005d6:	4805      	ldr	r0, [pc, #20]	; (80005ec <MX_USART1_UART_Init+0x58>)
 80005d8:	f003 fbc8 	bl	8003d6c <HAL_UART_Init>
 80005dc:	4603      	mov	r3, r0
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d001      	beq.n	80005e6 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80005e2:	f000 f8e9 	bl	80007b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80005e6:	bf00      	nop
 80005e8:	bd80      	pop	{r7, pc}
 80005ea:	bf00      	nop
 80005ec:	2000044c 	.word	0x2000044c
 80005f0:	40013800 	.word	0x40013800

080005f4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b082      	sub	sp, #8
 80005f8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80005fa:	4b0c      	ldr	r3, [pc, #48]	; (800062c <MX_DMA_Init+0x38>)
 80005fc:	695b      	ldr	r3, [r3, #20]
 80005fe:	4a0b      	ldr	r2, [pc, #44]	; (800062c <MX_DMA_Init+0x38>)
 8000600:	f043 0301 	orr.w	r3, r3, #1
 8000604:	6153      	str	r3, [r2, #20]
 8000606:	4b09      	ldr	r3, [pc, #36]	; (800062c <MX_DMA_Init+0x38>)
 8000608:	695b      	ldr	r3, [r3, #20]
 800060a:	f003 0301 	and.w	r3, r3, #1
 800060e:	607b      	str	r3, [r7, #4]
 8000610:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8000612:	2200      	movs	r2, #0
 8000614:	2105      	movs	r1, #5
 8000616:	200b      	movs	r0, #11
 8000618:	f001 f9b2 	bl	8001980 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800061c:	200b      	movs	r0, #11
 800061e:	f001 f9cb 	bl	80019b8 <HAL_NVIC_EnableIRQ>

}
 8000622:	bf00      	nop
 8000624:	3708      	adds	r7, #8
 8000626:	46bd      	mov	sp, r7
 8000628:	bd80      	pop	{r7, pc}
 800062a:	bf00      	nop
 800062c:	40021000 	.word	0x40021000

08000630 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000630:	b480      	push	{r7}
 8000632:	b083      	sub	sp, #12
 8000634:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000636:	4b0f      	ldr	r3, [pc, #60]	; (8000674 <MX_GPIO_Init+0x44>)
 8000638:	695b      	ldr	r3, [r3, #20]
 800063a:	4a0e      	ldr	r2, [pc, #56]	; (8000674 <MX_GPIO_Init+0x44>)
 800063c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000640:	6153      	str	r3, [r2, #20]
 8000642:	4b0c      	ldr	r3, [pc, #48]	; (8000674 <MX_GPIO_Init+0x44>)
 8000644:	695b      	ldr	r3, [r3, #20]
 8000646:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800064a:	607b      	str	r3, [r7, #4]
 800064c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800064e:	4b09      	ldr	r3, [pc, #36]	; (8000674 <MX_GPIO_Init+0x44>)
 8000650:	695b      	ldr	r3, [r3, #20]
 8000652:	4a08      	ldr	r2, [pc, #32]	; (8000674 <MX_GPIO_Init+0x44>)
 8000654:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000658:	6153      	str	r3, [r2, #20]
 800065a:	4b06      	ldr	r3, [pc, #24]	; (8000674 <MX_GPIO_Init+0x44>)
 800065c:	695b      	ldr	r3, [r3, #20]
 800065e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000662:	603b      	str	r3, [r7, #0]
 8000664:	683b      	ldr	r3, [r7, #0]

}
 8000666:	bf00      	nop
 8000668:	370c      	adds	r7, #12
 800066a:	46bd      	mov	sp, r7
 800066c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000670:	4770      	bx	lr
 8000672:	bf00      	nop
 8000674:	40021000 	.word	0x40021000

08000678 <calibration>:

/* USER CODE BEGIN 4 */
void calibration(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	af00      	add	r7, sp, #0
	for( ;; )
	{
		vTaskDelete(xTaskGetHandle("calibration"));
 800067c:	4803      	ldr	r0, [pc, #12]	; (800068c <calibration+0x14>)
 800067e:	f005 f9ab 	bl	80059d8 <xTaskGetHandle>
 8000682:	4603      	mov	r3, r0
 8000684:	4618      	mov	r0, r3
 8000686:	f004 ff5d 	bl	8005544 <vTaskDelete>
 800068a:	e7f7      	b.n	800067c <calibration+0x4>
 800068c:	08007d20 	.word	0x08007d20

08000690 <weighing>:
	}
	vTaskDelete(xTaskGetHandle("calibration"));
}

void weighing(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	af00      	add	r7, sp, #0
	for( ;; )
	{
		vTaskDelay(100);
 8000694:	2064      	movs	r0, #100	; 0x64
 8000696:	f004 ffe5 	bl	8005664 <vTaskDelay>
		arm_mean_q15((int16_t*)&buffer.adc_buf, sizeof(buffer.adc_buf)/2, (int16_t*)&buffer.adc_buf_result);
 800069a:	4a12      	ldr	r2, [pc, #72]	; (80006e4 <weighing+0x54>)
 800069c:	2132      	movs	r1, #50	; 0x32
 800069e:	4812      	ldr	r0, [pc, #72]	; (80006e8 <weighing+0x58>)
 80006a0:	f006 fe5c 	bl	800735c <arm_mean_q15>
		xQueueSend(buffer.queueh, (void*)(((char*) &buffer.adc_buf_result)), 1);
 80006a4:	4b11      	ldr	r3, [pc, #68]	; (80006ec <weighing+0x5c>)
 80006a6:	6818      	ldr	r0, [r3, #0]
 80006a8:	2300      	movs	r3, #0
 80006aa:	2201      	movs	r2, #1
 80006ac:	490d      	ldr	r1, [pc, #52]	; (80006e4 <weighing+0x54>)
 80006ae:	f004 f9db 	bl	8004a68 <xQueueGenericSend>
		xQueueSend(buffer.queueh, (void*)(((char*) &buffer.adc_buf_result)+1), 1);
 80006b2:	4b0e      	ldr	r3, [pc, #56]	; (80006ec <weighing+0x5c>)
 80006b4:	6818      	ldr	r0, [r3, #0]
 80006b6:	490e      	ldr	r1, [pc, #56]	; (80006f0 <weighing+0x60>)
 80006b8:	2300      	movs	r3, #0
 80006ba:	2201      	movs	r2, #1
 80006bc:	f004 f9d4 	bl	8004a68 <xQueueGenericSend>
		xTaskNotify(xTaskGetHandle("send data"), 0, eNoAction);
 80006c0:	480c      	ldr	r0, [pc, #48]	; (80006f4 <weighing+0x64>)
 80006c2:	f005 f989 	bl	80059d8 <xTaskGetHandle>
 80006c6:	2300      	movs	r3, #0
 80006c8:	2200      	movs	r2, #0
 80006ca:	2100      	movs	r1, #0
 80006cc:	f005 fe1e 	bl	800630c <xTaskGenericNotify>
		taskYIELD();
 80006d0:	4b09      	ldr	r3, [pc, #36]	; (80006f8 <weighing+0x68>)
 80006d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80006d6:	601a      	str	r2, [r3, #0]
 80006d8:	f3bf 8f4f 	dsb	sy
 80006dc:	f3bf 8f6f 	isb	sy
	{
 80006e0:	e7d8      	b.n	8000694 <weighing+0x4>
 80006e2:	bf00      	nop
 80006e4:	20000544 	.word	0x20000544
 80006e8:	200004e0 	.word	0x200004e0
 80006ec:	200004d8 	.word	0x200004d8
 80006f0:	20000545 	.word	0x20000545
 80006f4:	08007d38 	.word	0x08007d38
 80006f8:	e000ed04 	.word	0xe000ed04

080006fc <sendUSART1>:
	}
}

void sendUSART1(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b084      	sub	sp, #16
 8000700:	af00      	add	r7, sp, #0
	uint16_t res_to_uart;
	char string_buff[8];
	for( ;; )
	{
		xTaskNotifyWait(0x00, 0xffffffff, NULL, portMAX_DELAY);
 8000702:	f04f 33ff 	mov.w	r3, #4294967295
 8000706:	2200      	movs	r2, #0
 8000708:	f04f 31ff 	mov.w	r1, #4294967295
 800070c:	2000      	movs	r0, #0
 800070e:	f005 fda3 	bl	8006258 <xTaskNotifyWait>
		//HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_10);
		xQueueReceive(buffer.queueh, &buffer.tx[0], portMAX_DELAY);
 8000712:	4b14      	ldr	r3, [pc, #80]	; (8000764 <sendUSART1+0x68>)
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	f04f 32ff 	mov.w	r2, #4294967295
 800071a:	4913      	ldr	r1, [pc, #76]	; (8000768 <sendUSART1+0x6c>)
 800071c:	4618      	mov	r0, r3
 800071e:	f004 fb39 	bl	8004d94 <xQueueReceive>
		xQueueReceive(buffer.queueh, &buffer.tx[1], portMAX_DELAY);
 8000722:	4b10      	ldr	r3, [pc, #64]	; (8000764 <sendUSART1+0x68>)
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	f04f 32ff 	mov.w	r2, #4294967295
 800072a:	4910      	ldr	r1, [pc, #64]	; (800076c <sendUSART1+0x70>)
 800072c:	4618      	mov	r0, r3
 800072e:	f004 fb31 	bl	8004d94 <xQueueReceive>
		res_to_uart = buffer.tx[0];
 8000732:	4b0c      	ldr	r3, [pc, #48]	; (8000764 <sendUSART1+0x68>)
 8000734:	791b      	ldrb	r3, [r3, #4]
 8000736:	81fb      	strh	r3, [r7, #14]
		res_to_uart = res_to_uart + (buffer.tx[1] << 8);
 8000738:	4b0a      	ldr	r3, [pc, #40]	; (8000764 <sendUSART1+0x68>)
 800073a:	795b      	ldrb	r3, [r3, #5]
 800073c:	b29b      	uxth	r3, r3
 800073e:	021b      	lsls	r3, r3, #8
 8000740:	b29a      	uxth	r2, r3
 8000742:	89fb      	ldrh	r3, [r7, #14]
 8000744:	4413      	add	r3, r2
 8000746:	81fb      	strh	r3, [r7, #14]
		sprintf(string_buff, "%d\r\n", res_to_uart);
 8000748:	89fa      	ldrh	r2, [r7, #14]
 800074a:	1d3b      	adds	r3, r7, #4
 800074c:	4908      	ldr	r1, [pc, #32]	; (8000770 <sendUSART1+0x74>)
 800074e:	4618      	mov	r0, r3
 8000750:	f006 fe74 	bl	800743c <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*) string_buff, sizeof(string_buff), 100);
 8000754:	1d39      	adds	r1, r7, #4
 8000756:	2364      	movs	r3, #100	; 0x64
 8000758:	2208      	movs	r2, #8
 800075a:	4806      	ldr	r0, [pc, #24]	; (8000774 <sendUSART1+0x78>)
 800075c:	f003 fb54 	bl	8003e08 <HAL_UART_Transmit>
		xTaskNotifyWait(0x00, 0xffffffff, NULL, portMAX_DELAY);
 8000760:	e7cf      	b.n	8000702 <sendUSART1+0x6>
 8000762:	bf00      	nop
 8000764:	200004d8 	.word	0x200004d8
 8000768:	200004dc 	.word	0x200004dc
 800076c:	200004dd 	.word	0x200004dd
 8000770:	08007d70 	.word	0x08007d70
 8000774:	2000044c 	.word	0x2000044c

08000778 <receiveUSART1>:
	}
	 vTaskDelete(xTaskGetHandle("send data"));
}

void receiveUSART1(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	af00      	add	r7, sp, #0
	for( ;; )
	{
		vTaskDelete(xTaskGetHandle("receive data"));
 800077c:	4803      	ldr	r0, [pc, #12]	; (800078c <receiveUSART1+0x14>)
 800077e:	f005 f92b 	bl	80059d8 <xTaskGetHandle>
 8000782:	4603      	mov	r3, r0
 8000784:	4618      	mov	r0, r3
 8000786:	f004 fedd 	bl	8005544 <vTaskDelete>
 800078a:	e7f7      	b.n	800077c <receiveUSART1+0x4>
 800078c:	08007d44 	.word	0x08007d44

08000790 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000790:	b480      	push	{r7}
 8000792:	b083      	sub	sp, #12
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
 8000798:	e7fe      	b.n	8000798 <StartDefaultTask+0x8>

0800079a <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800079a:	b580      	push	{r7, lr}
 800079c:	b082      	sub	sp, #8
 800079e:	af00      	add	r7, sp, #0
 80007a0:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80007aa:	d101      	bne.n	80007b0 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80007ac:	f000 f9ea 	bl	8000b84 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80007b0:	bf00      	nop
 80007b2:	3708      	adds	r7, #8
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd80      	pop	{r7, pc}

080007b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007b8:	b480      	push	{r7}
 80007ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007bc:	b672      	cpsid	i
}
 80007be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007c0:	e7fe      	b.n	80007c0 <Error_Handler+0x8>
	...

080007c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b082      	sub	sp, #8
 80007c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007ca:	4b11      	ldr	r3, [pc, #68]	; (8000810 <HAL_MspInit+0x4c>)
 80007cc:	699b      	ldr	r3, [r3, #24]
 80007ce:	4a10      	ldr	r2, [pc, #64]	; (8000810 <HAL_MspInit+0x4c>)
 80007d0:	f043 0301 	orr.w	r3, r3, #1
 80007d4:	6193      	str	r3, [r2, #24]
 80007d6:	4b0e      	ldr	r3, [pc, #56]	; (8000810 <HAL_MspInit+0x4c>)
 80007d8:	699b      	ldr	r3, [r3, #24]
 80007da:	f003 0301 	and.w	r3, r3, #1
 80007de:	607b      	str	r3, [r7, #4]
 80007e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007e2:	4b0b      	ldr	r3, [pc, #44]	; (8000810 <HAL_MspInit+0x4c>)
 80007e4:	69db      	ldr	r3, [r3, #28]
 80007e6:	4a0a      	ldr	r2, [pc, #40]	; (8000810 <HAL_MspInit+0x4c>)
 80007e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007ec:	61d3      	str	r3, [r2, #28]
 80007ee:	4b08      	ldr	r3, [pc, #32]	; (8000810 <HAL_MspInit+0x4c>)
 80007f0:	69db      	ldr	r3, [r3, #28]
 80007f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007f6:	603b      	str	r3, [r7, #0]
 80007f8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80007fa:	2200      	movs	r2, #0
 80007fc:	210f      	movs	r1, #15
 80007fe:	f06f 0001 	mvn.w	r0, #1
 8000802:	f001 f8bd 	bl	8001980 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000806:	bf00      	nop
 8000808:	3708      	adds	r7, #8
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	40021000 	.word	0x40021000

08000814 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b08a      	sub	sp, #40	; 0x28
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800081c:	f107 0314 	add.w	r3, r7, #20
 8000820:	2200      	movs	r2, #0
 8000822:	601a      	str	r2, [r3, #0]
 8000824:	605a      	str	r2, [r3, #4]
 8000826:	609a      	str	r2, [r3, #8]
 8000828:	60da      	str	r2, [r3, #12]
 800082a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000834:	d14d      	bne.n	80008d2 <HAL_ADC_MspInit+0xbe>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000836:	4b29      	ldr	r3, [pc, #164]	; (80008dc <HAL_ADC_MspInit+0xc8>)
 8000838:	695b      	ldr	r3, [r3, #20]
 800083a:	4a28      	ldr	r2, [pc, #160]	; (80008dc <HAL_ADC_MspInit+0xc8>)
 800083c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000840:	6153      	str	r3, [r2, #20]
 8000842:	4b26      	ldr	r3, [pc, #152]	; (80008dc <HAL_ADC_MspInit+0xc8>)
 8000844:	695b      	ldr	r3, [r3, #20]
 8000846:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800084a:	613b      	str	r3, [r7, #16]
 800084c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800084e:	4b23      	ldr	r3, [pc, #140]	; (80008dc <HAL_ADC_MspInit+0xc8>)
 8000850:	695b      	ldr	r3, [r3, #20]
 8000852:	4a22      	ldr	r2, [pc, #136]	; (80008dc <HAL_ADC_MspInit+0xc8>)
 8000854:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000858:	6153      	str	r3, [r2, #20]
 800085a:	4b20      	ldr	r3, [pc, #128]	; (80008dc <HAL_ADC_MspInit+0xc8>)
 800085c:	695b      	ldr	r3, [r3, #20]
 800085e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000862:	60fb      	str	r3, [r7, #12]
 8000864:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000866:	2303      	movs	r3, #3
 8000868:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800086a:	2303      	movs	r3, #3
 800086c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086e:	2300      	movs	r3, #0
 8000870:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000872:	f107 0314 	add.w	r3, r7, #20
 8000876:	4619      	mov	r1, r3
 8000878:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800087c:	f001 fa42 	bl	8001d04 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000880:	4b17      	ldr	r3, [pc, #92]	; (80008e0 <HAL_ADC_MspInit+0xcc>)
 8000882:	4a18      	ldr	r2, [pc, #96]	; (80008e4 <HAL_ADC_MspInit+0xd0>)
 8000884:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000886:	4b16      	ldr	r3, [pc, #88]	; (80008e0 <HAL_ADC_MspInit+0xcc>)
 8000888:	2200      	movs	r2, #0
 800088a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800088c:	4b14      	ldr	r3, [pc, #80]	; (80008e0 <HAL_ADC_MspInit+0xcc>)
 800088e:	2200      	movs	r2, #0
 8000890:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000892:	4b13      	ldr	r3, [pc, #76]	; (80008e0 <HAL_ADC_MspInit+0xcc>)
 8000894:	2280      	movs	r2, #128	; 0x80
 8000896:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000898:	4b11      	ldr	r3, [pc, #68]	; (80008e0 <HAL_ADC_MspInit+0xcc>)
 800089a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800089e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80008a0:	4b0f      	ldr	r3, [pc, #60]	; (80008e0 <HAL_ADC_MspInit+0xcc>)
 80008a2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80008a6:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80008a8:	4b0d      	ldr	r3, [pc, #52]	; (80008e0 <HAL_ADC_MspInit+0xcc>)
 80008aa:	2220      	movs	r2, #32
 80008ac:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80008ae:	4b0c      	ldr	r3, [pc, #48]	; (80008e0 <HAL_ADC_MspInit+0xcc>)
 80008b0:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 80008b4:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80008b6:	480a      	ldr	r0, [pc, #40]	; (80008e0 <HAL_ADC_MspInit+0xcc>)
 80008b8:	f001 f88c 	bl	80019d4 <HAL_DMA_Init>
 80008bc:	4603      	mov	r3, r0
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d001      	beq.n	80008c6 <HAL_ADC_MspInit+0xb2>
    {
      Error_Handler();
 80008c2:	f7ff ff79 	bl	80007b8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	4a05      	ldr	r2, [pc, #20]	; (80008e0 <HAL_ADC_MspInit+0xcc>)
 80008ca:	639a      	str	r2, [r3, #56]	; 0x38
 80008cc:	4a04      	ldr	r2, [pc, #16]	; (80008e0 <HAL_ADC_MspInit+0xcc>)
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80008d2:	bf00      	nop
 80008d4:	3728      	adds	r7, #40	; 0x28
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	40021000 	.word	0x40021000
 80008e0:	20000408 	.word	0x20000408
 80008e4:	40020008 	.word	0x40020008

080008e8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b08a      	sub	sp, #40	; 0x28
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008f0:	f107 0314 	add.w	r3, r7, #20
 80008f4:	2200      	movs	r2, #0
 80008f6:	601a      	str	r2, [r3, #0]
 80008f8:	605a      	str	r2, [r3, #4]
 80008fa:	609a      	str	r2, [r3, #8]
 80008fc:	60da      	str	r2, [r3, #12]
 80008fe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	4a17      	ldr	r2, [pc, #92]	; (8000964 <HAL_UART_MspInit+0x7c>)
 8000906:	4293      	cmp	r3, r2
 8000908:	d127      	bne.n	800095a <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800090a:	4b17      	ldr	r3, [pc, #92]	; (8000968 <HAL_UART_MspInit+0x80>)
 800090c:	699b      	ldr	r3, [r3, #24]
 800090e:	4a16      	ldr	r2, [pc, #88]	; (8000968 <HAL_UART_MspInit+0x80>)
 8000910:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000914:	6193      	str	r3, [r2, #24]
 8000916:	4b14      	ldr	r3, [pc, #80]	; (8000968 <HAL_UART_MspInit+0x80>)
 8000918:	699b      	ldr	r3, [r3, #24]
 800091a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800091e:	613b      	str	r3, [r7, #16]
 8000920:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000922:	4b11      	ldr	r3, [pc, #68]	; (8000968 <HAL_UART_MspInit+0x80>)
 8000924:	695b      	ldr	r3, [r3, #20]
 8000926:	4a10      	ldr	r2, [pc, #64]	; (8000968 <HAL_UART_MspInit+0x80>)
 8000928:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800092c:	6153      	str	r3, [r2, #20]
 800092e:	4b0e      	ldr	r3, [pc, #56]	; (8000968 <HAL_UART_MspInit+0x80>)
 8000930:	695b      	ldr	r3, [r3, #20]
 8000932:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000936:	60fb      	str	r3, [r7, #12]
 8000938:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800093a:	2330      	movs	r3, #48	; 0x30
 800093c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800093e:	2302      	movs	r3, #2
 8000940:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000942:	2300      	movs	r3, #0
 8000944:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000946:	2303      	movs	r3, #3
 8000948:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800094a:	2307      	movs	r3, #7
 800094c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800094e:	f107 0314 	add.w	r3, r7, #20
 8000952:	4619      	mov	r1, r3
 8000954:	4805      	ldr	r0, [pc, #20]	; (800096c <HAL_UART_MspInit+0x84>)
 8000956:	f001 f9d5 	bl	8001d04 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800095a:	bf00      	nop
 800095c:	3728      	adds	r7, #40	; 0x28
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	40013800 	.word	0x40013800
 8000968:	40021000 	.word	0x40021000
 800096c:	48000800 	.word	0x48000800

08000970 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b08c      	sub	sp, #48	; 0x30
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000978:	2300      	movs	r3, #0
 800097a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800097c:	2300      	movs	r3, #0
 800097e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM2 IRQ priority */
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0);
 8000980:	2200      	movs	r2, #0
 8000982:	6879      	ldr	r1, [r7, #4]
 8000984:	201c      	movs	r0, #28
 8000986:	f000 fffb 	bl	8001980 <HAL_NVIC_SetPriority>

  /* Enable the TIM2 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800098a:	201c      	movs	r0, #28
 800098c:	f001 f814 	bl	80019b8 <HAL_NVIC_EnableIRQ>

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8000990:	4b20      	ldr	r3, [pc, #128]	; (8000a14 <HAL_InitTick+0xa4>)
 8000992:	69db      	ldr	r3, [r3, #28]
 8000994:	4a1f      	ldr	r2, [pc, #124]	; (8000a14 <HAL_InitTick+0xa4>)
 8000996:	f043 0301 	orr.w	r3, r3, #1
 800099a:	61d3      	str	r3, [r2, #28]
 800099c:	4b1d      	ldr	r3, [pc, #116]	; (8000a14 <HAL_InitTick+0xa4>)
 800099e:	69db      	ldr	r3, [r3, #28]
 80009a0:	f003 0301 	and.w	r3, r3, #1
 80009a4:	60fb      	str	r3, [r7, #12]
 80009a6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80009a8:	f107 0210 	add.w	r2, r7, #16
 80009ac:	f107 0314 	add.w	r3, r7, #20
 80009b0:	4611      	mov	r1, r2
 80009b2:	4618      	mov	r0, r3
 80009b4:	f002 fd8c 	bl	80034d0 <HAL_RCC_GetClockConfig>

  /* Compute TIM2 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80009b8:	f002 fd46 	bl	8003448 <HAL_RCC_GetPCLK1Freq>
 80009bc:	4603      	mov	r3, r0
 80009be:	005b      	lsls	r3, r3, #1
 80009c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80009c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009c4:	4a14      	ldr	r2, [pc, #80]	; (8000a18 <HAL_InitTick+0xa8>)
 80009c6:	fba2 2303 	umull	r2, r3, r2, r3
 80009ca:	0c9b      	lsrs	r3, r3, #18
 80009cc:	3b01      	subs	r3, #1
 80009ce:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 80009d0:	4b12      	ldr	r3, [pc, #72]	; (8000a1c <HAL_InitTick+0xac>)
 80009d2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80009d6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 80009d8:	4b10      	ldr	r3, [pc, #64]	; (8000a1c <HAL_InitTick+0xac>)
 80009da:	f240 32e7 	movw	r2, #999	; 0x3e7
 80009de:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 80009e0:	4a0e      	ldr	r2, [pc, #56]	; (8000a1c <HAL_InitTick+0xac>)
 80009e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009e4:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 80009e6:	4b0d      	ldr	r3, [pc, #52]	; (8000a1c <HAL_InitTick+0xac>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009ec:	4b0b      	ldr	r3, [pc, #44]	; (8000a1c <HAL_InitTick+0xac>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 80009f2:	480a      	ldr	r0, [pc, #40]	; (8000a1c <HAL_InitTick+0xac>)
 80009f4:	f002 ff30 	bl	8003858 <HAL_TIM_Base_Init>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d104      	bne.n	8000a08 <HAL_InitTick+0x98>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim2);
 80009fe:	4807      	ldr	r0, [pc, #28]	; (8000a1c <HAL_InitTick+0xac>)
 8000a00:	f002 ff8c 	bl	800391c <HAL_TIM_Base_Start_IT>
 8000a04:	4603      	mov	r3, r0
 8000a06:	e000      	b.n	8000a0a <HAL_InitTick+0x9a>
  }

  /* Return function status */
  return HAL_ERROR;
 8000a08:	2301      	movs	r3, #1
}
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	3730      	adds	r7, #48	; 0x30
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	40021000 	.word	0x40021000
 8000a18:	431bde83 	.word	0x431bde83
 8000a1c:	20000548 	.word	0x20000548

08000a20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a20:	b480      	push	{r7}
 8000a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a24:	e7fe      	b.n	8000a24 <NMI_Handler+0x4>

08000a26 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a26:	b480      	push	{r7}
 8000a28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a2a:	e7fe      	b.n	8000a2a <HardFault_Handler+0x4>

08000a2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a30:	e7fe      	b.n	8000a30 <MemManage_Handler+0x4>

08000a32 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a32:	b480      	push	{r7}
 8000a34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a36:	e7fe      	b.n	8000a36 <BusFault_Handler+0x4>

08000a38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a3c:	e7fe      	b.n	8000a3c <UsageFault_Handler+0x4>

08000a3e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a3e:	b480      	push	{r7}
 8000a40:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a42:	bf00      	nop
 8000a44:	46bd      	mov	sp, r7
 8000a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4a:	4770      	bx	lr

08000a4c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000a50:	4802      	ldr	r0, [pc, #8]	; (8000a5c <DMA1_Channel1_IRQHandler+0x10>)
 8000a52:	f001 f865 	bl	8001b20 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000a56:	bf00      	nop
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	20000408 	.word	0x20000408

08000a60 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000a64:	4802      	ldr	r0, [pc, #8]	; (8000a70 <TIM2_IRQHandler+0x10>)
 8000a66:	f002 ffad 	bl	80039c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000a6a:	bf00      	nop
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	bf00      	nop
 8000a70:	20000548 	.word	0x20000548

08000a74 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b086      	sub	sp, #24
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a7c:	4a14      	ldr	r2, [pc, #80]	; (8000ad0 <_sbrk+0x5c>)
 8000a7e:	4b15      	ldr	r3, [pc, #84]	; (8000ad4 <_sbrk+0x60>)
 8000a80:	1ad3      	subs	r3, r2, r3
 8000a82:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a84:	697b      	ldr	r3, [r7, #20]
 8000a86:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a88:	4b13      	ldr	r3, [pc, #76]	; (8000ad8 <_sbrk+0x64>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d102      	bne.n	8000a96 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a90:	4b11      	ldr	r3, [pc, #68]	; (8000ad8 <_sbrk+0x64>)
 8000a92:	4a12      	ldr	r2, [pc, #72]	; (8000adc <_sbrk+0x68>)
 8000a94:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a96:	4b10      	ldr	r3, [pc, #64]	; (8000ad8 <_sbrk+0x64>)
 8000a98:	681a      	ldr	r2, [r3, #0]
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	4413      	add	r3, r2
 8000a9e:	693a      	ldr	r2, [r7, #16]
 8000aa0:	429a      	cmp	r2, r3
 8000aa2:	d207      	bcs.n	8000ab4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000aa4:	f006 fc8a 	bl	80073bc <__errno>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	220c      	movs	r2, #12
 8000aac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000aae:	f04f 33ff 	mov.w	r3, #4294967295
 8000ab2:	e009      	b.n	8000ac8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ab4:	4b08      	ldr	r3, [pc, #32]	; (8000ad8 <_sbrk+0x64>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000aba:	4b07      	ldr	r3, [pc, #28]	; (8000ad8 <_sbrk+0x64>)
 8000abc:	681a      	ldr	r2, [r3, #0]
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	4413      	add	r3, r2
 8000ac2:	4a05      	ldr	r2, [pc, #20]	; (8000ad8 <_sbrk+0x64>)
 8000ac4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ac6:	68fb      	ldr	r3, [r7, #12]
}
 8000ac8:	4618      	mov	r0, r3
 8000aca:	3718      	adds	r7, #24
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bd80      	pop	{r7, pc}
 8000ad0:	20004000 	.word	0x20004000
 8000ad4:	00000400 	.word	0x00000400
 8000ad8:	20000594 	.word	0x20000594
 8000adc:	20001fa8 	.word	0x20001fa8

08000ae0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ae4:	4b06      	ldr	r3, [pc, #24]	; (8000b00 <SystemInit+0x20>)
 8000ae6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000aea:	4a05      	ldr	r2, [pc, #20]	; (8000b00 <SystemInit+0x20>)
 8000aec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000af0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000af4:	bf00      	nop
 8000af6:	46bd      	mov	sp, r7
 8000af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop
 8000b00:	e000ed00 	.word	0xe000ed00

08000b04 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000b04:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b3c <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b08:	f7ff ffea 	bl	8000ae0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b0c:	480c      	ldr	r0, [pc, #48]	; (8000b40 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b0e:	490d      	ldr	r1, [pc, #52]	; (8000b44 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b10:	4a0d      	ldr	r2, [pc, #52]	; (8000b48 <LoopForever+0xe>)
  movs r3, #0
 8000b12:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b14:	e002      	b.n	8000b1c <LoopCopyDataInit>

08000b16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b1a:	3304      	adds	r3, #4

08000b1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b20:	d3f9      	bcc.n	8000b16 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b22:	4a0a      	ldr	r2, [pc, #40]	; (8000b4c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b24:	4c0a      	ldr	r4, [pc, #40]	; (8000b50 <LoopForever+0x16>)
  movs r3, #0
 8000b26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b28:	e001      	b.n	8000b2e <LoopFillZerobss>

08000b2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b2c:	3204      	adds	r2, #4

08000b2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b30:	d3fb      	bcc.n	8000b2a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b32:	f006 fc49 	bl	80073c8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b36:	f7ff fbe5 	bl	8000304 <main>

08000b3a <LoopForever>:

LoopForever:
    b LoopForever
 8000b3a:	e7fe      	b.n	8000b3a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000b3c:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8000b40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b44:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000b48:	08007e04 	.word	0x08007e04
  ldr r2, =_sbss
 8000b4c:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000b50:	20001fa4 	.word	0x20001fa4

08000b54 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b54:	e7fe      	b.n	8000b54 <ADC1_IRQHandler>
	...

08000b58 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b5c:	4b08      	ldr	r3, [pc, #32]	; (8000b80 <HAL_Init+0x28>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	4a07      	ldr	r2, [pc, #28]	; (8000b80 <HAL_Init+0x28>)
 8000b62:	f043 0310 	orr.w	r3, r3, #16
 8000b66:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b68:	2003      	movs	r0, #3
 8000b6a:	f000 fefe 	bl	800196a <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b6e:	200f      	movs	r0, #15
 8000b70:	f7ff fefe 	bl	8000970 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b74:	f7ff fe26 	bl	80007c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b78:	2300      	movs	r3, #0
}
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	40022000 	.word	0x40022000

08000b84 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b88:	4b06      	ldr	r3, [pc, #24]	; (8000ba4 <HAL_IncTick+0x20>)
 8000b8a:	781b      	ldrb	r3, [r3, #0]
 8000b8c:	461a      	mov	r2, r3
 8000b8e:	4b06      	ldr	r3, [pc, #24]	; (8000ba8 <HAL_IncTick+0x24>)
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	4413      	add	r3, r2
 8000b94:	4a04      	ldr	r2, [pc, #16]	; (8000ba8 <HAL_IncTick+0x24>)
 8000b96:	6013      	str	r3, [r2, #0]
}
 8000b98:	bf00      	nop
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba0:	4770      	bx	lr
 8000ba2:	bf00      	nop
 8000ba4:	20000008 	.word	0x20000008
 8000ba8:	20000598 	.word	0x20000598

08000bac <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0
  return uwTick;  
 8000bb0:	4b03      	ldr	r3, [pc, #12]	; (8000bc0 <HAL_GetTick+0x14>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
}
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbc:	4770      	bx	lr
 8000bbe:	bf00      	nop
 8000bc0:	20000598 	.word	0x20000598

08000bc4 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	b083      	sub	sp, #12
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8000bcc:	bf00      	nop
 8000bce:	370c      	adds	r7, #12
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd6:	4770      	bx	lr

08000bd8 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	b083      	sub	sp, #12
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8000be0:	bf00      	nop
 8000be2:	370c      	adds	r7, #12
 8000be4:	46bd      	mov	sp, r7
 8000be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bea:	4770      	bx	lr

08000bec <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8000bec:	b480      	push	{r7}
 8000bee:	b083      	sub	sp, #12
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8000bf4:	bf00      	nop
 8000bf6:	370c      	adds	r7, #12
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfe:	4770      	bx	lr

08000c00 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b09a      	sub	sp, #104	; 0x68
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8000c12:	2300      	movs	r3, #0
 8000c14:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d101      	bne.n	8000c20 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8000c1c:	2301      	movs	r3, #1
 8000c1e:	e169      	b.n	8000ef4 <HAL_ADC_Init+0x2f4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	691b      	ldr	r3, [r3, #16]
 8000c24:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c2a:	f003 0310 	and.w	r3, r3, #16
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d176      	bne.n	8000d20 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d152      	bne.n	8000ce0 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	2200      	movs	r2, #0
 8000c44:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	2200      	movs	r2, #0
 8000c4a:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	2200      	movs	r2, #0
 8000c50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000c54:	6878      	ldr	r0, [r7, #4]
 8000c56:	f7ff fddd 	bl	8000814 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	689b      	ldr	r3, [r3, #8]
 8000c60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d13b      	bne.n	8000ce0 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8000c68:	6878      	ldr	r0, [r7, #4]
 8000c6a:	f000 fd6b 	bl	8001744 <ADC_Disable>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c78:	f003 0310 	and.w	r3, r3, #16
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d12f      	bne.n	8000ce0 <HAL_ADC_Init+0xe0>
 8000c80:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d12b      	bne.n	8000ce0 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c8c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000c90:	f023 0302 	bic.w	r3, r3, #2
 8000c94:	f043 0202 	orr.w	r2, r3, #2
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	689a      	ldr	r2, [r3, #8]
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000caa:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	689a      	ldr	r2, [r3, #8]
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000cba:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000cbc:	4b8f      	ldr	r3, [pc, #572]	; (8000efc <HAL_ADC_Init+0x2fc>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	4a8f      	ldr	r2, [pc, #572]	; (8000f00 <HAL_ADC_Init+0x300>)
 8000cc2:	fba2 2303 	umull	r2, r3, r2, r3
 8000cc6:	0c9a      	lsrs	r2, r3, #18
 8000cc8:	4613      	mov	r3, r2
 8000cca:	009b      	lsls	r3, r3, #2
 8000ccc:	4413      	add	r3, r2
 8000cce:	005b      	lsls	r3, r3, #1
 8000cd0:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000cd2:	e002      	b.n	8000cda <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8000cd4:	68bb      	ldr	r3, [r7, #8]
 8000cd6:	3b01      	subs	r3, #1
 8000cd8:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000cda:	68bb      	ldr	r3, [r7, #8]
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d1f9      	bne.n	8000cd4 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	689b      	ldr	r3, [r3, #8]
 8000ce6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d007      	beq.n	8000cfe <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	689b      	ldr	r3, [r3, #8]
 8000cf4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000cf8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000cfc:	d110      	bne.n	8000d20 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d02:	f023 0312 	bic.w	r3, r3, #18
 8000d06:	f043 0210 	orr.w	r2, r3, #16
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d12:	f043 0201 	orr.w	r2, r3, #1
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8000d1a:	2301      	movs	r3, #1
 8000d1c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d24:	f003 0310 	and.w	r3, r3, #16
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	f040 80d6 	bne.w	8000eda <HAL_ADC_Init+0x2da>
 8000d2e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	f040 80d1 	bne.w	8000eda <HAL_ADC_Init+0x2da>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	689b      	ldr	r3, [r3, #8]
 8000d3e:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	f040 80c9 	bne.w	8000eda <HAL_ADC_Init+0x2da>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d4c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8000d50:	f043 0202 	orr.w	r2, r3, #2
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000d58:	4b6a      	ldr	r3, [pc, #424]	; (8000f04 <HAL_ADC_Init+0x304>)
 8000d5a:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	689b      	ldr	r3, [r3, #8]
 8000d66:	f003 0303 	and.w	r3, r3, #3
 8000d6a:	2b01      	cmp	r3, #1
 8000d6c:	d108      	bne.n	8000d80 <HAL_ADC_Init+0x180>
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	f003 0301 	and.w	r3, r3, #1
 8000d78:	2b01      	cmp	r3, #1
 8000d7a:	d101      	bne.n	8000d80 <HAL_ADC_Init+0x180>
 8000d7c:	2301      	movs	r3, #1
 8000d7e:	e000      	b.n	8000d82 <HAL_ADC_Init+0x182>
 8000d80:	2300      	movs	r3, #0
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d11c      	bne.n	8000dc0 <HAL_ADC_Init+0x1c0>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000d86:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d010      	beq.n	8000dae <HAL_ADC_Init+0x1ae>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	689b      	ldr	r3, [r3, #8]
 8000d90:	f003 0303 	and.w	r3, r3, #3
 8000d94:	2b01      	cmp	r3, #1
 8000d96:	d107      	bne.n	8000da8 <HAL_ADC_Init+0x1a8>
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	f003 0301 	and.w	r3, r3, #1
 8000da0:	2b01      	cmp	r3, #1
 8000da2:	d101      	bne.n	8000da8 <HAL_ADC_Init+0x1a8>
 8000da4:	2301      	movs	r3, #1
 8000da6:	e000      	b.n	8000daa <HAL_ADC_Init+0x1aa>
 8000da8:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d108      	bne.n	8000dc0 <HAL_ADC_Init+0x1c0>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8000dae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000db0:	689b      	ldr	r3, [r3, #8]
 8000db2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	685b      	ldr	r3, [r3, #4]
 8000dba:	431a      	orrs	r2, r3
 8000dbc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000dbe:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	7e5b      	ldrb	r3, [r3, #25]
 8000dc4:	035b      	lsls	r3, r3, #13
 8000dc6:	687a      	ldr	r2, [r7, #4]
 8000dc8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8000dca:	2a01      	cmp	r2, #1
 8000dcc:	d002      	beq.n	8000dd4 <HAL_ADC_Init+0x1d4>
 8000dce:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000dd2:	e000      	b.n	8000dd6 <HAL_ADC_Init+0x1d6>
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	431a      	orrs	r2, r3
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	68db      	ldr	r3, [r3, #12]
 8000ddc:	431a      	orrs	r2, r3
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	689b      	ldr	r3, [r3, #8]
 8000de2:	4313      	orrs	r3, r2
 8000de4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000de6:	4313      	orrs	r3, r2
 8000de8:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000df0:	2b01      	cmp	r3, #1
 8000df2:	d11b      	bne.n	8000e2c <HAL_ADC_Init+0x22c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	7e5b      	ldrb	r3, [r3, #25]
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d109      	bne.n	8000e10 <HAL_ADC_Init+0x210>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e00:	3b01      	subs	r3, #1
 8000e02:	045a      	lsls	r2, r3, #17
 8000e04:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000e06:	4313      	orrs	r3, r2
 8000e08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e0c:	663b      	str	r3, [r7, #96]	; 0x60
 8000e0e:	e00d      	b.n	8000e2c <HAL_ADC_Init+0x22c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e14:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8000e18:	f043 0220 	orr.w	r2, r3, #32
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e24:	f043 0201 	orr.w	r2, r3, #1
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e30:	2b01      	cmp	r3, #1
 8000e32:	d007      	beq.n	8000e44 <HAL_ADC_Init+0x244>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e3c:	4313      	orrs	r3, r2
 8000e3e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000e40:	4313      	orrs	r3, r2
 8000e42:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	689b      	ldr	r3, [r3, #8]
 8000e4a:	f003 030c 	and.w	r3, r3, #12
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d114      	bne.n	8000e7c <HAL_ADC_Init+0x27c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	68db      	ldr	r3, [r3, #12]
 8000e58:	687a      	ldr	r2, [r7, #4]
 8000e5a:	6812      	ldr	r2, [r2, #0]
 8000e5c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000e60:	f023 0302 	bic.w	r3, r3, #2
 8000e64:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	7e1b      	ldrb	r3, [r3, #24]
 8000e6a:	039a      	lsls	r2, r3, #14
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000e72:	005b      	lsls	r3, r3, #1
 8000e74:	4313      	orrs	r3, r2
 8000e76:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000e78:	4313      	orrs	r3, r2
 8000e7a:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	68da      	ldr	r2, [r3, #12]
 8000e82:	4b21      	ldr	r3, [pc, #132]	; (8000f08 <HAL_ADC_Init+0x308>)
 8000e84:	4013      	ands	r3, r2
 8000e86:	687a      	ldr	r2, [r7, #4]
 8000e88:	6812      	ldr	r2, [r2, #0]
 8000e8a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8000e8c:	430b      	orrs	r3, r1
 8000e8e:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	691b      	ldr	r3, [r3, #16]
 8000e94:	2b01      	cmp	r3, #1
 8000e96:	d10c      	bne.n	8000eb2 <HAL_ADC_Init+0x2b2>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e9e:	f023 010f 	bic.w	r1, r3, #15
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	69db      	ldr	r3, [r3, #28]
 8000ea6:	1e5a      	subs	r2, r3, #1
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	430a      	orrs	r2, r1
 8000eae:	631a      	str	r2, [r3, #48]	; 0x30
 8000eb0:	e007      	b.n	8000ec2 <HAL_ADC_Init+0x2c2>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	f022 020f 	bic.w	r2, r2, #15
 8000ec0:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ecc:	f023 0303 	bic.w	r3, r3, #3
 8000ed0:	f043 0201 	orr.w	r2, r3, #1
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	641a      	str	r2, [r3, #64]	; 0x40
 8000ed8:	e00a      	b.n	8000ef0 <HAL_ADC_Init+0x2f0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ede:	f023 0312 	bic.w	r3, r3, #18
 8000ee2:	f043 0210 	orr.w	r2, r3, #16
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8000eea:	2301      	movs	r3, #1
 8000eec:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8000ef0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	3768      	adds	r7, #104	; 0x68
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	20000000 	.word	0x20000000
 8000f00:	431bde83 	.word	0x431bde83
 8000f04:	50000300 	.word	0x50000300
 8000f08:	fff0c007 	.word	0xfff0c007

08000f0c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b086      	sub	sp, #24
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	60f8      	str	r0, [r7, #12]
 8000f14:	60b9      	str	r1, [r7, #8]
 8000f16:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	689b      	ldr	r3, [r3, #8]
 8000f22:	f003 0304 	and.w	r3, r3, #4
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d17e      	bne.n	8001028 <HAL_ADC_Start_DMA+0x11c>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000f30:	2b01      	cmp	r3, #1
 8000f32:	d101      	bne.n	8000f38 <HAL_ADC_Start_DMA+0x2c>
 8000f34:	2302      	movs	r3, #2
 8000f36:	e07a      	b.n	800102e <HAL_ADC_Start_DMA+0x122>
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	2201      	movs	r2, #1
 8000f3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* If multimode is enabled, dedicated function multimode conversion       */
    /* start DMA must be used.                                                */
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8000f40:	68f8      	ldr	r0, [r7, #12]
 8000f42:	f000 fb9b 	bl	800167c <ADC_Enable>
 8000f46:	4603      	mov	r3, r0
 8000f48:	75fb      	strb	r3, [r7, #23]
      
      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8000f4a:	7dfb      	ldrb	r3, [r7, #23]
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d166      	bne.n	800101e <HAL_ADC_Start_DMA+0x112>
      {
        /* Set ADC state                                                      */
        /* - Clear state bitfield related to regular group conversion results */
        /* - Set state bitfield related to regular operation                  */
        ADC_STATE_CLR_SET(hadc->State,
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f54:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000f58:	f023 0301 	bic.w	r3, r3, #1
 8000f5c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	641a      	str	r2, [r3, #64]	; 0x40
        /* for all cases of multimode: independent mode, multimode ADC master */
        /* or multimode ADC slave (for devices with several ADCs):            */
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
        {
          /* Set ADC state (ADC independent or master) */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f68:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	68db      	ldr	r3, [r3, #12]
 8000f76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d007      	beq.n	8000f8e <HAL_ADC_Start_DMA+0x82>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f82:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000f86:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	641a      	str	r2, [r3, #64]	; 0x40
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
          }
        }
        
        /* State machine update: Check if an injected conversion is ongoing */
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f92:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000f9a:	d106      	bne.n	8000faa <HAL_ADC_Start_DMA+0x9e>
        {
          /* Reset ADC error code fields related to conversions on group regular*/
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fa0:	f023 0206 	bic.w	r2, r3, #6
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	645a      	str	r2, [r3, #68]	; 0x44
 8000fa8:	e002      	b.n	8000fb0 <HAL_ADC_Start_DMA+0xa4>
        }
        else
        {
          /* Reset ADC all error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	2200      	movs	r2, #0
 8000fae:	645a      	str	r2, [r3, #68]	; 0x44
        }
        
        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        
        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000fbc:	4a1e      	ldr	r2, [pc, #120]	; (8001038 <HAL_ADC_Start_DMA+0x12c>)
 8000fbe:	629a      	str	r2, [r3, #40]	; 0x28

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000fc4:	4a1d      	ldr	r2, [pc, #116]	; (800103c <HAL_ADC_Start_DMA+0x130>)
 8000fc6:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000fcc:	4a1c      	ldr	r2, [pc, #112]	; (8001040 <HAL_ADC_Start_DMA+0x134>)
 8000fce:	631a      	str	r2, [r3, #48]	; 0x30
        /* start (in case of SW start):                                       */
        
        /* Clear regular group conversion flag and overrun flag */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	221c      	movs	r2, #28
 8000fd6:	601a      	str	r2, [r3, #0]
        
        /* Enable ADC overrun interrupt */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	685a      	ldr	r2, [r3, #4]
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	f042 0210 	orr.w	r2, r2, #16
 8000fe6:	605a      	str	r2, [r3, #4]
        
        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	68da      	ldr	r2, [r3, #12]
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	f042 0201 	orr.w	r2, r2, #1
 8000ff6:	60da      	str	r2, [r3, #12]
        
        /* Start the DMA channel */
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	3340      	adds	r3, #64	; 0x40
 8001002:	4619      	mov	r1, r3
 8001004:	68ba      	ldr	r2, [r7, #8]
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	f000 fd2b 	bl	8001a62 <HAL_DMA_Start_IT>
                 
        /* Enable conversion of regular group.                                */
        /* If software start has been selected, conversion starts immediately.*/
        /* If external trigger has been selected, conversion will start at    */
        /* next trigger event.                                                */
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	689a      	ldr	r2, [r3, #8]
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	f042 0204 	orr.w	r2, r2, #4
 800101a:	609a      	str	r2, [r3, #8]
 800101c:	e006      	b.n	800102c <HAL_ADC_Start_DMA+0x120>
        
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	2200      	movs	r2, #0
 8001022:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8001026:	e001      	b.n	800102c <HAL_ADC_Start_DMA+0x120>
      __HAL_UNLOCK(hadc);
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001028:	2302      	movs	r3, #2
 800102a:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800102c:	7dfb      	ldrb	r3, [r7, #23]
}
 800102e:	4618      	mov	r0, r3
 8001030:	3718      	adds	r7, #24
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	080015b1 	.word	0x080015b1
 800103c:	0800162b 	.word	0x0800162b
 8001040:	08001647 	.word	0x08001647

08001044 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001044:	b480      	push	{r7}
 8001046:	b09b      	sub	sp, #108	; 0x6c
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
 800104c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800104e:	2300      	movs	r3, #0
 8001050:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8001054:	2300      	movs	r3, #0
 8001056:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800105e:	2b01      	cmp	r3, #1
 8001060:	d101      	bne.n	8001066 <HAL_ADC_ConfigChannel+0x22>
 8001062:	2302      	movs	r3, #2
 8001064:	e299      	b.n	800159a <HAL_ADC_ConfigChannel+0x556>
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	2201      	movs	r2, #1
 800106a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	689b      	ldr	r3, [r3, #8]
 8001074:	f003 0304 	and.w	r3, r3, #4
 8001078:	2b00      	cmp	r3, #0
 800107a:	f040 827d 	bne.w	8001578 <HAL_ADC_ConfigChannel+0x534>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	685b      	ldr	r3, [r3, #4]
 8001082:	2b04      	cmp	r3, #4
 8001084:	d81c      	bhi.n	80010c0 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	685a      	ldr	r2, [r3, #4]
 8001090:	4613      	mov	r3, r2
 8001092:	005b      	lsls	r3, r3, #1
 8001094:	4413      	add	r3, r2
 8001096:	005b      	lsls	r3, r3, #1
 8001098:	461a      	mov	r2, r3
 800109a:	231f      	movs	r3, #31
 800109c:	4093      	lsls	r3, r2
 800109e:	43db      	mvns	r3, r3
 80010a0:	4019      	ands	r1, r3
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	6818      	ldr	r0, [r3, #0]
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	685a      	ldr	r2, [r3, #4]
 80010aa:	4613      	mov	r3, r2
 80010ac:	005b      	lsls	r3, r3, #1
 80010ae:	4413      	add	r3, r2
 80010b0:	005b      	lsls	r3, r3, #1
 80010b2:	fa00 f203 	lsl.w	r2, r0, r3
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	430a      	orrs	r2, r1
 80010bc:	631a      	str	r2, [r3, #48]	; 0x30
 80010be:	e063      	b.n	8001188 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	685b      	ldr	r3, [r3, #4]
 80010c4:	2b09      	cmp	r3, #9
 80010c6:	d81e      	bhi.n	8001106 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	685a      	ldr	r2, [r3, #4]
 80010d2:	4613      	mov	r3, r2
 80010d4:	005b      	lsls	r3, r3, #1
 80010d6:	4413      	add	r3, r2
 80010d8:	005b      	lsls	r3, r3, #1
 80010da:	3b1e      	subs	r3, #30
 80010dc:	221f      	movs	r2, #31
 80010de:	fa02 f303 	lsl.w	r3, r2, r3
 80010e2:	43db      	mvns	r3, r3
 80010e4:	4019      	ands	r1, r3
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	6818      	ldr	r0, [r3, #0]
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	685a      	ldr	r2, [r3, #4]
 80010ee:	4613      	mov	r3, r2
 80010f0:	005b      	lsls	r3, r3, #1
 80010f2:	4413      	add	r3, r2
 80010f4:	005b      	lsls	r3, r3, #1
 80010f6:	3b1e      	subs	r3, #30
 80010f8:	fa00 f203 	lsl.w	r2, r0, r3
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	430a      	orrs	r2, r1
 8001102:	635a      	str	r2, [r3, #52]	; 0x34
 8001104:	e040      	b.n	8001188 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	685b      	ldr	r3, [r3, #4]
 800110a:	2b0e      	cmp	r3, #14
 800110c:	d81e      	bhi.n	800114c <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	685a      	ldr	r2, [r3, #4]
 8001118:	4613      	mov	r3, r2
 800111a:	005b      	lsls	r3, r3, #1
 800111c:	4413      	add	r3, r2
 800111e:	005b      	lsls	r3, r3, #1
 8001120:	3b3c      	subs	r3, #60	; 0x3c
 8001122:	221f      	movs	r2, #31
 8001124:	fa02 f303 	lsl.w	r3, r2, r3
 8001128:	43db      	mvns	r3, r3
 800112a:	4019      	ands	r1, r3
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	6818      	ldr	r0, [r3, #0]
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	685a      	ldr	r2, [r3, #4]
 8001134:	4613      	mov	r3, r2
 8001136:	005b      	lsls	r3, r3, #1
 8001138:	4413      	add	r3, r2
 800113a:	005b      	lsls	r3, r3, #1
 800113c:	3b3c      	subs	r3, #60	; 0x3c
 800113e:	fa00 f203 	lsl.w	r2, r0, r3
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	430a      	orrs	r2, r1
 8001148:	639a      	str	r2, [r3, #56]	; 0x38
 800114a:	e01d      	b.n	8001188 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	685a      	ldr	r2, [r3, #4]
 8001156:	4613      	mov	r3, r2
 8001158:	005b      	lsls	r3, r3, #1
 800115a:	4413      	add	r3, r2
 800115c:	005b      	lsls	r3, r3, #1
 800115e:	3b5a      	subs	r3, #90	; 0x5a
 8001160:	221f      	movs	r2, #31
 8001162:	fa02 f303 	lsl.w	r3, r2, r3
 8001166:	43db      	mvns	r3, r3
 8001168:	4019      	ands	r1, r3
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	6818      	ldr	r0, [r3, #0]
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	685a      	ldr	r2, [r3, #4]
 8001172:	4613      	mov	r3, r2
 8001174:	005b      	lsls	r3, r3, #1
 8001176:	4413      	add	r3, r2
 8001178:	005b      	lsls	r3, r3, #1
 800117a:	3b5a      	subs	r3, #90	; 0x5a
 800117c:	fa00 f203 	lsl.w	r2, r0, r3
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	430a      	orrs	r2, r1
 8001186:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	689b      	ldr	r3, [r3, #8]
 800118e:	f003 030c 	and.w	r3, r3, #12
 8001192:	2b00      	cmp	r3, #0
 8001194:	f040 80e5 	bne.w	8001362 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	2b09      	cmp	r3, #9
 800119e:	d91c      	bls.n	80011da <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	6999      	ldr	r1, [r3, #24]
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	681a      	ldr	r2, [r3, #0]
 80011aa:	4613      	mov	r3, r2
 80011ac:	005b      	lsls	r3, r3, #1
 80011ae:	4413      	add	r3, r2
 80011b0:	3b1e      	subs	r3, #30
 80011b2:	2207      	movs	r2, #7
 80011b4:	fa02 f303 	lsl.w	r3, r2, r3
 80011b8:	43db      	mvns	r3, r3
 80011ba:	4019      	ands	r1, r3
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	6898      	ldr	r0, [r3, #8]
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	681a      	ldr	r2, [r3, #0]
 80011c4:	4613      	mov	r3, r2
 80011c6:	005b      	lsls	r3, r3, #1
 80011c8:	4413      	add	r3, r2
 80011ca:	3b1e      	subs	r3, #30
 80011cc:	fa00 f203 	lsl.w	r2, r0, r3
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	430a      	orrs	r2, r1
 80011d6:	619a      	str	r2, [r3, #24]
 80011d8:	e019      	b.n	800120e <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	6959      	ldr	r1, [r3, #20]
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	681a      	ldr	r2, [r3, #0]
 80011e4:	4613      	mov	r3, r2
 80011e6:	005b      	lsls	r3, r3, #1
 80011e8:	4413      	add	r3, r2
 80011ea:	2207      	movs	r2, #7
 80011ec:	fa02 f303 	lsl.w	r3, r2, r3
 80011f0:	43db      	mvns	r3, r3
 80011f2:	4019      	ands	r1, r3
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	6898      	ldr	r0, [r3, #8]
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	681a      	ldr	r2, [r3, #0]
 80011fc:	4613      	mov	r3, r2
 80011fe:	005b      	lsls	r3, r3, #1
 8001200:	4413      	add	r3, r2
 8001202:	fa00 f203 	lsl.w	r2, r0, r3
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	430a      	orrs	r2, r1
 800120c:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	695a      	ldr	r2, [r3, #20]
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	68db      	ldr	r3, [r3, #12]
 8001218:	08db      	lsrs	r3, r3, #3
 800121a:	f003 0303 	and.w	r3, r3, #3
 800121e:	005b      	lsls	r3, r3, #1
 8001220:	fa02 f303 	lsl.w	r3, r2, r3
 8001224:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	691b      	ldr	r3, [r3, #16]
 800122a:	3b01      	subs	r3, #1
 800122c:	2b03      	cmp	r3, #3
 800122e:	d84f      	bhi.n	80012d0 <HAL_ADC_ConfigChannel+0x28c>
 8001230:	a201      	add	r2, pc, #4	; (adr r2, 8001238 <HAL_ADC_ConfigChannel+0x1f4>)
 8001232:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001236:	bf00      	nop
 8001238:	08001249 	.word	0x08001249
 800123c:	0800126b 	.word	0x0800126b
 8001240:	0800128d 	.word	0x0800128d
 8001244:	080012af 	.word	0x080012af
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800124e:	4b99      	ldr	r3, [pc, #612]	; (80014b4 <HAL_ADC_ConfigChannel+0x470>)
 8001250:	4013      	ands	r3, r2
 8001252:	683a      	ldr	r2, [r7, #0]
 8001254:	6812      	ldr	r2, [r2, #0]
 8001256:	0691      	lsls	r1, r2, #26
 8001258:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800125a:	430a      	orrs	r2, r1
 800125c:	431a      	orrs	r2, r3
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001266:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001268:	e07e      	b.n	8001368 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001270:	4b90      	ldr	r3, [pc, #576]	; (80014b4 <HAL_ADC_ConfigChannel+0x470>)
 8001272:	4013      	ands	r3, r2
 8001274:	683a      	ldr	r2, [r7, #0]
 8001276:	6812      	ldr	r2, [r2, #0]
 8001278:	0691      	lsls	r1, r2, #26
 800127a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800127c:	430a      	orrs	r2, r1
 800127e:	431a      	orrs	r2, r3
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001288:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800128a:	e06d      	b.n	8001368 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001292:	4b88      	ldr	r3, [pc, #544]	; (80014b4 <HAL_ADC_ConfigChannel+0x470>)
 8001294:	4013      	ands	r3, r2
 8001296:	683a      	ldr	r2, [r7, #0]
 8001298:	6812      	ldr	r2, [r2, #0]
 800129a:	0691      	lsls	r1, r2, #26
 800129c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800129e:	430a      	orrs	r2, r1
 80012a0:	431a      	orrs	r2, r3
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80012aa:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80012ac:	e05c      	b.n	8001368 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80012b4:	4b7f      	ldr	r3, [pc, #508]	; (80014b4 <HAL_ADC_ConfigChannel+0x470>)
 80012b6:	4013      	ands	r3, r2
 80012b8:	683a      	ldr	r2, [r7, #0]
 80012ba:	6812      	ldr	r2, [r2, #0]
 80012bc:	0691      	lsls	r1, r2, #26
 80012be:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80012c0:	430a      	orrs	r2, r1
 80012c2:	431a      	orrs	r2, r3
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80012cc:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80012ce:	e04b      	b.n	8001368 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012d6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	069b      	lsls	r3, r3, #26
 80012e0:	429a      	cmp	r2, r3
 80012e2:	d107      	bne.n	80012f4 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80012f2:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80012fa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	069b      	lsls	r3, r3, #26
 8001304:	429a      	cmp	r2, r3
 8001306:	d107      	bne.n	8001318 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001316:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800131e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	069b      	lsls	r3, r3, #26
 8001328:	429a      	cmp	r2, r3
 800132a:	d107      	bne.n	800133c <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800133a:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001342:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	069b      	lsls	r3, r3, #26
 800134c:	429a      	cmp	r2, r3
 800134e:	d10a      	bne.n	8001366 <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800135e:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8001360:	e001      	b.n	8001366 <HAL_ADC_ConfigChannel+0x322>
    }

  }
 8001362:	bf00      	nop
 8001364:	e000      	b.n	8001368 <HAL_ADC_ConfigChannel+0x324>
      break;
 8001366:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	689b      	ldr	r3, [r3, #8]
 800136e:	f003 0303 	and.w	r3, r3, #3
 8001372:	2b01      	cmp	r3, #1
 8001374:	d108      	bne.n	8001388 <HAL_ADC_ConfigChannel+0x344>
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f003 0301 	and.w	r3, r3, #1
 8001380:	2b01      	cmp	r3, #1
 8001382:	d101      	bne.n	8001388 <HAL_ADC_ConfigChannel+0x344>
 8001384:	2301      	movs	r3, #1
 8001386:	e000      	b.n	800138a <HAL_ADC_ConfigChannel+0x346>
 8001388:	2300      	movs	r3, #0
 800138a:	2b00      	cmp	r3, #0
 800138c:	f040 80ff 	bne.w	800158e <HAL_ADC_ConfigChannel+0x54a>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	68db      	ldr	r3, [r3, #12]
 8001394:	2b01      	cmp	r3, #1
 8001396:	d00f      	beq.n	80013b8 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	2201      	movs	r2, #1
 80013a6:	fa02 f303 	lsl.w	r3, r2, r3
 80013aa:	43da      	mvns	r2, r3
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	400a      	ands	r2, r1
 80013b2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 80013b6:	e049      	b.n	800144c <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	2201      	movs	r2, #1
 80013c6:	409a      	lsls	r2, r3
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	430a      	orrs	r2, r1
 80013ce:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	2b09      	cmp	r3, #9
 80013d8:	d91c      	bls.n	8001414 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	6999      	ldr	r1, [r3, #24]
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	681a      	ldr	r2, [r3, #0]
 80013e4:	4613      	mov	r3, r2
 80013e6:	005b      	lsls	r3, r3, #1
 80013e8:	4413      	add	r3, r2
 80013ea:	3b1b      	subs	r3, #27
 80013ec:	2207      	movs	r2, #7
 80013ee:	fa02 f303 	lsl.w	r3, r2, r3
 80013f2:	43db      	mvns	r3, r3
 80013f4:	4019      	ands	r1, r3
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	6898      	ldr	r0, [r3, #8]
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	681a      	ldr	r2, [r3, #0]
 80013fe:	4613      	mov	r3, r2
 8001400:	005b      	lsls	r3, r3, #1
 8001402:	4413      	add	r3, r2
 8001404:	3b1b      	subs	r3, #27
 8001406:	fa00 f203 	lsl.w	r2, r0, r3
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	430a      	orrs	r2, r1
 8001410:	619a      	str	r2, [r3, #24]
 8001412:	e01b      	b.n	800144c <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	6959      	ldr	r1, [r3, #20]
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	1c5a      	adds	r2, r3, #1
 8001420:	4613      	mov	r3, r2
 8001422:	005b      	lsls	r3, r3, #1
 8001424:	4413      	add	r3, r2
 8001426:	2207      	movs	r2, #7
 8001428:	fa02 f303 	lsl.w	r3, r2, r3
 800142c:	43db      	mvns	r3, r3
 800142e:	4019      	ands	r1, r3
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	6898      	ldr	r0, [r3, #8]
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	1c5a      	adds	r2, r3, #1
 800143a:	4613      	mov	r3, r2
 800143c:	005b      	lsls	r3, r3, #1
 800143e:	4413      	add	r3, r2
 8001440:	fa00 f203 	lsl.w	r2, r0, r3
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	430a      	orrs	r2, r1
 800144a:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800144c:	4b1a      	ldr	r3, [pc, #104]	; (80014b8 <HAL_ADC_ConfigChannel+0x474>)
 800144e:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	2b10      	cmp	r3, #16
 8001456:	d105      	bne.n	8001464 <HAL_ADC_ConfigChannel+0x420>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001458:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800145a:	689b      	ldr	r3, [r3, #8]
 800145c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001460:	2b00      	cmp	r3, #0
 8001462:	d014      	beq.n	800148e <HAL_ADC_ConfigChannel+0x44a>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001468:	2b11      	cmp	r3, #17
 800146a:	d105      	bne.n	8001478 <HAL_ADC_ConfigChannel+0x434>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 800146c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800146e:	689b      	ldr	r3, [r3, #8]
 8001470:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001474:	2b00      	cmp	r3, #0
 8001476:	d00a      	beq.n	800148e <HAL_ADC_ConfigChannel+0x44a>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 800147c:	2b12      	cmp	r3, #18
 800147e:	f040 8086 	bne.w	800158e <HAL_ADC_ConfigChannel+0x54a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8001482:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001484:	689b      	ldr	r3, [r3, #8]
 8001486:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800148a:	2b00      	cmp	r3, #0
 800148c:	d17f      	bne.n	800158e <HAL_ADC_ConfigChannel+0x54a>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800148e:	2300      	movs	r3, #0
 8001490:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	689b      	ldr	r3, [r3, #8]
 8001498:	f003 0303 	and.w	r3, r3, #3
 800149c:	2b01      	cmp	r3, #1
 800149e:	d10d      	bne.n	80014bc <HAL_ADC_ConfigChannel+0x478>
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f003 0301 	and.w	r3, r3, #1
 80014aa:	2b01      	cmp	r3, #1
 80014ac:	d106      	bne.n	80014bc <HAL_ADC_ConfigChannel+0x478>
 80014ae:	2301      	movs	r3, #1
 80014b0:	e005      	b.n	80014be <HAL_ADC_ConfigChannel+0x47a>
 80014b2:	bf00      	nop
 80014b4:	83fff000 	.word	0x83fff000
 80014b8:	50000300 	.word	0x50000300
 80014bc:	2300      	movs	r3, #0
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d150      	bne.n	8001564 <HAL_ADC_ConfigChannel+0x520>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80014c2:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d010      	beq.n	80014ea <HAL_ADC_ConfigChannel+0x4a6>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	689b      	ldr	r3, [r3, #8]
 80014cc:	f003 0303 	and.w	r3, r3, #3
 80014d0:	2b01      	cmp	r3, #1
 80014d2:	d107      	bne.n	80014e4 <HAL_ADC_ConfigChannel+0x4a0>
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f003 0301 	and.w	r3, r3, #1
 80014dc:	2b01      	cmp	r3, #1
 80014de:	d101      	bne.n	80014e4 <HAL_ADC_ConfigChannel+0x4a0>
 80014e0:	2301      	movs	r3, #1
 80014e2:	e000      	b.n	80014e6 <HAL_ADC_ConfigChannel+0x4a2>
 80014e4:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d13c      	bne.n	8001564 <HAL_ADC_ConfigChannel+0x520>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	2b10      	cmp	r3, #16
 80014f0:	d11d      	bne.n	800152e <HAL_ADC_ConfigChannel+0x4ea>
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80014fa:	d118      	bne.n	800152e <HAL_ADC_ConfigChannel+0x4ea>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 80014fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80014fe:	689b      	ldr	r3, [r3, #8]
 8001500:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001504:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001506:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001508:	4b27      	ldr	r3, [pc, #156]	; (80015a8 <HAL_ADC_ConfigChannel+0x564>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4a27      	ldr	r2, [pc, #156]	; (80015ac <HAL_ADC_ConfigChannel+0x568>)
 800150e:	fba2 2303 	umull	r2, r3, r2, r3
 8001512:	0c9a      	lsrs	r2, r3, #18
 8001514:	4613      	mov	r3, r2
 8001516:	009b      	lsls	r3, r3, #2
 8001518:	4413      	add	r3, r2
 800151a:	005b      	lsls	r3, r3, #1
 800151c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800151e:	e002      	b.n	8001526 <HAL_ADC_ConfigChannel+0x4e2>
          {
            wait_loop_index--;
 8001520:	68bb      	ldr	r3, [r7, #8]
 8001522:	3b01      	subs	r3, #1
 8001524:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001526:	68bb      	ldr	r3, [r7, #8]
 8001528:	2b00      	cmp	r3, #0
 800152a:	d1f9      	bne.n	8001520 <HAL_ADC_ConfigChannel+0x4dc>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800152c:	e02e      	b.n	800158c <HAL_ADC_ConfigChannel+0x548>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	2b11      	cmp	r3, #17
 8001534:	d10b      	bne.n	800154e <HAL_ADC_ConfigChannel+0x50a>
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800153e:	d106      	bne.n	800154e <HAL_ADC_ConfigChannel+0x50a>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8001540:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001542:	689b      	ldr	r3, [r3, #8]
 8001544:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8001548:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800154a:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800154c:	e01e      	b.n	800158c <HAL_ADC_ConfigChannel+0x548>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	2b12      	cmp	r3, #18
 8001554:	d11a      	bne.n	800158c <HAL_ADC_ConfigChannel+0x548>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8001556:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001558:	689b      	ldr	r3, [r3, #8]
 800155a:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800155e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001560:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001562:	e013      	b.n	800158c <HAL_ADC_ConfigChannel+0x548>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001568:	f043 0220 	orr.w	r2, r3, #32
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8001570:	2301      	movs	r3, #1
 8001572:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001576:	e00a      	b.n	800158e <HAL_ADC_ConfigChannel+0x54a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800157c:	f043 0220 	orr.w	r2, r3, #32
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001584:	2301      	movs	r3, #1
 8001586:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800158a:	e000      	b.n	800158e <HAL_ADC_ConfigChannel+0x54a>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800158c:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	2200      	movs	r2, #0
 8001592:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001596:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800159a:	4618      	mov	r0, r3
 800159c:	376c      	adds	r7, #108	; 0x6c
 800159e:	46bd      	mov	sp, r7
 80015a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a4:	4770      	bx	lr
 80015a6:	bf00      	nop
 80015a8:	20000000 	.word	0x20000000
 80015ac:	431bde83 	.word	0x431bde83

080015b0 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b084      	sub	sp, #16
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015bc:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015c2:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d126      	bne.n	8001618 <ADC_DMAConvCplt+0x68>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ce:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	641a      	str	r2, [r3, #64]	; 0x40
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F3 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	68db      	ldr	r3, [r3, #12]
 80015dc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d115      	bne.n	8001610 <ADC_DMAConvCplt+0x60>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	7e5b      	ldrb	r3, [r3, #25]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d111      	bne.n	8001610 <ADC_DMAConvCplt+0x60>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015f0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015fc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001600:	2b00      	cmp	r3, #0
 8001602:	d105      	bne.n	8001610 <ADC_DMAConvCplt+0x60>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001608:	f043 0201 	orr.w	r2, r3, #1
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8001610:	68f8      	ldr	r0, [r7, #12]
 8001612:	f7ff fad7 	bl	8000bc4 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8001616:	e004      	b.n	8001622 <ADC_DMAConvCplt+0x72>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800161c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800161e:	6878      	ldr	r0, [r7, #4]
 8001620:	4798      	blx	r3
}
 8001622:	bf00      	nop
 8001624:	3710      	adds	r7, #16
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}

0800162a <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800162a:	b580      	push	{r7, lr}
 800162c:	b084      	sub	sp, #16
 800162e:	af00      	add	r7, sp, #0
 8001630:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001636:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001638:	68f8      	ldr	r0, [r7, #12]
 800163a:	f7ff facd 	bl	8000bd8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */ 
}
 800163e:	bf00      	nop
 8001640:	3710      	adds	r7, #16
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}

08001646 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001646:	b580      	push	{r7, lr}
 8001648:	b084      	sub	sp, #16
 800164a:	af00      	add	r7, sp, #0
 800164c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001652:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001658:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001664:	f043 0204 	orr.w	r2, r3, #4
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800166c:	68f8      	ldr	r0, [r7, #12]
 800166e:	f7ff fabd 	bl	8000bec <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001672:	bf00      	nop
 8001674:	3710      	adds	r7, #16
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}
	...

0800167c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b084      	sub	sp, #16
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001684:	2300      	movs	r3, #0
 8001686:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	689b      	ldr	r3, [r3, #8]
 800168e:	f003 0303 	and.w	r3, r3, #3
 8001692:	2b01      	cmp	r3, #1
 8001694:	d108      	bne.n	80016a8 <ADC_Enable+0x2c>
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f003 0301 	and.w	r3, r3, #1
 80016a0:	2b01      	cmp	r3, #1
 80016a2:	d101      	bne.n	80016a8 <ADC_Enable+0x2c>
 80016a4:	2301      	movs	r3, #1
 80016a6:	e000      	b.n	80016aa <ADC_Enable+0x2e>
 80016a8:	2300      	movs	r3, #0
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d143      	bne.n	8001736 <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	689a      	ldr	r2, [r3, #8]
 80016b4:	4b22      	ldr	r3, [pc, #136]	; (8001740 <ADC_Enable+0xc4>)
 80016b6:	4013      	ands	r3, r2
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d00d      	beq.n	80016d8 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016c0:	f043 0210 	orr.w	r2, r3, #16
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016cc:	f043 0201 	orr.w	r2, r3, #1
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 80016d4:	2301      	movs	r3, #1
 80016d6:	e02f      	b.n	8001738 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	689a      	ldr	r2, [r3, #8]
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f042 0201 	orr.w	r2, r2, #1
 80016e6:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 80016e8:	f7ff fa60 	bl	8000bac <HAL_GetTick>
 80016ec:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80016ee:	e01b      	b.n	8001728 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80016f0:	f7ff fa5c 	bl	8000bac <HAL_GetTick>
 80016f4:	4602      	mov	r2, r0
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	1ad3      	subs	r3, r2, r3
 80016fa:	2b02      	cmp	r3, #2
 80016fc:	d914      	bls.n	8001728 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f003 0301 	and.w	r3, r3, #1
 8001708:	2b01      	cmp	r3, #1
 800170a:	d00d      	beq.n	8001728 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001710:	f043 0210 	orr.w	r2, r3, #16
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800171c:	f043 0201 	orr.w	r2, r3, #1
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8001724:	2301      	movs	r3, #1
 8001726:	e007      	b.n	8001738 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f003 0301 	and.w	r3, r3, #1
 8001732:	2b01      	cmp	r3, #1
 8001734:	d1dc      	bne.n	80016f0 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001736:	2300      	movs	r3, #0
}
 8001738:	4618      	mov	r0, r3
 800173a:	3710      	adds	r7, #16
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}
 8001740:	8000003f 	.word	0x8000003f

08001744 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b084      	sub	sp, #16
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800174c:	2300      	movs	r3, #0
 800174e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	689b      	ldr	r3, [r3, #8]
 8001756:	f003 0303 	and.w	r3, r3, #3
 800175a:	2b01      	cmp	r3, #1
 800175c:	d108      	bne.n	8001770 <ADC_Disable+0x2c>
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f003 0301 	and.w	r3, r3, #1
 8001768:	2b01      	cmp	r3, #1
 800176a:	d101      	bne.n	8001770 <ADC_Disable+0x2c>
 800176c:	2301      	movs	r3, #1
 800176e:	e000      	b.n	8001772 <ADC_Disable+0x2e>
 8001770:	2300      	movs	r3, #0
 8001772:	2b00      	cmp	r3, #0
 8001774:	d047      	beq.n	8001806 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	689b      	ldr	r3, [r3, #8]
 800177c:	f003 030d 	and.w	r3, r3, #13
 8001780:	2b01      	cmp	r3, #1
 8001782:	d10f      	bne.n	80017a4 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	689a      	ldr	r2, [r3, #8]
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f042 0202 	orr.w	r2, r2, #2
 8001792:	609a      	str	r2, [r3, #8]
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	2203      	movs	r2, #3
 800179a:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 800179c:	f7ff fa06 	bl	8000bac <HAL_GetTick>
 80017a0:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80017a2:	e029      	b.n	80017f8 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017a8:	f043 0210 	orr.w	r2, r3, #16
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017b4:	f043 0201 	orr.w	r2, r3, #1
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 80017bc:	2301      	movs	r3, #1
 80017be:	e023      	b.n	8001808 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80017c0:	f7ff f9f4 	bl	8000bac <HAL_GetTick>
 80017c4:	4602      	mov	r2, r0
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	1ad3      	subs	r3, r2, r3
 80017ca:	2b02      	cmp	r3, #2
 80017cc:	d914      	bls.n	80017f8 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	689b      	ldr	r3, [r3, #8]
 80017d4:	f003 0301 	and.w	r3, r3, #1
 80017d8:	2b01      	cmp	r3, #1
 80017da:	d10d      	bne.n	80017f8 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e0:	f043 0210 	orr.w	r2, r3, #16
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017ec:	f043 0201 	orr.w	r2, r3, #1
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 80017f4:	2301      	movs	r3, #1
 80017f6:	e007      	b.n	8001808 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	689b      	ldr	r3, [r3, #8]
 80017fe:	f003 0301 	and.w	r3, r3, #1
 8001802:	2b01      	cmp	r3, #1
 8001804:	d0dc      	beq.n	80017c0 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001806:	2300      	movs	r3, #0
}
 8001808:	4618      	mov	r0, r3
 800180a:	3710      	adds	r7, #16
 800180c:	46bd      	mov	sp, r7
 800180e:	bd80      	pop	{r7, pc}

08001810 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001810:	b480      	push	{r7}
 8001812:	b085      	sub	sp, #20
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	f003 0307 	and.w	r3, r3, #7
 800181e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001820:	4b0c      	ldr	r3, [pc, #48]	; (8001854 <__NVIC_SetPriorityGrouping+0x44>)
 8001822:	68db      	ldr	r3, [r3, #12]
 8001824:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001826:	68ba      	ldr	r2, [r7, #8]
 8001828:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800182c:	4013      	ands	r3, r2
 800182e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001834:	68bb      	ldr	r3, [r7, #8]
 8001836:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001838:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800183c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001840:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001842:	4a04      	ldr	r2, [pc, #16]	; (8001854 <__NVIC_SetPriorityGrouping+0x44>)
 8001844:	68bb      	ldr	r3, [r7, #8]
 8001846:	60d3      	str	r3, [r2, #12]
}
 8001848:	bf00      	nop
 800184a:	3714      	adds	r7, #20
 800184c:	46bd      	mov	sp, r7
 800184e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001852:	4770      	bx	lr
 8001854:	e000ed00 	.word	0xe000ed00

08001858 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001858:	b480      	push	{r7}
 800185a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800185c:	4b04      	ldr	r3, [pc, #16]	; (8001870 <__NVIC_GetPriorityGrouping+0x18>)
 800185e:	68db      	ldr	r3, [r3, #12]
 8001860:	0a1b      	lsrs	r3, r3, #8
 8001862:	f003 0307 	and.w	r3, r3, #7
}
 8001866:	4618      	mov	r0, r3
 8001868:	46bd      	mov	sp, r7
 800186a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186e:	4770      	bx	lr
 8001870:	e000ed00 	.word	0xe000ed00

08001874 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001874:	b480      	push	{r7}
 8001876:	b083      	sub	sp, #12
 8001878:	af00      	add	r7, sp, #0
 800187a:	4603      	mov	r3, r0
 800187c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800187e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001882:	2b00      	cmp	r3, #0
 8001884:	db0b      	blt.n	800189e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001886:	79fb      	ldrb	r3, [r7, #7]
 8001888:	f003 021f 	and.w	r2, r3, #31
 800188c:	4907      	ldr	r1, [pc, #28]	; (80018ac <__NVIC_EnableIRQ+0x38>)
 800188e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001892:	095b      	lsrs	r3, r3, #5
 8001894:	2001      	movs	r0, #1
 8001896:	fa00 f202 	lsl.w	r2, r0, r2
 800189a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800189e:	bf00      	nop
 80018a0:	370c      	adds	r7, #12
 80018a2:	46bd      	mov	sp, r7
 80018a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a8:	4770      	bx	lr
 80018aa:	bf00      	nop
 80018ac:	e000e100 	.word	0xe000e100

080018b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018b0:	b480      	push	{r7}
 80018b2:	b083      	sub	sp, #12
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	4603      	mov	r3, r0
 80018b8:	6039      	str	r1, [r7, #0]
 80018ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	db0a      	blt.n	80018da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	b2da      	uxtb	r2, r3
 80018c8:	490c      	ldr	r1, [pc, #48]	; (80018fc <__NVIC_SetPriority+0x4c>)
 80018ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ce:	0112      	lsls	r2, r2, #4
 80018d0:	b2d2      	uxtb	r2, r2
 80018d2:	440b      	add	r3, r1
 80018d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018d8:	e00a      	b.n	80018f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	b2da      	uxtb	r2, r3
 80018de:	4908      	ldr	r1, [pc, #32]	; (8001900 <__NVIC_SetPriority+0x50>)
 80018e0:	79fb      	ldrb	r3, [r7, #7]
 80018e2:	f003 030f 	and.w	r3, r3, #15
 80018e6:	3b04      	subs	r3, #4
 80018e8:	0112      	lsls	r2, r2, #4
 80018ea:	b2d2      	uxtb	r2, r2
 80018ec:	440b      	add	r3, r1
 80018ee:	761a      	strb	r2, [r3, #24]
}
 80018f0:	bf00      	nop
 80018f2:	370c      	adds	r7, #12
 80018f4:	46bd      	mov	sp, r7
 80018f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fa:	4770      	bx	lr
 80018fc:	e000e100 	.word	0xe000e100
 8001900:	e000ed00 	.word	0xe000ed00

08001904 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001904:	b480      	push	{r7}
 8001906:	b089      	sub	sp, #36	; 0x24
 8001908:	af00      	add	r7, sp, #0
 800190a:	60f8      	str	r0, [r7, #12]
 800190c:	60b9      	str	r1, [r7, #8]
 800190e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	f003 0307 	and.w	r3, r3, #7
 8001916:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001918:	69fb      	ldr	r3, [r7, #28]
 800191a:	f1c3 0307 	rsb	r3, r3, #7
 800191e:	2b04      	cmp	r3, #4
 8001920:	bf28      	it	cs
 8001922:	2304      	movcs	r3, #4
 8001924:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001926:	69fb      	ldr	r3, [r7, #28]
 8001928:	3304      	adds	r3, #4
 800192a:	2b06      	cmp	r3, #6
 800192c:	d902      	bls.n	8001934 <NVIC_EncodePriority+0x30>
 800192e:	69fb      	ldr	r3, [r7, #28]
 8001930:	3b03      	subs	r3, #3
 8001932:	e000      	b.n	8001936 <NVIC_EncodePriority+0x32>
 8001934:	2300      	movs	r3, #0
 8001936:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001938:	f04f 32ff 	mov.w	r2, #4294967295
 800193c:	69bb      	ldr	r3, [r7, #24]
 800193e:	fa02 f303 	lsl.w	r3, r2, r3
 8001942:	43da      	mvns	r2, r3
 8001944:	68bb      	ldr	r3, [r7, #8]
 8001946:	401a      	ands	r2, r3
 8001948:	697b      	ldr	r3, [r7, #20]
 800194a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800194c:	f04f 31ff 	mov.w	r1, #4294967295
 8001950:	697b      	ldr	r3, [r7, #20]
 8001952:	fa01 f303 	lsl.w	r3, r1, r3
 8001956:	43d9      	mvns	r1, r3
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800195c:	4313      	orrs	r3, r2
         );
}
 800195e:	4618      	mov	r0, r3
 8001960:	3724      	adds	r7, #36	; 0x24
 8001962:	46bd      	mov	sp, r7
 8001964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001968:	4770      	bx	lr

0800196a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800196a:	b580      	push	{r7, lr}
 800196c:	b082      	sub	sp, #8
 800196e:	af00      	add	r7, sp, #0
 8001970:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001972:	6878      	ldr	r0, [r7, #4]
 8001974:	f7ff ff4c 	bl	8001810 <__NVIC_SetPriorityGrouping>
}
 8001978:	bf00      	nop
 800197a:	3708      	adds	r7, #8
 800197c:	46bd      	mov	sp, r7
 800197e:	bd80      	pop	{r7, pc}

08001980 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b086      	sub	sp, #24
 8001984:	af00      	add	r7, sp, #0
 8001986:	4603      	mov	r3, r0
 8001988:	60b9      	str	r1, [r7, #8]
 800198a:	607a      	str	r2, [r7, #4]
 800198c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800198e:	2300      	movs	r3, #0
 8001990:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001992:	f7ff ff61 	bl	8001858 <__NVIC_GetPriorityGrouping>
 8001996:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001998:	687a      	ldr	r2, [r7, #4]
 800199a:	68b9      	ldr	r1, [r7, #8]
 800199c:	6978      	ldr	r0, [r7, #20]
 800199e:	f7ff ffb1 	bl	8001904 <NVIC_EncodePriority>
 80019a2:	4602      	mov	r2, r0
 80019a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019a8:	4611      	mov	r1, r2
 80019aa:	4618      	mov	r0, r3
 80019ac:	f7ff ff80 	bl	80018b0 <__NVIC_SetPriority>
}
 80019b0:	bf00      	nop
 80019b2:	3718      	adds	r7, #24
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bd80      	pop	{r7, pc}

080019b8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b082      	sub	sp, #8
 80019bc:	af00      	add	r7, sp, #0
 80019be:	4603      	mov	r3, r0
 80019c0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019c6:	4618      	mov	r0, r3
 80019c8:	f7ff ff54 	bl	8001874 <__NVIC_EnableIRQ>
}
 80019cc:	bf00      	nop
 80019ce:	3708      	adds	r7, #8
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bd80      	pop	{r7, pc}

080019d4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b084      	sub	sp, #16
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80019dc:	2300      	movs	r3, #0
 80019de:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d101      	bne.n	80019ea <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80019e6:	2301      	movs	r3, #1
 80019e8:	e037      	b.n	8001a5a <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	2202      	movs	r2, #2
 80019ee:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001a00:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001a04:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001a0e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	68db      	ldr	r3, [r3, #12]
 8001a14:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a1a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	695b      	ldr	r3, [r3, #20]
 8001a20:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a26:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	69db      	ldr	r3, [r3, #28]
 8001a2c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001a2e:	68fa      	ldr	r2, [r7, #12]
 8001a30:	4313      	orrs	r3, r2
 8001a32:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	68fa      	ldr	r2, [r7, #12]
 8001a3a:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8001a3c:	6878      	ldr	r0, [r7, #4]
 8001a3e:	f000 f941 	bl	8001cc4 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	2200      	movs	r2, #0
 8001a46:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2201      	movs	r2, #1
 8001a4c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	2200      	movs	r2, #0
 8001a54:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8001a58:	2300      	movs	r3, #0
}  
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	3710      	adds	r7, #16
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}

08001a62 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001a62:	b580      	push	{r7, lr}
 8001a64:	b086      	sub	sp, #24
 8001a66:	af00      	add	r7, sp, #0
 8001a68:	60f8      	str	r0, [r7, #12]
 8001a6a:	60b9      	str	r1, [r7, #8]
 8001a6c:	607a      	str	r2, [r7, #4]
 8001a6e:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8001a70:	2300      	movs	r3, #0
 8001a72:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a7a:	2b01      	cmp	r3, #1
 8001a7c:	d101      	bne.n	8001a82 <HAL_DMA_Start_IT+0x20>
 8001a7e:	2302      	movs	r3, #2
 8001a80:	e04a      	b.n	8001b18 <HAL_DMA_Start_IT+0xb6>
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	2201      	movs	r2, #1
 8001a86:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001a90:	2b01      	cmp	r3, #1
 8001a92:	d13a      	bne.n	8001b0a <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	2202      	movs	r2, #2
 8001a98:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	681a      	ldr	r2, [r3, #0]
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f022 0201 	bic.w	r2, r2, #1
 8001ab0:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	687a      	ldr	r2, [r7, #4]
 8001ab6:	68b9      	ldr	r1, [r7, #8]
 8001ab8:	68f8      	ldr	r0, [r7, #12]
 8001aba:	f000 f8d4 	bl	8001c66 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d008      	beq.n	8001ad8 <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	681a      	ldr	r2, [r3, #0]
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f042 020e 	orr.w	r2, r2, #14
 8001ad4:	601a      	str	r2, [r3, #0]
 8001ad6:	e00f      	b.n	8001af8 <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	681a      	ldr	r2, [r3, #0]
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f042 020a 	orr.w	r2, r2, #10
 8001ae6:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	681a      	ldr	r2, [r3, #0]
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f022 0204 	bic.w	r2, r2, #4
 8001af6:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	681a      	ldr	r2, [r3, #0]
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f042 0201 	orr.w	r2, r2, #1
 8001b06:	601a      	str	r2, [r3, #0]
 8001b08:	e005      	b.n	8001b16 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8001b12:	2302      	movs	r3, #2
 8001b14:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 8001b16:	7dfb      	ldrb	r3, [r7, #23]
} 
 8001b18:	4618      	mov	r0, r3
 8001b1a:	3718      	adds	r7, #24
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bd80      	pop	{r7, pc}

08001b20 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b084      	sub	sp, #16
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b3c:	2204      	movs	r2, #4
 8001b3e:	409a      	lsls	r2, r3
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	4013      	ands	r3, r2
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d024      	beq.n	8001b92 <HAL_DMA_IRQHandler+0x72>
 8001b48:	68bb      	ldr	r3, [r7, #8]
 8001b4a:	f003 0304 	and.w	r3, r3, #4
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d01f      	beq.n	8001b92 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f003 0320 	and.w	r3, r3, #32
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d107      	bne.n	8001b70 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	681a      	ldr	r2, [r3, #0]
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f022 0204 	bic.w	r2, r2, #4
 8001b6e:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b78:	2104      	movs	r1, #4
 8001b7a:	fa01 f202 	lsl.w	r2, r1, r2
 8001b7e:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d06a      	beq.n	8001c5e <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b8c:	6878      	ldr	r0, [r7, #4]
 8001b8e:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8001b90:	e065      	b.n	8001c5e <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b96:	2202      	movs	r2, #2
 8001b98:	409a      	lsls	r2, r3
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	4013      	ands	r3, r2
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d02c      	beq.n	8001bfc <HAL_DMA_IRQHandler+0xdc>
 8001ba2:	68bb      	ldr	r3, [r7, #8]
 8001ba4:	f003 0302 	and.w	r3, r3, #2
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d027      	beq.n	8001bfc <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f003 0320 	and.w	r3, r3, #32
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d10b      	bne.n	8001bd2 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	681a      	ldr	r2, [r3, #0]
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f022 020a 	bic.w	r2, r2, #10
 8001bc8:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	2201      	movs	r2, #1
 8001bce:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bda:	2102      	movs	r1, #2
 8001bdc:	fa01 f202 	lsl.w	r2, r1, r2
 8001be0:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	2200      	movs	r2, #0
 8001be6:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d035      	beq.n	8001c5e <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bf6:	6878      	ldr	r0, [r7, #4]
 8001bf8:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8001bfa:	e030      	b.n	8001c5e <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c00:	2208      	movs	r2, #8
 8001c02:	409a      	lsls	r2, r3
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	4013      	ands	r3, r2
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d028      	beq.n	8001c5e <HAL_DMA_IRQHandler+0x13e>
 8001c0c:	68bb      	ldr	r3, [r7, #8]
 8001c0e:	f003 0308 	and.w	r3, r3, #8
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d023      	beq.n	8001c5e <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	681a      	ldr	r2, [r3, #0]
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f022 020e 	bic.w	r2, r2, #14
 8001c24:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c2e:	2101      	movs	r1, #1
 8001c30:	fa01 f202 	lsl.w	r2, r1, r2
 8001c34:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	2201      	movs	r2, #1
 8001c3a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2201      	movs	r2, #1
 8001c40:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2200      	movs	r2, #0
 8001c48:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d004      	beq.n	8001c5e <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c58:	6878      	ldr	r0, [r7, #4]
 8001c5a:	4798      	blx	r3
    }
  }
}  
 8001c5c:	e7ff      	b.n	8001c5e <HAL_DMA_IRQHandler+0x13e>
 8001c5e:	bf00      	nop
 8001c60:	3710      	adds	r7, #16
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}

08001c66 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001c66:	b480      	push	{r7}
 8001c68:	b085      	sub	sp, #20
 8001c6a:	af00      	add	r7, sp, #0
 8001c6c:	60f8      	str	r0, [r7, #12]
 8001c6e:	60b9      	str	r1, [r7, #8]
 8001c70:	607a      	str	r2, [r7, #4]
 8001c72:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c7c:	2101      	movs	r1, #1
 8001c7e:	fa01 f202 	lsl.w	r2, r1, r2
 8001c82:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	683a      	ldr	r2, [r7, #0]
 8001c8a:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	2b10      	cmp	r3, #16
 8001c92:	d108      	bne.n	8001ca6 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	687a      	ldr	r2, [r7, #4]
 8001c9a:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	68ba      	ldr	r2, [r7, #8]
 8001ca2:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001ca4:	e007      	b.n	8001cb6 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	68ba      	ldr	r2, [r7, #8]
 8001cac:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	687a      	ldr	r2, [r7, #4]
 8001cb4:	60da      	str	r2, [r3, #12]
}
 8001cb6:	bf00      	nop
 8001cb8:	3714      	adds	r7, #20
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc0:	4770      	bx	lr
	...

08001cc4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b083      	sub	sp, #12
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	461a      	mov	r2, r3
 8001cd2:	4b09      	ldr	r3, [pc, #36]	; (8001cf8 <DMA_CalcBaseAndBitshift+0x34>)
 8001cd4:	4413      	add	r3, r2
 8001cd6:	4a09      	ldr	r2, [pc, #36]	; (8001cfc <DMA_CalcBaseAndBitshift+0x38>)
 8001cd8:	fba2 2303 	umull	r2, r3, r2, r3
 8001cdc:	091b      	lsrs	r3, r3, #4
 8001cde:	009a      	lsls	r2, r3, #2
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	4a06      	ldr	r2, [pc, #24]	; (8001d00 <DMA_CalcBaseAndBitshift+0x3c>)
 8001ce8:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8001cea:	bf00      	nop
 8001cec:	370c      	adds	r7, #12
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf4:	4770      	bx	lr
 8001cf6:	bf00      	nop
 8001cf8:	bffdfff8 	.word	0xbffdfff8
 8001cfc:	cccccccd 	.word	0xcccccccd
 8001d00:	40020000 	.word	0x40020000

08001d04 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d04:	b480      	push	{r7}
 8001d06:	b087      	sub	sp, #28
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
 8001d0c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d12:	e14e      	b.n	8001fb2 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	681a      	ldr	r2, [r3, #0]
 8001d18:	2101      	movs	r1, #1
 8001d1a:	697b      	ldr	r3, [r7, #20]
 8001d1c:	fa01 f303 	lsl.w	r3, r1, r3
 8001d20:	4013      	ands	r3, r2
 8001d22:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	f000 8140 	beq.w	8001fac <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	f003 0303 	and.w	r3, r3, #3
 8001d34:	2b01      	cmp	r3, #1
 8001d36:	d005      	beq.n	8001d44 <HAL_GPIO_Init+0x40>
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	f003 0303 	and.w	r3, r3, #3
 8001d40:	2b02      	cmp	r3, #2
 8001d42:	d130      	bne.n	8001da6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	689b      	ldr	r3, [r3, #8]
 8001d48:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001d4a:	697b      	ldr	r3, [r7, #20]
 8001d4c:	005b      	lsls	r3, r3, #1
 8001d4e:	2203      	movs	r2, #3
 8001d50:	fa02 f303 	lsl.w	r3, r2, r3
 8001d54:	43db      	mvns	r3, r3
 8001d56:	693a      	ldr	r2, [r7, #16]
 8001d58:	4013      	ands	r3, r2
 8001d5a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	68da      	ldr	r2, [r3, #12]
 8001d60:	697b      	ldr	r3, [r7, #20]
 8001d62:	005b      	lsls	r3, r3, #1
 8001d64:	fa02 f303 	lsl.w	r3, r2, r3
 8001d68:	693a      	ldr	r2, [r7, #16]
 8001d6a:	4313      	orrs	r3, r2
 8001d6c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	693a      	ldr	r2, [r7, #16]
 8001d72:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d7a:	2201      	movs	r2, #1
 8001d7c:	697b      	ldr	r3, [r7, #20]
 8001d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d82:	43db      	mvns	r3, r3
 8001d84:	693a      	ldr	r2, [r7, #16]
 8001d86:	4013      	ands	r3, r2
 8001d88:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	091b      	lsrs	r3, r3, #4
 8001d90:	f003 0201 	and.w	r2, r3, #1
 8001d94:	697b      	ldr	r3, [r7, #20]
 8001d96:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9a:	693a      	ldr	r2, [r7, #16]
 8001d9c:	4313      	orrs	r3, r2
 8001d9e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	693a      	ldr	r2, [r7, #16]
 8001da4:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	f003 0303 	and.w	r3, r3, #3
 8001dae:	2b03      	cmp	r3, #3
 8001db0:	d017      	beq.n	8001de2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	68db      	ldr	r3, [r3, #12]
 8001db6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001db8:	697b      	ldr	r3, [r7, #20]
 8001dba:	005b      	lsls	r3, r3, #1
 8001dbc:	2203      	movs	r2, #3
 8001dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc2:	43db      	mvns	r3, r3
 8001dc4:	693a      	ldr	r2, [r7, #16]
 8001dc6:	4013      	ands	r3, r2
 8001dc8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	689a      	ldr	r2, [r3, #8]
 8001dce:	697b      	ldr	r3, [r7, #20]
 8001dd0:	005b      	lsls	r3, r3, #1
 8001dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd6:	693a      	ldr	r2, [r7, #16]
 8001dd8:	4313      	orrs	r3, r2
 8001dda:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	693a      	ldr	r2, [r7, #16]
 8001de0:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	685b      	ldr	r3, [r3, #4]
 8001de6:	f003 0303 	and.w	r3, r3, #3
 8001dea:	2b02      	cmp	r3, #2
 8001dec:	d123      	bne.n	8001e36 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001dee:	697b      	ldr	r3, [r7, #20]
 8001df0:	08da      	lsrs	r2, r3, #3
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	3208      	adds	r2, #8
 8001df6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001dfa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001dfc:	697b      	ldr	r3, [r7, #20]
 8001dfe:	f003 0307 	and.w	r3, r3, #7
 8001e02:	009b      	lsls	r3, r3, #2
 8001e04:	220f      	movs	r2, #15
 8001e06:	fa02 f303 	lsl.w	r3, r2, r3
 8001e0a:	43db      	mvns	r3, r3
 8001e0c:	693a      	ldr	r2, [r7, #16]
 8001e0e:	4013      	ands	r3, r2
 8001e10:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	691a      	ldr	r2, [r3, #16]
 8001e16:	697b      	ldr	r3, [r7, #20]
 8001e18:	f003 0307 	and.w	r3, r3, #7
 8001e1c:	009b      	lsls	r3, r3, #2
 8001e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e22:	693a      	ldr	r2, [r7, #16]
 8001e24:	4313      	orrs	r3, r2
 8001e26:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001e28:	697b      	ldr	r3, [r7, #20]
 8001e2a:	08da      	lsrs	r2, r3, #3
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	3208      	adds	r2, #8
 8001e30:	6939      	ldr	r1, [r7, #16]
 8001e32:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001e3c:	697b      	ldr	r3, [r7, #20]
 8001e3e:	005b      	lsls	r3, r3, #1
 8001e40:	2203      	movs	r2, #3
 8001e42:	fa02 f303 	lsl.w	r3, r2, r3
 8001e46:	43db      	mvns	r3, r3
 8001e48:	693a      	ldr	r2, [r7, #16]
 8001e4a:	4013      	ands	r3, r2
 8001e4c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	685b      	ldr	r3, [r3, #4]
 8001e52:	f003 0203 	and.w	r2, r3, #3
 8001e56:	697b      	ldr	r3, [r7, #20]
 8001e58:	005b      	lsls	r3, r3, #1
 8001e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e5e:	693a      	ldr	r2, [r7, #16]
 8001e60:	4313      	orrs	r3, r2
 8001e62:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	693a      	ldr	r2, [r7, #16]
 8001e68:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	f000 809a 	beq.w	8001fac <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e78:	4b55      	ldr	r3, [pc, #340]	; (8001fd0 <HAL_GPIO_Init+0x2cc>)
 8001e7a:	699b      	ldr	r3, [r3, #24]
 8001e7c:	4a54      	ldr	r2, [pc, #336]	; (8001fd0 <HAL_GPIO_Init+0x2cc>)
 8001e7e:	f043 0301 	orr.w	r3, r3, #1
 8001e82:	6193      	str	r3, [r2, #24]
 8001e84:	4b52      	ldr	r3, [pc, #328]	; (8001fd0 <HAL_GPIO_Init+0x2cc>)
 8001e86:	699b      	ldr	r3, [r3, #24]
 8001e88:	f003 0301 	and.w	r3, r3, #1
 8001e8c:	60bb      	str	r3, [r7, #8]
 8001e8e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001e90:	4a50      	ldr	r2, [pc, #320]	; (8001fd4 <HAL_GPIO_Init+0x2d0>)
 8001e92:	697b      	ldr	r3, [r7, #20]
 8001e94:	089b      	lsrs	r3, r3, #2
 8001e96:	3302      	adds	r3, #2
 8001e98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e9c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001e9e:	697b      	ldr	r3, [r7, #20]
 8001ea0:	f003 0303 	and.w	r3, r3, #3
 8001ea4:	009b      	lsls	r3, r3, #2
 8001ea6:	220f      	movs	r2, #15
 8001ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8001eac:	43db      	mvns	r3, r3
 8001eae:	693a      	ldr	r2, [r7, #16]
 8001eb0:	4013      	ands	r3, r2
 8001eb2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001eba:	d013      	beq.n	8001ee4 <HAL_GPIO_Init+0x1e0>
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	4a46      	ldr	r2, [pc, #280]	; (8001fd8 <HAL_GPIO_Init+0x2d4>)
 8001ec0:	4293      	cmp	r3, r2
 8001ec2:	d00d      	beq.n	8001ee0 <HAL_GPIO_Init+0x1dc>
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	4a45      	ldr	r2, [pc, #276]	; (8001fdc <HAL_GPIO_Init+0x2d8>)
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	d007      	beq.n	8001edc <HAL_GPIO_Init+0x1d8>
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	4a44      	ldr	r2, [pc, #272]	; (8001fe0 <HAL_GPIO_Init+0x2dc>)
 8001ed0:	4293      	cmp	r3, r2
 8001ed2:	d101      	bne.n	8001ed8 <HAL_GPIO_Init+0x1d4>
 8001ed4:	2303      	movs	r3, #3
 8001ed6:	e006      	b.n	8001ee6 <HAL_GPIO_Init+0x1e2>
 8001ed8:	2305      	movs	r3, #5
 8001eda:	e004      	b.n	8001ee6 <HAL_GPIO_Init+0x1e2>
 8001edc:	2302      	movs	r3, #2
 8001ede:	e002      	b.n	8001ee6 <HAL_GPIO_Init+0x1e2>
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	e000      	b.n	8001ee6 <HAL_GPIO_Init+0x1e2>
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	697a      	ldr	r2, [r7, #20]
 8001ee8:	f002 0203 	and.w	r2, r2, #3
 8001eec:	0092      	lsls	r2, r2, #2
 8001eee:	4093      	lsls	r3, r2
 8001ef0:	693a      	ldr	r2, [r7, #16]
 8001ef2:	4313      	orrs	r3, r2
 8001ef4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001ef6:	4937      	ldr	r1, [pc, #220]	; (8001fd4 <HAL_GPIO_Init+0x2d0>)
 8001ef8:	697b      	ldr	r3, [r7, #20]
 8001efa:	089b      	lsrs	r3, r3, #2
 8001efc:	3302      	adds	r3, #2
 8001efe:	693a      	ldr	r2, [r7, #16]
 8001f00:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f04:	4b37      	ldr	r3, [pc, #220]	; (8001fe4 <HAL_GPIO_Init+0x2e0>)
 8001f06:	689b      	ldr	r3, [r3, #8]
 8001f08:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	43db      	mvns	r3, r3
 8001f0e:	693a      	ldr	r2, [r7, #16]
 8001f10:	4013      	ands	r3, r2
 8001f12:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d003      	beq.n	8001f28 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001f20:	693a      	ldr	r2, [r7, #16]
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	4313      	orrs	r3, r2
 8001f26:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001f28:	4a2e      	ldr	r2, [pc, #184]	; (8001fe4 <HAL_GPIO_Init+0x2e0>)
 8001f2a:	693b      	ldr	r3, [r7, #16]
 8001f2c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f2e:	4b2d      	ldr	r3, [pc, #180]	; (8001fe4 <HAL_GPIO_Init+0x2e0>)
 8001f30:	68db      	ldr	r3, [r3, #12]
 8001f32:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	43db      	mvns	r3, r3
 8001f38:	693a      	ldr	r2, [r7, #16]
 8001f3a:	4013      	ands	r3, r2
 8001f3c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d003      	beq.n	8001f52 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8001f4a:	693a      	ldr	r2, [r7, #16]
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	4313      	orrs	r3, r2
 8001f50:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001f52:	4a24      	ldr	r2, [pc, #144]	; (8001fe4 <HAL_GPIO_Init+0x2e0>)
 8001f54:	693b      	ldr	r3, [r7, #16]
 8001f56:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001f58:	4b22      	ldr	r3, [pc, #136]	; (8001fe4 <HAL_GPIO_Init+0x2e0>)
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	43db      	mvns	r3, r3
 8001f62:	693a      	ldr	r2, [r7, #16]
 8001f64:	4013      	ands	r3, r2
 8001f66:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d003      	beq.n	8001f7c <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001f74:	693a      	ldr	r2, [r7, #16]
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	4313      	orrs	r3, r2
 8001f7a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001f7c:	4a19      	ldr	r2, [pc, #100]	; (8001fe4 <HAL_GPIO_Init+0x2e0>)
 8001f7e:	693b      	ldr	r3, [r7, #16]
 8001f80:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f82:	4b18      	ldr	r3, [pc, #96]	; (8001fe4 <HAL_GPIO_Init+0x2e0>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	43db      	mvns	r3, r3
 8001f8c:	693a      	ldr	r2, [r7, #16]
 8001f8e:	4013      	ands	r3, r2
 8001f90:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d003      	beq.n	8001fa6 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8001f9e:	693a      	ldr	r2, [r7, #16]
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	4313      	orrs	r3, r2
 8001fa4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001fa6:	4a0f      	ldr	r2, [pc, #60]	; (8001fe4 <HAL_GPIO_Init+0x2e0>)
 8001fa8:	693b      	ldr	r3, [r7, #16]
 8001faa:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001fac:	697b      	ldr	r3, [r7, #20]
 8001fae:	3301      	adds	r3, #1
 8001fb0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	681a      	ldr	r2, [r3, #0]
 8001fb6:	697b      	ldr	r3, [r7, #20]
 8001fb8:	fa22 f303 	lsr.w	r3, r2, r3
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	f47f aea9 	bne.w	8001d14 <HAL_GPIO_Init+0x10>
  }
}
 8001fc2:	bf00      	nop
 8001fc4:	bf00      	nop
 8001fc6:	371c      	adds	r7, #28
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fce:	4770      	bx	lr
 8001fd0:	40021000 	.word	0x40021000
 8001fd4:	40010000 	.word	0x40010000
 8001fd8:	48000400 	.word	0x48000400
 8001fdc:	48000800 	.word	0x48000800
 8001fe0:	48000c00 	.word	0x48000c00
 8001fe4:	40010400 	.word	0x40010400

08001fe8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8001fee:	af00      	add	r7, sp, #0
 8001ff0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ff4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ff8:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001ffa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ffe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	2b00      	cmp	r3, #0
 8002006:	d102      	bne.n	800200e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8002008:	2301      	movs	r3, #1
 800200a:	f001 b823 	b.w	8003054 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800200e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002012:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f003 0301 	and.w	r3, r3, #1
 800201e:	2b00      	cmp	r3, #0
 8002020:	f000 817d 	beq.w	800231e <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002024:	4bbc      	ldr	r3, [pc, #752]	; (8002318 <HAL_RCC_OscConfig+0x330>)
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	f003 030c 	and.w	r3, r3, #12
 800202c:	2b04      	cmp	r3, #4
 800202e:	d00c      	beq.n	800204a <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002030:	4bb9      	ldr	r3, [pc, #740]	; (8002318 <HAL_RCC_OscConfig+0x330>)
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	f003 030c 	and.w	r3, r3, #12
 8002038:	2b08      	cmp	r3, #8
 800203a:	d15c      	bne.n	80020f6 <HAL_RCC_OscConfig+0x10e>
 800203c:	4bb6      	ldr	r3, [pc, #728]	; (8002318 <HAL_RCC_OscConfig+0x330>)
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002044:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002048:	d155      	bne.n	80020f6 <HAL_RCC_OscConfig+0x10e>
 800204a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800204e:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002052:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8002056:	fa93 f3a3 	rbit	r3, r3
 800205a:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800205e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002062:	fab3 f383 	clz	r3, r3
 8002066:	b2db      	uxtb	r3, r3
 8002068:	095b      	lsrs	r3, r3, #5
 800206a:	b2db      	uxtb	r3, r3
 800206c:	f043 0301 	orr.w	r3, r3, #1
 8002070:	b2db      	uxtb	r3, r3
 8002072:	2b01      	cmp	r3, #1
 8002074:	d102      	bne.n	800207c <HAL_RCC_OscConfig+0x94>
 8002076:	4ba8      	ldr	r3, [pc, #672]	; (8002318 <HAL_RCC_OscConfig+0x330>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	e015      	b.n	80020a8 <HAL_RCC_OscConfig+0xc0>
 800207c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002080:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002084:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8002088:	fa93 f3a3 	rbit	r3, r3
 800208c:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8002090:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002094:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002098:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800209c:	fa93 f3a3 	rbit	r3, r3
 80020a0:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80020a4:	4b9c      	ldr	r3, [pc, #624]	; (8002318 <HAL_RCC_OscConfig+0x330>)
 80020a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020a8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80020ac:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80020b0:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80020b4:	fa92 f2a2 	rbit	r2, r2
 80020b8:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80020bc:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80020c0:	fab2 f282 	clz	r2, r2
 80020c4:	b2d2      	uxtb	r2, r2
 80020c6:	f042 0220 	orr.w	r2, r2, #32
 80020ca:	b2d2      	uxtb	r2, r2
 80020cc:	f002 021f 	and.w	r2, r2, #31
 80020d0:	2101      	movs	r1, #1
 80020d2:	fa01 f202 	lsl.w	r2, r1, r2
 80020d6:	4013      	ands	r3, r2
 80020d8:	2b00      	cmp	r3, #0
 80020da:	f000 811f 	beq.w	800231c <HAL_RCC_OscConfig+0x334>
 80020de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020e2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	f040 8116 	bne.w	800231c <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 80020f0:	2301      	movs	r3, #1
 80020f2:	f000 bfaf 	b.w	8003054 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020fa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002106:	d106      	bne.n	8002116 <HAL_RCC_OscConfig+0x12e>
 8002108:	4b83      	ldr	r3, [pc, #524]	; (8002318 <HAL_RCC_OscConfig+0x330>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4a82      	ldr	r2, [pc, #520]	; (8002318 <HAL_RCC_OscConfig+0x330>)
 800210e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002112:	6013      	str	r3, [r2, #0]
 8002114:	e036      	b.n	8002184 <HAL_RCC_OscConfig+0x19c>
 8002116:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800211a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	2b00      	cmp	r3, #0
 8002124:	d10c      	bne.n	8002140 <HAL_RCC_OscConfig+0x158>
 8002126:	4b7c      	ldr	r3, [pc, #496]	; (8002318 <HAL_RCC_OscConfig+0x330>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4a7b      	ldr	r2, [pc, #492]	; (8002318 <HAL_RCC_OscConfig+0x330>)
 800212c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002130:	6013      	str	r3, [r2, #0]
 8002132:	4b79      	ldr	r3, [pc, #484]	; (8002318 <HAL_RCC_OscConfig+0x330>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4a78      	ldr	r2, [pc, #480]	; (8002318 <HAL_RCC_OscConfig+0x330>)
 8002138:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800213c:	6013      	str	r3, [r2, #0]
 800213e:	e021      	b.n	8002184 <HAL_RCC_OscConfig+0x19c>
 8002140:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002144:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002150:	d10c      	bne.n	800216c <HAL_RCC_OscConfig+0x184>
 8002152:	4b71      	ldr	r3, [pc, #452]	; (8002318 <HAL_RCC_OscConfig+0x330>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4a70      	ldr	r2, [pc, #448]	; (8002318 <HAL_RCC_OscConfig+0x330>)
 8002158:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800215c:	6013      	str	r3, [r2, #0]
 800215e:	4b6e      	ldr	r3, [pc, #440]	; (8002318 <HAL_RCC_OscConfig+0x330>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4a6d      	ldr	r2, [pc, #436]	; (8002318 <HAL_RCC_OscConfig+0x330>)
 8002164:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002168:	6013      	str	r3, [r2, #0]
 800216a:	e00b      	b.n	8002184 <HAL_RCC_OscConfig+0x19c>
 800216c:	4b6a      	ldr	r3, [pc, #424]	; (8002318 <HAL_RCC_OscConfig+0x330>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4a69      	ldr	r2, [pc, #420]	; (8002318 <HAL_RCC_OscConfig+0x330>)
 8002172:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002176:	6013      	str	r3, [r2, #0]
 8002178:	4b67      	ldr	r3, [pc, #412]	; (8002318 <HAL_RCC_OscConfig+0x330>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a66      	ldr	r2, [pc, #408]	; (8002318 <HAL_RCC_OscConfig+0x330>)
 800217e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002182:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002184:	4b64      	ldr	r3, [pc, #400]	; (8002318 <HAL_RCC_OscConfig+0x330>)
 8002186:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002188:	f023 020f 	bic.w	r2, r3, #15
 800218c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002190:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	689b      	ldr	r3, [r3, #8]
 8002198:	495f      	ldr	r1, [pc, #380]	; (8002318 <HAL_RCC_OscConfig+0x330>)
 800219a:	4313      	orrs	r3, r2
 800219c:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800219e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021a2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d059      	beq.n	8002262 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021ae:	f7fe fcfd 	bl	8000bac <HAL_GetTick>
 80021b2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021b6:	e00a      	b.n	80021ce <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80021b8:	f7fe fcf8 	bl	8000bac <HAL_GetTick>
 80021bc:	4602      	mov	r2, r0
 80021be:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80021c2:	1ad3      	subs	r3, r2, r3
 80021c4:	2b64      	cmp	r3, #100	; 0x64
 80021c6:	d902      	bls.n	80021ce <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 80021c8:	2303      	movs	r3, #3
 80021ca:	f000 bf43 	b.w	8003054 <HAL_RCC_OscConfig+0x106c>
 80021ce:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80021d2:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021d6:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80021da:	fa93 f3a3 	rbit	r3, r3
 80021de:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80021e2:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021e6:	fab3 f383 	clz	r3, r3
 80021ea:	b2db      	uxtb	r3, r3
 80021ec:	095b      	lsrs	r3, r3, #5
 80021ee:	b2db      	uxtb	r3, r3
 80021f0:	f043 0301 	orr.w	r3, r3, #1
 80021f4:	b2db      	uxtb	r3, r3
 80021f6:	2b01      	cmp	r3, #1
 80021f8:	d102      	bne.n	8002200 <HAL_RCC_OscConfig+0x218>
 80021fa:	4b47      	ldr	r3, [pc, #284]	; (8002318 <HAL_RCC_OscConfig+0x330>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	e015      	b.n	800222c <HAL_RCC_OscConfig+0x244>
 8002200:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002204:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002208:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800220c:	fa93 f3a3 	rbit	r3, r3
 8002210:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002214:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002218:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800221c:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002220:	fa93 f3a3 	rbit	r3, r3
 8002224:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8002228:	4b3b      	ldr	r3, [pc, #236]	; (8002318 <HAL_RCC_OscConfig+0x330>)
 800222a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800222c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002230:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8002234:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002238:	fa92 f2a2 	rbit	r2, r2
 800223c:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8002240:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8002244:	fab2 f282 	clz	r2, r2
 8002248:	b2d2      	uxtb	r2, r2
 800224a:	f042 0220 	orr.w	r2, r2, #32
 800224e:	b2d2      	uxtb	r2, r2
 8002250:	f002 021f 	and.w	r2, r2, #31
 8002254:	2101      	movs	r1, #1
 8002256:	fa01 f202 	lsl.w	r2, r1, r2
 800225a:	4013      	ands	r3, r2
 800225c:	2b00      	cmp	r3, #0
 800225e:	d0ab      	beq.n	80021b8 <HAL_RCC_OscConfig+0x1d0>
 8002260:	e05d      	b.n	800231e <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002262:	f7fe fca3 	bl	8000bac <HAL_GetTick>
 8002266:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800226a:	e00a      	b.n	8002282 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800226c:	f7fe fc9e 	bl	8000bac <HAL_GetTick>
 8002270:	4602      	mov	r2, r0
 8002272:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002276:	1ad3      	subs	r3, r2, r3
 8002278:	2b64      	cmp	r3, #100	; 0x64
 800227a:	d902      	bls.n	8002282 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 800227c:	2303      	movs	r3, #3
 800227e:	f000 bee9 	b.w	8003054 <HAL_RCC_OscConfig+0x106c>
 8002282:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002286:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800228a:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800228e:	fa93 f3a3 	rbit	r3, r3
 8002292:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8002296:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800229a:	fab3 f383 	clz	r3, r3
 800229e:	b2db      	uxtb	r3, r3
 80022a0:	095b      	lsrs	r3, r3, #5
 80022a2:	b2db      	uxtb	r3, r3
 80022a4:	f043 0301 	orr.w	r3, r3, #1
 80022a8:	b2db      	uxtb	r3, r3
 80022aa:	2b01      	cmp	r3, #1
 80022ac:	d102      	bne.n	80022b4 <HAL_RCC_OscConfig+0x2cc>
 80022ae:	4b1a      	ldr	r3, [pc, #104]	; (8002318 <HAL_RCC_OscConfig+0x330>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	e015      	b.n	80022e0 <HAL_RCC_OscConfig+0x2f8>
 80022b4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80022b8:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022bc:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80022c0:	fa93 f3a3 	rbit	r3, r3
 80022c4:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80022c8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80022cc:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80022d0:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80022d4:	fa93 f3a3 	rbit	r3, r3
 80022d8:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80022dc:	4b0e      	ldr	r3, [pc, #56]	; (8002318 <HAL_RCC_OscConfig+0x330>)
 80022de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022e0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80022e4:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80022e8:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80022ec:	fa92 f2a2 	rbit	r2, r2
 80022f0:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80022f4:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80022f8:	fab2 f282 	clz	r2, r2
 80022fc:	b2d2      	uxtb	r2, r2
 80022fe:	f042 0220 	orr.w	r2, r2, #32
 8002302:	b2d2      	uxtb	r2, r2
 8002304:	f002 021f 	and.w	r2, r2, #31
 8002308:	2101      	movs	r1, #1
 800230a:	fa01 f202 	lsl.w	r2, r1, r2
 800230e:	4013      	ands	r3, r2
 8002310:	2b00      	cmp	r3, #0
 8002312:	d1ab      	bne.n	800226c <HAL_RCC_OscConfig+0x284>
 8002314:	e003      	b.n	800231e <HAL_RCC_OscConfig+0x336>
 8002316:	bf00      	nop
 8002318:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800231c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800231e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002322:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f003 0302 	and.w	r3, r3, #2
 800232e:	2b00      	cmp	r3, #0
 8002330:	f000 817d 	beq.w	800262e <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002334:	4ba6      	ldr	r3, [pc, #664]	; (80025d0 <HAL_RCC_OscConfig+0x5e8>)
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	f003 030c 	and.w	r3, r3, #12
 800233c:	2b00      	cmp	r3, #0
 800233e:	d00b      	beq.n	8002358 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002340:	4ba3      	ldr	r3, [pc, #652]	; (80025d0 <HAL_RCC_OscConfig+0x5e8>)
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	f003 030c 	and.w	r3, r3, #12
 8002348:	2b08      	cmp	r3, #8
 800234a:	d172      	bne.n	8002432 <HAL_RCC_OscConfig+0x44a>
 800234c:	4ba0      	ldr	r3, [pc, #640]	; (80025d0 <HAL_RCC_OscConfig+0x5e8>)
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002354:	2b00      	cmp	r3, #0
 8002356:	d16c      	bne.n	8002432 <HAL_RCC_OscConfig+0x44a>
 8002358:	2302      	movs	r3, #2
 800235a:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800235e:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8002362:	fa93 f3a3 	rbit	r3, r3
 8002366:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 800236a:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800236e:	fab3 f383 	clz	r3, r3
 8002372:	b2db      	uxtb	r3, r3
 8002374:	095b      	lsrs	r3, r3, #5
 8002376:	b2db      	uxtb	r3, r3
 8002378:	f043 0301 	orr.w	r3, r3, #1
 800237c:	b2db      	uxtb	r3, r3
 800237e:	2b01      	cmp	r3, #1
 8002380:	d102      	bne.n	8002388 <HAL_RCC_OscConfig+0x3a0>
 8002382:	4b93      	ldr	r3, [pc, #588]	; (80025d0 <HAL_RCC_OscConfig+0x5e8>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	e013      	b.n	80023b0 <HAL_RCC_OscConfig+0x3c8>
 8002388:	2302      	movs	r3, #2
 800238a:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800238e:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8002392:	fa93 f3a3 	rbit	r3, r3
 8002396:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800239a:	2302      	movs	r3, #2
 800239c:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80023a0:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80023a4:	fa93 f3a3 	rbit	r3, r3
 80023a8:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80023ac:	4b88      	ldr	r3, [pc, #544]	; (80025d0 <HAL_RCC_OscConfig+0x5e8>)
 80023ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023b0:	2202      	movs	r2, #2
 80023b2:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80023b6:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80023ba:	fa92 f2a2 	rbit	r2, r2
 80023be:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80023c2:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80023c6:	fab2 f282 	clz	r2, r2
 80023ca:	b2d2      	uxtb	r2, r2
 80023cc:	f042 0220 	orr.w	r2, r2, #32
 80023d0:	b2d2      	uxtb	r2, r2
 80023d2:	f002 021f 	and.w	r2, r2, #31
 80023d6:	2101      	movs	r1, #1
 80023d8:	fa01 f202 	lsl.w	r2, r1, r2
 80023dc:	4013      	ands	r3, r2
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d00a      	beq.n	80023f8 <HAL_RCC_OscConfig+0x410>
 80023e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023e6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	691b      	ldr	r3, [r3, #16]
 80023ee:	2b01      	cmp	r3, #1
 80023f0:	d002      	beq.n	80023f8 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 80023f2:	2301      	movs	r3, #1
 80023f4:	f000 be2e 	b.w	8003054 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023f8:	4b75      	ldr	r3, [pc, #468]	; (80025d0 <HAL_RCC_OscConfig+0x5e8>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002400:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002404:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	695b      	ldr	r3, [r3, #20]
 800240c:	21f8      	movs	r1, #248	; 0xf8
 800240e:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002412:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002416:	fa91 f1a1 	rbit	r1, r1
 800241a:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 800241e:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8002422:	fab1 f181 	clz	r1, r1
 8002426:	b2c9      	uxtb	r1, r1
 8002428:	408b      	lsls	r3, r1
 800242a:	4969      	ldr	r1, [pc, #420]	; (80025d0 <HAL_RCC_OscConfig+0x5e8>)
 800242c:	4313      	orrs	r3, r2
 800242e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002430:	e0fd      	b.n	800262e <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002432:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002436:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	691b      	ldr	r3, [r3, #16]
 800243e:	2b00      	cmp	r3, #0
 8002440:	f000 8088 	beq.w	8002554 <HAL_RCC_OscConfig+0x56c>
 8002444:	2301      	movs	r3, #1
 8002446:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800244a:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800244e:	fa93 f3a3 	rbit	r3, r3
 8002452:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8002456:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800245a:	fab3 f383 	clz	r3, r3
 800245e:	b2db      	uxtb	r3, r3
 8002460:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002464:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002468:	009b      	lsls	r3, r3, #2
 800246a:	461a      	mov	r2, r3
 800246c:	2301      	movs	r3, #1
 800246e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002470:	f7fe fb9c 	bl	8000bac <HAL_GetTick>
 8002474:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002478:	e00a      	b.n	8002490 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800247a:	f7fe fb97 	bl	8000bac <HAL_GetTick>
 800247e:	4602      	mov	r2, r0
 8002480:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002484:	1ad3      	subs	r3, r2, r3
 8002486:	2b02      	cmp	r3, #2
 8002488:	d902      	bls.n	8002490 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 800248a:	2303      	movs	r3, #3
 800248c:	f000 bde2 	b.w	8003054 <HAL_RCC_OscConfig+0x106c>
 8002490:	2302      	movs	r3, #2
 8002492:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002496:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800249a:	fa93 f3a3 	rbit	r3, r3
 800249e:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80024a2:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024a6:	fab3 f383 	clz	r3, r3
 80024aa:	b2db      	uxtb	r3, r3
 80024ac:	095b      	lsrs	r3, r3, #5
 80024ae:	b2db      	uxtb	r3, r3
 80024b0:	f043 0301 	orr.w	r3, r3, #1
 80024b4:	b2db      	uxtb	r3, r3
 80024b6:	2b01      	cmp	r3, #1
 80024b8:	d102      	bne.n	80024c0 <HAL_RCC_OscConfig+0x4d8>
 80024ba:	4b45      	ldr	r3, [pc, #276]	; (80025d0 <HAL_RCC_OscConfig+0x5e8>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	e013      	b.n	80024e8 <HAL_RCC_OscConfig+0x500>
 80024c0:	2302      	movs	r3, #2
 80024c2:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024c6:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80024ca:	fa93 f3a3 	rbit	r3, r3
 80024ce:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80024d2:	2302      	movs	r3, #2
 80024d4:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80024d8:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80024dc:	fa93 f3a3 	rbit	r3, r3
 80024e0:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80024e4:	4b3a      	ldr	r3, [pc, #232]	; (80025d0 <HAL_RCC_OscConfig+0x5e8>)
 80024e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024e8:	2202      	movs	r2, #2
 80024ea:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80024ee:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80024f2:	fa92 f2a2 	rbit	r2, r2
 80024f6:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80024fa:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80024fe:	fab2 f282 	clz	r2, r2
 8002502:	b2d2      	uxtb	r2, r2
 8002504:	f042 0220 	orr.w	r2, r2, #32
 8002508:	b2d2      	uxtb	r2, r2
 800250a:	f002 021f 	and.w	r2, r2, #31
 800250e:	2101      	movs	r1, #1
 8002510:	fa01 f202 	lsl.w	r2, r1, r2
 8002514:	4013      	ands	r3, r2
 8002516:	2b00      	cmp	r3, #0
 8002518:	d0af      	beq.n	800247a <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800251a:	4b2d      	ldr	r3, [pc, #180]	; (80025d0 <HAL_RCC_OscConfig+0x5e8>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002522:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002526:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	695b      	ldr	r3, [r3, #20]
 800252e:	21f8      	movs	r1, #248	; 0xf8
 8002530:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002534:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002538:	fa91 f1a1 	rbit	r1, r1
 800253c:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8002540:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8002544:	fab1 f181 	clz	r1, r1
 8002548:	b2c9      	uxtb	r1, r1
 800254a:	408b      	lsls	r3, r1
 800254c:	4920      	ldr	r1, [pc, #128]	; (80025d0 <HAL_RCC_OscConfig+0x5e8>)
 800254e:	4313      	orrs	r3, r2
 8002550:	600b      	str	r3, [r1, #0]
 8002552:	e06c      	b.n	800262e <HAL_RCC_OscConfig+0x646>
 8002554:	2301      	movs	r3, #1
 8002556:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800255a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800255e:	fa93 f3a3 	rbit	r3, r3
 8002562:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8002566:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800256a:	fab3 f383 	clz	r3, r3
 800256e:	b2db      	uxtb	r3, r3
 8002570:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002574:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002578:	009b      	lsls	r3, r3, #2
 800257a:	461a      	mov	r2, r3
 800257c:	2300      	movs	r3, #0
 800257e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002580:	f7fe fb14 	bl	8000bac <HAL_GetTick>
 8002584:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002588:	e00a      	b.n	80025a0 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800258a:	f7fe fb0f 	bl	8000bac <HAL_GetTick>
 800258e:	4602      	mov	r2, r0
 8002590:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002594:	1ad3      	subs	r3, r2, r3
 8002596:	2b02      	cmp	r3, #2
 8002598:	d902      	bls.n	80025a0 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 800259a:	2303      	movs	r3, #3
 800259c:	f000 bd5a 	b.w	8003054 <HAL_RCC_OscConfig+0x106c>
 80025a0:	2302      	movs	r3, #2
 80025a2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025a6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80025aa:	fa93 f3a3 	rbit	r3, r3
 80025ae:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80025b2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025b6:	fab3 f383 	clz	r3, r3
 80025ba:	b2db      	uxtb	r3, r3
 80025bc:	095b      	lsrs	r3, r3, #5
 80025be:	b2db      	uxtb	r3, r3
 80025c0:	f043 0301 	orr.w	r3, r3, #1
 80025c4:	b2db      	uxtb	r3, r3
 80025c6:	2b01      	cmp	r3, #1
 80025c8:	d104      	bne.n	80025d4 <HAL_RCC_OscConfig+0x5ec>
 80025ca:	4b01      	ldr	r3, [pc, #4]	; (80025d0 <HAL_RCC_OscConfig+0x5e8>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	e015      	b.n	80025fc <HAL_RCC_OscConfig+0x614>
 80025d0:	40021000 	.word	0x40021000
 80025d4:	2302      	movs	r3, #2
 80025d6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025da:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80025de:	fa93 f3a3 	rbit	r3, r3
 80025e2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80025e6:	2302      	movs	r3, #2
 80025e8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80025ec:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80025f0:	fa93 f3a3 	rbit	r3, r3
 80025f4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80025f8:	4bc8      	ldr	r3, [pc, #800]	; (800291c <HAL_RCC_OscConfig+0x934>)
 80025fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025fc:	2202      	movs	r2, #2
 80025fe:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8002602:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002606:	fa92 f2a2 	rbit	r2, r2
 800260a:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 800260e:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8002612:	fab2 f282 	clz	r2, r2
 8002616:	b2d2      	uxtb	r2, r2
 8002618:	f042 0220 	orr.w	r2, r2, #32
 800261c:	b2d2      	uxtb	r2, r2
 800261e:	f002 021f 	and.w	r2, r2, #31
 8002622:	2101      	movs	r1, #1
 8002624:	fa01 f202 	lsl.w	r2, r1, r2
 8002628:	4013      	ands	r3, r2
 800262a:	2b00      	cmp	r3, #0
 800262c:	d1ad      	bne.n	800258a <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800262e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002632:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f003 0308 	and.w	r3, r3, #8
 800263e:	2b00      	cmp	r3, #0
 8002640:	f000 8110 	beq.w	8002864 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002644:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002648:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	699b      	ldr	r3, [r3, #24]
 8002650:	2b00      	cmp	r3, #0
 8002652:	d079      	beq.n	8002748 <HAL_RCC_OscConfig+0x760>
 8002654:	2301      	movs	r3, #1
 8002656:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800265a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800265e:	fa93 f3a3 	rbit	r3, r3
 8002662:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8002666:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800266a:	fab3 f383 	clz	r3, r3
 800266e:	b2db      	uxtb	r3, r3
 8002670:	461a      	mov	r2, r3
 8002672:	4bab      	ldr	r3, [pc, #684]	; (8002920 <HAL_RCC_OscConfig+0x938>)
 8002674:	4413      	add	r3, r2
 8002676:	009b      	lsls	r3, r3, #2
 8002678:	461a      	mov	r2, r3
 800267a:	2301      	movs	r3, #1
 800267c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800267e:	f7fe fa95 	bl	8000bac <HAL_GetTick>
 8002682:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002686:	e00a      	b.n	800269e <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002688:	f7fe fa90 	bl	8000bac <HAL_GetTick>
 800268c:	4602      	mov	r2, r0
 800268e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002692:	1ad3      	subs	r3, r2, r3
 8002694:	2b02      	cmp	r3, #2
 8002696:	d902      	bls.n	800269e <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8002698:	2303      	movs	r3, #3
 800269a:	f000 bcdb 	b.w	8003054 <HAL_RCC_OscConfig+0x106c>
 800269e:	2302      	movs	r3, #2
 80026a0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026a4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80026a8:	fa93 f3a3 	rbit	r3, r3
 80026ac:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80026b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026b4:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80026b8:	2202      	movs	r2, #2
 80026ba:	601a      	str	r2, [r3, #0]
 80026bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026c0:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	fa93 f2a3 	rbit	r2, r3
 80026ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026ce:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80026d2:	601a      	str	r2, [r3, #0]
 80026d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80026dc:	2202      	movs	r2, #2
 80026de:	601a      	str	r2, [r3, #0]
 80026e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	fa93 f2a3 	rbit	r2, r3
 80026ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026f2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80026f6:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026f8:	4b88      	ldr	r3, [pc, #544]	; (800291c <HAL_RCC_OscConfig+0x934>)
 80026fa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80026fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002700:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002704:	2102      	movs	r1, #2
 8002706:	6019      	str	r1, [r3, #0]
 8002708:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800270c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	fa93 f1a3 	rbit	r1, r3
 8002716:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800271a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800271e:	6019      	str	r1, [r3, #0]
  return result;
 8002720:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002724:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	fab3 f383 	clz	r3, r3
 800272e:	b2db      	uxtb	r3, r3
 8002730:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002734:	b2db      	uxtb	r3, r3
 8002736:	f003 031f 	and.w	r3, r3, #31
 800273a:	2101      	movs	r1, #1
 800273c:	fa01 f303 	lsl.w	r3, r1, r3
 8002740:	4013      	ands	r3, r2
 8002742:	2b00      	cmp	r3, #0
 8002744:	d0a0      	beq.n	8002688 <HAL_RCC_OscConfig+0x6a0>
 8002746:	e08d      	b.n	8002864 <HAL_RCC_OscConfig+0x87c>
 8002748:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800274c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002750:	2201      	movs	r2, #1
 8002752:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002754:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002758:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	fa93 f2a3 	rbit	r2, r3
 8002762:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002766:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800276a:	601a      	str	r2, [r3, #0]
  return result;
 800276c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002770:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002774:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002776:	fab3 f383 	clz	r3, r3
 800277a:	b2db      	uxtb	r3, r3
 800277c:	461a      	mov	r2, r3
 800277e:	4b68      	ldr	r3, [pc, #416]	; (8002920 <HAL_RCC_OscConfig+0x938>)
 8002780:	4413      	add	r3, r2
 8002782:	009b      	lsls	r3, r3, #2
 8002784:	461a      	mov	r2, r3
 8002786:	2300      	movs	r3, #0
 8002788:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800278a:	f7fe fa0f 	bl	8000bac <HAL_GetTick>
 800278e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002792:	e00a      	b.n	80027aa <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002794:	f7fe fa0a 	bl	8000bac <HAL_GetTick>
 8002798:	4602      	mov	r2, r0
 800279a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800279e:	1ad3      	subs	r3, r2, r3
 80027a0:	2b02      	cmp	r3, #2
 80027a2:	d902      	bls.n	80027aa <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80027a4:	2303      	movs	r3, #3
 80027a6:	f000 bc55 	b.w	8003054 <HAL_RCC_OscConfig+0x106c>
 80027aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027ae:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80027b2:	2202      	movs	r2, #2
 80027b4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027ba:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	fa93 f2a3 	rbit	r2, r3
 80027c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027c8:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80027cc:	601a      	str	r2, [r3, #0]
 80027ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027d2:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80027d6:	2202      	movs	r2, #2
 80027d8:	601a      	str	r2, [r3, #0]
 80027da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027de:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	fa93 f2a3 	rbit	r2, r3
 80027e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027ec:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80027f0:	601a      	str	r2, [r3, #0]
 80027f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027f6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80027fa:	2202      	movs	r2, #2
 80027fc:	601a      	str	r2, [r3, #0]
 80027fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002802:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	fa93 f2a3 	rbit	r2, r3
 800280c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002810:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002814:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002816:	4b41      	ldr	r3, [pc, #260]	; (800291c <HAL_RCC_OscConfig+0x934>)
 8002818:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800281a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800281e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002822:	2102      	movs	r1, #2
 8002824:	6019      	str	r1, [r3, #0]
 8002826:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800282a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	fa93 f1a3 	rbit	r1, r3
 8002834:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002838:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800283c:	6019      	str	r1, [r3, #0]
  return result;
 800283e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002842:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	fab3 f383 	clz	r3, r3
 800284c:	b2db      	uxtb	r3, r3
 800284e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002852:	b2db      	uxtb	r3, r3
 8002854:	f003 031f 	and.w	r3, r3, #31
 8002858:	2101      	movs	r1, #1
 800285a:	fa01 f303 	lsl.w	r3, r1, r3
 800285e:	4013      	ands	r3, r2
 8002860:	2b00      	cmp	r3, #0
 8002862:	d197      	bne.n	8002794 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002864:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002868:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f003 0304 	and.w	r3, r3, #4
 8002874:	2b00      	cmp	r3, #0
 8002876:	f000 81a1 	beq.w	8002bbc <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800287a:	2300      	movs	r3, #0
 800287c:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002880:	4b26      	ldr	r3, [pc, #152]	; (800291c <HAL_RCC_OscConfig+0x934>)
 8002882:	69db      	ldr	r3, [r3, #28]
 8002884:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002888:	2b00      	cmp	r3, #0
 800288a:	d116      	bne.n	80028ba <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800288c:	4b23      	ldr	r3, [pc, #140]	; (800291c <HAL_RCC_OscConfig+0x934>)
 800288e:	69db      	ldr	r3, [r3, #28]
 8002890:	4a22      	ldr	r2, [pc, #136]	; (800291c <HAL_RCC_OscConfig+0x934>)
 8002892:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002896:	61d3      	str	r3, [r2, #28]
 8002898:	4b20      	ldr	r3, [pc, #128]	; (800291c <HAL_RCC_OscConfig+0x934>)
 800289a:	69db      	ldr	r3, [r3, #28]
 800289c:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80028a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028a4:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80028a8:	601a      	str	r2, [r3, #0]
 80028aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028ae:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80028b2:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80028b4:	2301      	movs	r3, #1
 80028b6:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028ba:	4b1a      	ldr	r3, [pc, #104]	; (8002924 <HAL_RCC_OscConfig+0x93c>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d11a      	bne.n	80028fc <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80028c6:	4b17      	ldr	r3, [pc, #92]	; (8002924 <HAL_RCC_OscConfig+0x93c>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4a16      	ldr	r2, [pc, #88]	; (8002924 <HAL_RCC_OscConfig+0x93c>)
 80028cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028d0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028d2:	f7fe f96b 	bl	8000bac <HAL_GetTick>
 80028d6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028da:	e009      	b.n	80028f0 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028dc:	f7fe f966 	bl	8000bac <HAL_GetTick>
 80028e0:	4602      	mov	r2, r0
 80028e2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80028e6:	1ad3      	subs	r3, r2, r3
 80028e8:	2b64      	cmp	r3, #100	; 0x64
 80028ea:	d901      	bls.n	80028f0 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80028ec:	2303      	movs	r3, #3
 80028ee:	e3b1      	b.n	8003054 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028f0:	4b0c      	ldr	r3, [pc, #48]	; (8002924 <HAL_RCC_OscConfig+0x93c>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d0ef      	beq.n	80028dc <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002900:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	68db      	ldr	r3, [r3, #12]
 8002908:	2b01      	cmp	r3, #1
 800290a:	d10d      	bne.n	8002928 <HAL_RCC_OscConfig+0x940>
 800290c:	4b03      	ldr	r3, [pc, #12]	; (800291c <HAL_RCC_OscConfig+0x934>)
 800290e:	6a1b      	ldr	r3, [r3, #32]
 8002910:	4a02      	ldr	r2, [pc, #8]	; (800291c <HAL_RCC_OscConfig+0x934>)
 8002912:	f043 0301 	orr.w	r3, r3, #1
 8002916:	6213      	str	r3, [r2, #32]
 8002918:	e03c      	b.n	8002994 <HAL_RCC_OscConfig+0x9ac>
 800291a:	bf00      	nop
 800291c:	40021000 	.word	0x40021000
 8002920:	10908120 	.word	0x10908120
 8002924:	40007000 	.word	0x40007000
 8002928:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800292c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	68db      	ldr	r3, [r3, #12]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d10c      	bne.n	8002952 <HAL_RCC_OscConfig+0x96a>
 8002938:	4bc1      	ldr	r3, [pc, #772]	; (8002c40 <HAL_RCC_OscConfig+0xc58>)
 800293a:	6a1b      	ldr	r3, [r3, #32]
 800293c:	4ac0      	ldr	r2, [pc, #768]	; (8002c40 <HAL_RCC_OscConfig+0xc58>)
 800293e:	f023 0301 	bic.w	r3, r3, #1
 8002942:	6213      	str	r3, [r2, #32]
 8002944:	4bbe      	ldr	r3, [pc, #760]	; (8002c40 <HAL_RCC_OscConfig+0xc58>)
 8002946:	6a1b      	ldr	r3, [r3, #32]
 8002948:	4abd      	ldr	r2, [pc, #756]	; (8002c40 <HAL_RCC_OscConfig+0xc58>)
 800294a:	f023 0304 	bic.w	r3, r3, #4
 800294e:	6213      	str	r3, [r2, #32]
 8002950:	e020      	b.n	8002994 <HAL_RCC_OscConfig+0x9ac>
 8002952:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002956:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	68db      	ldr	r3, [r3, #12]
 800295e:	2b05      	cmp	r3, #5
 8002960:	d10c      	bne.n	800297c <HAL_RCC_OscConfig+0x994>
 8002962:	4bb7      	ldr	r3, [pc, #732]	; (8002c40 <HAL_RCC_OscConfig+0xc58>)
 8002964:	6a1b      	ldr	r3, [r3, #32]
 8002966:	4ab6      	ldr	r2, [pc, #728]	; (8002c40 <HAL_RCC_OscConfig+0xc58>)
 8002968:	f043 0304 	orr.w	r3, r3, #4
 800296c:	6213      	str	r3, [r2, #32]
 800296e:	4bb4      	ldr	r3, [pc, #720]	; (8002c40 <HAL_RCC_OscConfig+0xc58>)
 8002970:	6a1b      	ldr	r3, [r3, #32]
 8002972:	4ab3      	ldr	r2, [pc, #716]	; (8002c40 <HAL_RCC_OscConfig+0xc58>)
 8002974:	f043 0301 	orr.w	r3, r3, #1
 8002978:	6213      	str	r3, [r2, #32]
 800297a:	e00b      	b.n	8002994 <HAL_RCC_OscConfig+0x9ac>
 800297c:	4bb0      	ldr	r3, [pc, #704]	; (8002c40 <HAL_RCC_OscConfig+0xc58>)
 800297e:	6a1b      	ldr	r3, [r3, #32]
 8002980:	4aaf      	ldr	r2, [pc, #700]	; (8002c40 <HAL_RCC_OscConfig+0xc58>)
 8002982:	f023 0301 	bic.w	r3, r3, #1
 8002986:	6213      	str	r3, [r2, #32]
 8002988:	4bad      	ldr	r3, [pc, #692]	; (8002c40 <HAL_RCC_OscConfig+0xc58>)
 800298a:	6a1b      	ldr	r3, [r3, #32]
 800298c:	4aac      	ldr	r2, [pc, #688]	; (8002c40 <HAL_RCC_OscConfig+0xc58>)
 800298e:	f023 0304 	bic.w	r3, r3, #4
 8002992:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002994:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002998:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	68db      	ldr	r3, [r3, #12]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	f000 8081 	beq.w	8002aa8 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029a6:	f7fe f901 	bl	8000bac <HAL_GetTick>
 80029aa:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029ae:	e00b      	b.n	80029c8 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029b0:	f7fe f8fc 	bl	8000bac <HAL_GetTick>
 80029b4:	4602      	mov	r2, r0
 80029b6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80029ba:	1ad3      	subs	r3, r2, r3
 80029bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80029c0:	4293      	cmp	r3, r2
 80029c2:	d901      	bls.n	80029c8 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80029c4:	2303      	movs	r3, #3
 80029c6:	e345      	b.n	8003054 <HAL_RCC_OscConfig+0x106c>
 80029c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029cc:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80029d0:	2202      	movs	r2, #2
 80029d2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029d8:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	fa93 f2a3 	rbit	r2, r3
 80029e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029e6:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80029ea:	601a      	str	r2, [r3, #0]
 80029ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029f0:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80029f4:	2202      	movs	r2, #2
 80029f6:	601a      	str	r2, [r3, #0]
 80029f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029fc:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	fa93 f2a3 	rbit	r2, r3
 8002a06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a0a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002a0e:	601a      	str	r2, [r3, #0]
  return result;
 8002a10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a14:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002a18:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a1a:	fab3 f383 	clz	r3, r3
 8002a1e:	b2db      	uxtb	r3, r3
 8002a20:	095b      	lsrs	r3, r3, #5
 8002a22:	b2db      	uxtb	r3, r3
 8002a24:	f043 0302 	orr.w	r3, r3, #2
 8002a28:	b2db      	uxtb	r3, r3
 8002a2a:	2b02      	cmp	r3, #2
 8002a2c:	d102      	bne.n	8002a34 <HAL_RCC_OscConfig+0xa4c>
 8002a2e:	4b84      	ldr	r3, [pc, #528]	; (8002c40 <HAL_RCC_OscConfig+0xc58>)
 8002a30:	6a1b      	ldr	r3, [r3, #32]
 8002a32:	e013      	b.n	8002a5c <HAL_RCC_OscConfig+0xa74>
 8002a34:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a38:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002a3c:	2202      	movs	r2, #2
 8002a3e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a44:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	fa93 f2a3 	rbit	r2, r3
 8002a4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a52:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8002a56:	601a      	str	r2, [r3, #0]
 8002a58:	4b79      	ldr	r3, [pc, #484]	; (8002c40 <HAL_RCC_OscConfig+0xc58>)
 8002a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a5c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002a60:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002a64:	2102      	movs	r1, #2
 8002a66:	6011      	str	r1, [r2, #0]
 8002a68:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002a6c:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002a70:	6812      	ldr	r2, [r2, #0]
 8002a72:	fa92 f1a2 	rbit	r1, r2
 8002a76:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002a7a:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002a7e:	6011      	str	r1, [r2, #0]
  return result;
 8002a80:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002a84:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002a88:	6812      	ldr	r2, [r2, #0]
 8002a8a:	fab2 f282 	clz	r2, r2
 8002a8e:	b2d2      	uxtb	r2, r2
 8002a90:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002a94:	b2d2      	uxtb	r2, r2
 8002a96:	f002 021f 	and.w	r2, r2, #31
 8002a9a:	2101      	movs	r1, #1
 8002a9c:	fa01 f202 	lsl.w	r2, r1, r2
 8002aa0:	4013      	ands	r3, r2
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d084      	beq.n	80029b0 <HAL_RCC_OscConfig+0x9c8>
 8002aa6:	e07f      	b.n	8002ba8 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002aa8:	f7fe f880 	bl	8000bac <HAL_GetTick>
 8002aac:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ab0:	e00b      	b.n	8002aca <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ab2:	f7fe f87b 	bl	8000bac <HAL_GetTick>
 8002ab6:	4602      	mov	r2, r0
 8002ab8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002abc:	1ad3      	subs	r3, r2, r3
 8002abe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d901      	bls.n	8002aca <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8002ac6:	2303      	movs	r3, #3
 8002ac8:	e2c4      	b.n	8003054 <HAL_RCC_OscConfig+0x106c>
 8002aca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ace:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8002ad2:	2202      	movs	r2, #2
 8002ad4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ad6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ada:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	fa93 f2a3 	rbit	r2, r3
 8002ae4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ae8:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8002aec:	601a      	str	r2, [r3, #0]
 8002aee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002af2:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002af6:	2202      	movs	r2, #2
 8002af8:	601a      	str	r2, [r3, #0]
 8002afa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002afe:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	fa93 f2a3 	rbit	r2, r3
 8002b08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b0c:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002b10:	601a      	str	r2, [r3, #0]
  return result;
 8002b12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b16:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002b1a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b1c:	fab3 f383 	clz	r3, r3
 8002b20:	b2db      	uxtb	r3, r3
 8002b22:	095b      	lsrs	r3, r3, #5
 8002b24:	b2db      	uxtb	r3, r3
 8002b26:	f043 0302 	orr.w	r3, r3, #2
 8002b2a:	b2db      	uxtb	r3, r3
 8002b2c:	2b02      	cmp	r3, #2
 8002b2e:	d102      	bne.n	8002b36 <HAL_RCC_OscConfig+0xb4e>
 8002b30:	4b43      	ldr	r3, [pc, #268]	; (8002c40 <HAL_RCC_OscConfig+0xc58>)
 8002b32:	6a1b      	ldr	r3, [r3, #32]
 8002b34:	e013      	b.n	8002b5e <HAL_RCC_OscConfig+0xb76>
 8002b36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b3a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002b3e:	2202      	movs	r2, #2
 8002b40:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b46:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	fa93 f2a3 	rbit	r2, r3
 8002b50:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b54:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002b58:	601a      	str	r2, [r3, #0]
 8002b5a:	4b39      	ldr	r3, [pc, #228]	; (8002c40 <HAL_RCC_OscConfig+0xc58>)
 8002b5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b5e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002b62:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8002b66:	2102      	movs	r1, #2
 8002b68:	6011      	str	r1, [r2, #0]
 8002b6a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002b6e:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8002b72:	6812      	ldr	r2, [r2, #0]
 8002b74:	fa92 f1a2 	rbit	r1, r2
 8002b78:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002b7c:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002b80:	6011      	str	r1, [r2, #0]
  return result;
 8002b82:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002b86:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002b8a:	6812      	ldr	r2, [r2, #0]
 8002b8c:	fab2 f282 	clz	r2, r2
 8002b90:	b2d2      	uxtb	r2, r2
 8002b92:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002b96:	b2d2      	uxtb	r2, r2
 8002b98:	f002 021f 	and.w	r2, r2, #31
 8002b9c:	2101      	movs	r1, #1
 8002b9e:	fa01 f202 	lsl.w	r2, r1, r2
 8002ba2:	4013      	ands	r3, r2
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d184      	bne.n	8002ab2 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002ba8:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8002bac:	2b01      	cmp	r3, #1
 8002bae:	d105      	bne.n	8002bbc <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bb0:	4b23      	ldr	r3, [pc, #140]	; (8002c40 <HAL_RCC_OscConfig+0xc58>)
 8002bb2:	69db      	ldr	r3, [r3, #28]
 8002bb4:	4a22      	ldr	r2, [pc, #136]	; (8002c40 <HAL_RCC_OscConfig+0xc58>)
 8002bb6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002bba:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002bbc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bc0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	69db      	ldr	r3, [r3, #28]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	f000 8242 	beq.w	8003052 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002bce:	4b1c      	ldr	r3, [pc, #112]	; (8002c40 <HAL_RCC_OscConfig+0xc58>)
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	f003 030c 	and.w	r3, r3, #12
 8002bd6:	2b08      	cmp	r3, #8
 8002bd8:	f000 8213 	beq.w	8003002 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002bdc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002be0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	69db      	ldr	r3, [r3, #28]
 8002be8:	2b02      	cmp	r3, #2
 8002bea:	f040 8162 	bne.w	8002eb2 <HAL_RCC_OscConfig+0xeca>
 8002bee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bf2:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002bf6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002bfa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bfc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c00:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	fa93 f2a3 	rbit	r2, r3
 8002c0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c0e:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002c12:	601a      	str	r2, [r3, #0]
  return result;
 8002c14:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c18:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002c1c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c1e:	fab3 f383 	clz	r3, r3
 8002c22:	b2db      	uxtb	r3, r3
 8002c24:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002c28:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002c2c:	009b      	lsls	r3, r3, #2
 8002c2e:	461a      	mov	r2, r3
 8002c30:	2300      	movs	r3, #0
 8002c32:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c34:	f7fd ffba 	bl	8000bac <HAL_GetTick>
 8002c38:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c3c:	e00c      	b.n	8002c58 <HAL_RCC_OscConfig+0xc70>
 8002c3e:	bf00      	nop
 8002c40:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c44:	f7fd ffb2 	bl	8000bac <HAL_GetTick>
 8002c48:	4602      	mov	r2, r0
 8002c4a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002c4e:	1ad3      	subs	r3, r2, r3
 8002c50:	2b02      	cmp	r3, #2
 8002c52:	d901      	bls.n	8002c58 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8002c54:	2303      	movs	r3, #3
 8002c56:	e1fd      	b.n	8003054 <HAL_RCC_OscConfig+0x106c>
 8002c58:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c5c:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002c60:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002c64:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c6a:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	fa93 f2a3 	rbit	r2, r3
 8002c74:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c78:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002c7c:	601a      	str	r2, [r3, #0]
  return result;
 8002c7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c82:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002c86:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c88:	fab3 f383 	clz	r3, r3
 8002c8c:	b2db      	uxtb	r3, r3
 8002c8e:	095b      	lsrs	r3, r3, #5
 8002c90:	b2db      	uxtb	r3, r3
 8002c92:	f043 0301 	orr.w	r3, r3, #1
 8002c96:	b2db      	uxtb	r3, r3
 8002c98:	2b01      	cmp	r3, #1
 8002c9a:	d102      	bne.n	8002ca2 <HAL_RCC_OscConfig+0xcba>
 8002c9c:	4bb0      	ldr	r3, [pc, #704]	; (8002f60 <HAL_RCC_OscConfig+0xf78>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	e027      	b.n	8002cf2 <HAL_RCC_OscConfig+0xd0a>
 8002ca2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ca6:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002caa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002cae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cb0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cb4:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	fa93 f2a3 	rbit	r2, r3
 8002cbe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cc2:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002cc6:	601a      	str	r2, [r3, #0]
 8002cc8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ccc:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002cd0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002cd4:	601a      	str	r2, [r3, #0]
 8002cd6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cda:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	fa93 f2a3 	rbit	r2, r3
 8002ce4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ce8:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8002cec:	601a      	str	r2, [r3, #0]
 8002cee:	4b9c      	ldr	r3, [pc, #624]	; (8002f60 <HAL_RCC_OscConfig+0xf78>)
 8002cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cf2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002cf6:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002cfa:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002cfe:	6011      	str	r1, [r2, #0]
 8002d00:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002d04:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002d08:	6812      	ldr	r2, [r2, #0]
 8002d0a:	fa92 f1a2 	rbit	r1, r2
 8002d0e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002d12:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002d16:	6011      	str	r1, [r2, #0]
  return result;
 8002d18:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002d1c:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002d20:	6812      	ldr	r2, [r2, #0]
 8002d22:	fab2 f282 	clz	r2, r2
 8002d26:	b2d2      	uxtb	r2, r2
 8002d28:	f042 0220 	orr.w	r2, r2, #32
 8002d2c:	b2d2      	uxtb	r2, r2
 8002d2e:	f002 021f 	and.w	r2, r2, #31
 8002d32:	2101      	movs	r1, #1
 8002d34:	fa01 f202 	lsl.w	r2, r1, r2
 8002d38:	4013      	ands	r3, r2
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d182      	bne.n	8002c44 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d3e:	4b88      	ldr	r3, [pc, #544]	; (8002f60 <HAL_RCC_OscConfig+0xf78>)
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002d46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d4a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002d52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d56:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	6a1b      	ldr	r3, [r3, #32]
 8002d5e:	430b      	orrs	r3, r1
 8002d60:	497f      	ldr	r1, [pc, #508]	; (8002f60 <HAL_RCC_OscConfig+0xf78>)
 8002d62:	4313      	orrs	r3, r2
 8002d64:	604b      	str	r3, [r1, #4]
 8002d66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d6a:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002d6e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002d72:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d74:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d78:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	fa93 f2a3 	rbit	r2, r3
 8002d82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d86:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002d8a:	601a      	str	r2, [r3, #0]
  return result;
 8002d8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d90:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002d94:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d96:	fab3 f383 	clz	r3, r3
 8002d9a:	b2db      	uxtb	r3, r3
 8002d9c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002da0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002da4:	009b      	lsls	r3, r3, #2
 8002da6:	461a      	mov	r2, r3
 8002da8:	2301      	movs	r3, #1
 8002daa:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dac:	f7fd fefe 	bl	8000bac <HAL_GetTick>
 8002db0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002db4:	e009      	b.n	8002dca <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002db6:	f7fd fef9 	bl	8000bac <HAL_GetTick>
 8002dba:	4602      	mov	r2, r0
 8002dbc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002dc0:	1ad3      	subs	r3, r2, r3
 8002dc2:	2b02      	cmp	r3, #2
 8002dc4:	d901      	bls.n	8002dca <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8002dc6:	2303      	movs	r3, #3
 8002dc8:	e144      	b.n	8003054 <HAL_RCC_OscConfig+0x106c>
 8002dca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dce:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002dd2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002dd6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dd8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ddc:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	fa93 f2a3 	rbit	r2, r3
 8002de6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dea:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002dee:	601a      	str	r2, [r3, #0]
  return result;
 8002df0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002df4:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002df8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002dfa:	fab3 f383 	clz	r3, r3
 8002dfe:	b2db      	uxtb	r3, r3
 8002e00:	095b      	lsrs	r3, r3, #5
 8002e02:	b2db      	uxtb	r3, r3
 8002e04:	f043 0301 	orr.w	r3, r3, #1
 8002e08:	b2db      	uxtb	r3, r3
 8002e0a:	2b01      	cmp	r3, #1
 8002e0c:	d102      	bne.n	8002e14 <HAL_RCC_OscConfig+0xe2c>
 8002e0e:	4b54      	ldr	r3, [pc, #336]	; (8002f60 <HAL_RCC_OscConfig+0xf78>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	e027      	b.n	8002e64 <HAL_RCC_OscConfig+0xe7c>
 8002e14:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e18:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002e1c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002e20:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e26:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	fa93 f2a3 	rbit	r2, r3
 8002e30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e34:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002e38:	601a      	str	r2, [r3, #0]
 8002e3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e3e:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002e42:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002e46:	601a      	str	r2, [r3, #0]
 8002e48:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e4c:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	fa93 f2a3 	rbit	r2, r3
 8002e56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e5a:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002e5e:	601a      	str	r2, [r3, #0]
 8002e60:	4b3f      	ldr	r3, [pc, #252]	; (8002f60 <HAL_RCC_OscConfig+0xf78>)
 8002e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e64:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002e68:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8002e6c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002e70:	6011      	str	r1, [r2, #0]
 8002e72:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002e76:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8002e7a:	6812      	ldr	r2, [r2, #0]
 8002e7c:	fa92 f1a2 	rbit	r1, r2
 8002e80:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002e84:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002e88:	6011      	str	r1, [r2, #0]
  return result;
 8002e8a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002e8e:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002e92:	6812      	ldr	r2, [r2, #0]
 8002e94:	fab2 f282 	clz	r2, r2
 8002e98:	b2d2      	uxtb	r2, r2
 8002e9a:	f042 0220 	orr.w	r2, r2, #32
 8002e9e:	b2d2      	uxtb	r2, r2
 8002ea0:	f002 021f 	and.w	r2, r2, #31
 8002ea4:	2101      	movs	r1, #1
 8002ea6:	fa01 f202 	lsl.w	r2, r1, r2
 8002eaa:	4013      	ands	r3, r2
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d082      	beq.n	8002db6 <HAL_RCC_OscConfig+0xdce>
 8002eb0:	e0cf      	b.n	8003052 <HAL_RCC_OscConfig+0x106a>
 8002eb2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002eb6:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002eba:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002ebe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ec0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ec4:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	fa93 f2a3 	rbit	r2, r3
 8002ece:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ed2:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002ed6:	601a      	str	r2, [r3, #0]
  return result;
 8002ed8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002edc:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002ee0:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ee2:	fab3 f383 	clz	r3, r3
 8002ee6:	b2db      	uxtb	r3, r3
 8002ee8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002eec:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002ef0:	009b      	lsls	r3, r3, #2
 8002ef2:	461a      	mov	r2, r3
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ef8:	f7fd fe58 	bl	8000bac <HAL_GetTick>
 8002efc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f00:	e009      	b.n	8002f16 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f02:	f7fd fe53 	bl	8000bac <HAL_GetTick>
 8002f06:	4602      	mov	r2, r0
 8002f08:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002f0c:	1ad3      	subs	r3, r2, r3
 8002f0e:	2b02      	cmp	r3, #2
 8002f10:	d901      	bls.n	8002f16 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8002f12:	2303      	movs	r3, #3
 8002f14:	e09e      	b.n	8003054 <HAL_RCC_OscConfig+0x106c>
 8002f16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f1a:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002f1e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002f22:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f24:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f28:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	fa93 f2a3 	rbit	r2, r3
 8002f32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f36:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002f3a:	601a      	str	r2, [r3, #0]
  return result;
 8002f3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f40:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002f44:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f46:	fab3 f383 	clz	r3, r3
 8002f4a:	b2db      	uxtb	r3, r3
 8002f4c:	095b      	lsrs	r3, r3, #5
 8002f4e:	b2db      	uxtb	r3, r3
 8002f50:	f043 0301 	orr.w	r3, r3, #1
 8002f54:	b2db      	uxtb	r3, r3
 8002f56:	2b01      	cmp	r3, #1
 8002f58:	d104      	bne.n	8002f64 <HAL_RCC_OscConfig+0xf7c>
 8002f5a:	4b01      	ldr	r3, [pc, #4]	; (8002f60 <HAL_RCC_OscConfig+0xf78>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	e029      	b.n	8002fb4 <HAL_RCC_OscConfig+0xfcc>
 8002f60:	40021000 	.word	0x40021000
 8002f64:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f68:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002f6c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002f70:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f76:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	fa93 f2a3 	rbit	r2, r3
 8002f80:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f84:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002f88:	601a      	str	r2, [r3, #0]
 8002f8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f8e:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002f92:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002f96:	601a      	str	r2, [r3, #0]
 8002f98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f9c:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	fa93 f2a3 	rbit	r2, r3
 8002fa6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002faa:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8002fae:	601a      	str	r2, [r3, #0]
 8002fb0:	4b2b      	ldr	r3, [pc, #172]	; (8003060 <HAL_RCC_OscConfig+0x1078>)
 8002fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fb4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002fb8:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8002fbc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002fc0:	6011      	str	r1, [r2, #0]
 8002fc2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002fc6:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8002fca:	6812      	ldr	r2, [r2, #0]
 8002fcc:	fa92 f1a2 	rbit	r1, r2
 8002fd0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002fd4:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002fd8:	6011      	str	r1, [r2, #0]
  return result;
 8002fda:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002fde:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002fe2:	6812      	ldr	r2, [r2, #0]
 8002fe4:	fab2 f282 	clz	r2, r2
 8002fe8:	b2d2      	uxtb	r2, r2
 8002fea:	f042 0220 	orr.w	r2, r2, #32
 8002fee:	b2d2      	uxtb	r2, r2
 8002ff0:	f002 021f 	and.w	r2, r2, #31
 8002ff4:	2101      	movs	r1, #1
 8002ff6:	fa01 f202 	lsl.w	r2, r1, r2
 8002ffa:	4013      	ands	r3, r2
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d180      	bne.n	8002f02 <HAL_RCC_OscConfig+0xf1a>
 8003000:	e027      	b.n	8003052 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003002:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003006:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	69db      	ldr	r3, [r3, #28]
 800300e:	2b01      	cmp	r3, #1
 8003010:	d101      	bne.n	8003016 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8003012:	2301      	movs	r3, #1
 8003014:	e01e      	b.n	8003054 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003016:	4b12      	ldr	r3, [pc, #72]	; (8003060 <HAL_RCC_OscConfig+0x1078>)
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800301e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003022:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003026:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800302a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	6a1b      	ldr	r3, [r3, #32]
 8003032:	429a      	cmp	r2, r3
 8003034:	d10b      	bne.n	800304e <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8003036:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800303a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800303e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003042:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800304a:	429a      	cmp	r2, r3
 800304c:	d001      	beq.n	8003052 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 800304e:	2301      	movs	r3, #1
 8003050:	e000      	b.n	8003054 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8003052:	2300      	movs	r3, #0
}
 8003054:	4618      	mov	r0, r3
 8003056:	f507 7700 	add.w	r7, r7, #512	; 0x200
 800305a:	46bd      	mov	sp, r7
 800305c:	bd80      	pop	{r7, pc}
 800305e:	bf00      	nop
 8003060:	40021000 	.word	0x40021000

08003064 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b09e      	sub	sp, #120	; 0x78
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
 800306c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800306e:	2300      	movs	r3, #0
 8003070:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2b00      	cmp	r3, #0
 8003076:	d101      	bne.n	800307c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003078:	2301      	movs	r3, #1
 800307a:	e162      	b.n	8003342 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800307c:	4b90      	ldr	r3, [pc, #576]	; (80032c0 <HAL_RCC_ClockConfig+0x25c>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f003 0307 	and.w	r3, r3, #7
 8003084:	683a      	ldr	r2, [r7, #0]
 8003086:	429a      	cmp	r2, r3
 8003088:	d910      	bls.n	80030ac <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800308a:	4b8d      	ldr	r3, [pc, #564]	; (80032c0 <HAL_RCC_ClockConfig+0x25c>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f023 0207 	bic.w	r2, r3, #7
 8003092:	498b      	ldr	r1, [pc, #556]	; (80032c0 <HAL_RCC_ClockConfig+0x25c>)
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	4313      	orrs	r3, r2
 8003098:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800309a:	4b89      	ldr	r3, [pc, #548]	; (80032c0 <HAL_RCC_ClockConfig+0x25c>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f003 0307 	and.w	r3, r3, #7
 80030a2:	683a      	ldr	r2, [r7, #0]
 80030a4:	429a      	cmp	r2, r3
 80030a6:	d001      	beq.n	80030ac <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80030a8:	2301      	movs	r3, #1
 80030aa:	e14a      	b.n	8003342 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f003 0302 	and.w	r3, r3, #2
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d008      	beq.n	80030ca <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030b8:	4b82      	ldr	r3, [pc, #520]	; (80032c4 <HAL_RCC_ClockConfig+0x260>)
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	689b      	ldr	r3, [r3, #8]
 80030c4:	497f      	ldr	r1, [pc, #508]	; (80032c4 <HAL_RCC_ClockConfig+0x260>)
 80030c6:	4313      	orrs	r3, r2
 80030c8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f003 0301 	and.w	r3, r3, #1
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	f000 80dc 	beq.w	8003290 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	2b01      	cmp	r3, #1
 80030de:	d13c      	bne.n	800315a <HAL_RCC_ClockConfig+0xf6>
 80030e0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80030e4:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030e6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80030e8:	fa93 f3a3 	rbit	r3, r3
 80030ec:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80030ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030f0:	fab3 f383 	clz	r3, r3
 80030f4:	b2db      	uxtb	r3, r3
 80030f6:	095b      	lsrs	r3, r3, #5
 80030f8:	b2db      	uxtb	r3, r3
 80030fa:	f043 0301 	orr.w	r3, r3, #1
 80030fe:	b2db      	uxtb	r3, r3
 8003100:	2b01      	cmp	r3, #1
 8003102:	d102      	bne.n	800310a <HAL_RCC_ClockConfig+0xa6>
 8003104:	4b6f      	ldr	r3, [pc, #444]	; (80032c4 <HAL_RCC_ClockConfig+0x260>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	e00f      	b.n	800312a <HAL_RCC_ClockConfig+0xc6>
 800310a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800310e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003110:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003112:	fa93 f3a3 	rbit	r3, r3
 8003116:	667b      	str	r3, [r7, #100]	; 0x64
 8003118:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800311c:	663b      	str	r3, [r7, #96]	; 0x60
 800311e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003120:	fa93 f3a3 	rbit	r3, r3
 8003124:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003126:	4b67      	ldr	r3, [pc, #412]	; (80032c4 <HAL_RCC_ClockConfig+0x260>)
 8003128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800312a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800312e:	65ba      	str	r2, [r7, #88]	; 0x58
 8003130:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003132:	fa92 f2a2 	rbit	r2, r2
 8003136:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003138:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800313a:	fab2 f282 	clz	r2, r2
 800313e:	b2d2      	uxtb	r2, r2
 8003140:	f042 0220 	orr.w	r2, r2, #32
 8003144:	b2d2      	uxtb	r2, r2
 8003146:	f002 021f 	and.w	r2, r2, #31
 800314a:	2101      	movs	r1, #1
 800314c:	fa01 f202 	lsl.w	r2, r1, r2
 8003150:	4013      	ands	r3, r2
 8003152:	2b00      	cmp	r3, #0
 8003154:	d17b      	bne.n	800324e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003156:	2301      	movs	r3, #1
 8003158:	e0f3      	b.n	8003342 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	685b      	ldr	r3, [r3, #4]
 800315e:	2b02      	cmp	r3, #2
 8003160:	d13c      	bne.n	80031dc <HAL_RCC_ClockConfig+0x178>
 8003162:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003166:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003168:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800316a:	fa93 f3a3 	rbit	r3, r3
 800316e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003170:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003172:	fab3 f383 	clz	r3, r3
 8003176:	b2db      	uxtb	r3, r3
 8003178:	095b      	lsrs	r3, r3, #5
 800317a:	b2db      	uxtb	r3, r3
 800317c:	f043 0301 	orr.w	r3, r3, #1
 8003180:	b2db      	uxtb	r3, r3
 8003182:	2b01      	cmp	r3, #1
 8003184:	d102      	bne.n	800318c <HAL_RCC_ClockConfig+0x128>
 8003186:	4b4f      	ldr	r3, [pc, #316]	; (80032c4 <HAL_RCC_ClockConfig+0x260>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	e00f      	b.n	80031ac <HAL_RCC_ClockConfig+0x148>
 800318c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003190:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003192:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003194:	fa93 f3a3 	rbit	r3, r3
 8003198:	647b      	str	r3, [r7, #68]	; 0x44
 800319a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800319e:	643b      	str	r3, [r7, #64]	; 0x40
 80031a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80031a2:	fa93 f3a3 	rbit	r3, r3
 80031a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80031a8:	4b46      	ldr	r3, [pc, #280]	; (80032c4 <HAL_RCC_ClockConfig+0x260>)
 80031aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ac:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80031b0:	63ba      	str	r2, [r7, #56]	; 0x38
 80031b2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80031b4:	fa92 f2a2 	rbit	r2, r2
 80031b8:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80031ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80031bc:	fab2 f282 	clz	r2, r2
 80031c0:	b2d2      	uxtb	r2, r2
 80031c2:	f042 0220 	orr.w	r2, r2, #32
 80031c6:	b2d2      	uxtb	r2, r2
 80031c8:	f002 021f 	and.w	r2, r2, #31
 80031cc:	2101      	movs	r1, #1
 80031ce:	fa01 f202 	lsl.w	r2, r1, r2
 80031d2:	4013      	ands	r3, r2
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d13a      	bne.n	800324e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80031d8:	2301      	movs	r3, #1
 80031da:	e0b2      	b.n	8003342 <HAL_RCC_ClockConfig+0x2de>
 80031dc:	2302      	movs	r3, #2
 80031de:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031e2:	fa93 f3a3 	rbit	r3, r3
 80031e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80031e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031ea:	fab3 f383 	clz	r3, r3
 80031ee:	b2db      	uxtb	r3, r3
 80031f0:	095b      	lsrs	r3, r3, #5
 80031f2:	b2db      	uxtb	r3, r3
 80031f4:	f043 0301 	orr.w	r3, r3, #1
 80031f8:	b2db      	uxtb	r3, r3
 80031fa:	2b01      	cmp	r3, #1
 80031fc:	d102      	bne.n	8003204 <HAL_RCC_ClockConfig+0x1a0>
 80031fe:	4b31      	ldr	r3, [pc, #196]	; (80032c4 <HAL_RCC_ClockConfig+0x260>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	e00d      	b.n	8003220 <HAL_RCC_ClockConfig+0x1bc>
 8003204:	2302      	movs	r3, #2
 8003206:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003208:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800320a:	fa93 f3a3 	rbit	r3, r3
 800320e:	627b      	str	r3, [r7, #36]	; 0x24
 8003210:	2302      	movs	r3, #2
 8003212:	623b      	str	r3, [r7, #32]
 8003214:	6a3b      	ldr	r3, [r7, #32]
 8003216:	fa93 f3a3 	rbit	r3, r3
 800321a:	61fb      	str	r3, [r7, #28]
 800321c:	4b29      	ldr	r3, [pc, #164]	; (80032c4 <HAL_RCC_ClockConfig+0x260>)
 800321e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003220:	2202      	movs	r2, #2
 8003222:	61ba      	str	r2, [r7, #24]
 8003224:	69ba      	ldr	r2, [r7, #24]
 8003226:	fa92 f2a2 	rbit	r2, r2
 800322a:	617a      	str	r2, [r7, #20]
  return result;
 800322c:	697a      	ldr	r2, [r7, #20]
 800322e:	fab2 f282 	clz	r2, r2
 8003232:	b2d2      	uxtb	r2, r2
 8003234:	f042 0220 	orr.w	r2, r2, #32
 8003238:	b2d2      	uxtb	r2, r2
 800323a:	f002 021f 	and.w	r2, r2, #31
 800323e:	2101      	movs	r1, #1
 8003240:	fa01 f202 	lsl.w	r2, r1, r2
 8003244:	4013      	ands	r3, r2
 8003246:	2b00      	cmp	r3, #0
 8003248:	d101      	bne.n	800324e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800324a:	2301      	movs	r3, #1
 800324c:	e079      	b.n	8003342 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800324e:	4b1d      	ldr	r3, [pc, #116]	; (80032c4 <HAL_RCC_ClockConfig+0x260>)
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	f023 0203 	bic.w	r2, r3, #3
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	685b      	ldr	r3, [r3, #4]
 800325a:	491a      	ldr	r1, [pc, #104]	; (80032c4 <HAL_RCC_ClockConfig+0x260>)
 800325c:	4313      	orrs	r3, r2
 800325e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003260:	f7fd fca4 	bl	8000bac <HAL_GetTick>
 8003264:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003266:	e00a      	b.n	800327e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003268:	f7fd fca0 	bl	8000bac <HAL_GetTick>
 800326c:	4602      	mov	r2, r0
 800326e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003270:	1ad3      	subs	r3, r2, r3
 8003272:	f241 3288 	movw	r2, #5000	; 0x1388
 8003276:	4293      	cmp	r3, r2
 8003278:	d901      	bls.n	800327e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800327a:	2303      	movs	r3, #3
 800327c:	e061      	b.n	8003342 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800327e:	4b11      	ldr	r3, [pc, #68]	; (80032c4 <HAL_RCC_ClockConfig+0x260>)
 8003280:	685b      	ldr	r3, [r3, #4]
 8003282:	f003 020c 	and.w	r2, r3, #12
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	685b      	ldr	r3, [r3, #4]
 800328a:	009b      	lsls	r3, r3, #2
 800328c:	429a      	cmp	r2, r3
 800328e:	d1eb      	bne.n	8003268 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003290:	4b0b      	ldr	r3, [pc, #44]	; (80032c0 <HAL_RCC_ClockConfig+0x25c>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f003 0307 	and.w	r3, r3, #7
 8003298:	683a      	ldr	r2, [r7, #0]
 800329a:	429a      	cmp	r2, r3
 800329c:	d214      	bcs.n	80032c8 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800329e:	4b08      	ldr	r3, [pc, #32]	; (80032c0 <HAL_RCC_ClockConfig+0x25c>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f023 0207 	bic.w	r2, r3, #7
 80032a6:	4906      	ldr	r1, [pc, #24]	; (80032c0 <HAL_RCC_ClockConfig+0x25c>)
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	4313      	orrs	r3, r2
 80032ac:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80032ae:	4b04      	ldr	r3, [pc, #16]	; (80032c0 <HAL_RCC_ClockConfig+0x25c>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f003 0307 	and.w	r3, r3, #7
 80032b6:	683a      	ldr	r2, [r7, #0]
 80032b8:	429a      	cmp	r2, r3
 80032ba:	d005      	beq.n	80032c8 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80032bc:	2301      	movs	r3, #1
 80032be:	e040      	b.n	8003342 <HAL_RCC_ClockConfig+0x2de>
 80032c0:	40022000 	.word	0x40022000
 80032c4:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f003 0304 	and.w	r3, r3, #4
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d008      	beq.n	80032e6 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80032d4:	4b1d      	ldr	r3, [pc, #116]	; (800334c <HAL_RCC_ClockConfig+0x2e8>)
 80032d6:	685b      	ldr	r3, [r3, #4]
 80032d8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	68db      	ldr	r3, [r3, #12]
 80032e0:	491a      	ldr	r1, [pc, #104]	; (800334c <HAL_RCC_ClockConfig+0x2e8>)
 80032e2:	4313      	orrs	r3, r2
 80032e4:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f003 0308 	and.w	r3, r3, #8
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d009      	beq.n	8003306 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80032f2:	4b16      	ldr	r3, [pc, #88]	; (800334c <HAL_RCC_ClockConfig+0x2e8>)
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	691b      	ldr	r3, [r3, #16]
 80032fe:	00db      	lsls	r3, r3, #3
 8003300:	4912      	ldr	r1, [pc, #72]	; (800334c <HAL_RCC_ClockConfig+0x2e8>)
 8003302:	4313      	orrs	r3, r2
 8003304:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003306:	f000 f829 	bl	800335c <HAL_RCC_GetSysClockFreq>
 800330a:	4601      	mov	r1, r0
 800330c:	4b0f      	ldr	r3, [pc, #60]	; (800334c <HAL_RCC_ClockConfig+0x2e8>)
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003314:	22f0      	movs	r2, #240	; 0xf0
 8003316:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003318:	693a      	ldr	r2, [r7, #16]
 800331a:	fa92 f2a2 	rbit	r2, r2
 800331e:	60fa      	str	r2, [r7, #12]
  return result;
 8003320:	68fa      	ldr	r2, [r7, #12]
 8003322:	fab2 f282 	clz	r2, r2
 8003326:	b2d2      	uxtb	r2, r2
 8003328:	40d3      	lsrs	r3, r2
 800332a:	4a09      	ldr	r2, [pc, #36]	; (8003350 <HAL_RCC_ClockConfig+0x2ec>)
 800332c:	5cd3      	ldrb	r3, [r2, r3]
 800332e:	fa21 f303 	lsr.w	r3, r1, r3
 8003332:	4a08      	ldr	r2, [pc, #32]	; (8003354 <HAL_RCC_ClockConfig+0x2f0>)
 8003334:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003336:	4b08      	ldr	r3, [pc, #32]	; (8003358 <HAL_RCC_ClockConfig+0x2f4>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4618      	mov	r0, r3
 800333c:	f7fd fb18 	bl	8000970 <HAL_InitTick>
  
  return HAL_OK;
 8003340:	2300      	movs	r3, #0
}
 8003342:	4618      	mov	r0, r3
 8003344:	3778      	adds	r7, #120	; 0x78
 8003346:	46bd      	mov	sp, r7
 8003348:	bd80      	pop	{r7, pc}
 800334a:	bf00      	nop
 800334c:	40021000 	.word	0x40021000
 8003350:	08007d90 	.word	0x08007d90
 8003354:	20000000 	.word	0x20000000
 8003358:	20000004 	.word	0x20000004

0800335c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800335c:	b480      	push	{r7}
 800335e:	b08b      	sub	sp, #44	; 0x2c
 8003360:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003362:	2300      	movs	r3, #0
 8003364:	61fb      	str	r3, [r7, #28]
 8003366:	2300      	movs	r3, #0
 8003368:	61bb      	str	r3, [r7, #24]
 800336a:	2300      	movs	r3, #0
 800336c:	627b      	str	r3, [r7, #36]	; 0x24
 800336e:	2300      	movs	r3, #0
 8003370:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003372:	2300      	movs	r3, #0
 8003374:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003376:	4b29      	ldr	r3, [pc, #164]	; (800341c <HAL_RCC_GetSysClockFreq+0xc0>)
 8003378:	685b      	ldr	r3, [r3, #4]
 800337a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800337c:	69fb      	ldr	r3, [r7, #28]
 800337e:	f003 030c 	and.w	r3, r3, #12
 8003382:	2b04      	cmp	r3, #4
 8003384:	d002      	beq.n	800338c <HAL_RCC_GetSysClockFreq+0x30>
 8003386:	2b08      	cmp	r3, #8
 8003388:	d003      	beq.n	8003392 <HAL_RCC_GetSysClockFreq+0x36>
 800338a:	e03c      	b.n	8003406 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800338c:	4b24      	ldr	r3, [pc, #144]	; (8003420 <HAL_RCC_GetSysClockFreq+0xc4>)
 800338e:	623b      	str	r3, [r7, #32]
      break;
 8003390:	e03c      	b.n	800340c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003392:	69fb      	ldr	r3, [r7, #28]
 8003394:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003398:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800339c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800339e:	68ba      	ldr	r2, [r7, #8]
 80033a0:	fa92 f2a2 	rbit	r2, r2
 80033a4:	607a      	str	r2, [r7, #4]
  return result;
 80033a6:	687a      	ldr	r2, [r7, #4]
 80033a8:	fab2 f282 	clz	r2, r2
 80033ac:	b2d2      	uxtb	r2, r2
 80033ae:	40d3      	lsrs	r3, r2
 80033b0:	4a1c      	ldr	r2, [pc, #112]	; (8003424 <HAL_RCC_GetSysClockFreq+0xc8>)
 80033b2:	5cd3      	ldrb	r3, [r2, r3]
 80033b4:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80033b6:	4b19      	ldr	r3, [pc, #100]	; (800341c <HAL_RCC_GetSysClockFreq+0xc0>)
 80033b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033ba:	f003 030f 	and.w	r3, r3, #15
 80033be:	220f      	movs	r2, #15
 80033c0:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033c2:	693a      	ldr	r2, [r7, #16]
 80033c4:	fa92 f2a2 	rbit	r2, r2
 80033c8:	60fa      	str	r2, [r7, #12]
  return result;
 80033ca:	68fa      	ldr	r2, [r7, #12]
 80033cc:	fab2 f282 	clz	r2, r2
 80033d0:	b2d2      	uxtb	r2, r2
 80033d2:	40d3      	lsrs	r3, r2
 80033d4:	4a14      	ldr	r2, [pc, #80]	; (8003428 <HAL_RCC_GetSysClockFreq+0xcc>)
 80033d6:	5cd3      	ldrb	r3, [r2, r3]
 80033d8:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80033da:	69fb      	ldr	r3, [r7, #28]
 80033dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d008      	beq.n	80033f6 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80033e4:	4a0e      	ldr	r2, [pc, #56]	; (8003420 <HAL_RCC_GetSysClockFreq+0xc4>)
 80033e6:	69bb      	ldr	r3, [r7, #24]
 80033e8:	fbb2 f2f3 	udiv	r2, r2, r3
 80033ec:	697b      	ldr	r3, [r7, #20]
 80033ee:	fb02 f303 	mul.w	r3, r2, r3
 80033f2:	627b      	str	r3, [r7, #36]	; 0x24
 80033f4:	e004      	b.n	8003400 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80033f6:	697b      	ldr	r3, [r7, #20]
 80033f8:	4a0c      	ldr	r2, [pc, #48]	; (800342c <HAL_RCC_GetSysClockFreq+0xd0>)
 80033fa:	fb02 f303 	mul.w	r3, r2, r3
 80033fe:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003402:	623b      	str	r3, [r7, #32]
      break;
 8003404:	e002      	b.n	800340c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003406:	4b06      	ldr	r3, [pc, #24]	; (8003420 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003408:	623b      	str	r3, [r7, #32]
      break;
 800340a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800340c:	6a3b      	ldr	r3, [r7, #32]
}
 800340e:	4618      	mov	r0, r3
 8003410:	372c      	adds	r7, #44	; 0x2c
 8003412:	46bd      	mov	sp, r7
 8003414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003418:	4770      	bx	lr
 800341a:	bf00      	nop
 800341c:	40021000 	.word	0x40021000
 8003420:	007a1200 	.word	0x007a1200
 8003424:	08007da8 	.word	0x08007da8
 8003428:	08007db8 	.word	0x08007db8
 800342c:	003d0900 	.word	0x003d0900

08003430 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003430:	b480      	push	{r7}
 8003432:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003434:	4b03      	ldr	r3, [pc, #12]	; (8003444 <HAL_RCC_GetHCLKFreq+0x14>)
 8003436:	681b      	ldr	r3, [r3, #0]
}
 8003438:	4618      	mov	r0, r3
 800343a:	46bd      	mov	sp, r7
 800343c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003440:	4770      	bx	lr
 8003442:	bf00      	nop
 8003444:	20000000 	.word	0x20000000

08003448 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b082      	sub	sp, #8
 800344c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800344e:	f7ff ffef 	bl	8003430 <HAL_RCC_GetHCLKFreq>
 8003452:	4601      	mov	r1, r0
 8003454:	4b0b      	ldr	r3, [pc, #44]	; (8003484 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800345c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003460:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003462:	687a      	ldr	r2, [r7, #4]
 8003464:	fa92 f2a2 	rbit	r2, r2
 8003468:	603a      	str	r2, [r7, #0]
  return result;
 800346a:	683a      	ldr	r2, [r7, #0]
 800346c:	fab2 f282 	clz	r2, r2
 8003470:	b2d2      	uxtb	r2, r2
 8003472:	40d3      	lsrs	r3, r2
 8003474:	4a04      	ldr	r2, [pc, #16]	; (8003488 <HAL_RCC_GetPCLK1Freq+0x40>)
 8003476:	5cd3      	ldrb	r3, [r2, r3]
 8003478:	fa21 f303 	lsr.w	r3, r1, r3
}    
 800347c:	4618      	mov	r0, r3
 800347e:	3708      	adds	r7, #8
 8003480:	46bd      	mov	sp, r7
 8003482:	bd80      	pop	{r7, pc}
 8003484:	40021000 	.word	0x40021000
 8003488:	08007da0 	.word	0x08007da0

0800348c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b082      	sub	sp, #8
 8003490:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003492:	f7ff ffcd 	bl	8003430 <HAL_RCC_GetHCLKFreq>
 8003496:	4601      	mov	r1, r0
 8003498:	4b0b      	ldr	r3, [pc, #44]	; (80034c8 <HAL_RCC_GetPCLK2Freq+0x3c>)
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80034a0:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80034a4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034a6:	687a      	ldr	r2, [r7, #4]
 80034a8:	fa92 f2a2 	rbit	r2, r2
 80034ac:	603a      	str	r2, [r7, #0]
  return result;
 80034ae:	683a      	ldr	r2, [r7, #0]
 80034b0:	fab2 f282 	clz	r2, r2
 80034b4:	b2d2      	uxtb	r2, r2
 80034b6:	40d3      	lsrs	r3, r2
 80034b8:	4a04      	ldr	r2, [pc, #16]	; (80034cc <HAL_RCC_GetPCLK2Freq+0x40>)
 80034ba:	5cd3      	ldrb	r3, [r2, r3]
 80034bc:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80034c0:	4618      	mov	r0, r3
 80034c2:	3708      	adds	r7, #8
 80034c4:	46bd      	mov	sp, r7
 80034c6:	bd80      	pop	{r7, pc}
 80034c8:	40021000 	.word	0x40021000
 80034cc:	08007da0 	.word	0x08007da0

080034d0 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80034d0:	b480      	push	{r7}
 80034d2:	b083      	sub	sp, #12
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
 80034d8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	220f      	movs	r2, #15
 80034de:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80034e0:	4b12      	ldr	r3, [pc, #72]	; (800352c <HAL_RCC_GetClockConfig+0x5c>)
 80034e2:	685b      	ldr	r3, [r3, #4]
 80034e4:	f003 0203 	and.w	r2, r3, #3
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 80034ec:	4b0f      	ldr	r3, [pc, #60]	; (800352c <HAL_RCC_GetClockConfig+0x5c>)
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 80034f8:	4b0c      	ldr	r3, [pc, #48]	; (800352c <HAL_RCC_GetClockConfig+0x5c>)
 80034fa:	685b      	ldr	r3, [r3, #4]
 80034fc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003504:	4b09      	ldr	r3, [pc, #36]	; (800352c <HAL_RCC_GetClockConfig+0x5c>)
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	08db      	lsrs	r3, r3, #3
 800350a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 8003512:	4b07      	ldr	r3, [pc, #28]	; (8003530 <HAL_RCC_GetClockConfig+0x60>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f003 0207 	and.w	r2, r3, #7
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	601a      	str	r2, [r3, #0]
}
 800351e:	bf00      	nop
 8003520:	370c      	adds	r7, #12
 8003522:	46bd      	mov	sp, r7
 8003524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003528:	4770      	bx	lr
 800352a:	bf00      	nop
 800352c:	40021000 	.word	0x40021000
 8003530:	40022000 	.word	0x40022000

08003534 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b092      	sub	sp, #72	; 0x48
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800353c:	2300      	movs	r3, #0
 800353e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003540:	2300      	movs	r3, #0
 8003542:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003544:	2300      	movs	r3, #0
 8003546:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003552:	2b00      	cmp	r3, #0
 8003554:	f000 80d4 	beq.w	8003700 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003558:	4b4e      	ldr	r3, [pc, #312]	; (8003694 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800355a:	69db      	ldr	r3, [r3, #28]
 800355c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003560:	2b00      	cmp	r3, #0
 8003562:	d10e      	bne.n	8003582 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003564:	4b4b      	ldr	r3, [pc, #300]	; (8003694 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003566:	69db      	ldr	r3, [r3, #28]
 8003568:	4a4a      	ldr	r2, [pc, #296]	; (8003694 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800356a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800356e:	61d3      	str	r3, [r2, #28]
 8003570:	4b48      	ldr	r3, [pc, #288]	; (8003694 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003572:	69db      	ldr	r3, [r3, #28]
 8003574:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003578:	60bb      	str	r3, [r7, #8]
 800357a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800357c:	2301      	movs	r3, #1
 800357e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003582:	4b45      	ldr	r3, [pc, #276]	; (8003698 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800358a:	2b00      	cmp	r3, #0
 800358c:	d118      	bne.n	80035c0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800358e:	4b42      	ldr	r3, [pc, #264]	; (8003698 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4a41      	ldr	r2, [pc, #260]	; (8003698 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003594:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003598:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800359a:	f7fd fb07 	bl	8000bac <HAL_GetTick>
 800359e:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035a0:	e008      	b.n	80035b4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035a2:	f7fd fb03 	bl	8000bac <HAL_GetTick>
 80035a6:	4602      	mov	r2, r0
 80035a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80035aa:	1ad3      	subs	r3, r2, r3
 80035ac:	2b64      	cmp	r3, #100	; 0x64
 80035ae:	d901      	bls.n	80035b4 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80035b0:	2303      	movs	r3, #3
 80035b2:	e14b      	b.n	800384c <HAL_RCCEx_PeriphCLKConfig+0x318>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035b4:	4b38      	ldr	r3, [pc, #224]	; (8003698 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d0f0      	beq.n	80035a2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80035c0:	4b34      	ldr	r3, [pc, #208]	; (8003694 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035c2:	6a1b      	ldr	r3, [r3, #32]
 80035c4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035c8:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80035ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	f000 8084 	beq.w	80036da <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	685b      	ldr	r3, [r3, #4]
 80035d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035da:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80035dc:	429a      	cmp	r2, r3
 80035de:	d07c      	beq.n	80036da <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80035e0:	4b2c      	ldr	r3, [pc, #176]	; (8003694 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035e2:	6a1b      	ldr	r3, [r3, #32]
 80035e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035e8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80035ea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80035ee:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035f2:	fa93 f3a3 	rbit	r3, r3
 80035f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80035f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80035fa:	fab3 f383 	clz	r3, r3
 80035fe:	b2db      	uxtb	r3, r3
 8003600:	461a      	mov	r2, r3
 8003602:	4b26      	ldr	r3, [pc, #152]	; (800369c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003604:	4413      	add	r3, r2
 8003606:	009b      	lsls	r3, r3, #2
 8003608:	461a      	mov	r2, r3
 800360a:	2301      	movs	r3, #1
 800360c:	6013      	str	r3, [r2, #0]
 800360e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003612:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003614:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003616:	fa93 f3a3 	rbit	r3, r3
 800361a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800361c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800361e:	fab3 f383 	clz	r3, r3
 8003622:	b2db      	uxtb	r3, r3
 8003624:	461a      	mov	r2, r3
 8003626:	4b1d      	ldr	r3, [pc, #116]	; (800369c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003628:	4413      	add	r3, r2
 800362a:	009b      	lsls	r3, r3, #2
 800362c:	461a      	mov	r2, r3
 800362e:	2300      	movs	r3, #0
 8003630:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003632:	4a18      	ldr	r2, [pc, #96]	; (8003694 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003634:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003636:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003638:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800363a:	f003 0301 	and.w	r3, r3, #1
 800363e:	2b00      	cmp	r3, #0
 8003640:	d04b      	beq.n	80036da <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003642:	f7fd fab3 	bl	8000bac <HAL_GetTick>
 8003646:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003648:	e00a      	b.n	8003660 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800364a:	f7fd faaf 	bl	8000bac <HAL_GetTick>
 800364e:	4602      	mov	r2, r0
 8003650:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003652:	1ad3      	subs	r3, r2, r3
 8003654:	f241 3288 	movw	r2, #5000	; 0x1388
 8003658:	4293      	cmp	r3, r2
 800365a:	d901      	bls.n	8003660 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 800365c:	2303      	movs	r3, #3
 800365e:	e0f5      	b.n	800384c <HAL_RCCEx_PeriphCLKConfig+0x318>
 8003660:	2302      	movs	r3, #2
 8003662:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003664:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003666:	fa93 f3a3 	rbit	r3, r3
 800366a:	627b      	str	r3, [r7, #36]	; 0x24
 800366c:	2302      	movs	r3, #2
 800366e:	623b      	str	r3, [r7, #32]
 8003670:	6a3b      	ldr	r3, [r7, #32]
 8003672:	fa93 f3a3 	rbit	r3, r3
 8003676:	61fb      	str	r3, [r7, #28]
  return result;
 8003678:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800367a:	fab3 f383 	clz	r3, r3
 800367e:	b2db      	uxtb	r3, r3
 8003680:	095b      	lsrs	r3, r3, #5
 8003682:	b2db      	uxtb	r3, r3
 8003684:	f043 0302 	orr.w	r3, r3, #2
 8003688:	b2db      	uxtb	r3, r3
 800368a:	2b02      	cmp	r3, #2
 800368c:	d108      	bne.n	80036a0 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800368e:	4b01      	ldr	r3, [pc, #4]	; (8003694 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003690:	6a1b      	ldr	r3, [r3, #32]
 8003692:	e00d      	b.n	80036b0 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8003694:	40021000 	.word	0x40021000
 8003698:	40007000 	.word	0x40007000
 800369c:	10908100 	.word	0x10908100
 80036a0:	2302      	movs	r3, #2
 80036a2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036a4:	69bb      	ldr	r3, [r7, #24]
 80036a6:	fa93 f3a3 	rbit	r3, r3
 80036aa:	617b      	str	r3, [r7, #20]
 80036ac:	4b69      	ldr	r3, [pc, #420]	; (8003854 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80036ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036b0:	2202      	movs	r2, #2
 80036b2:	613a      	str	r2, [r7, #16]
 80036b4:	693a      	ldr	r2, [r7, #16]
 80036b6:	fa92 f2a2 	rbit	r2, r2
 80036ba:	60fa      	str	r2, [r7, #12]
  return result;
 80036bc:	68fa      	ldr	r2, [r7, #12]
 80036be:	fab2 f282 	clz	r2, r2
 80036c2:	b2d2      	uxtb	r2, r2
 80036c4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80036c8:	b2d2      	uxtb	r2, r2
 80036ca:	f002 021f 	and.w	r2, r2, #31
 80036ce:	2101      	movs	r1, #1
 80036d0:	fa01 f202 	lsl.w	r2, r1, r2
 80036d4:	4013      	ands	r3, r2
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d0b7      	beq.n	800364a <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80036da:	4b5e      	ldr	r3, [pc, #376]	; (8003854 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80036dc:	6a1b      	ldr	r3, [r3, #32]
 80036de:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	685b      	ldr	r3, [r3, #4]
 80036e6:	495b      	ldr	r1, [pc, #364]	; (8003854 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80036e8:	4313      	orrs	r3, r2
 80036ea:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80036ec:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80036f0:	2b01      	cmp	r3, #1
 80036f2:	d105      	bne.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036f4:	4b57      	ldr	r3, [pc, #348]	; (8003854 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80036f6:	69db      	ldr	r3, [r3, #28]
 80036f8:	4a56      	ldr	r2, [pc, #344]	; (8003854 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80036fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036fe:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f003 0301 	and.w	r3, r3, #1
 8003708:	2b00      	cmp	r3, #0
 800370a:	d008      	beq.n	800371e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800370c:	4b51      	ldr	r3, [pc, #324]	; (8003854 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800370e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003710:	f023 0203 	bic.w	r2, r3, #3
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	689b      	ldr	r3, [r3, #8]
 8003718:	494e      	ldr	r1, [pc, #312]	; (8003854 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800371a:	4313      	orrs	r3, r2
 800371c:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f003 0320 	and.w	r3, r3, #32
 8003726:	2b00      	cmp	r3, #0
 8003728:	d008      	beq.n	800373c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800372a:	4b4a      	ldr	r3, [pc, #296]	; (8003854 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800372c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800372e:	f023 0210 	bic.w	r2, r3, #16
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	68db      	ldr	r3, [r3, #12]
 8003736:	4947      	ldr	r1, [pc, #284]	; (8003854 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003738:	4313      	orrs	r3, r2
 800373a:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003744:	2b00      	cmp	r3, #0
 8003746:	d008      	beq.n	800375a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003748:	4b42      	ldr	r3, [pc, #264]	; (8003854 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003754:	493f      	ldr	r1, [pc, #252]	; (8003854 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003756:	4313      	orrs	r3, r2
 8003758:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003762:	2b00      	cmp	r3, #0
 8003764:	d008      	beq.n	8003778 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003766:	4b3b      	ldr	r3, [pc, #236]	; (8003854 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800376a:	f023 0220 	bic.w	r2, r3, #32
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	691b      	ldr	r3, [r3, #16]
 8003772:	4938      	ldr	r1, [pc, #224]	; (8003854 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003774:	4313      	orrs	r3, r2
 8003776:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003780:	2b00      	cmp	r3, #0
 8003782:	d008      	beq.n	8003796 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003784:	4b33      	ldr	r3, [pc, #204]	; (8003854 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003786:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003788:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	695b      	ldr	r3, [r3, #20]
 8003790:	4930      	ldr	r1, [pc, #192]	; (8003854 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003792:	4313      	orrs	r3, r2
 8003794:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d008      	beq.n	80037b4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80037a2:	4b2c      	ldr	r3, [pc, #176]	; (8003854 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	69db      	ldr	r3, [r3, #28]
 80037ae:	4929      	ldr	r1, [pc, #164]	; (8003854 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80037b0:	4313      	orrs	r3, r2
 80037b2:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d008      	beq.n	80037d2 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 80037c0:	4b24      	ldr	r3, [pc, #144]	; (8003854 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80037c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037c4:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	699b      	ldr	r3, [r3, #24]
 80037cc:	4921      	ldr	r1, [pc, #132]	; (8003854 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80037ce:	4313      	orrs	r3, r2
 80037d0:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d008      	beq.n	80037f0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80037de:	4b1d      	ldr	r3, [pc, #116]	; (8003854 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80037e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037e2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6a1b      	ldr	r3, [r3, #32]
 80037ea:	491a      	ldr	r1, [pc, #104]	; (8003854 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80037ec:	4313      	orrs	r3, r2
 80037ee:	630b      	str	r3, [r1, #48]	; 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d008      	beq.n	800380e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80037fc:	4b15      	ldr	r3, [pc, #84]	; (8003854 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80037fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003800:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003808:	4912      	ldr	r1, [pc, #72]	; (8003854 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800380a:	4313      	orrs	r3, r2
 800380c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003816:	2b00      	cmp	r3, #0
 8003818:	d008      	beq.n	800382c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 800381a:	4b0e      	ldr	r3, [pc, #56]	; (8003854 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800381c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800381e:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003826:	490b      	ldr	r1, [pc, #44]	; (8003854 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003828:	4313      	orrs	r3, r2
 800382a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003834:	2b00      	cmp	r3, #0
 8003836:	d008      	beq.n	800384a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8003838:	4b06      	ldr	r3, [pc, #24]	; (8003854 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800383a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800383c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003844:	4903      	ldr	r1, [pc, #12]	; (8003854 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003846:	4313      	orrs	r3, r2
 8003848:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800384a:	2300      	movs	r3, #0
}
 800384c:	4618      	mov	r0, r3
 800384e:	3748      	adds	r7, #72	; 0x48
 8003850:	46bd      	mov	sp, r7
 8003852:	bd80      	pop	{r7, pc}
 8003854:	40021000 	.word	0x40021000

08003858 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b082      	sub	sp, #8
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d101      	bne.n	800386a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003866:	2301      	movs	r3, #1
 8003868:	e049      	b.n	80038fe <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003870:	b2db      	uxtb	r3, r3
 8003872:	2b00      	cmp	r3, #0
 8003874:	d106      	bne.n	8003884 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2200      	movs	r2, #0
 800387a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800387e:	6878      	ldr	r0, [r7, #4]
 8003880:	f000 f841 	bl	8003906 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2202      	movs	r2, #2
 8003888:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681a      	ldr	r2, [r3, #0]
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	3304      	adds	r3, #4
 8003894:	4619      	mov	r1, r3
 8003896:	4610      	mov	r0, r2
 8003898:	f000 f9dc 	bl	8003c54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2201      	movs	r2, #1
 80038a0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2201      	movs	r2, #1
 80038a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2201      	movs	r2, #1
 80038b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2201      	movs	r2, #1
 80038b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2201      	movs	r2, #1
 80038c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2201      	movs	r2, #1
 80038c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2201      	movs	r2, #1
 80038d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2201      	movs	r2, #1
 80038d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2201      	movs	r2, #1
 80038e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2201      	movs	r2, #1
 80038e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2201      	movs	r2, #1
 80038f0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2201      	movs	r2, #1
 80038f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80038fc:	2300      	movs	r3, #0
}
 80038fe:	4618      	mov	r0, r3
 8003900:	3708      	adds	r7, #8
 8003902:	46bd      	mov	sp, r7
 8003904:	bd80      	pop	{r7, pc}

08003906 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003906:	b480      	push	{r7}
 8003908:	b083      	sub	sp, #12
 800390a:	af00      	add	r7, sp, #0
 800390c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800390e:	bf00      	nop
 8003910:	370c      	adds	r7, #12
 8003912:	46bd      	mov	sp, r7
 8003914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003918:	4770      	bx	lr
	...

0800391c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800391c:	b480      	push	{r7}
 800391e:	b085      	sub	sp, #20
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800392a:	b2db      	uxtb	r3, r3
 800392c:	2b01      	cmp	r3, #1
 800392e:	d001      	beq.n	8003934 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003930:	2301      	movs	r3, #1
 8003932:	e03b      	b.n	80039ac <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2202      	movs	r2, #2
 8003938:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	68da      	ldr	r2, [r3, #12]
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f042 0201 	orr.w	r2, r2, #1
 800394a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4a19      	ldr	r2, [pc, #100]	; (80039b8 <HAL_TIM_Base_Start_IT+0x9c>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d009      	beq.n	800396a <HAL_TIM_Base_Start_IT+0x4e>
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800395e:	d004      	beq.n	800396a <HAL_TIM_Base_Start_IT+0x4e>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4a15      	ldr	r2, [pc, #84]	; (80039bc <HAL_TIM_Base_Start_IT+0xa0>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d115      	bne.n	8003996 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	689a      	ldr	r2, [r3, #8]
 8003970:	4b13      	ldr	r3, [pc, #76]	; (80039c0 <HAL_TIM_Base_Start_IT+0xa4>)
 8003972:	4013      	ands	r3, r2
 8003974:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	2b06      	cmp	r3, #6
 800397a:	d015      	beq.n	80039a8 <HAL_TIM_Base_Start_IT+0x8c>
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003982:	d011      	beq.n	80039a8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	681a      	ldr	r2, [r3, #0]
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f042 0201 	orr.w	r2, r2, #1
 8003992:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003994:	e008      	b.n	80039a8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	681a      	ldr	r2, [r3, #0]
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f042 0201 	orr.w	r2, r2, #1
 80039a4:	601a      	str	r2, [r3, #0]
 80039a6:	e000      	b.n	80039aa <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039a8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80039aa:	2300      	movs	r3, #0
}
 80039ac:	4618      	mov	r0, r3
 80039ae:	3714      	adds	r7, #20
 80039b0:	46bd      	mov	sp, r7
 80039b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b6:	4770      	bx	lr
 80039b8:	40012c00 	.word	0x40012c00
 80039bc:	40014000 	.word	0x40014000
 80039c0:	00010007 	.word	0x00010007

080039c4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b082      	sub	sp, #8
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	691b      	ldr	r3, [r3, #16]
 80039d2:	f003 0302 	and.w	r3, r3, #2
 80039d6:	2b02      	cmp	r3, #2
 80039d8:	d122      	bne.n	8003a20 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	68db      	ldr	r3, [r3, #12]
 80039e0:	f003 0302 	and.w	r3, r3, #2
 80039e4:	2b02      	cmp	r3, #2
 80039e6:	d11b      	bne.n	8003a20 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f06f 0202 	mvn.w	r2, #2
 80039f0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2201      	movs	r2, #1
 80039f6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	699b      	ldr	r3, [r3, #24]
 80039fe:	f003 0303 	and.w	r3, r3, #3
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d003      	beq.n	8003a0e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003a06:	6878      	ldr	r0, [r7, #4]
 8003a08:	f000 f905 	bl	8003c16 <HAL_TIM_IC_CaptureCallback>
 8003a0c:	e005      	b.n	8003a1a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a0e:	6878      	ldr	r0, [r7, #4]
 8003a10:	f000 f8f7 	bl	8003c02 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a14:	6878      	ldr	r0, [r7, #4]
 8003a16:	f000 f908 	bl	8003c2a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	691b      	ldr	r3, [r3, #16]
 8003a26:	f003 0304 	and.w	r3, r3, #4
 8003a2a:	2b04      	cmp	r3, #4
 8003a2c:	d122      	bne.n	8003a74 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	68db      	ldr	r3, [r3, #12]
 8003a34:	f003 0304 	and.w	r3, r3, #4
 8003a38:	2b04      	cmp	r3, #4
 8003a3a:	d11b      	bne.n	8003a74 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f06f 0204 	mvn.w	r2, #4
 8003a44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2202      	movs	r2, #2
 8003a4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	699b      	ldr	r3, [r3, #24]
 8003a52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d003      	beq.n	8003a62 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a5a:	6878      	ldr	r0, [r7, #4]
 8003a5c:	f000 f8db 	bl	8003c16 <HAL_TIM_IC_CaptureCallback>
 8003a60:	e005      	b.n	8003a6e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a62:	6878      	ldr	r0, [r7, #4]
 8003a64:	f000 f8cd 	bl	8003c02 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a68:	6878      	ldr	r0, [r7, #4]
 8003a6a:	f000 f8de 	bl	8003c2a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2200      	movs	r2, #0
 8003a72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	691b      	ldr	r3, [r3, #16]
 8003a7a:	f003 0308 	and.w	r3, r3, #8
 8003a7e:	2b08      	cmp	r3, #8
 8003a80:	d122      	bne.n	8003ac8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	68db      	ldr	r3, [r3, #12]
 8003a88:	f003 0308 	and.w	r3, r3, #8
 8003a8c:	2b08      	cmp	r3, #8
 8003a8e:	d11b      	bne.n	8003ac8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f06f 0208 	mvn.w	r2, #8
 8003a98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2204      	movs	r2, #4
 8003a9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	69db      	ldr	r3, [r3, #28]
 8003aa6:	f003 0303 	and.w	r3, r3, #3
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d003      	beq.n	8003ab6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003aae:	6878      	ldr	r0, [r7, #4]
 8003ab0:	f000 f8b1 	bl	8003c16 <HAL_TIM_IC_CaptureCallback>
 8003ab4:	e005      	b.n	8003ac2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ab6:	6878      	ldr	r0, [r7, #4]
 8003ab8:	f000 f8a3 	bl	8003c02 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003abc:	6878      	ldr	r0, [r7, #4]
 8003abe:	f000 f8b4 	bl	8003c2a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	691b      	ldr	r3, [r3, #16]
 8003ace:	f003 0310 	and.w	r3, r3, #16
 8003ad2:	2b10      	cmp	r3, #16
 8003ad4:	d122      	bne.n	8003b1c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	68db      	ldr	r3, [r3, #12]
 8003adc:	f003 0310 	and.w	r3, r3, #16
 8003ae0:	2b10      	cmp	r3, #16
 8003ae2:	d11b      	bne.n	8003b1c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f06f 0210 	mvn.w	r2, #16
 8003aec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	2208      	movs	r2, #8
 8003af2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	69db      	ldr	r3, [r3, #28]
 8003afa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d003      	beq.n	8003b0a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b02:	6878      	ldr	r0, [r7, #4]
 8003b04:	f000 f887 	bl	8003c16 <HAL_TIM_IC_CaptureCallback>
 8003b08:	e005      	b.n	8003b16 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b0a:	6878      	ldr	r0, [r7, #4]
 8003b0c:	f000 f879 	bl	8003c02 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b10:	6878      	ldr	r0, [r7, #4]
 8003b12:	f000 f88a 	bl	8003c2a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2200      	movs	r2, #0
 8003b1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	691b      	ldr	r3, [r3, #16]
 8003b22:	f003 0301 	and.w	r3, r3, #1
 8003b26:	2b01      	cmp	r3, #1
 8003b28:	d10e      	bne.n	8003b48 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	68db      	ldr	r3, [r3, #12]
 8003b30:	f003 0301 	and.w	r3, r3, #1
 8003b34:	2b01      	cmp	r3, #1
 8003b36:	d107      	bne.n	8003b48 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f06f 0201 	mvn.w	r2, #1
 8003b40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003b42:	6878      	ldr	r0, [r7, #4]
 8003b44:	f7fc fe29 	bl	800079a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	691b      	ldr	r3, [r3, #16]
 8003b4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b52:	2b80      	cmp	r3, #128	; 0x80
 8003b54:	d10e      	bne.n	8003b74 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	68db      	ldr	r3, [r3, #12]
 8003b5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b60:	2b80      	cmp	r3, #128	; 0x80
 8003b62:	d107      	bne.n	8003b74 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003b6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003b6e:	6878      	ldr	r0, [r7, #4]
 8003b70:	f000 f8e8 	bl	8003d44 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	691b      	ldr	r3, [r3, #16]
 8003b7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b82:	d10e      	bne.n	8003ba2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	68db      	ldr	r3, [r3, #12]
 8003b8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b8e:	2b80      	cmp	r3, #128	; 0x80
 8003b90:	d107      	bne.n	8003ba2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003b9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003b9c:	6878      	ldr	r0, [r7, #4]
 8003b9e:	f000 f8db 	bl	8003d58 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	691b      	ldr	r3, [r3, #16]
 8003ba8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bac:	2b40      	cmp	r3, #64	; 0x40
 8003bae:	d10e      	bne.n	8003bce <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	68db      	ldr	r3, [r3, #12]
 8003bb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bba:	2b40      	cmp	r3, #64	; 0x40
 8003bbc:	d107      	bne.n	8003bce <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003bc6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003bc8:	6878      	ldr	r0, [r7, #4]
 8003bca:	f000 f838 	bl	8003c3e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	691b      	ldr	r3, [r3, #16]
 8003bd4:	f003 0320 	and.w	r3, r3, #32
 8003bd8:	2b20      	cmp	r3, #32
 8003bda:	d10e      	bne.n	8003bfa <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	68db      	ldr	r3, [r3, #12]
 8003be2:	f003 0320 	and.w	r3, r3, #32
 8003be6:	2b20      	cmp	r3, #32
 8003be8:	d107      	bne.n	8003bfa <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f06f 0220 	mvn.w	r2, #32
 8003bf2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003bf4:	6878      	ldr	r0, [r7, #4]
 8003bf6:	f000 f89b 	bl	8003d30 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003bfa:	bf00      	nop
 8003bfc:	3708      	adds	r7, #8
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	bd80      	pop	{r7, pc}

08003c02 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003c02:	b480      	push	{r7}
 8003c04:	b083      	sub	sp, #12
 8003c06:	af00      	add	r7, sp, #0
 8003c08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003c0a:	bf00      	nop
 8003c0c:	370c      	adds	r7, #12
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c14:	4770      	bx	lr

08003c16 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003c16:	b480      	push	{r7}
 8003c18:	b083      	sub	sp, #12
 8003c1a:	af00      	add	r7, sp, #0
 8003c1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003c1e:	bf00      	nop
 8003c20:	370c      	adds	r7, #12
 8003c22:	46bd      	mov	sp, r7
 8003c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c28:	4770      	bx	lr

08003c2a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003c2a:	b480      	push	{r7}
 8003c2c:	b083      	sub	sp, #12
 8003c2e:	af00      	add	r7, sp, #0
 8003c30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003c32:	bf00      	nop
 8003c34:	370c      	adds	r7, #12
 8003c36:	46bd      	mov	sp, r7
 8003c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3c:	4770      	bx	lr

08003c3e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003c3e:	b480      	push	{r7}
 8003c40:	b083      	sub	sp, #12
 8003c42:	af00      	add	r7, sp, #0
 8003c44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003c46:	bf00      	nop
 8003c48:	370c      	adds	r7, #12
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c50:	4770      	bx	lr
	...

08003c54 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003c54:	b480      	push	{r7}
 8003c56:	b085      	sub	sp, #20
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
 8003c5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	4a2e      	ldr	r2, [pc, #184]	; (8003d20 <TIM_Base_SetConfig+0xcc>)
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d003      	beq.n	8003c74 <TIM_Base_SetConfig+0x20>
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c72:	d108      	bne.n	8003c86 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c7a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	685b      	ldr	r3, [r3, #4]
 8003c80:	68fa      	ldr	r2, [r7, #12]
 8003c82:	4313      	orrs	r3, r2
 8003c84:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	4a25      	ldr	r2, [pc, #148]	; (8003d20 <TIM_Base_SetConfig+0xcc>)
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d00f      	beq.n	8003cae <TIM_Base_SetConfig+0x5a>
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c94:	d00b      	beq.n	8003cae <TIM_Base_SetConfig+0x5a>
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	4a22      	ldr	r2, [pc, #136]	; (8003d24 <TIM_Base_SetConfig+0xd0>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d007      	beq.n	8003cae <TIM_Base_SetConfig+0x5a>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	4a21      	ldr	r2, [pc, #132]	; (8003d28 <TIM_Base_SetConfig+0xd4>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d003      	beq.n	8003cae <TIM_Base_SetConfig+0x5a>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	4a20      	ldr	r2, [pc, #128]	; (8003d2c <TIM_Base_SetConfig+0xd8>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d108      	bne.n	8003cc0 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003cb4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	68db      	ldr	r3, [r3, #12]
 8003cba:	68fa      	ldr	r2, [r7, #12]
 8003cbc:	4313      	orrs	r3, r2
 8003cbe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	695b      	ldr	r3, [r3, #20]
 8003cca:	4313      	orrs	r3, r2
 8003ccc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	68fa      	ldr	r2, [r7, #12]
 8003cd2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	689a      	ldr	r2, [r3, #8]
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	681a      	ldr	r2, [r3, #0]
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	4a0e      	ldr	r2, [pc, #56]	; (8003d20 <TIM_Base_SetConfig+0xcc>)
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	d00b      	beq.n	8003d04 <TIM_Base_SetConfig+0xb0>
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	4a0d      	ldr	r2, [pc, #52]	; (8003d24 <TIM_Base_SetConfig+0xd0>)
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	d007      	beq.n	8003d04 <TIM_Base_SetConfig+0xb0>
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	4a0c      	ldr	r2, [pc, #48]	; (8003d28 <TIM_Base_SetConfig+0xd4>)
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d003      	beq.n	8003d04 <TIM_Base_SetConfig+0xb0>
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	4a0b      	ldr	r2, [pc, #44]	; (8003d2c <TIM_Base_SetConfig+0xd8>)
 8003d00:	4293      	cmp	r3, r2
 8003d02:	d103      	bne.n	8003d0c <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	691a      	ldr	r2, [r3, #16]
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2201      	movs	r2, #1
 8003d10:	615a      	str	r2, [r3, #20]
}
 8003d12:	bf00      	nop
 8003d14:	3714      	adds	r7, #20
 8003d16:	46bd      	mov	sp, r7
 8003d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1c:	4770      	bx	lr
 8003d1e:	bf00      	nop
 8003d20:	40012c00 	.word	0x40012c00
 8003d24:	40014000 	.word	0x40014000
 8003d28:	40014400 	.word	0x40014400
 8003d2c:	40014800 	.word	0x40014800

08003d30 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003d30:	b480      	push	{r7}
 8003d32:	b083      	sub	sp, #12
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003d38:	bf00      	nop
 8003d3a:	370c      	adds	r7, #12
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d42:	4770      	bx	lr

08003d44 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003d44:	b480      	push	{r7}
 8003d46:	b083      	sub	sp, #12
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003d4c:	bf00      	nop
 8003d4e:	370c      	adds	r7, #12
 8003d50:	46bd      	mov	sp, r7
 8003d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d56:	4770      	bx	lr

08003d58 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003d58:	b480      	push	{r7}
 8003d5a:	b083      	sub	sp, #12
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003d60:	bf00      	nop
 8003d62:	370c      	adds	r7, #12
 8003d64:	46bd      	mov	sp, r7
 8003d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6a:	4770      	bx	lr

08003d6c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b082      	sub	sp, #8
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d101      	bne.n	8003d7e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003d7a:	2301      	movs	r3, #1
 8003d7c:	e040      	b.n	8003e00 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d106      	bne.n	8003d94 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2200      	movs	r2, #0
 8003d8a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003d8e:	6878      	ldr	r0, [r7, #4]
 8003d90:	f7fc fdaa 	bl	80008e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2224      	movs	r2, #36	; 0x24
 8003d98:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	681a      	ldr	r2, [r3, #0]
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f022 0201 	bic.w	r2, r2, #1
 8003da8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003daa:	6878      	ldr	r0, [r7, #4]
 8003dac:	f000 f8b6 	bl	8003f1c <UART_SetConfig>
 8003db0:	4603      	mov	r3, r0
 8003db2:	2b01      	cmp	r3, #1
 8003db4:	d101      	bne.n	8003dba <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003db6:	2301      	movs	r3, #1
 8003db8:	e022      	b.n	8003e00 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d002      	beq.n	8003dc8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003dc2:	6878      	ldr	r0, [r7, #4]
 8003dc4:	f000 f9e0 	bl	8004188 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	685a      	ldr	r2, [r3, #4]
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003dd6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	689a      	ldr	r2, [r3, #8]
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003de6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	681a      	ldr	r2, [r3, #0]
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f042 0201 	orr.w	r2, r2, #1
 8003df6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003df8:	6878      	ldr	r0, [r7, #4]
 8003dfa:	f000 fa67 	bl	80042cc <UART_CheckIdleState>
 8003dfe:	4603      	mov	r3, r0
}
 8003e00:	4618      	mov	r0, r3
 8003e02:	3708      	adds	r7, #8
 8003e04:	46bd      	mov	sp, r7
 8003e06:	bd80      	pop	{r7, pc}

08003e08 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b08a      	sub	sp, #40	; 0x28
 8003e0c:	af02      	add	r7, sp, #8
 8003e0e:	60f8      	str	r0, [r7, #12]
 8003e10:	60b9      	str	r1, [r7, #8]
 8003e12:	603b      	str	r3, [r7, #0]
 8003e14:	4613      	mov	r3, r2
 8003e16:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003e1c:	2b20      	cmp	r3, #32
 8003e1e:	d178      	bne.n	8003f12 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e20:	68bb      	ldr	r3, [r7, #8]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d002      	beq.n	8003e2c <HAL_UART_Transmit+0x24>
 8003e26:	88fb      	ldrh	r3, [r7, #6]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d101      	bne.n	8003e30 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003e2c:	2301      	movs	r3, #1
 8003e2e:	e071      	b.n	8003f14 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	2200      	movs	r2, #0
 8003e34:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	2221      	movs	r2, #33	; 0x21
 8003e3c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003e3e:	f7fc feb5 	bl	8000bac <HAL_GetTick>
 8003e42:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	88fa      	ldrh	r2, [r7, #6]
 8003e48:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	88fa      	ldrh	r2, [r7, #6]
 8003e50:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	689b      	ldr	r3, [r3, #8]
 8003e58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e5c:	d108      	bne.n	8003e70 <HAL_UART_Transmit+0x68>
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	691b      	ldr	r3, [r3, #16]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d104      	bne.n	8003e70 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003e66:	2300      	movs	r3, #0
 8003e68:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003e6a:	68bb      	ldr	r3, [r7, #8]
 8003e6c:	61bb      	str	r3, [r7, #24]
 8003e6e:	e003      	b.n	8003e78 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003e70:	68bb      	ldr	r3, [r7, #8]
 8003e72:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003e74:	2300      	movs	r3, #0
 8003e76:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003e78:	e030      	b.n	8003edc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	9300      	str	r3, [sp, #0]
 8003e7e:	697b      	ldr	r3, [r7, #20]
 8003e80:	2200      	movs	r2, #0
 8003e82:	2180      	movs	r1, #128	; 0x80
 8003e84:	68f8      	ldr	r0, [r7, #12]
 8003e86:	f000 fac9 	bl	800441c <UART_WaitOnFlagUntilTimeout>
 8003e8a:	4603      	mov	r3, r0
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d004      	beq.n	8003e9a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	2220      	movs	r2, #32
 8003e94:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8003e96:	2303      	movs	r3, #3
 8003e98:	e03c      	b.n	8003f14 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8003e9a:	69fb      	ldr	r3, [r7, #28]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d10b      	bne.n	8003eb8 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003ea0:	69bb      	ldr	r3, [r7, #24]
 8003ea2:	881a      	ldrh	r2, [r3, #0]
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003eac:	b292      	uxth	r2, r2
 8003eae:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003eb0:	69bb      	ldr	r3, [r7, #24]
 8003eb2:	3302      	adds	r3, #2
 8003eb4:	61bb      	str	r3, [r7, #24]
 8003eb6:	e008      	b.n	8003eca <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003eb8:	69fb      	ldr	r3, [r7, #28]
 8003eba:	781a      	ldrb	r2, [r3, #0]
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	b292      	uxth	r2, r2
 8003ec2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003ec4:	69fb      	ldr	r3, [r7, #28]
 8003ec6:	3301      	adds	r3, #1
 8003ec8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003ed0:	b29b      	uxth	r3, r3
 8003ed2:	3b01      	subs	r3, #1
 8003ed4:	b29a      	uxth	r2, r3
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003ee2:	b29b      	uxth	r3, r3
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d1c8      	bne.n	8003e7a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	9300      	str	r3, [sp, #0]
 8003eec:	697b      	ldr	r3, [r7, #20]
 8003eee:	2200      	movs	r2, #0
 8003ef0:	2140      	movs	r1, #64	; 0x40
 8003ef2:	68f8      	ldr	r0, [r7, #12]
 8003ef4:	f000 fa92 	bl	800441c <UART_WaitOnFlagUntilTimeout>
 8003ef8:	4603      	mov	r3, r0
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d004      	beq.n	8003f08 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	2220      	movs	r2, #32
 8003f02:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8003f04:	2303      	movs	r3, #3
 8003f06:	e005      	b.n	8003f14 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	2220      	movs	r2, #32
 8003f0c:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8003f0e:	2300      	movs	r3, #0
 8003f10:	e000      	b.n	8003f14 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8003f12:	2302      	movs	r3, #2
  }
}
 8003f14:	4618      	mov	r0, r3
 8003f16:	3720      	adds	r7, #32
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	bd80      	pop	{r7, pc}

08003f1c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b088      	sub	sp, #32
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003f24:	2300      	movs	r3, #0
 8003f26:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	689a      	ldr	r2, [r3, #8]
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	691b      	ldr	r3, [r3, #16]
 8003f30:	431a      	orrs	r2, r3
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	695b      	ldr	r3, [r3, #20]
 8003f36:	431a      	orrs	r2, r3
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	69db      	ldr	r3, [r3, #28]
 8003f3c:	4313      	orrs	r3, r2
 8003f3e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	681a      	ldr	r2, [r3, #0]
 8003f46:	4b8a      	ldr	r3, [pc, #552]	; (8004170 <UART_SetConfig+0x254>)
 8003f48:	4013      	ands	r3, r2
 8003f4a:	687a      	ldr	r2, [r7, #4]
 8003f4c:	6812      	ldr	r2, [r2, #0]
 8003f4e:	6979      	ldr	r1, [r7, #20]
 8003f50:	430b      	orrs	r3, r1
 8003f52:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	685b      	ldr	r3, [r3, #4]
 8003f5a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	68da      	ldr	r2, [r3, #12]
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	430a      	orrs	r2, r1
 8003f68:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	699b      	ldr	r3, [r3, #24]
 8003f6e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6a1b      	ldr	r3, [r3, #32]
 8003f74:	697a      	ldr	r2, [r7, #20]
 8003f76:	4313      	orrs	r3, r2
 8003f78:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	689b      	ldr	r3, [r3, #8]
 8003f80:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	697a      	ldr	r2, [r7, #20]
 8003f8a:	430a      	orrs	r2, r1
 8003f8c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	4a78      	ldr	r2, [pc, #480]	; (8004174 <UART_SetConfig+0x258>)
 8003f94:	4293      	cmp	r3, r2
 8003f96:	d120      	bne.n	8003fda <UART_SetConfig+0xbe>
 8003f98:	4b77      	ldr	r3, [pc, #476]	; (8004178 <UART_SetConfig+0x25c>)
 8003f9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f9c:	f003 0303 	and.w	r3, r3, #3
 8003fa0:	2b03      	cmp	r3, #3
 8003fa2:	d817      	bhi.n	8003fd4 <UART_SetConfig+0xb8>
 8003fa4:	a201      	add	r2, pc, #4	; (adr r2, 8003fac <UART_SetConfig+0x90>)
 8003fa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003faa:	bf00      	nop
 8003fac:	08003fbd 	.word	0x08003fbd
 8003fb0:	08003fc9 	.word	0x08003fc9
 8003fb4:	08003fcf 	.word	0x08003fcf
 8003fb8:	08003fc3 	.word	0x08003fc3
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	77fb      	strb	r3, [r7, #31]
 8003fc0:	e01d      	b.n	8003ffe <UART_SetConfig+0xe2>
 8003fc2:	2302      	movs	r3, #2
 8003fc4:	77fb      	strb	r3, [r7, #31]
 8003fc6:	e01a      	b.n	8003ffe <UART_SetConfig+0xe2>
 8003fc8:	2304      	movs	r3, #4
 8003fca:	77fb      	strb	r3, [r7, #31]
 8003fcc:	e017      	b.n	8003ffe <UART_SetConfig+0xe2>
 8003fce:	2308      	movs	r3, #8
 8003fd0:	77fb      	strb	r3, [r7, #31]
 8003fd2:	e014      	b.n	8003ffe <UART_SetConfig+0xe2>
 8003fd4:	2310      	movs	r3, #16
 8003fd6:	77fb      	strb	r3, [r7, #31]
 8003fd8:	e011      	b.n	8003ffe <UART_SetConfig+0xe2>
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	4a67      	ldr	r2, [pc, #412]	; (800417c <UART_SetConfig+0x260>)
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	d102      	bne.n	8003fea <UART_SetConfig+0xce>
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	77fb      	strb	r3, [r7, #31]
 8003fe8:	e009      	b.n	8003ffe <UART_SetConfig+0xe2>
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	4a64      	ldr	r2, [pc, #400]	; (8004180 <UART_SetConfig+0x264>)
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d102      	bne.n	8003ffa <UART_SetConfig+0xde>
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	77fb      	strb	r3, [r7, #31]
 8003ff8:	e001      	b.n	8003ffe <UART_SetConfig+0xe2>
 8003ffa:	2310      	movs	r3, #16
 8003ffc:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	69db      	ldr	r3, [r3, #28]
 8004002:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004006:	d15a      	bne.n	80040be <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8004008:	7ffb      	ldrb	r3, [r7, #31]
 800400a:	2b08      	cmp	r3, #8
 800400c:	d827      	bhi.n	800405e <UART_SetConfig+0x142>
 800400e:	a201      	add	r2, pc, #4	; (adr r2, 8004014 <UART_SetConfig+0xf8>)
 8004010:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004014:	08004039 	.word	0x08004039
 8004018:	08004041 	.word	0x08004041
 800401c:	08004049 	.word	0x08004049
 8004020:	0800405f 	.word	0x0800405f
 8004024:	0800404f 	.word	0x0800404f
 8004028:	0800405f 	.word	0x0800405f
 800402c:	0800405f 	.word	0x0800405f
 8004030:	0800405f 	.word	0x0800405f
 8004034:	08004057 	.word	0x08004057
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004038:	f7ff fa06 	bl	8003448 <HAL_RCC_GetPCLK1Freq>
 800403c:	61b8      	str	r0, [r7, #24]
        break;
 800403e:	e013      	b.n	8004068 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004040:	f7ff fa24 	bl	800348c <HAL_RCC_GetPCLK2Freq>
 8004044:	61b8      	str	r0, [r7, #24]
        break;
 8004046:	e00f      	b.n	8004068 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004048:	4b4e      	ldr	r3, [pc, #312]	; (8004184 <UART_SetConfig+0x268>)
 800404a:	61bb      	str	r3, [r7, #24]
        break;
 800404c:	e00c      	b.n	8004068 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800404e:	f7ff f985 	bl	800335c <HAL_RCC_GetSysClockFreq>
 8004052:	61b8      	str	r0, [r7, #24]
        break;
 8004054:	e008      	b.n	8004068 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004056:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800405a:	61bb      	str	r3, [r7, #24]
        break;
 800405c:	e004      	b.n	8004068 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 800405e:	2300      	movs	r3, #0
 8004060:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004062:	2301      	movs	r3, #1
 8004064:	77bb      	strb	r3, [r7, #30]
        break;
 8004066:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004068:	69bb      	ldr	r3, [r7, #24]
 800406a:	2b00      	cmp	r3, #0
 800406c:	d074      	beq.n	8004158 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800406e:	69bb      	ldr	r3, [r7, #24]
 8004070:	005a      	lsls	r2, r3, #1
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	685b      	ldr	r3, [r3, #4]
 8004076:	085b      	lsrs	r3, r3, #1
 8004078:	441a      	add	r2, r3
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	685b      	ldr	r3, [r3, #4]
 800407e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004082:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004084:	693b      	ldr	r3, [r7, #16]
 8004086:	2b0f      	cmp	r3, #15
 8004088:	d916      	bls.n	80040b8 <UART_SetConfig+0x19c>
 800408a:	693b      	ldr	r3, [r7, #16]
 800408c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004090:	d212      	bcs.n	80040b8 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004092:	693b      	ldr	r3, [r7, #16]
 8004094:	b29b      	uxth	r3, r3
 8004096:	f023 030f 	bic.w	r3, r3, #15
 800409a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800409c:	693b      	ldr	r3, [r7, #16]
 800409e:	085b      	lsrs	r3, r3, #1
 80040a0:	b29b      	uxth	r3, r3
 80040a2:	f003 0307 	and.w	r3, r3, #7
 80040a6:	b29a      	uxth	r2, r3
 80040a8:	89fb      	ldrh	r3, [r7, #14]
 80040aa:	4313      	orrs	r3, r2
 80040ac:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	89fa      	ldrh	r2, [r7, #14]
 80040b4:	60da      	str	r2, [r3, #12]
 80040b6:	e04f      	b.n	8004158 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80040b8:	2301      	movs	r3, #1
 80040ba:	77bb      	strb	r3, [r7, #30]
 80040bc:	e04c      	b.n	8004158 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80040be:	7ffb      	ldrb	r3, [r7, #31]
 80040c0:	2b08      	cmp	r3, #8
 80040c2:	d828      	bhi.n	8004116 <UART_SetConfig+0x1fa>
 80040c4:	a201      	add	r2, pc, #4	; (adr r2, 80040cc <UART_SetConfig+0x1b0>)
 80040c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040ca:	bf00      	nop
 80040cc:	080040f1 	.word	0x080040f1
 80040d0:	080040f9 	.word	0x080040f9
 80040d4:	08004101 	.word	0x08004101
 80040d8:	08004117 	.word	0x08004117
 80040dc:	08004107 	.word	0x08004107
 80040e0:	08004117 	.word	0x08004117
 80040e4:	08004117 	.word	0x08004117
 80040e8:	08004117 	.word	0x08004117
 80040ec:	0800410f 	.word	0x0800410f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80040f0:	f7ff f9aa 	bl	8003448 <HAL_RCC_GetPCLK1Freq>
 80040f4:	61b8      	str	r0, [r7, #24]
        break;
 80040f6:	e013      	b.n	8004120 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80040f8:	f7ff f9c8 	bl	800348c <HAL_RCC_GetPCLK2Freq>
 80040fc:	61b8      	str	r0, [r7, #24]
        break;
 80040fe:	e00f      	b.n	8004120 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004100:	4b20      	ldr	r3, [pc, #128]	; (8004184 <UART_SetConfig+0x268>)
 8004102:	61bb      	str	r3, [r7, #24]
        break;
 8004104:	e00c      	b.n	8004120 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004106:	f7ff f929 	bl	800335c <HAL_RCC_GetSysClockFreq>
 800410a:	61b8      	str	r0, [r7, #24]
        break;
 800410c:	e008      	b.n	8004120 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800410e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004112:	61bb      	str	r3, [r7, #24]
        break;
 8004114:	e004      	b.n	8004120 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8004116:	2300      	movs	r3, #0
 8004118:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800411a:	2301      	movs	r3, #1
 800411c:	77bb      	strb	r3, [r7, #30]
        break;
 800411e:	bf00      	nop
    }

    if (pclk != 0U)
 8004120:	69bb      	ldr	r3, [r7, #24]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d018      	beq.n	8004158 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	685b      	ldr	r3, [r3, #4]
 800412a:	085a      	lsrs	r2, r3, #1
 800412c:	69bb      	ldr	r3, [r7, #24]
 800412e:	441a      	add	r2, r3
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	685b      	ldr	r3, [r3, #4]
 8004134:	fbb2 f3f3 	udiv	r3, r2, r3
 8004138:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800413a:	693b      	ldr	r3, [r7, #16]
 800413c:	2b0f      	cmp	r3, #15
 800413e:	d909      	bls.n	8004154 <UART_SetConfig+0x238>
 8004140:	693b      	ldr	r3, [r7, #16]
 8004142:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004146:	d205      	bcs.n	8004154 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004148:	693b      	ldr	r3, [r7, #16]
 800414a:	b29a      	uxth	r2, r3
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	60da      	str	r2, [r3, #12]
 8004152:	e001      	b.n	8004158 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8004154:	2301      	movs	r3, #1
 8004156:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2200      	movs	r2, #0
 800415c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	2200      	movs	r2, #0
 8004162:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004164:	7fbb      	ldrb	r3, [r7, #30]
}
 8004166:	4618      	mov	r0, r3
 8004168:	3720      	adds	r7, #32
 800416a:	46bd      	mov	sp, r7
 800416c:	bd80      	pop	{r7, pc}
 800416e:	bf00      	nop
 8004170:	efff69f3 	.word	0xefff69f3
 8004174:	40013800 	.word	0x40013800
 8004178:	40021000 	.word	0x40021000
 800417c:	40004400 	.word	0x40004400
 8004180:	40004800 	.word	0x40004800
 8004184:	007a1200 	.word	0x007a1200

08004188 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004188:	b480      	push	{r7}
 800418a:	b083      	sub	sp, #12
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004194:	f003 0301 	and.w	r3, r3, #1
 8004198:	2b00      	cmp	r3, #0
 800419a:	d00a      	beq.n	80041b2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	685b      	ldr	r3, [r3, #4]
 80041a2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	430a      	orrs	r2, r1
 80041b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041b6:	f003 0302 	and.w	r3, r3, #2
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d00a      	beq.n	80041d4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	685b      	ldr	r3, [r3, #4]
 80041c4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	430a      	orrs	r2, r1
 80041d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041d8:	f003 0304 	and.w	r3, r3, #4
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d00a      	beq.n	80041f6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	685b      	ldr	r3, [r3, #4]
 80041e6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	430a      	orrs	r2, r1
 80041f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041fa:	f003 0308 	and.w	r3, r3, #8
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d00a      	beq.n	8004218 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	685b      	ldr	r3, [r3, #4]
 8004208:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	430a      	orrs	r2, r1
 8004216:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800421c:	f003 0310 	and.w	r3, r3, #16
 8004220:	2b00      	cmp	r3, #0
 8004222:	d00a      	beq.n	800423a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	689b      	ldr	r3, [r3, #8]
 800422a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	430a      	orrs	r2, r1
 8004238:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800423e:	f003 0320 	and.w	r3, r3, #32
 8004242:	2b00      	cmp	r3, #0
 8004244:	d00a      	beq.n	800425c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	689b      	ldr	r3, [r3, #8]
 800424c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	430a      	orrs	r2, r1
 800425a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004260:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004264:	2b00      	cmp	r3, #0
 8004266:	d01a      	beq.n	800429e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	685b      	ldr	r3, [r3, #4]
 800426e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	430a      	orrs	r2, r1
 800427c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004282:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004286:	d10a      	bne.n	800429e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	685b      	ldr	r3, [r3, #4]
 800428e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	430a      	orrs	r2, r1
 800429c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d00a      	beq.n	80042c0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	685b      	ldr	r3, [r3, #4]
 80042b0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	430a      	orrs	r2, r1
 80042be:	605a      	str	r2, [r3, #4]
  }
}
 80042c0:	bf00      	nop
 80042c2:	370c      	adds	r7, #12
 80042c4:	46bd      	mov	sp, r7
 80042c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ca:	4770      	bx	lr

080042cc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b098      	sub	sp, #96	; 0x60
 80042d0:	af02      	add	r7, sp, #8
 80042d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2200      	movs	r2, #0
 80042d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80042dc:	f7fc fc66 	bl	8000bac <HAL_GetTick>
 80042e0:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f003 0308 	and.w	r3, r3, #8
 80042ec:	2b08      	cmp	r3, #8
 80042ee:	d12e      	bne.n	800434e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80042f0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80042f4:	9300      	str	r3, [sp, #0]
 80042f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80042f8:	2200      	movs	r2, #0
 80042fa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80042fe:	6878      	ldr	r0, [r7, #4]
 8004300:	f000 f88c 	bl	800441c <UART_WaitOnFlagUntilTimeout>
 8004304:	4603      	mov	r3, r0
 8004306:	2b00      	cmp	r3, #0
 8004308:	d021      	beq.n	800434e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004310:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004312:	e853 3f00 	ldrex	r3, [r3]
 8004316:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004318:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800431a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800431e:	653b      	str	r3, [r7, #80]	; 0x50
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	461a      	mov	r2, r3
 8004326:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004328:	647b      	str	r3, [r7, #68]	; 0x44
 800432a:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800432c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800432e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004330:	e841 2300 	strex	r3, r2, [r1]
 8004334:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004336:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004338:	2b00      	cmp	r3, #0
 800433a:	d1e6      	bne.n	800430a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2220      	movs	r2, #32
 8004340:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	2200      	movs	r2, #0
 8004346:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800434a:	2303      	movs	r3, #3
 800434c:	e062      	b.n	8004414 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f003 0304 	and.w	r3, r3, #4
 8004358:	2b04      	cmp	r3, #4
 800435a:	d149      	bne.n	80043f0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800435c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004360:	9300      	str	r3, [sp, #0]
 8004362:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004364:	2200      	movs	r2, #0
 8004366:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800436a:	6878      	ldr	r0, [r7, #4]
 800436c:	f000 f856 	bl	800441c <UART_WaitOnFlagUntilTimeout>
 8004370:	4603      	mov	r3, r0
 8004372:	2b00      	cmp	r3, #0
 8004374:	d03c      	beq.n	80043f0 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800437c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800437e:	e853 3f00 	ldrex	r3, [r3]
 8004382:	623b      	str	r3, [r7, #32]
   return(result);
 8004384:	6a3b      	ldr	r3, [r7, #32]
 8004386:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800438a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	461a      	mov	r2, r3
 8004392:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004394:	633b      	str	r3, [r7, #48]	; 0x30
 8004396:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004398:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800439a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800439c:	e841 2300 	strex	r3, r2, [r1]
 80043a0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80043a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d1e6      	bne.n	8004376 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	3308      	adds	r3, #8
 80043ae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043b0:	693b      	ldr	r3, [r7, #16]
 80043b2:	e853 3f00 	ldrex	r3, [r3]
 80043b6:	60fb      	str	r3, [r7, #12]
   return(result);
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	f023 0301 	bic.w	r3, r3, #1
 80043be:	64bb      	str	r3, [r7, #72]	; 0x48
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	3308      	adds	r3, #8
 80043c6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80043c8:	61fa      	str	r2, [r7, #28]
 80043ca:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043cc:	69b9      	ldr	r1, [r7, #24]
 80043ce:	69fa      	ldr	r2, [r7, #28]
 80043d0:	e841 2300 	strex	r3, r2, [r1]
 80043d4:	617b      	str	r3, [r7, #20]
   return(result);
 80043d6:	697b      	ldr	r3, [r7, #20]
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d1e5      	bne.n	80043a8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2220      	movs	r2, #32
 80043e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2200      	movs	r2, #0
 80043e8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80043ec:	2303      	movs	r3, #3
 80043ee:	e011      	b.n	8004414 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2220      	movs	r2, #32
 80043f4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2220      	movs	r2, #32
 80043fa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2200      	movs	r2, #0
 8004402:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2200      	movs	r2, #0
 8004408:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	2200      	movs	r2, #0
 800440e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004412:	2300      	movs	r3, #0
}
 8004414:	4618      	mov	r0, r3
 8004416:	3758      	adds	r7, #88	; 0x58
 8004418:	46bd      	mov	sp, r7
 800441a:	bd80      	pop	{r7, pc}

0800441c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b084      	sub	sp, #16
 8004420:	af00      	add	r7, sp, #0
 8004422:	60f8      	str	r0, [r7, #12]
 8004424:	60b9      	str	r1, [r7, #8]
 8004426:	603b      	str	r3, [r7, #0]
 8004428:	4613      	mov	r3, r2
 800442a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800442c:	e049      	b.n	80044c2 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800442e:	69bb      	ldr	r3, [r7, #24]
 8004430:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004434:	d045      	beq.n	80044c2 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004436:	f7fc fbb9 	bl	8000bac <HAL_GetTick>
 800443a:	4602      	mov	r2, r0
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	1ad3      	subs	r3, r2, r3
 8004440:	69ba      	ldr	r2, [r7, #24]
 8004442:	429a      	cmp	r2, r3
 8004444:	d302      	bcc.n	800444c <UART_WaitOnFlagUntilTimeout+0x30>
 8004446:	69bb      	ldr	r3, [r7, #24]
 8004448:	2b00      	cmp	r3, #0
 800444a:	d101      	bne.n	8004450 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800444c:	2303      	movs	r3, #3
 800444e:	e048      	b.n	80044e2 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f003 0304 	and.w	r3, r3, #4
 800445a:	2b00      	cmp	r3, #0
 800445c:	d031      	beq.n	80044c2 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	69db      	ldr	r3, [r3, #28]
 8004464:	f003 0308 	and.w	r3, r3, #8
 8004468:	2b08      	cmp	r3, #8
 800446a:	d110      	bne.n	800448e <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	2208      	movs	r2, #8
 8004472:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8004474:	68f8      	ldr	r0, [r7, #12]
 8004476:	f000 f838 	bl	80044ea <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	2208      	movs	r2, #8
 800447e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	2200      	movs	r2, #0
 8004486:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 800448a:	2301      	movs	r3, #1
 800448c:	e029      	b.n	80044e2 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	69db      	ldr	r3, [r3, #28]
 8004494:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004498:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800449c:	d111      	bne.n	80044c2 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80044a6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80044a8:	68f8      	ldr	r0, [r7, #12]
 80044aa:	f000 f81e 	bl	80044ea <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	2220      	movs	r2, #32
 80044b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	2200      	movs	r2, #0
 80044ba:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80044be:	2303      	movs	r3, #3
 80044c0:	e00f      	b.n	80044e2 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	69da      	ldr	r2, [r3, #28]
 80044c8:	68bb      	ldr	r3, [r7, #8]
 80044ca:	4013      	ands	r3, r2
 80044cc:	68ba      	ldr	r2, [r7, #8]
 80044ce:	429a      	cmp	r2, r3
 80044d0:	bf0c      	ite	eq
 80044d2:	2301      	moveq	r3, #1
 80044d4:	2300      	movne	r3, #0
 80044d6:	b2db      	uxtb	r3, r3
 80044d8:	461a      	mov	r2, r3
 80044da:	79fb      	ldrb	r3, [r7, #7]
 80044dc:	429a      	cmp	r2, r3
 80044de:	d0a6      	beq.n	800442e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80044e0:	2300      	movs	r3, #0
}
 80044e2:	4618      	mov	r0, r3
 80044e4:	3710      	adds	r7, #16
 80044e6:	46bd      	mov	sp, r7
 80044e8:	bd80      	pop	{r7, pc}

080044ea <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80044ea:	b480      	push	{r7}
 80044ec:	b095      	sub	sp, #84	; 0x54
 80044ee:	af00      	add	r7, sp, #0
 80044f0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044fa:	e853 3f00 	ldrex	r3, [r3]
 80044fe:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004500:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004502:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004506:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	461a      	mov	r2, r3
 800450e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004510:	643b      	str	r3, [r7, #64]	; 0x40
 8004512:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004514:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004516:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004518:	e841 2300 	strex	r3, r2, [r1]
 800451c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800451e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004520:	2b00      	cmp	r3, #0
 8004522:	d1e6      	bne.n	80044f2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	3308      	adds	r3, #8
 800452a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800452c:	6a3b      	ldr	r3, [r7, #32]
 800452e:	e853 3f00 	ldrex	r3, [r3]
 8004532:	61fb      	str	r3, [r7, #28]
   return(result);
 8004534:	69fb      	ldr	r3, [r7, #28]
 8004536:	f023 0301 	bic.w	r3, r3, #1
 800453a:	64bb      	str	r3, [r7, #72]	; 0x48
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	3308      	adds	r3, #8
 8004542:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004544:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004546:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004548:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800454a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800454c:	e841 2300 	strex	r3, r2, [r1]
 8004550:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004554:	2b00      	cmp	r3, #0
 8004556:	d1e5      	bne.n	8004524 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800455c:	2b01      	cmp	r3, #1
 800455e:	d118      	bne.n	8004592 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	e853 3f00 	ldrex	r3, [r3]
 800456c:	60bb      	str	r3, [r7, #8]
   return(result);
 800456e:	68bb      	ldr	r3, [r7, #8]
 8004570:	f023 0310 	bic.w	r3, r3, #16
 8004574:	647b      	str	r3, [r7, #68]	; 0x44
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	461a      	mov	r2, r3
 800457c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800457e:	61bb      	str	r3, [r7, #24]
 8004580:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004582:	6979      	ldr	r1, [r7, #20]
 8004584:	69ba      	ldr	r2, [r7, #24]
 8004586:	e841 2300 	strex	r3, r2, [r1]
 800458a:	613b      	str	r3, [r7, #16]
   return(result);
 800458c:	693b      	ldr	r3, [r7, #16]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d1e6      	bne.n	8004560 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2220      	movs	r2, #32
 8004596:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	2200      	movs	r2, #0
 800459e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2200      	movs	r2, #0
 80045a4:	669a      	str	r2, [r3, #104]	; 0x68
}
 80045a6:	bf00      	nop
 80045a8:	3754      	adds	r7, #84	; 0x54
 80045aa:	46bd      	mov	sp, r7
 80045ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b0:	4770      	bx	lr

080045b2 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80045b2:	b480      	push	{r7}
 80045b4:	b085      	sub	sp, #20
 80045b6:	af00      	add	r7, sp, #0
 80045b8:	4603      	mov	r3, r0
 80045ba:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80045bc:	2300      	movs	r3, #0
 80045be:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80045c0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80045c4:	2b84      	cmp	r3, #132	; 0x84
 80045c6:	d005      	beq.n	80045d4 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80045c8:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	4413      	add	r3, r2
 80045d0:	3303      	adds	r3, #3
 80045d2:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80045d4:	68fb      	ldr	r3, [r7, #12]
}
 80045d6:	4618      	mov	r0, r3
 80045d8:	3714      	adds	r7, #20
 80045da:	46bd      	mov	sp, r7
 80045dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e0:	4770      	bx	lr

080045e2 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80045e2:	b580      	push	{r7, lr}
 80045e4:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80045e6:	f001 f871 	bl	80056cc <vTaskStartScheduler>
  
  return osOK;
 80045ea:	2300      	movs	r3, #0
}
 80045ec:	4618      	mov	r0, r3
 80045ee:	bd80      	pop	{r7, pc}

080045f0 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80045f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80045f2:	b089      	sub	sp, #36	; 0x24
 80045f4:	af04      	add	r7, sp, #16
 80045f6:	6078      	str	r0, [r7, #4]
 80045f8:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	695b      	ldr	r3, [r3, #20]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d020      	beq.n	8004644 <osThreadCreate+0x54>
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	699b      	ldr	r3, [r3, #24]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d01c      	beq.n	8004644 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	685c      	ldr	r4, [r3, #4]
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681d      	ldr	r5, [r3, #0]
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	691e      	ldr	r6, [r3, #16]
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800461c:	4618      	mov	r0, r3
 800461e:	f7ff ffc8 	bl	80045b2 <makeFreeRtosPriority>
 8004622:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	695b      	ldr	r3, [r3, #20]
 8004628:	687a      	ldr	r2, [r7, #4]
 800462a:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800462c:	9202      	str	r2, [sp, #8]
 800462e:	9301      	str	r3, [sp, #4]
 8004630:	9100      	str	r1, [sp, #0]
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	4632      	mov	r2, r6
 8004636:	4629      	mov	r1, r5
 8004638:	4620      	mov	r0, r4
 800463a:	f000 fdf9 	bl	8005230 <xTaskCreateStatic>
 800463e:	4603      	mov	r3, r0
 8004640:	60fb      	str	r3, [r7, #12]
 8004642:	e01c      	b.n	800467e <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	685c      	ldr	r4, [r3, #4]
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004650:	b29e      	uxth	r6, r3
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004658:	4618      	mov	r0, r3
 800465a:	f7ff ffaa 	bl	80045b2 <makeFreeRtosPriority>
 800465e:	4602      	mov	r2, r0
 8004660:	f107 030c 	add.w	r3, r7, #12
 8004664:	9301      	str	r3, [sp, #4]
 8004666:	9200      	str	r2, [sp, #0]
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	4632      	mov	r2, r6
 800466c:	4629      	mov	r1, r5
 800466e:	4620      	mov	r0, r4
 8004670:	f000 fe3a 	bl	80052e8 <xTaskCreate>
 8004674:	4603      	mov	r3, r0
 8004676:	2b01      	cmp	r3, #1
 8004678:	d001      	beq.n	800467e <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800467a:	2300      	movs	r3, #0
 800467c:	e000      	b.n	8004680 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800467e:	68fb      	ldr	r3, [r7, #12]
}
 8004680:	4618      	mov	r0, r3
 8004682:	3714      	adds	r7, #20
 8004684:	46bd      	mov	sp, r7
 8004686:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004688 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004688:	b480      	push	{r7}
 800468a:	b083      	sub	sp, #12
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	f103 0208 	add.w	r2, r3, #8
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	f04f 32ff 	mov.w	r2, #4294967295
 80046a0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	f103 0208 	add.w	r2, r3, #8
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	f103 0208 	add.w	r2, r3, #8
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	2200      	movs	r2, #0
 80046ba:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80046bc:	bf00      	nop
 80046be:	370c      	adds	r7, #12
 80046c0:	46bd      	mov	sp, r7
 80046c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c6:	4770      	bx	lr

080046c8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80046c8:	b480      	push	{r7}
 80046ca:	b083      	sub	sp, #12
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2200      	movs	r2, #0
 80046d4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80046d6:	bf00      	nop
 80046d8:	370c      	adds	r7, #12
 80046da:	46bd      	mov	sp, r7
 80046dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e0:	4770      	bx	lr

080046e2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80046e2:	b480      	push	{r7}
 80046e4:	b085      	sub	sp, #20
 80046e6:	af00      	add	r7, sp, #0
 80046e8:	6078      	str	r0, [r7, #4]
 80046ea:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	685b      	ldr	r3, [r3, #4]
 80046f0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	68fa      	ldr	r2, [r7, #12]
 80046f6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	689a      	ldr	r2, [r3, #8]
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	689b      	ldr	r3, [r3, #8]
 8004704:	683a      	ldr	r2, [r7, #0]
 8004706:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	683a      	ldr	r2, [r7, #0]
 800470c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	687a      	ldr	r2, [r7, #4]
 8004712:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	1c5a      	adds	r2, r3, #1
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	601a      	str	r2, [r3, #0]
}
 800471e:	bf00      	nop
 8004720:	3714      	adds	r7, #20
 8004722:	46bd      	mov	sp, r7
 8004724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004728:	4770      	bx	lr

0800472a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800472a:	b480      	push	{r7}
 800472c:	b085      	sub	sp, #20
 800472e:	af00      	add	r7, sp, #0
 8004730:	6078      	str	r0, [r7, #4]
 8004732:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800473a:	68bb      	ldr	r3, [r7, #8]
 800473c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004740:	d103      	bne.n	800474a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	691b      	ldr	r3, [r3, #16]
 8004746:	60fb      	str	r3, [r7, #12]
 8004748:	e00c      	b.n	8004764 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	3308      	adds	r3, #8
 800474e:	60fb      	str	r3, [r7, #12]
 8004750:	e002      	b.n	8004758 <vListInsert+0x2e>
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	685b      	ldr	r3, [r3, #4]
 8004756:	60fb      	str	r3, [r7, #12]
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	685b      	ldr	r3, [r3, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	68ba      	ldr	r2, [r7, #8]
 8004760:	429a      	cmp	r2, r3
 8004762:	d2f6      	bcs.n	8004752 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	685a      	ldr	r2, [r3, #4]
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	685b      	ldr	r3, [r3, #4]
 8004770:	683a      	ldr	r2, [r7, #0]
 8004772:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	68fa      	ldr	r2, [r7, #12]
 8004778:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	683a      	ldr	r2, [r7, #0]
 800477e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	687a      	ldr	r2, [r7, #4]
 8004784:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	1c5a      	adds	r2, r3, #1
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	601a      	str	r2, [r3, #0]
}
 8004790:	bf00      	nop
 8004792:	3714      	adds	r7, #20
 8004794:	46bd      	mov	sp, r7
 8004796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479a:	4770      	bx	lr

0800479c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800479c:	b480      	push	{r7}
 800479e:	b085      	sub	sp, #20
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	691b      	ldr	r3, [r3, #16]
 80047a8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	685b      	ldr	r3, [r3, #4]
 80047ae:	687a      	ldr	r2, [r7, #4]
 80047b0:	6892      	ldr	r2, [r2, #8]
 80047b2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	689b      	ldr	r3, [r3, #8]
 80047b8:	687a      	ldr	r2, [r7, #4]
 80047ba:	6852      	ldr	r2, [r2, #4]
 80047bc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	685b      	ldr	r3, [r3, #4]
 80047c2:	687a      	ldr	r2, [r7, #4]
 80047c4:	429a      	cmp	r2, r3
 80047c6:	d103      	bne.n	80047d0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	689a      	ldr	r2, [r3, #8]
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2200      	movs	r2, #0
 80047d4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	1e5a      	subs	r2, r3, #1
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	681b      	ldr	r3, [r3, #0]
}
 80047e4:	4618      	mov	r0, r3
 80047e6:	3714      	adds	r7, #20
 80047e8:	46bd      	mov	sp, r7
 80047ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ee:	4770      	bx	lr

080047f0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b084      	sub	sp, #16
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
 80047f8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	2b00      	cmp	r3, #0
 8004802:	d10a      	bne.n	800481a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004804:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004808:	f383 8811 	msr	BASEPRI, r3
 800480c:	f3bf 8f6f 	isb	sy
 8004810:	f3bf 8f4f 	dsb	sy
 8004814:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004816:	bf00      	nop
 8004818:	e7fe      	b.n	8004818 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800481a:	f002 faa3 	bl	8006d64 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681a      	ldr	r2, [r3, #0]
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004826:	68f9      	ldr	r1, [r7, #12]
 8004828:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800482a:	fb01 f303 	mul.w	r3, r1, r3
 800482e:	441a      	add	r2, r3
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	2200      	movs	r2, #0
 8004838:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681a      	ldr	r2, [r3, #0]
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681a      	ldr	r2, [r3, #0]
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800484a:	3b01      	subs	r3, #1
 800484c:	68f9      	ldr	r1, [r7, #12]
 800484e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004850:	fb01 f303 	mul.w	r3, r1, r3
 8004854:	441a      	add	r2, r3
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	22ff      	movs	r2, #255	; 0xff
 800485e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	22ff      	movs	r2, #255	; 0xff
 8004866:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	2b00      	cmp	r3, #0
 800486e:	d114      	bne.n	800489a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	691b      	ldr	r3, [r3, #16]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d01a      	beq.n	80048ae <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	3310      	adds	r3, #16
 800487c:	4618      	mov	r0, r3
 800487e:	f001 fa83 	bl	8005d88 <xTaskRemoveFromEventList>
 8004882:	4603      	mov	r3, r0
 8004884:	2b00      	cmp	r3, #0
 8004886:	d012      	beq.n	80048ae <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004888:	4b0c      	ldr	r3, [pc, #48]	; (80048bc <xQueueGenericReset+0xcc>)
 800488a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800488e:	601a      	str	r2, [r3, #0]
 8004890:	f3bf 8f4f 	dsb	sy
 8004894:	f3bf 8f6f 	isb	sy
 8004898:	e009      	b.n	80048ae <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	3310      	adds	r3, #16
 800489e:	4618      	mov	r0, r3
 80048a0:	f7ff fef2 	bl	8004688 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	3324      	adds	r3, #36	; 0x24
 80048a8:	4618      	mov	r0, r3
 80048aa:	f7ff feed 	bl	8004688 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80048ae:	f002 fa89 	bl	8006dc4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80048b2:	2301      	movs	r3, #1
}
 80048b4:	4618      	mov	r0, r3
 80048b6:	3710      	adds	r7, #16
 80048b8:	46bd      	mov	sp, r7
 80048ba:	bd80      	pop	{r7, pc}
 80048bc:	e000ed04 	.word	0xe000ed04

080048c0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b08e      	sub	sp, #56	; 0x38
 80048c4:	af02      	add	r7, sp, #8
 80048c6:	60f8      	str	r0, [r7, #12]
 80048c8:	60b9      	str	r1, [r7, #8]
 80048ca:	607a      	str	r2, [r7, #4]
 80048cc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d10a      	bne.n	80048ea <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80048d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048d8:	f383 8811 	msr	BASEPRI, r3
 80048dc:	f3bf 8f6f 	isb	sy
 80048e0:	f3bf 8f4f 	dsb	sy
 80048e4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80048e6:	bf00      	nop
 80048e8:	e7fe      	b.n	80048e8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d10a      	bne.n	8004906 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80048f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048f4:	f383 8811 	msr	BASEPRI, r3
 80048f8:	f3bf 8f6f 	isb	sy
 80048fc:	f3bf 8f4f 	dsb	sy
 8004900:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004902:	bf00      	nop
 8004904:	e7fe      	b.n	8004904 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2b00      	cmp	r3, #0
 800490a:	d002      	beq.n	8004912 <xQueueGenericCreateStatic+0x52>
 800490c:	68bb      	ldr	r3, [r7, #8]
 800490e:	2b00      	cmp	r3, #0
 8004910:	d001      	beq.n	8004916 <xQueueGenericCreateStatic+0x56>
 8004912:	2301      	movs	r3, #1
 8004914:	e000      	b.n	8004918 <xQueueGenericCreateStatic+0x58>
 8004916:	2300      	movs	r3, #0
 8004918:	2b00      	cmp	r3, #0
 800491a:	d10a      	bne.n	8004932 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800491c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004920:	f383 8811 	msr	BASEPRI, r3
 8004924:	f3bf 8f6f 	isb	sy
 8004928:	f3bf 8f4f 	dsb	sy
 800492c:	623b      	str	r3, [r7, #32]
}
 800492e:	bf00      	nop
 8004930:	e7fe      	b.n	8004930 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	2b00      	cmp	r3, #0
 8004936:	d102      	bne.n	800493e <xQueueGenericCreateStatic+0x7e>
 8004938:	68bb      	ldr	r3, [r7, #8]
 800493a:	2b00      	cmp	r3, #0
 800493c:	d101      	bne.n	8004942 <xQueueGenericCreateStatic+0x82>
 800493e:	2301      	movs	r3, #1
 8004940:	e000      	b.n	8004944 <xQueueGenericCreateStatic+0x84>
 8004942:	2300      	movs	r3, #0
 8004944:	2b00      	cmp	r3, #0
 8004946:	d10a      	bne.n	800495e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8004948:	f04f 0350 	mov.w	r3, #80	; 0x50
 800494c:	f383 8811 	msr	BASEPRI, r3
 8004950:	f3bf 8f6f 	isb	sy
 8004954:	f3bf 8f4f 	dsb	sy
 8004958:	61fb      	str	r3, [r7, #28]
}
 800495a:	bf00      	nop
 800495c:	e7fe      	b.n	800495c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800495e:	2348      	movs	r3, #72	; 0x48
 8004960:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004962:	697b      	ldr	r3, [r7, #20]
 8004964:	2b48      	cmp	r3, #72	; 0x48
 8004966:	d00a      	beq.n	800497e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8004968:	f04f 0350 	mov.w	r3, #80	; 0x50
 800496c:	f383 8811 	msr	BASEPRI, r3
 8004970:	f3bf 8f6f 	isb	sy
 8004974:	f3bf 8f4f 	dsb	sy
 8004978:	61bb      	str	r3, [r7, #24]
}
 800497a:	bf00      	nop
 800497c:	e7fe      	b.n	800497c <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800497e:	683b      	ldr	r3, [r7, #0]
 8004980:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004982:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004984:	2b00      	cmp	r3, #0
 8004986:	d00d      	beq.n	80049a4 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004988:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800498a:	2201      	movs	r2, #1
 800498c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004990:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004994:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004996:	9300      	str	r3, [sp, #0]
 8004998:	4613      	mov	r3, r2
 800499a:	687a      	ldr	r2, [r7, #4]
 800499c:	68b9      	ldr	r1, [r7, #8]
 800499e:	68f8      	ldr	r0, [r7, #12]
 80049a0:	f000 f843 	bl	8004a2a <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80049a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80049a6:	4618      	mov	r0, r3
 80049a8:	3730      	adds	r7, #48	; 0x30
 80049aa:	46bd      	mov	sp, r7
 80049ac:	bd80      	pop	{r7, pc}

080049ae <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80049ae:	b580      	push	{r7, lr}
 80049b0:	b08a      	sub	sp, #40	; 0x28
 80049b2:	af02      	add	r7, sp, #8
 80049b4:	60f8      	str	r0, [r7, #12]
 80049b6:	60b9      	str	r1, [r7, #8]
 80049b8:	4613      	mov	r3, r2
 80049ba:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d10a      	bne.n	80049d8 <xQueueGenericCreate+0x2a>
	__asm volatile
 80049c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049c6:	f383 8811 	msr	BASEPRI, r3
 80049ca:	f3bf 8f6f 	isb	sy
 80049ce:	f3bf 8f4f 	dsb	sy
 80049d2:	613b      	str	r3, [r7, #16]
}
 80049d4:	bf00      	nop
 80049d6:	e7fe      	b.n	80049d6 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80049d8:	68bb      	ldr	r3, [r7, #8]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d102      	bne.n	80049e4 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80049de:	2300      	movs	r3, #0
 80049e0:	61fb      	str	r3, [r7, #28]
 80049e2:	e004      	b.n	80049ee <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	68ba      	ldr	r2, [r7, #8]
 80049e8:	fb02 f303 	mul.w	r3, r2, r3
 80049ec:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 80049ee:	69fb      	ldr	r3, [r7, #28]
 80049f0:	3348      	adds	r3, #72	; 0x48
 80049f2:	4618      	mov	r0, r3
 80049f4:	f002 fad8 	bl	8006fa8 <pvPortMalloc>
 80049f8:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80049fa:	69bb      	ldr	r3, [r7, #24]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d00f      	beq.n	8004a20 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8004a00:	69bb      	ldr	r3, [r7, #24]
 8004a02:	3348      	adds	r3, #72	; 0x48
 8004a04:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004a06:	69bb      	ldr	r3, [r7, #24]
 8004a08:	2200      	movs	r2, #0
 8004a0a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004a0e:	79fa      	ldrb	r2, [r7, #7]
 8004a10:	69bb      	ldr	r3, [r7, #24]
 8004a12:	9300      	str	r3, [sp, #0]
 8004a14:	4613      	mov	r3, r2
 8004a16:	697a      	ldr	r2, [r7, #20]
 8004a18:	68b9      	ldr	r1, [r7, #8]
 8004a1a:	68f8      	ldr	r0, [r7, #12]
 8004a1c:	f000 f805 	bl	8004a2a <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8004a20:	69bb      	ldr	r3, [r7, #24]
	}
 8004a22:	4618      	mov	r0, r3
 8004a24:	3720      	adds	r7, #32
 8004a26:	46bd      	mov	sp, r7
 8004a28:	bd80      	pop	{r7, pc}

08004a2a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004a2a:	b580      	push	{r7, lr}
 8004a2c:	b084      	sub	sp, #16
 8004a2e:	af00      	add	r7, sp, #0
 8004a30:	60f8      	str	r0, [r7, #12]
 8004a32:	60b9      	str	r1, [r7, #8]
 8004a34:	607a      	str	r2, [r7, #4]
 8004a36:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004a38:	68bb      	ldr	r3, [r7, #8]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d103      	bne.n	8004a46 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004a3e:	69bb      	ldr	r3, [r7, #24]
 8004a40:	69ba      	ldr	r2, [r7, #24]
 8004a42:	601a      	str	r2, [r3, #0]
 8004a44:	e002      	b.n	8004a4c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004a46:	69bb      	ldr	r3, [r7, #24]
 8004a48:	687a      	ldr	r2, [r7, #4]
 8004a4a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004a4c:	69bb      	ldr	r3, [r7, #24]
 8004a4e:	68fa      	ldr	r2, [r7, #12]
 8004a50:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004a52:	69bb      	ldr	r3, [r7, #24]
 8004a54:	68ba      	ldr	r2, [r7, #8]
 8004a56:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004a58:	2101      	movs	r1, #1
 8004a5a:	69b8      	ldr	r0, [r7, #24]
 8004a5c:	f7ff fec8 	bl	80047f0 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004a60:	bf00      	nop
 8004a62:	3710      	adds	r7, #16
 8004a64:	46bd      	mov	sp, r7
 8004a66:	bd80      	pop	{r7, pc}

08004a68 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	b08e      	sub	sp, #56	; 0x38
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	60f8      	str	r0, [r7, #12]
 8004a70:	60b9      	str	r1, [r7, #8]
 8004a72:	607a      	str	r2, [r7, #4]
 8004a74:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004a76:	2300      	movs	r3, #0
 8004a78:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004a7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d10a      	bne.n	8004a9a <xQueueGenericSend+0x32>
	__asm volatile
 8004a84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a88:	f383 8811 	msr	BASEPRI, r3
 8004a8c:	f3bf 8f6f 	isb	sy
 8004a90:	f3bf 8f4f 	dsb	sy
 8004a94:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004a96:	bf00      	nop
 8004a98:	e7fe      	b.n	8004a98 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004a9a:	68bb      	ldr	r3, [r7, #8]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d103      	bne.n	8004aa8 <xQueueGenericSend+0x40>
 8004aa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d101      	bne.n	8004aac <xQueueGenericSend+0x44>
 8004aa8:	2301      	movs	r3, #1
 8004aaa:	e000      	b.n	8004aae <xQueueGenericSend+0x46>
 8004aac:	2300      	movs	r3, #0
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d10a      	bne.n	8004ac8 <xQueueGenericSend+0x60>
	__asm volatile
 8004ab2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ab6:	f383 8811 	msr	BASEPRI, r3
 8004aba:	f3bf 8f6f 	isb	sy
 8004abe:	f3bf 8f4f 	dsb	sy
 8004ac2:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004ac4:	bf00      	nop
 8004ac6:	e7fe      	b.n	8004ac6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	2b02      	cmp	r3, #2
 8004acc:	d103      	bne.n	8004ad6 <xQueueGenericSend+0x6e>
 8004ace:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ad0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ad2:	2b01      	cmp	r3, #1
 8004ad4:	d101      	bne.n	8004ada <xQueueGenericSend+0x72>
 8004ad6:	2301      	movs	r3, #1
 8004ad8:	e000      	b.n	8004adc <xQueueGenericSend+0x74>
 8004ada:	2300      	movs	r3, #0
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d10a      	bne.n	8004af6 <xQueueGenericSend+0x8e>
	__asm volatile
 8004ae0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ae4:	f383 8811 	msr	BASEPRI, r3
 8004ae8:	f3bf 8f6f 	isb	sy
 8004aec:	f3bf 8f4f 	dsb	sy
 8004af0:	623b      	str	r3, [r7, #32]
}
 8004af2:	bf00      	nop
 8004af4:	e7fe      	b.n	8004af4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004af6:	f001 fb0b 	bl	8006110 <xTaskGetSchedulerState>
 8004afa:	4603      	mov	r3, r0
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d102      	bne.n	8004b06 <xQueueGenericSend+0x9e>
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d101      	bne.n	8004b0a <xQueueGenericSend+0xa2>
 8004b06:	2301      	movs	r3, #1
 8004b08:	e000      	b.n	8004b0c <xQueueGenericSend+0xa4>
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d10a      	bne.n	8004b26 <xQueueGenericSend+0xbe>
	__asm volatile
 8004b10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b14:	f383 8811 	msr	BASEPRI, r3
 8004b18:	f3bf 8f6f 	isb	sy
 8004b1c:	f3bf 8f4f 	dsb	sy
 8004b20:	61fb      	str	r3, [r7, #28]
}
 8004b22:	bf00      	nop
 8004b24:	e7fe      	b.n	8004b24 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004b26:	f002 f91d 	bl	8006d64 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004b2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b2c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b32:	429a      	cmp	r2, r3
 8004b34:	d302      	bcc.n	8004b3c <xQueueGenericSend+0xd4>
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	2b02      	cmp	r3, #2
 8004b3a:	d129      	bne.n	8004b90 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004b3c:	683a      	ldr	r2, [r7, #0]
 8004b3e:	68b9      	ldr	r1, [r7, #8]
 8004b40:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004b42:	f000 fa07 	bl	8004f54 <prvCopyDataToQueue>
 8004b46:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004b48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d010      	beq.n	8004b72 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004b50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b52:	3324      	adds	r3, #36	; 0x24
 8004b54:	4618      	mov	r0, r3
 8004b56:	f001 f917 	bl	8005d88 <xTaskRemoveFromEventList>
 8004b5a:	4603      	mov	r3, r0
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d013      	beq.n	8004b88 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004b60:	4b3f      	ldr	r3, [pc, #252]	; (8004c60 <xQueueGenericSend+0x1f8>)
 8004b62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b66:	601a      	str	r2, [r3, #0]
 8004b68:	f3bf 8f4f 	dsb	sy
 8004b6c:	f3bf 8f6f 	isb	sy
 8004b70:	e00a      	b.n	8004b88 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004b72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d007      	beq.n	8004b88 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004b78:	4b39      	ldr	r3, [pc, #228]	; (8004c60 <xQueueGenericSend+0x1f8>)
 8004b7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b7e:	601a      	str	r2, [r3, #0]
 8004b80:	f3bf 8f4f 	dsb	sy
 8004b84:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004b88:	f002 f91c 	bl	8006dc4 <vPortExitCritical>
				return pdPASS;
 8004b8c:	2301      	movs	r3, #1
 8004b8e:	e063      	b.n	8004c58 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d103      	bne.n	8004b9e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004b96:	f002 f915 	bl	8006dc4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	e05c      	b.n	8004c58 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004b9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d106      	bne.n	8004bb2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004ba4:	f107 0314 	add.w	r3, r7, #20
 8004ba8:	4618      	mov	r0, r3
 8004baa:	f001 f94f 	bl	8005e4c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004bae:	2301      	movs	r3, #1
 8004bb0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004bb2:	f002 f907 	bl	8006dc4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004bb6:	f000 fdef 	bl	8005798 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004bba:	f002 f8d3 	bl	8006d64 <vPortEnterCritical>
 8004bbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bc0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004bc4:	b25b      	sxtb	r3, r3
 8004bc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bca:	d103      	bne.n	8004bd4 <xQueueGenericSend+0x16c>
 8004bcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bce:	2200      	movs	r2, #0
 8004bd0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004bd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bd6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004bda:	b25b      	sxtb	r3, r3
 8004bdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004be0:	d103      	bne.n	8004bea <xQueueGenericSend+0x182>
 8004be2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004be4:	2200      	movs	r2, #0
 8004be6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004bea:	f002 f8eb 	bl	8006dc4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004bee:	1d3a      	adds	r2, r7, #4
 8004bf0:	f107 0314 	add.w	r3, r7, #20
 8004bf4:	4611      	mov	r1, r2
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	f001 f93e 	bl	8005e78 <xTaskCheckForTimeOut>
 8004bfc:	4603      	mov	r3, r0
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d124      	bne.n	8004c4c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004c02:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004c04:	f000 fa9e 	bl	8005144 <prvIsQueueFull>
 8004c08:	4603      	mov	r3, r0
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d018      	beq.n	8004c40 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004c0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c10:	3310      	adds	r3, #16
 8004c12:	687a      	ldr	r2, [r7, #4]
 8004c14:	4611      	mov	r1, r2
 8004c16:	4618      	mov	r0, r3
 8004c18:	f001 f866 	bl	8005ce8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004c1c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004c1e:	f000 fa29 	bl	8005074 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004c22:	f000 fdc7 	bl	80057b4 <xTaskResumeAll>
 8004c26:	4603      	mov	r3, r0
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	f47f af7c 	bne.w	8004b26 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8004c2e:	4b0c      	ldr	r3, [pc, #48]	; (8004c60 <xQueueGenericSend+0x1f8>)
 8004c30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c34:	601a      	str	r2, [r3, #0]
 8004c36:	f3bf 8f4f 	dsb	sy
 8004c3a:	f3bf 8f6f 	isb	sy
 8004c3e:	e772      	b.n	8004b26 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004c40:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004c42:	f000 fa17 	bl	8005074 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004c46:	f000 fdb5 	bl	80057b4 <xTaskResumeAll>
 8004c4a:	e76c      	b.n	8004b26 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004c4c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004c4e:	f000 fa11 	bl	8005074 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004c52:	f000 fdaf 	bl	80057b4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004c56:	2300      	movs	r3, #0
		}
	}
}
 8004c58:	4618      	mov	r0, r3
 8004c5a:	3738      	adds	r7, #56	; 0x38
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	bd80      	pop	{r7, pc}
 8004c60:	e000ed04 	.word	0xe000ed04

08004c64 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b08e      	sub	sp, #56	; 0x38
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	60f8      	str	r0, [r7, #12]
 8004c6c:	60b9      	str	r1, [r7, #8]
 8004c6e:	607a      	str	r2, [r7, #4]
 8004c70:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004c76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d10a      	bne.n	8004c92 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8004c7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c80:	f383 8811 	msr	BASEPRI, r3
 8004c84:	f3bf 8f6f 	isb	sy
 8004c88:	f3bf 8f4f 	dsb	sy
 8004c8c:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004c8e:	bf00      	nop
 8004c90:	e7fe      	b.n	8004c90 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004c92:	68bb      	ldr	r3, [r7, #8]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d103      	bne.n	8004ca0 <xQueueGenericSendFromISR+0x3c>
 8004c98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d101      	bne.n	8004ca4 <xQueueGenericSendFromISR+0x40>
 8004ca0:	2301      	movs	r3, #1
 8004ca2:	e000      	b.n	8004ca6 <xQueueGenericSendFromISR+0x42>
 8004ca4:	2300      	movs	r3, #0
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d10a      	bne.n	8004cc0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8004caa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cae:	f383 8811 	msr	BASEPRI, r3
 8004cb2:	f3bf 8f6f 	isb	sy
 8004cb6:	f3bf 8f4f 	dsb	sy
 8004cba:	623b      	str	r3, [r7, #32]
}
 8004cbc:	bf00      	nop
 8004cbe:	e7fe      	b.n	8004cbe <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	2b02      	cmp	r3, #2
 8004cc4:	d103      	bne.n	8004cce <xQueueGenericSendFromISR+0x6a>
 8004cc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cca:	2b01      	cmp	r3, #1
 8004ccc:	d101      	bne.n	8004cd2 <xQueueGenericSendFromISR+0x6e>
 8004cce:	2301      	movs	r3, #1
 8004cd0:	e000      	b.n	8004cd4 <xQueueGenericSendFromISR+0x70>
 8004cd2:	2300      	movs	r3, #0
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d10a      	bne.n	8004cee <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8004cd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cdc:	f383 8811 	msr	BASEPRI, r3
 8004ce0:	f3bf 8f6f 	isb	sy
 8004ce4:	f3bf 8f4f 	dsb	sy
 8004ce8:	61fb      	str	r3, [r7, #28]
}
 8004cea:	bf00      	nop
 8004cec:	e7fe      	b.n	8004cec <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004cee:	f002 f91b 	bl	8006f28 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004cf2:	f3ef 8211 	mrs	r2, BASEPRI
 8004cf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cfa:	f383 8811 	msr	BASEPRI, r3
 8004cfe:	f3bf 8f6f 	isb	sy
 8004d02:	f3bf 8f4f 	dsb	sy
 8004d06:	61ba      	str	r2, [r7, #24]
 8004d08:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004d0a:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004d0c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004d0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d10:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004d12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d16:	429a      	cmp	r2, r3
 8004d18:	d302      	bcc.n	8004d20 <xQueueGenericSendFromISR+0xbc>
 8004d1a:	683b      	ldr	r3, [r7, #0]
 8004d1c:	2b02      	cmp	r3, #2
 8004d1e:	d12c      	bne.n	8004d7a <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004d20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d22:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004d26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004d2a:	683a      	ldr	r2, [r7, #0]
 8004d2c:	68b9      	ldr	r1, [r7, #8]
 8004d2e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004d30:	f000 f910 	bl	8004f54 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004d34:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8004d38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d3c:	d112      	bne.n	8004d64 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004d3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d016      	beq.n	8004d74 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004d46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d48:	3324      	adds	r3, #36	; 0x24
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	f001 f81c 	bl	8005d88 <xTaskRemoveFromEventList>
 8004d50:	4603      	mov	r3, r0
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d00e      	beq.n	8004d74 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d00b      	beq.n	8004d74 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2201      	movs	r2, #1
 8004d60:	601a      	str	r2, [r3, #0]
 8004d62:	e007      	b.n	8004d74 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004d64:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004d68:	3301      	adds	r3, #1
 8004d6a:	b2db      	uxtb	r3, r3
 8004d6c:	b25a      	sxtb	r2, r3
 8004d6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004d74:	2301      	movs	r3, #1
 8004d76:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8004d78:	e001      	b.n	8004d7e <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	637b      	str	r3, [r7, #52]	; 0x34
 8004d7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d80:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004d82:	693b      	ldr	r3, [r7, #16]
 8004d84:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004d88:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004d8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	3738      	adds	r7, #56	; 0x38
 8004d90:	46bd      	mov	sp, r7
 8004d92:	bd80      	pop	{r7, pc}

08004d94 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b08c      	sub	sp, #48	; 0x30
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	60f8      	str	r0, [r7, #12]
 8004d9c:	60b9      	str	r1, [r7, #8]
 8004d9e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004da0:	2300      	movs	r3, #0
 8004da2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004da8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d10a      	bne.n	8004dc4 <xQueueReceive+0x30>
	__asm volatile
 8004dae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004db2:	f383 8811 	msr	BASEPRI, r3
 8004db6:	f3bf 8f6f 	isb	sy
 8004dba:	f3bf 8f4f 	dsb	sy
 8004dbe:	623b      	str	r3, [r7, #32]
}
 8004dc0:	bf00      	nop
 8004dc2:	e7fe      	b.n	8004dc2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004dc4:	68bb      	ldr	r3, [r7, #8]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d103      	bne.n	8004dd2 <xQueueReceive+0x3e>
 8004dca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d101      	bne.n	8004dd6 <xQueueReceive+0x42>
 8004dd2:	2301      	movs	r3, #1
 8004dd4:	e000      	b.n	8004dd8 <xQueueReceive+0x44>
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d10a      	bne.n	8004df2 <xQueueReceive+0x5e>
	__asm volatile
 8004ddc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004de0:	f383 8811 	msr	BASEPRI, r3
 8004de4:	f3bf 8f6f 	isb	sy
 8004de8:	f3bf 8f4f 	dsb	sy
 8004dec:	61fb      	str	r3, [r7, #28]
}
 8004dee:	bf00      	nop
 8004df0:	e7fe      	b.n	8004df0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004df2:	f001 f98d 	bl	8006110 <xTaskGetSchedulerState>
 8004df6:	4603      	mov	r3, r0
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d102      	bne.n	8004e02 <xQueueReceive+0x6e>
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d101      	bne.n	8004e06 <xQueueReceive+0x72>
 8004e02:	2301      	movs	r3, #1
 8004e04:	e000      	b.n	8004e08 <xQueueReceive+0x74>
 8004e06:	2300      	movs	r3, #0
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d10a      	bne.n	8004e22 <xQueueReceive+0x8e>
	__asm volatile
 8004e0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e10:	f383 8811 	msr	BASEPRI, r3
 8004e14:	f3bf 8f6f 	isb	sy
 8004e18:	f3bf 8f4f 	dsb	sy
 8004e1c:	61bb      	str	r3, [r7, #24]
}
 8004e1e:	bf00      	nop
 8004e20:	e7fe      	b.n	8004e20 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8004e22:	f001 ff9f 	bl	8006d64 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004e26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e2a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d01f      	beq.n	8004e72 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004e32:	68b9      	ldr	r1, [r7, #8]
 8004e34:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004e36:	f000 f8f7 	bl	8005028 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e3c:	1e5a      	subs	r2, r3, #1
 8004e3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e40:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004e42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e44:	691b      	ldr	r3, [r3, #16]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d00f      	beq.n	8004e6a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004e4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e4c:	3310      	adds	r3, #16
 8004e4e:	4618      	mov	r0, r3
 8004e50:	f000 ff9a 	bl	8005d88 <xTaskRemoveFromEventList>
 8004e54:	4603      	mov	r3, r0
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d007      	beq.n	8004e6a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004e5a:	4b3d      	ldr	r3, [pc, #244]	; (8004f50 <xQueueReceive+0x1bc>)
 8004e5c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e60:	601a      	str	r2, [r3, #0]
 8004e62:	f3bf 8f4f 	dsb	sy
 8004e66:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004e6a:	f001 ffab 	bl	8006dc4 <vPortExitCritical>
				return pdPASS;
 8004e6e:	2301      	movs	r3, #1
 8004e70:	e069      	b.n	8004f46 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d103      	bne.n	8004e80 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004e78:	f001 ffa4 	bl	8006dc4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004e7c:	2300      	movs	r3, #0
 8004e7e:	e062      	b.n	8004f46 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004e80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d106      	bne.n	8004e94 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004e86:	f107 0310 	add.w	r3, r7, #16
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	f000 ffde 	bl	8005e4c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004e90:	2301      	movs	r3, #1
 8004e92:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004e94:	f001 ff96 	bl	8006dc4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004e98:	f000 fc7e 	bl	8005798 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004e9c:	f001 ff62 	bl	8006d64 <vPortEnterCritical>
 8004ea0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ea2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004ea6:	b25b      	sxtb	r3, r3
 8004ea8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004eac:	d103      	bne.n	8004eb6 <xQueueReceive+0x122>
 8004eae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004eb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eb8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004ebc:	b25b      	sxtb	r3, r3
 8004ebe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ec2:	d103      	bne.n	8004ecc <xQueueReceive+0x138>
 8004ec4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004ecc:	f001 ff7a 	bl	8006dc4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004ed0:	1d3a      	adds	r2, r7, #4
 8004ed2:	f107 0310 	add.w	r3, r7, #16
 8004ed6:	4611      	mov	r1, r2
 8004ed8:	4618      	mov	r0, r3
 8004eda:	f000 ffcd 	bl	8005e78 <xTaskCheckForTimeOut>
 8004ede:	4603      	mov	r3, r0
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d123      	bne.n	8004f2c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004ee4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004ee6:	f000 f917 	bl	8005118 <prvIsQueueEmpty>
 8004eea:	4603      	mov	r3, r0
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d017      	beq.n	8004f20 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004ef0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ef2:	3324      	adds	r3, #36	; 0x24
 8004ef4:	687a      	ldr	r2, [r7, #4]
 8004ef6:	4611      	mov	r1, r2
 8004ef8:	4618      	mov	r0, r3
 8004efa:	f000 fef5 	bl	8005ce8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004efe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004f00:	f000 f8b8 	bl	8005074 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004f04:	f000 fc56 	bl	80057b4 <xTaskResumeAll>
 8004f08:	4603      	mov	r3, r0
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d189      	bne.n	8004e22 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8004f0e:	4b10      	ldr	r3, [pc, #64]	; (8004f50 <xQueueReceive+0x1bc>)
 8004f10:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f14:	601a      	str	r2, [r3, #0]
 8004f16:	f3bf 8f4f 	dsb	sy
 8004f1a:	f3bf 8f6f 	isb	sy
 8004f1e:	e780      	b.n	8004e22 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004f20:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004f22:	f000 f8a7 	bl	8005074 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004f26:	f000 fc45 	bl	80057b4 <xTaskResumeAll>
 8004f2a:	e77a      	b.n	8004e22 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004f2c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004f2e:	f000 f8a1 	bl	8005074 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004f32:	f000 fc3f 	bl	80057b4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004f36:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004f38:	f000 f8ee 	bl	8005118 <prvIsQueueEmpty>
 8004f3c:	4603      	mov	r3, r0
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	f43f af6f 	beq.w	8004e22 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004f44:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8004f46:	4618      	mov	r0, r3
 8004f48:	3730      	adds	r7, #48	; 0x30
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	bd80      	pop	{r7, pc}
 8004f4e:	bf00      	nop
 8004f50:	e000ed04 	.word	0xe000ed04

08004f54 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004f54:	b580      	push	{r7, lr}
 8004f56:	b086      	sub	sp, #24
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	60f8      	str	r0, [r7, #12]
 8004f5c:	60b9      	str	r1, [r7, #8]
 8004f5e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004f60:	2300      	movs	r3, #0
 8004f62:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f68:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d10d      	bne.n	8004f8e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d14d      	bne.n	8005016 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	685b      	ldr	r3, [r3, #4]
 8004f7e:	4618      	mov	r0, r3
 8004f80:	f001 f8e4 	bl	800614c <xTaskPriorityDisinherit>
 8004f84:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	2200      	movs	r2, #0
 8004f8a:	605a      	str	r2, [r3, #4]
 8004f8c:	e043      	b.n	8005016 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d119      	bne.n	8004fc8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	6898      	ldr	r0, [r3, #8]
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f9c:	461a      	mov	r2, r3
 8004f9e:	68b9      	ldr	r1, [r7, #8]
 8004fa0:	f002 fa36 	bl	8007410 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	689a      	ldr	r2, [r3, #8]
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fac:	441a      	add	r2, r3
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	689a      	ldr	r2, [r3, #8]
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	685b      	ldr	r3, [r3, #4]
 8004fba:	429a      	cmp	r2, r3
 8004fbc:	d32b      	bcc.n	8005016 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	681a      	ldr	r2, [r3, #0]
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	609a      	str	r2, [r3, #8]
 8004fc6:	e026      	b.n	8005016 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	68d8      	ldr	r0, [r3, #12]
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fd0:	461a      	mov	r2, r3
 8004fd2:	68b9      	ldr	r1, [r7, #8]
 8004fd4:	f002 fa1c 	bl	8007410 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	68da      	ldr	r2, [r3, #12]
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fe0:	425b      	negs	r3, r3
 8004fe2:	441a      	add	r2, r3
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	68da      	ldr	r2, [r3, #12]
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	429a      	cmp	r2, r3
 8004ff2:	d207      	bcs.n	8005004 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	685a      	ldr	r2, [r3, #4]
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ffc:	425b      	negs	r3, r3
 8004ffe:	441a      	add	r2, r3
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2b02      	cmp	r3, #2
 8005008:	d105      	bne.n	8005016 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800500a:	693b      	ldr	r3, [r7, #16]
 800500c:	2b00      	cmp	r3, #0
 800500e:	d002      	beq.n	8005016 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005010:	693b      	ldr	r3, [r7, #16]
 8005012:	3b01      	subs	r3, #1
 8005014:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005016:	693b      	ldr	r3, [r7, #16]
 8005018:	1c5a      	adds	r2, r3, #1
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800501e:	697b      	ldr	r3, [r7, #20]
}
 8005020:	4618      	mov	r0, r3
 8005022:	3718      	adds	r7, #24
 8005024:	46bd      	mov	sp, r7
 8005026:	bd80      	pop	{r7, pc}

08005028 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005028:	b580      	push	{r7, lr}
 800502a:	b082      	sub	sp, #8
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
 8005030:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005036:	2b00      	cmp	r3, #0
 8005038:	d018      	beq.n	800506c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	68da      	ldr	r2, [r3, #12]
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005042:	441a      	add	r2, r3
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	68da      	ldr	r2, [r3, #12]
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	685b      	ldr	r3, [r3, #4]
 8005050:	429a      	cmp	r2, r3
 8005052:	d303      	bcc.n	800505c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681a      	ldr	r2, [r3, #0]
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	68d9      	ldr	r1, [r3, #12]
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005064:	461a      	mov	r2, r3
 8005066:	6838      	ldr	r0, [r7, #0]
 8005068:	f002 f9d2 	bl	8007410 <memcpy>
	}
}
 800506c:	bf00      	nop
 800506e:	3708      	adds	r7, #8
 8005070:	46bd      	mov	sp, r7
 8005072:	bd80      	pop	{r7, pc}

08005074 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005074:	b580      	push	{r7, lr}
 8005076:	b084      	sub	sp, #16
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800507c:	f001 fe72 	bl	8006d64 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005086:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005088:	e011      	b.n	80050ae <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800508e:	2b00      	cmp	r3, #0
 8005090:	d012      	beq.n	80050b8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	3324      	adds	r3, #36	; 0x24
 8005096:	4618      	mov	r0, r3
 8005098:	f000 fe76 	bl	8005d88 <xTaskRemoveFromEventList>
 800509c:	4603      	mov	r3, r0
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d001      	beq.n	80050a6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80050a2:	f000 ff4b 	bl	8005f3c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80050a6:	7bfb      	ldrb	r3, [r7, #15]
 80050a8:	3b01      	subs	r3, #1
 80050aa:	b2db      	uxtb	r3, r3
 80050ac:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80050ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	dce9      	bgt.n	800508a <prvUnlockQueue+0x16>
 80050b6:	e000      	b.n	80050ba <prvUnlockQueue+0x46>
					break;
 80050b8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	22ff      	movs	r2, #255	; 0xff
 80050be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80050c2:	f001 fe7f 	bl	8006dc4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80050c6:	f001 fe4d 	bl	8006d64 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80050d0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80050d2:	e011      	b.n	80050f8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	691b      	ldr	r3, [r3, #16]
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d012      	beq.n	8005102 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	3310      	adds	r3, #16
 80050e0:	4618      	mov	r0, r3
 80050e2:	f000 fe51 	bl	8005d88 <xTaskRemoveFromEventList>
 80050e6:	4603      	mov	r3, r0
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d001      	beq.n	80050f0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80050ec:	f000 ff26 	bl	8005f3c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80050f0:	7bbb      	ldrb	r3, [r7, #14]
 80050f2:	3b01      	subs	r3, #1
 80050f4:	b2db      	uxtb	r3, r3
 80050f6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80050f8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	dce9      	bgt.n	80050d4 <prvUnlockQueue+0x60>
 8005100:	e000      	b.n	8005104 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005102:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	22ff      	movs	r2, #255	; 0xff
 8005108:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800510c:	f001 fe5a 	bl	8006dc4 <vPortExitCritical>
}
 8005110:	bf00      	nop
 8005112:	3710      	adds	r7, #16
 8005114:	46bd      	mov	sp, r7
 8005116:	bd80      	pop	{r7, pc}

08005118 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005118:	b580      	push	{r7, lr}
 800511a:	b084      	sub	sp, #16
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005120:	f001 fe20 	bl	8006d64 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005128:	2b00      	cmp	r3, #0
 800512a:	d102      	bne.n	8005132 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800512c:	2301      	movs	r3, #1
 800512e:	60fb      	str	r3, [r7, #12]
 8005130:	e001      	b.n	8005136 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005132:	2300      	movs	r3, #0
 8005134:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005136:	f001 fe45 	bl	8006dc4 <vPortExitCritical>

	return xReturn;
 800513a:	68fb      	ldr	r3, [r7, #12]
}
 800513c:	4618      	mov	r0, r3
 800513e:	3710      	adds	r7, #16
 8005140:	46bd      	mov	sp, r7
 8005142:	bd80      	pop	{r7, pc}

08005144 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005144:	b580      	push	{r7, lr}
 8005146:	b084      	sub	sp, #16
 8005148:	af00      	add	r7, sp, #0
 800514a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800514c:	f001 fe0a 	bl	8006d64 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005158:	429a      	cmp	r2, r3
 800515a:	d102      	bne.n	8005162 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800515c:	2301      	movs	r3, #1
 800515e:	60fb      	str	r3, [r7, #12]
 8005160:	e001      	b.n	8005166 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005162:	2300      	movs	r3, #0
 8005164:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005166:	f001 fe2d 	bl	8006dc4 <vPortExitCritical>

	return xReturn;
 800516a:	68fb      	ldr	r3, [r7, #12]
}
 800516c:	4618      	mov	r0, r3
 800516e:	3710      	adds	r7, #16
 8005170:	46bd      	mov	sp, r7
 8005172:	bd80      	pop	{r7, pc}

08005174 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005174:	b480      	push	{r7}
 8005176:	b085      	sub	sp, #20
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]
 800517c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800517e:	2300      	movs	r3, #0
 8005180:	60fb      	str	r3, [r7, #12]
 8005182:	e014      	b.n	80051ae <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005184:	4a0f      	ldr	r2, [pc, #60]	; (80051c4 <vQueueAddToRegistry+0x50>)
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800518c:	2b00      	cmp	r3, #0
 800518e:	d10b      	bne.n	80051a8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005190:	490c      	ldr	r1, [pc, #48]	; (80051c4 <vQueueAddToRegistry+0x50>)
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	683a      	ldr	r2, [r7, #0]
 8005196:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800519a:	4a0a      	ldr	r2, [pc, #40]	; (80051c4 <vQueueAddToRegistry+0x50>)
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	00db      	lsls	r3, r3, #3
 80051a0:	4413      	add	r3, r2
 80051a2:	687a      	ldr	r2, [r7, #4]
 80051a4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80051a6:	e006      	b.n	80051b6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	3301      	adds	r3, #1
 80051ac:	60fb      	str	r3, [r7, #12]
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	2b07      	cmp	r3, #7
 80051b2:	d9e7      	bls.n	8005184 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80051b4:	bf00      	nop
 80051b6:	bf00      	nop
 80051b8:	3714      	adds	r7, #20
 80051ba:	46bd      	mov	sp, r7
 80051bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c0:	4770      	bx	lr
 80051c2:	bf00      	nop
 80051c4:	2000059c 	.word	0x2000059c

080051c8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80051c8:	b580      	push	{r7, lr}
 80051ca:	b086      	sub	sp, #24
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	60f8      	str	r0, [r7, #12]
 80051d0:	60b9      	str	r1, [r7, #8]
 80051d2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80051d8:	f001 fdc4 	bl	8006d64 <vPortEnterCritical>
 80051dc:	697b      	ldr	r3, [r7, #20]
 80051de:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80051e2:	b25b      	sxtb	r3, r3
 80051e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051e8:	d103      	bne.n	80051f2 <vQueueWaitForMessageRestricted+0x2a>
 80051ea:	697b      	ldr	r3, [r7, #20]
 80051ec:	2200      	movs	r2, #0
 80051ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80051f2:	697b      	ldr	r3, [r7, #20]
 80051f4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80051f8:	b25b      	sxtb	r3, r3
 80051fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051fe:	d103      	bne.n	8005208 <vQueueWaitForMessageRestricted+0x40>
 8005200:	697b      	ldr	r3, [r7, #20]
 8005202:	2200      	movs	r2, #0
 8005204:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005208:	f001 fddc 	bl	8006dc4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800520c:	697b      	ldr	r3, [r7, #20]
 800520e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005210:	2b00      	cmp	r3, #0
 8005212:	d106      	bne.n	8005222 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005214:	697b      	ldr	r3, [r7, #20]
 8005216:	3324      	adds	r3, #36	; 0x24
 8005218:	687a      	ldr	r2, [r7, #4]
 800521a:	68b9      	ldr	r1, [r7, #8]
 800521c:	4618      	mov	r0, r3
 800521e:	f000 fd87 	bl	8005d30 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005222:	6978      	ldr	r0, [r7, #20]
 8005224:	f7ff ff26 	bl	8005074 <prvUnlockQueue>
	}
 8005228:	bf00      	nop
 800522a:	3718      	adds	r7, #24
 800522c:	46bd      	mov	sp, r7
 800522e:	bd80      	pop	{r7, pc}

08005230 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005230:	b580      	push	{r7, lr}
 8005232:	b08e      	sub	sp, #56	; 0x38
 8005234:	af04      	add	r7, sp, #16
 8005236:	60f8      	str	r0, [r7, #12]
 8005238:	60b9      	str	r1, [r7, #8]
 800523a:	607a      	str	r2, [r7, #4]
 800523c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800523e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005240:	2b00      	cmp	r3, #0
 8005242:	d10a      	bne.n	800525a <xTaskCreateStatic+0x2a>
	__asm volatile
 8005244:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005248:	f383 8811 	msr	BASEPRI, r3
 800524c:	f3bf 8f6f 	isb	sy
 8005250:	f3bf 8f4f 	dsb	sy
 8005254:	623b      	str	r3, [r7, #32]
}
 8005256:	bf00      	nop
 8005258:	e7fe      	b.n	8005258 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800525a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800525c:	2b00      	cmp	r3, #0
 800525e:	d10a      	bne.n	8005276 <xTaskCreateStatic+0x46>
	__asm volatile
 8005260:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005264:	f383 8811 	msr	BASEPRI, r3
 8005268:	f3bf 8f6f 	isb	sy
 800526c:	f3bf 8f4f 	dsb	sy
 8005270:	61fb      	str	r3, [r7, #28]
}
 8005272:	bf00      	nop
 8005274:	e7fe      	b.n	8005274 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005276:	2354      	movs	r3, #84	; 0x54
 8005278:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800527a:	693b      	ldr	r3, [r7, #16]
 800527c:	2b54      	cmp	r3, #84	; 0x54
 800527e:	d00a      	beq.n	8005296 <xTaskCreateStatic+0x66>
	__asm volatile
 8005280:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005284:	f383 8811 	msr	BASEPRI, r3
 8005288:	f3bf 8f6f 	isb	sy
 800528c:	f3bf 8f4f 	dsb	sy
 8005290:	61bb      	str	r3, [r7, #24]
}
 8005292:	bf00      	nop
 8005294:	e7fe      	b.n	8005294 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005296:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005298:	2b00      	cmp	r3, #0
 800529a:	d01e      	beq.n	80052da <xTaskCreateStatic+0xaa>
 800529c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d01b      	beq.n	80052da <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80052a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052a4:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80052a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052a8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80052aa:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80052ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ae:	2202      	movs	r2, #2
 80052b0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80052b4:	2300      	movs	r3, #0
 80052b6:	9303      	str	r3, [sp, #12]
 80052b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ba:	9302      	str	r3, [sp, #8]
 80052bc:	f107 0314 	add.w	r3, r7, #20
 80052c0:	9301      	str	r3, [sp, #4]
 80052c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052c4:	9300      	str	r3, [sp, #0]
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	687a      	ldr	r2, [r7, #4]
 80052ca:	68b9      	ldr	r1, [r7, #8]
 80052cc:	68f8      	ldr	r0, [r7, #12]
 80052ce:	f000 f850 	bl	8005372 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80052d2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80052d4:	f000 f8cc 	bl	8005470 <prvAddNewTaskToReadyList>
 80052d8:	e001      	b.n	80052de <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 80052da:	2300      	movs	r3, #0
 80052dc:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80052de:	697b      	ldr	r3, [r7, #20]
	}
 80052e0:	4618      	mov	r0, r3
 80052e2:	3728      	adds	r7, #40	; 0x28
 80052e4:	46bd      	mov	sp, r7
 80052e6:	bd80      	pop	{r7, pc}

080052e8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80052e8:	b580      	push	{r7, lr}
 80052ea:	b08c      	sub	sp, #48	; 0x30
 80052ec:	af04      	add	r7, sp, #16
 80052ee:	60f8      	str	r0, [r7, #12]
 80052f0:	60b9      	str	r1, [r7, #8]
 80052f2:	603b      	str	r3, [r7, #0]
 80052f4:	4613      	mov	r3, r2
 80052f6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80052f8:	88fb      	ldrh	r3, [r7, #6]
 80052fa:	009b      	lsls	r3, r3, #2
 80052fc:	4618      	mov	r0, r3
 80052fe:	f001 fe53 	bl	8006fa8 <pvPortMalloc>
 8005302:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005304:	697b      	ldr	r3, [r7, #20]
 8005306:	2b00      	cmp	r3, #0
 8005308:	d00e      	beq.n	8005328 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800530a:	2054      	movs	r0, #84	; 0x54
 800530c:	f001 fe4c 	bl	8006fa8 <pvPortMalloc>
 8005310:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005312:	69fb      	ldr	r3, [r7, #28]
 8005314:	2b00      	cmp	r3, #0
 8005316:	d003      	beq.n	8005320 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005318:	69fb      	ldr	r3, [r7, #28]
 800531a:	697a      	ldr	r2, [r7, #20]
 800531c:	631a      	str	r2, [r3, #48]	; 0x30
 800531e:	e005      	b.n	800532c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005320:	6978      	ldr	r0, [r7, #20]
 8005322:	f001 ff05 	bl	8007130 <vPortFree>
 8005326:	e001      	b.n	800532c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005328:	2300      	movs	r3, #0
 800532a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800532c:	69fb      	ldr	r3, [r7, #28]
 800532e:	2b00      	cmp	r3, #0
 8005330:	d017      	beq.n	8005362 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005332:	69fb      	ldr	r3, [r7, #28]
 8005334:	2200      	movs	r2, #0
 8005336:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800533a:	88fa      	ldrh	r2, [r7, #6]
 800533c:	2300      	movs	r3, #0
 800533e:	9303      	str	r3, [sp, #12]
 8005340:	69fb      	ldr	r3, [r7, #28]
 8005342:	9302      	str	r3, [sp, #8]
 8005344:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005346:	9301      	str	r3, [sp, #4]
 8005348:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800534a:	9300      	str	r3, [sp, #0]
 800534c:	683b      	ldr	r3, [r7, #0]
 800534e:	68b9      	ldr	r1, [r7, #8]
 8005350:	68f8      	ldr	r0, [r7, #12]
 8005352:	f000 f80e 	bl	8005372 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005356:	69f8      	ldr	r0, [r7, #28]
 8005358:	f000 f88a 	bl	8005470 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800535c:	2301      	movs	r3, #1
 800535e:	61bb      	str	r3, [r7, #24]
 8005360:	e002      	b.n	8005368 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005362:	f04f 33ff 	mov.w	r3, #4294967295
 8005366:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005368:	69bb      	ldr	r3, [r7, #24]
	}
 800536a:	4618      	mov	r0, r3
 800536c:	3720      	adds	r7, #32
 800536e:	46bd      	mov	sp, r7
 8005370:	bd80      	pop	{r7, pc}

08005372 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005372:	b580      	push	{r7, lr}
 8005374:	b088      	sub	sp, #32
 8005376:	af00      	add	r7, sp, #0
 8005378:	60f8      	str	r0, [r7, #12]
 800537a:	60b9      	str	r1, [r7, #8]
 800537c:	607a      	str	r2, [r7, #4]
 800537e:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8005380:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005382:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800538a:	3b01      	subs	r3, #1
 800538c:	009b      	lsls	r3, r3, #2
 800538e:	4413      	add	r3, r2
 8005390:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8005392:	69bb      	ldr	r3, [r7, #24]
 8005394:	f023 0307 	bic.w	r3, r3, #7
 8005398:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800539a:	69bb      	ldr	r3, [r7, #24]
 800539c:	f003 0307 	and.w	r3, r3, #7
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d00a      	beq.n	80053ba <prvInitialiseNewTask+0x48>
	__asm volatile
 80053a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053a8:	f383 8811 	msr	BASEPRI, r3
 80053ac:	f3bf 8f6f 	isb	sy
 80053b0:	f3bf 8f4f 	dsb	sy
 80053b4:	617b      	str	r3, [r7, #20]
}
 80053b6:	bf00      	nop
 80053b8:	e7fe      	b.n	80053b8 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80053ba:	2300      	movs	r3, #0
 80053bc:	61fb      	str	r3, [r7, #28]
 80053be:	e012      	b.n	80053e6 <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80053c0:	68ba      	ldr	r2, [r7, #8]
 80053c2:	69fb      	ldr	r3, [r7, #28]
 80053c4:	4413      	add	r3, r2
 80053c6:	7819      	ldrb	r1, [r3, #0]
 80053c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80053ca:	69fb      	ldr	r3, [r7, #28]
 80053cc:	4413      	add	r3, r2
 80053ce:	3334      	adds	r3, #52	; 0x34
 80053d0:	460a      	mov	r2, r1
 80053d2:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80053d4:	68ba      	ldr	r2, [r7, #8]
 80053d6:	69fb      	ldr	r3, [r7, #28]
 80053d8:	4413      	add	r3, r2
 80053da:	781b      	ldrb	r3, [r3, #0]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d006      	beq.n	80053ee <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80053e0:	69fb      	ldr	r3, [r7, #28]
 80053e2:	3301      	adds	r3, #1
 80053e4:	61fb      	str	r3, [r7, #28]
 80053e6:	69fb      	ldr	r3, [r7, #28]
 80053e8:	2b0f      	cmp	r3, #15
 80053ea:	d9e9      	bls.n	80053c0 <prvInitialiseNewTask+0x4e>
 80053ec:	e000      	b.n	80053f0 <prvInitialiseNewTask+0x7e>
		{
			break;
 80053ee:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80053f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053f2:	2200      	movs	r2, #0
 80053f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80053f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053fa:	2b06      	cmp	r3, #6
 80053fc:	d901      	bls.n	8005402 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80053fe:	2306      	movs	r3, #6
 8005400:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005402:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005404:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005406:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005408:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800540a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800540c:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800540e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005410:	2200      	movs	r2, #0
 8005412:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005414:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005416:	3304      	adds	r3, #4
 8005418:	4618      	mov	r0, r3
 800541a:	f7ff f955 	bl	80046c8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800541e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005420:	3318      	adds	r3, #24
 8005422:	4618      	mov	r0, r3
 8005424:	f7ff f950 	bl	80046c8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005428:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800542a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800542c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800542e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005430:	f1c3 0207 	rsb	r2, r3, #7
 8005434:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005436:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005438:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800543a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800543c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800543e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005440:	2200      	movs	r2, #0
 8005442:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005444:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005446:	2200      	movs	r2, #0
 8005448:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800544c:	683a      	ldr	r2, [r7, #0]
 800544e:	68f9      	ldr	r1, [r7, #12]
 8005450:	69b8      	ldr	r0, [r7, #24]
 8005452:	f001 fb5d 	bl	8006b10 <pxPortInitialiseStack>
 8005456:	4602      	mov	r2, r0
 8005458:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800545a:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800545c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800545e:	2b00      	cmp	r3, #0
 8005460:	d002      	beq.n	8005468 <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005462:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005464:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005466:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005468:	bf00      	nop
 800546a:	3720      	adds	r7, #32
 800546c:	46bd      	mov	sp, r7
 800546e:	bd80      	pop	{r7, pc}

08005470 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005470:	b580      	push	{r7, lr}
 8005472:	b082      	sub	sp, #8
 8005474:	af00      	add	r7, sp, #0
 8005476:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005478:	f001 fc74 	bl	8006d64 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800547c:	4b2a      	ldr	r3, [pc, #168]	; (8005528 <prvAddNewTaskToReadyList+0xb8>)
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	3301      	adds	r3, #1
 8005482:	4a29      	ldr	r2, [pc, #164]	; (8005528 <prvAddNewTaskToReadyList+0xb8>)
 8005484:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005486:	4b29      	ldr	r3, [pc, #164]	; (800552c <prvAddNewTaskToReadyList+0xbc>)
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	2b00      	cmp	r3, #0
 800548c:	d109      	bne.n	80054a2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800548e:	4a27      	ldr	r2, [pc, #156]	; (800552c <prvAddNewTaskToReadyList+0xbc>)
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005494:	4b24      	ldr	r3, [pc, #144]	; (8005528 <prvAddNewTaskToReadyList+0xb8>)
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	2b01      	cmp	r3, #1
 800549a:	d110      	bne.n	80054be <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800549c:	f000 fd74 	bl	8005f88 <prvInitialiseTaskLists>
 80054a0:	e00d      	b.n	80054be <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80054a2:	4b23      	ldr	r3, [pc, #140]	; (8005530 <prvAddNewTaskToReadyList+0xc0>)
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d109      	bne.n	80054be <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80054aa:	4b20      	ldr	r3, [pc, #128]	; (800552c <prvAddNewTaskToReadyList+0xbc>)
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054b4:	429a      	cmp	r2, r3
 80054b6:	d802      	bhi.n	80054be <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80054b8:	4a1c      	ldr	r2, [pc, #112]	; (800552c <prvAddNewTaskToReadyList+0xbc>)
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80054be:	4b1d      	ldr	r3, [pc, #116]	; (8005534 <prvAddNewTaskToReadyList+0xc4>)
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	3301      	adds	r3, #1
 80054c4:	4a1b      	ldr	r2, [pc, #108]	; (8005534 <prvAddNewTaskToReadyList+0xc4>)
 80054c6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054cc:	2201      	movs	r2, #1
 80054ce:	409a      	lsls	r2, r3
 80054d0:	4b19      	ldr	r3, [pc, #100]	; (8005538 <prvAddNewTaskToReadyList+0xc8>)
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	4313      	orrs	r3, r2
 80054d6:	4a18      	ldr	r2, [pc, #96]	; (8005538 <prvAddNewTaskToReadyList+0xc8>)
 80054d8:	6013      	str	r3, [r2, #0]
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054de:	4613      	mov	r3, r2
 80054e0:	009b      	lsls	r3, r3, #2
 80054e2:	4413      	add	r3, r2
 80054e4:	009b      	lsls	r3, r3, #2
 80054e6:	4a15      	ldr	r2, [pc, #84]	; (800553c <prvAddNewTaskToReadyList+0xcc>)
 80054e8:	441a      	add	r2, r3
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	3304      	adds	r3, #4
 80054ee:	4619      	mov	r1, r3
 80054f0:	4610      	mov	r0, r2
 80054f2:	f7ff f8f6 	bl	80046e2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80054f6:	f001 fc65 	bl	8006dc4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80054fa:	4b0d      	ldr	r3, [pc, #52]	; (8005530 <prvAddNewTaskToReadyList+0xc0>)
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d00e      	beq.n	8005520 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005502:	4b0a      	ldr	r3, [pc, #40]	; (800552c <prvAddNewTaskToReadyList+0xbc>)
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800550c:	429a      	cmp	r2, r3
 800550e:	d207      	bcs.n	8005520 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005510:	4b0b      	ldr	r3, [pc, #44]	; (8005540 <prvAddNewTaskToReadyList+0xd0>)
 8005512:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005516:	601a      	str	r2, [r3, #0]
 8005518:	f3bf 8f4f 	dsb	sy
 800551c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005520:	bf00      	nop
 8005522:	3708      	adds	r7, #8
 8005524:	46bd      	mov	sp, r7
 8005526:	bd80      	pop	{r7, pc}
 8005528:	200006dc 	.word	0x200006dc
 800552c:	200005dc 	.word	0x200005dc
 8005530:	200006e8 	.word	0x200006e8
 8005534:	200006f8 	.word	0x200006f8
 8005538:	200006e4 	.word	0x200006e4
 800553c:	200005e0 	.word	0x200005e0
 8005540:	e000ed04 	.word	0xe000ed04

08005544 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8005544:	b580      	push	{r7, lr}
 8005546:	b084      	sub	sp, #16
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800554c:	f001 fc0a 	bl	8006d64 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2b00      	cmp	r3, #0
 8005554:	d102      	bne.n	800555c <vTaskDelete+0x18>
 8005556:	4b39      	ldr	r3, [pc, #228]	; (800563c <vTaskDelete+0xf8>)
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	e000      	b.n	800555e <vTaskDelete+0x1a>
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	3304      	adds	r3, #4
 8005564:	4618      	mov	r0, r3
 8005566:	f7ff f919 	bl	800479c <uxListRemove>
 800556a:	4603      	mov	r3, r0
 800556c:	2b00      	cmp	r3, #0
 800556e:	d115      	bne.n	800559c <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005574:	4932      	ldr	r1, [pc, #200]	; (8005640 <vTaskDelete+0xfc>)
 8005576:	4613      	mov	r3, r2
 8005578:	009b      	lsls	r3, r3, #2
 800557a:	4413      	add	r3, r2
 800557c:	009b      	lsls	r3, r3, #2
 800557e:	440b      	add	r3, r1
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	2b00      	cmp	r3, #0
 8005584:	d10a      	bne.n	800559c <vTaskDelete+0x58>
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800558a:	2201      	movs	r2, #1
 800558c:	fa02 f303 	lsl.w	r3, r2, r3
 8005590:	43da      	mvns	r2, r3
 8005592:	4b2c      	ldr	r3, [pc, #176]	; (8005644 <vTaskDelete+0x100>)
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	4013      	ands	r3, r2
 8005598:	4a2a      	ldr	r2, [pc, #168]	; (8005644 <vTaskDelete+0x100>)
 800559a:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d004      	beq.n	80055ae <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	3318      	adds	r3, #24
 80055a8:	4618      	mov	r0, r3
 80055aa:	f7ff f8f7 	bl	800479c <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 80055ae:	4b26      	ldr	r3, [pc, #152]	; (8005648 <vTaskDelete+0x104>)
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	3301      	adds	r3, #1
 80055b4:	4a24      	ldr	r2, [pc, #144]	; (8005648 <vTaskDelete+0x104>)
 80055b6:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 80055b8:	4b20      	ldr	r3, [pc, #128]	; (800563c <vTaskDelete+0xf8>)
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	68fa      	ldr	r2, [r7, #12]
 80055be:	429a      	cmp	r2, r3
 80055c0:	d10b      	bne.n	80055da <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	3304      	adds	r3, #4
 80055c6:	4619      	mov	r1, r3
 80055c8:	4820      	ldr	r0, [pc, #128]	; (800564c <vTaskDelete+0x108>)
 80055ca:	f7ff f88a 	bl	80046e2 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 80055ce:	4b20      	ldr	r3, [pc, #128]	; (8005650 <vTaskDelete+0x10c>)
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	3301      	adds	r3, #1
 80055d4:	4a1e      	ldr	r2, [pc, #120]	; (8005650 <vTaskDelete+0x10c>)
 80055d6:	6013      	str	r3, [r2, #0]
 80055d8:	e009      	b.n	80055ee <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 80055da:	4b1e      	ldr	r3, [pc, #120]	; (8005654 <vTaskDelete+0x110>)
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	3b01      	subs	r3, #1
 80055e0:	4a1c      	ldr	r2, [pc, #112]	; (8005654 <vTaskDelete+0x110>)
 80055e2:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 80055e4:	68f8      	ldr	r0, [r7, #12]
 80055e6:	f000 fd3d 	bl	8006064 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 80055ea:	f000 fd6b 	bl	80060c4 <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 80055ee:	f001 fbe9 	bl	8006dc4 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 80055f2:	4b19      	ldr	r3, [pc, #100]	; (8005658 <vTaskDelete+0x114>)
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d01b      	beq.n	8005632 <vTaskDelete+0xee>
		{
			if( pxTCB == pxCurrentTCB )
 80055fa:	4b10      	ldr	r3, [pc, #64]	; (800563c <vTaskDelete+0xf8>)
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	68fa      	ldr	r2, [r7, #12]
 8005600:	429a      	cmp	r2, r3
 8005602:	d116      	bne.n	8005632 <vTaskDelete+0xee>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8005604:	4b15      	ldr	r3, [pc, #84]	; (800565c <vTaskDelete+0x118>)
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	2b00      	cmp	r3, #0
 800560a:	d00a      	beq.n	8005622 <vTaskDelete+0xde>
	__asm volatile
 800560c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005610:	f383 8811 	msr	BASEPRI, r3
 8005614:	f3bf 8f6f 	isb	sy
 8005618:	f3bf 8f4f 	dsb	sy
 800561c:	60bb      	str	r3, [r7, #8]
}
 800561e:	bf00      	nop
 8005620:	e7fe      	b.n	8005620 <vTaskDelete+0xdc>
				portYIELD_WITHIN_API();
 8005622:	4b0f      	ldr	r3, [pc, #60]	; (8005660 <vTaskDelete+0x11c>)
 8005624:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005628:	601a      	str	r2, [r3, #0]
 800562a:	f3bf 8f4f 	dsb	sy
 800562e:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005632:	bf00      	nop
 8005634:	3710      	adds	r7, #16
 8005636:	46bd      	mov	sp, r7
 8005638:	bd80      	pop	{r7, pc}
 800563a:	bf00      	nop
 800563c:	200005dc 	.word	0x200005dc
 8005640:	200005e0 	.word	0x200005e0
 8005644:	200006e4 	.word	0x200006e4
 8005648:	200006f8 	.word	0x200006f8
 800564c:	200006b0 	.word	0x200006b0
 8005650:	200006c4 	.word	0x200006c4
 8005654:	200006dc 	.word	0x200006dc
 8005658:	200006e8 	.word	0x200006e8
 800565c:	20000704 	.word	0x20000704
 8005660:	e000ed04 	.word	0xe000ed04

08005664 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005664:	b580      	push	{r7, lr}
 8005666:	b084      	sub	sp, #16
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800566c:	2300      	movs	r3, #0
 800566e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2b00      	cmp	r3, #0
 8005674:	d017      	beq.n	80056a6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005676:	4b13      	ldr	r3, [pc, #76]	; (80056c4 <vTaskDelay+0x60>)
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	2b00      	cmp	r3, #0
 800567c:	d00a      	beq.n	8005694 <vTaskDelay+0x30>
	__asm volatile
 800567e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005682:	f383 8811 	msr	BASEPRI, r3
 8005686:	f3bf 8f6f 	isb	sy
 800568a:	f3bf 8f4f 	dsb	sy
 800568e:	60bb      	str	r3, [r7, #8]
}
 8005690:	bf00      	nop
 8005692:	e7fe      	b.n	8005692 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005694:	f000 f880 	bl	8005798 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005698:	2100      	movs	r1, #0
 800569a:	6878      	ldr	r0, [r7, #4]
 800569c:	f000 feda 	bl	8006454 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80056a0:	f000 f888 	bl	80057b4 <xTaskResumeAll>
 80056a4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d107      	bne.n	80056bc <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80056ac:	4b06      	ldr	r3, [pc, #24]	; (80056c8 <vTaskDelay+0x64>)
 80056ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80056b2:	601a      	str	r2, [r3, #0]
 80056b4:	f3bf 8f4f 	dsb	sy
 80056b8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80056bc:	bf00      	nop
 80056be:	3710      	adds	r7, #16
 80056c0:	46bd      	mov	sp, r7
 80056c2:	bd80      	pop	{r7, pc}
 80056c4:	20000704 	.word	0x20000704
 80056c8:	e000ed04 	.word	0xe000ed04

080056cc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80056cc:	b580      	push	{r7, lr}
 80056ce:	b08a      	sub	sp, #40	; 0x28
 80056d0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80056d2:	2300      	movs	r3, #0
 80056d4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80056d6:	2300      	movs	r3, #0
 80056d8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80056da:	463a      	mov	r2, r7
 80056dc:	1d39      	adds	r1, r7, #4
 80056de:	f107 0308 	add.w	r3, r7, #8
 80056e2:	4618      	mov	r0, r3
 80056e4:	f7fa fdda 	bl	800029c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80056e8:	6839      	ldr	r1, [r7, #0]
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	68ba      	ldr	r2, [r7, #8]
 80056ee:	9202      	str	r2, [sp, #8]
 80056f0:	9301      	str	r3, [sp, #4]
 80056f2:	2300      	movs	r3, #0
 80056f4:	9300      	str	r3, [sp, #0]
 80056f6:	2300      	movs	r3, #0
 80056f8:	460a      	mov	r2, r1
 80056fa:	4921      	ldr	r1, [pc, #132]	; (8005780 <vTaskStartScheduler+0xb4>)
 80056fc:	4821      	ldr	r0, [pc, #132]	; (8005784 <vTaskStartScheduler+0xb8>)
 80056fe:	f7ff fd97 	bl	8005230 <xTaskCreateStatic>
 8005702:	4603      	mov	r3, r0
 8005704:	4a20      	ldr	r2, [pc, #128]	; (8005788 <vTaskStartScheduler+0xbc>)
 8005706:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005708:	4b1f      	ldr	r3, [pc, #124]	; (8005788 <vTaskStartScheduler+0xbc>)
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	2b00      	cmp	r3, #0
 800570e:	d002      	beq.n	8005716 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005710:	2301      	movs	r3, #1
 8005712:	617b      	str	r3, [r7, #20]
 8005714:	e001      	b.n	800571a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005716:	2300      	movs	r3, #0
 8005718:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800571a:	697b      	ldr	r3, [r7, #20]
 800571c:	2b01      	cmp	r3, #1
 800571e:	d102      	bne.n	8005726 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005720:	f000 fefe 	bl	8006520 <xTimerCreateTimerTask>
 8005724:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005726:	697b      	ldr	r3, [r7, #20]
 8005728:	2b01      	cmp	r3, #1
 800572a:	d116      	bne.n	800575a <vTaskStartScheduler+0x8e>
	__asm volatile
 800572c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005730:	f383 8811 	msr	BASEPRI, r3
 8005734:	f3bf 8f6f 	isb	sy
 8005738:	f3bf 8f4f 	dsb	sy
 800573c:	613b      	str	r3, [r7, #16]
}
 800573e:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005740:	4b12      	ldr	r3, [pc, #72]	; (800578c <vTaskStartScheduler+0xc0>)
 8005742:	f04f 32ff 	mov.w	r2, #4294967295
 8005746:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005748:	4b11      	ldr	r3, [pc, #68]	; (8005790 <vTaskStartScheduler+0xc4>)
 800574a:	2201      	movs	r2, #1
 800574c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800574e:	4b11      	ldr	r3, [pc, #68]	; (8005794 <vTaskStartScheduler+0xc8>)
 8005750:	2200      	movs	r2, #0
 8005752:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005754:	f001 fa64 	bl	8006c20 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005758:	e00e      	b.n	8005778 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800575a:	697b      	ldr	r3, [r7, #20]
 800575c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005760:	d10a      	bne.n	8005778 <vTaskStartScheduler+0xac>
	__asm volatile
 8005762:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005766:	f383 8811 	msr	BASEPRI, r3
 800576a:	f3bf 8f6f 	isb	sy
 800576e:	f3bf 8f4f 	dsb	sy
 8005772:	60fb      	str	r3, [r7, #12]
}
 8005774:	bf00      	nop
 8005776:	e7fe      	b.n	8005776 <vTaskStartScheduler+0xaa>
}
 8005778:	bf00      	nop
 800577a:	3718      	adds	r7, #24
 800577c:	46bd      	mov	sp, r7
 800577e:	bd80      	pop	{r7, pc}
 8005780:	08007d78 	.word	0x08007d78
 8005784:	08005f55 	.word	0x08005f55
 8005788:	20000700 	.word	0x20000700
 800578c:	200006fc 	.word	0x200006fc
 8005790:	200006e8 	.word	0x200006e8
 8005794:	200006e0 	.word	0x200006e0

08005798 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005798:	b480      	push	{r7}
 800579a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800579c:	4b04      	ldr	r3, [pc, #16]	; (80057b0 <vTaskSuspendAll+0x18>)
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	3301      	adds	r3, #1
 80057a2:	4a03      	ldr	r2, [pc, #12]	; (80057b0 <vTaskSuspendAll+0x18>)
 80057a4:	6013      	str	r3, [r2, #0]
}
 80057a6:	bf00      	nop
 80057a8:	46bd      	mov	sp, r7
 80057aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ae:	4770      	bx	lr
 80057b0:	20000704 	.word	0x20000704

080057b4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80057b4:	b580      	push	{r7, lr}
 80057b6:	b084      	sub	sp, #16
 80057b8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80057ba:	2300      	movs	r3, #0
 80057bc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80057be:	2300      	movs	r3, #0
 80057c0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80057c2:	4b41      	ldr	r3, [pc, #260]	; (80058c8 <xTaskResumeAll+0x114>)
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d10a      	bne.n	80057e0 <xTaskResumeAll+0x2c>
	__asm volatile
 80057ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057ce:	f383 8811 	msr	BASEPRI, r3
 80057d2:	f3bf 8f6f 	isb	sy
 80057d6:	f3bf 8f4f 	dsb	sy
 80057da:	603b      	str	r3, [r7, #0]
}
 80057dc:	bf00      	nop
 80057de:	e7fe      	b.n	80057de <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80057e0:	f001 fac0 	bl	8006d64 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80057e4:	4b38      	ldr	r3, [pc, #224]	; (80058c8 <xTaskResumeAll+0x114>)
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	3b01      	subs	r3, #1
 80057ea:	4a37      	ldr	r2, [pc, #220]	; (80058c8 <xTaskResumeAll+0x114>)
 80057ec:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80057ee:	4b36      	ldr	r3, [pc, #216]	; (80058c8 <xTaskResumeAll+0x114>)
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d161      	bne.n	80058ba <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80057f6:	4b35      	ldr	r3, [pc, #212]	; (80058cc <xTaskResumeAll+0x118>)
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d05d      	beq.n	80058ba <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80057fe:	e02e      	b.n	800585e <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8005800:	4b33      	ldr	r3, [pc, #204]	; (80058d0 <xTaskResumeAll+0x11c>)
 8005802:	68db      	ldr	r3, [r3, #12]
 8005804:	68db      	ldr	r3, [r3, #12]
 8005806:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	3318      	adds	r3, #24
 800580c:	4618      	mov	r0, r3
 800580e:	f7fe ffc5 	bl	800479c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	3304      	adds	r3, #4
 8005816:	4618      	mov	r0, r3
 8005818:	f7fe ffc0 	bl	800479c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005820:	2201      	movs	r2, #1
 8005822:	409a      	lsls	r2, r3
 8005824:	4b2b      	ldr	r3, [pc, #172]	; (80058d4 <xTaskResumeAll+0x120>)
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	4313      	orrs	r3, r2
 800582a:	4a2a      	ldr	r2, [pc, #168]	; (80058d4 <xTaskResumeAll+0x120>)
 800582c:	6013      	str	r3, [r2, #0]
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005832:	4613      	mov	r3, r2
 8005834:	009b      	lsls	r3, r3, #2
 8005836:	4413      	add	r3, r2
 8005838:	009b      	lsls	r3, r3, #2
 800583a:	4a27      	ldr	r2, [pc, #156]	; (80058d8 <xTaskResumeAll+0x124>)
 800583c:	441a      	add	r2, r3
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	3304      	adds	r3, #4
 8005842:	4619      	mov	r1, r3
 8005844:	4610      	mov	r0, r2
 8005846:	f7fe ff4c 	bl	80046e2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800584e:	4b23      	ldr	r3, [pc, #140]	; (80058dc <xTaskResumeAll+0x128>)
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005854:	429a      	cmp	r2, r3
 8005856:	d302      	bcc.n	800585e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8005858:	4b21      	ldr	r3, [pc, #132]	; (80058e0 <xTaskResumeAll+0x12c>)
 800585a:	2201      	movs	r2, #1
 800585c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800585e:	4b1c      	ldr	r3, [pc, #112]	; (80058d0 <xTaskResumeAll+0x11c>)
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	2b00      	cmp	r3, #0
 8005864:	d1cc      	bne.n	8005800 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	2b00      	cmp	r3, #0
 800586a:	d001      	beq.n	8005870 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800586c:	f000 fc2a 	bl	80060c4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8005870:	4b1c      	ldr	r3, [pc, #112]	; (80058e4 <xTaskResumeAll+0x130>)
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	2b00      	cmp	r3, #0
 800587a:	d010      	beq.n	800589e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800587c:	f000 f912 	bl	8005aa4 <xTaskIncrementTick>
 8005880:	4603      	mov	r3, r0
 8005882:	2b00      	cmp	r3, #0
 8005884:	d002      	beq.n	800588c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8005886:	4b16      	ldr	r3, [pc, #88]	; (80058e0 <xTaskResumeAll+0x12c>)
 8005888:	2201      	movs	r2, #1
 800588a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	3b01      	subs	r3, #1
 8005890:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	2b00      	cmp	r3, #0
 8005896:	d1f1      	bne.n	800587c <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8005898:	4b12      	ldr	r3, [pc, #72]	; (80058e4 <xTaskResumeAll+0x130>)
 800589a:	2200      	movs	r2, #0
 800589c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800589e:	4b10      	ldr	r3, [pc, #64]	; (80058e0 <xTaskResumeAll+0x12c>)
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d009      	beq.n	80058ba <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80058a6:	2301      	movs	r3, #1
 80058a8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80058aa:	4b0f      	ldr	r3, [pc, #60]	; (80058e8 <xTaskResumeAll+0x134>)
 80058ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80058b0:	601a      	str	r2, [r3, #0]
 80058b2:	f3bf 8f4f 	dsb	sy
 80058b6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80058ba:	f001 fa83 	bl	8006dc4 <vPortExitCritical>

	return xAlreadyYielded;
 80058be:	68bb      	ldr	r3, [r7, #8]
}
 80058c0:	4618      	mov	r0, r3
 80058c2:	3710      	adds	r7, #16
 80058c4:	46bd      	mov	sp, r7
 80058c6:	bd80      	pop	{r7, pc}
 80058c8:	20000704 	.word	0x20000704
 80058cc:	200006dc 	.word	0x200006dc
 80058d0:	2000069c 	.word	0x2000069c
 80058d4:	200006e4 	.word	0x200006e4
 80058d8:	200005e0 	.word	0x200005e0
 80058dc:	200005dc 	.word	0x200005dc
 80058e0:	200006f0 	.word	0x200006f0
 80058e4:	200006ec 	.word	0x200006ec
 80058e8:	e000ed04 	.word	0xe000ed04

080058ec <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80058ec:	b480      	push	{r7}
 80058ee:	b083      	sub	sp, #12
 80058f0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80058f2:	4b05      	ldr	r3, [pc, #20]	; (8005908 <xTaskGetTickCount+0x1c>)
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80058f8:	687b      	ldr	r3, [r7, #4]
}
 80058fa:	4618      	mov	r0, r3
 80058fc:	370c      	adds	r7, #12
 80058fe:	46bd      	mov	sp, r7
 8005900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005904:	4770      	bx	lr
 8005906:	bf00      	nop
 8005908:	200006e0 	.word	0x200006e0

0800590c <prvSearchForNameWithinSingleList>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_xTaskGetHandle == 1 )

	static TCB_t *prvSearchForNameWithinSingleList( List_t *pxList, const char pcNameToQuery[] )
	{
 800590c:	b480      	push	{r7}
 800590e:	b08b      	sub	sp, #44	; 0x2c
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
 8005914:	6039      	str	r1, [r7, #0]
	TCB_t *pxNextTCB, *pxFirstTCB, *pxReturn = NULL;
 8005916:	2300      	movs	r3, #0
 8005918:	627b      	str	r3, [r7, #36]	; 0x24
	UBaseType_t x;
	char cNextChar;

		/* This function is called with the scheduler suspended. */

		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	2b00      	cmp	r3, #0
 8005920:	d052      	beq.n	80059c8 <prvSearchForNameWithinSingleList+0xbc>
		{
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	61fb      	str	r3, [r7, #28]
 8005926:	69fb      	ldr	r3, [r7, #28]
 8005928:	685b      	ldr	r3, [r3, #4]
 800592a:	685a      	ldr	r2, [r3, #4]
 800592c:	69fb      	ldr	r3, [r7, #28]
 800592e:	605a      	str	r2, [r3, #4]
 8005930:	69fb      	ldr	r3, [r7, #28]
 8005932:	685a      	ldr	r2, [r3, #4]
 8005934:	69fb      	ldr	r3, [r7, #28]
 8005936:	3308      	adds	r3, #8
 8005938:	429a      	cmp	r2, r3
 800593a:	d104      	bne.n	8005946 <prvSearchForNameWithinSingleList+0x3a>
 800593c:	69fb      	ldr	r3, [r7, #28]
 800593e:	685b      	ldr	r3, [r3, #4]
 8005940:	685a      	ldr	r2, [r3, #4]
 8005942:	69fb      	ldr	r3, [r7, #28]
 8005944:	605a      	str	r2, [r3, #4]
 8005946:	69fb      	ldr	r3, [r7, #28]
 8005948:	685b      	ldr	r3, [r3, #4]
 800594a:	68db      	ldr	r3, [r3, #12]
 800594c:	61bb      	str	r3, [r7, #24]

			do
			{
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	617b      	str	r3, [r7, #20]
 8005952:	697b      	ldr	r3, [r7, #20]
 8005954:	685b      	ldr	r3, [r3, #4]
 8005956:	685a      	ldr	r2, [r3, #4]
 8005958:	697b      	ldr	r3, [r7, #20]
 800595a:	605a      	str	r2, [r3, #4]
 800595c:	697b      	ldr	r3, [r7, #20]
 800595e:	685a      	ldr	r2, [r3, #4]
 8005960:	697b      	ldr	r3, [r7, #20]
 8005962:	3308      	adds	r3, #8
 8005964:	429a      	cmp	r2, r3
 8005966:	d104      	bne.n	8005972 <prvSearchForNameWithinSingleList+0x66>
 8005968:	697b      	ldr	r3, [r7, #20]
 800596a:	685b      	ldr	r3, [r3, #4]
 800596c:	685a      	ldr	r2, [r3, #4]
 800596e:	697b      	ldr	r3, [r7, #20]
 8005970:	605a      	str	r2, [r3, #4]
 8005972:	697b      	ldr	r3, [r7, #20]
 8005974:	685b      	ldr	r3, [r3, #4]
 8005976:	68db      	ldr	r3, [r3, #12]
 8005978:	613b      	str	r3, [r7, #16]

				/* Check each character in the name looking for a match or
				mismatch. */
				for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800597a:	2300      	movs	r3, #0
 800597c:	623b      	str	r3, [r7, #32]
 800597e:	e015      	b.n	80059ac <prvSearchForNameWithinSingleList+0xa0>
				{
					cNextChar = pxNextTCB->pcTaskName[ x ];
 8005980:	693a      	ldr	r2, [r7, #16]
 8005982:	6a3b      	ldr	r3, [r7, #32]
 8005984:	4413      	add	r3, r2
 8005986:	3334      	adds	r3, #52	; 0x34
 8005988:	781b      	ldrb	r3, [r3, #0]
 800598a:	73fb      	strb	r3, [r7, #15]

					if( cNextChar != pcNameToQuery[ x ] )
 800598c:	683a      	ldr	r2, [r7, #0]
 800598e:	6a3b      	ldr	r3, [r7, #32]
 8005990:	4413      	add	r3, r2
 8005992:	781b      	ldrb	r3, [r3, #0]
 8005994:	7bfa      	ldrb	r2, [r7, #15]
 8005996:	429a      	cmp	r2, r3
 8005998:	d10c      	bne.n	80059b4 <prvSearchForNameWithinSingleList+0xa8>
					{
						/* Characters didn't match. */
						break;
					}
					else if( cNextChar == 0x00 )
 800599a:	7bfb      	ldrb	r3, [r7, #15]
 800599c:	2b00      	cmp	r3, #0
 800599e:	d102      	bne.n	80059a6 <prvSearchForNameWithinSingleList+0x9a>
					{
						/* Both strings terminated, a match must have been
						found. */
						pxReturn = pxNextTCB;
 80059a0:	693b      	ldr	r3, [r7, #16]
 80059a2:	627b      	str	r3, [r7, #36]	; 0x24
						break;
 80059a4:	e007      	b.n	80059b6 <prvSearchForNameWithinSingleList+0xaa>
				for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80059a6:	6a3b      	ldr	r3, [r7, #32]
 80059a8:	3301      	adds	r3, #1
 80059aa:	623b      	str	r3, [r7, #32]
 80059ac:	6a3b      	ldr	r3, [r7, #32]
 80059ae:	2b0f      	cmp	r3, #15
 80059b0:	d9e6      	bls.n	8005980 <prvSearchForNameWithinSingleList+0x74>
 80059b2:	e000      	b.n	80059b6 <prvSearchForNameWithinSingleList+0xaa>
						break;
 80059b4:	bf00      	nop
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxReturn != NULL )
 80059b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d104      	bne.n	80059c6 <prvSearchForNameWithinSingleList+0xba>
				{
					/* The handle has been found. */
					break;
				}

			} while( pxNextTCB != pxFirstTCB );
 80059bc:	693a      	ldr	r2, [r7, #16]
 80059be:	69bb      	ldr	r3, [r7, #24]
 80059c0:	429a      	cmp	r2, r3
 80059c2:	d1c4      	bne.n	800594e <prvSearchForNameWithinSingleList+0x42>
 80059c4:	e000      	b.n	80059c8 <prvSearchForNameWithinSingleList+0xbc>
					break;
 80059c6:	bf00      	nop
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return pxReturn;
 80059c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 80059ca:	4618      	mov	r0, r3
 80059cc:	372c      	adds	r7, #44	; 0x2c
 80059ce:	46bd      	mov	sp, r7
 80059d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d4:	4770      	bx	lr
	...

080059d8 <xTaskGetHandle>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_xTaskGetHandle == 1 )

	TaskHandle_t xTaskGetHandle( const char *pcNameToQuery ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80059d8:	b580      	push	{r7, lr}
 80059da:	b086      	sub	sp, #24
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
	UBaseType_t uxQueue = configMAX_PRIORITIES;
 80059e0:	2307      	movs	r3, #7
 80059e2:	617b      	str	r3, [r7, #20]
	TCB_t* pxTCB;

		/* Task names will be truncated to configMAX_TASK_NAME_LEN - 1 bytes. */
		configASSERT( strlen( pcNameToQuery ) < configMAX_TASK_NAME_LEN );
 80059e4:	6878      	ldr	r0, [r7, #4]
 80059e6:	f7fa fbf3 	bl	80001d0 <strlen>
 80059ea:	4603      	mov	r3, r0
 80059ec:	2b0f      	cmp	r3, #15
 80059ee:	d90a      	bls.n	8005a06 <xTaskGetHandle+0x2e>
	__asm volatile
 80059f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059f4:	f383 8811 	msr	BASEPRI, r3
 80059f8:	f3bf 8f6f 	isb	sy
 80059fc:	f3bf 8f4f 	dsb	sy
 8005a00:	60fb      	str	r3, [r7, #12]
}
 8005a02:	bf00      	nop
 8005a04:	e7fe      	b.n	8005a04 <xTaskGetHandle+0x2c>

		vTaskSuspendAll();
 8005a06:	f7ff fec7 	bl	8005798 <vTaskSuspendAll>
		{
			/* Search the ready lists. */
			do
			{
				uxQueue--;
 8005a0a:	697b      	ldr	r3, [r7, #20]
 8005a0c:	3b01      	subs	r3, #1
 8005a0e:	617b      	str	r3, [r7, #20]
				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) &( pxReadyTasksLists[ uxQueue ] ), pcNameToQuery );
 8005a10:	697a      	ldr	r2, [r7, #20]
 8005a12:	4613      	mov	r3, r2
 8005a14:	009b      	lsls	r3, r3, #2
 8005a16:	4413      	add	r3, r2
 8005a18:	009b      	lsls	r3, r3, #2
 8005a1a:	4a1d      	ldr	r2, [pc, #116]	; (8005a90 <xTaskGetHandle+0xb8>)
 8005a1c:	4413      	add	r3, r2
 8005a1e:	6879      	ldr	r1, [r7, #4]
 8005a20:	4618      	mov	r0, r3
 8005a22:	f7ff ff73 	bl	800590c <prvSearchForNameWithinSingleList>
 8005a26:	6138      	str	r0, [r7, #16]

				if( pxTCB != NULL )
 8005a28:	693b      	ldr	r3, [r7, #16]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d103      	bne.n	8005a36 <xTaskGetHandle+0x5e>
				{
					/* Found the handle. */
					break;
				}

			} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005a2e:	697b      	ldr	r3, [r7, #20]
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d1ea      	bne.n	8005a0a <xTaskGetHandle+0x32>
 8005a34:	e000      	b.n	8005a38 <xTaskGetHandle+0x60>
					break;
 8005a36:	bf00      	nop

			/* Search the delayed lists. */
			if( pxTCB == NULL )
 8005a38:	693b      	ldr	r3, [r7, #16]
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d106      	bne.n	8005a4c <xTaskGetHandle+0x74>
			{
				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxDelayedTaskList, pcNameToQuery );
 8005a3e:	4b15      	ldr	r3, [pc, #84]	; (8005a94 <xTaskGetHandle+0xbc>)
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	6879      	ldr	r1, [r7, #4]
 8005a44:	4618      	mov	r0, r3
 8005a46:	f7ff ff61 	bl	800590c <prvSearchForNameWithinSingleList>
 8005a4a:	6138      	str	r0, [r7, #16]
			}

			if( pxTCB == NULL )
 8005a4c:	693b      	ldr	r3, [r7, #16]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d106      	bne.n	8005a60 <xTaskGetHandle+0x88>
			{
				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxOverflowDelayedTaskList, pcNameToQuery );
 8005a52:	4b11      	ldr	r3, [pc, #68]	; (8005a98 <xTaskGetHandle+0xc0>)
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	6879      	ldr	r1, [r7, #4]
 8005a58:	4618      	mov	r0, r3
 8005a5a:	f7ff ff57 	bl	800590c <prvSearchForNameWithinSingleList>
 8005a5e:	6138      	str	r0, [r7, #16]
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
			{
				if( pxTCB == NULL )
 8005a60:	693b      	ldr	r3, [r7, #16]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d104      	bne.n	8005a70 <xTaskGetHandle+0x98>
				{
					/* Search the suspended list. */
					pxTCB = prvSearchForNameWithinSingleList( &xSuspendedTaskList, pcNameToQuery );
 8005a66:	6879      	ldr	r1, [r7, #4]
 8005a68:	480c      	ldr	r0, [pc, #48]	; (8005a9c <xTaskGetHandle+0xc4>)
 8005a6a:	f7ff ff4f 	bl	800590c <prvSearchForNameWithinSingleList>
 8005a6e:	6138      	str	r0, [r7, #16]
			}
			#endif

			#if( INCLUDE_vTaskDelete == 1 )
			{
				if( pxTCB == NULL )
 8005a70:	693b      	ldr	r3, [r7, #16]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d104      	bne.n	8005a80 <xTaskGetHandle+0xa8>
				{
					/* Search the deleted list. */
					pxTCB = prvSearchForNameWithinSingleList( &xTasksWaitingTermination, pcNameToQuery );
 8005a76:	6879      	ldr	r1, [r7, #4]
 8005a78:	4809      	ldr	r0, [pc, #36]	; (8005aa0 <xTaskGetHandle+0xc8>)
 8005a7a:	f7ff ff47 	bl	800590c <prvSearchForNameWithinSingleList>
 8005a7e:	6138      	str	r0, [r7, #16]
				}
			}
			#endif
		}
		( void ) xTaskResumeAll();
 8005a80:	f7ff fe98 	bl	80057b4 <xTaskResumeAll>

		return ( TaskHandle_t ) pxTCB;
 8005a84:	693b      	ldr	r3, [r7, #16]
	}
 8005a86:	4618      	mov	r0, r3
 8005a88:	3718      	adds	r7, #24
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	bd80      	pop	{r7, pc}
 8005a8e:	bf00      	nop
 8005a90:	200005e0 	.word	0x200005e0
 8005a94:	20000694 	.word	0x20000694
 8005a98:	20000698 	.word	0x20000698
 8005a9c:	200006c8 	.word	0x200006c8
 8005aa0:	200006b0 	.word	0x200006b0

08005aa4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005aa4:	b580      	push	{r7, lr}
 8005aa6:	b086      	sub	sp, #24
 8005aa8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005aaa:	2300      	movs	r3, #0
 8005aac:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005aae:	4b55      	ldr	r3, [pc, #340]	; (8005c04 <xTaskIncrementTick+0x160>)
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	f040 8093 	bne.w	8005bde <xTaskIncrementTick+0x13a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005ab8:	4b53      	ldr	r3, [pc, #332]	; (8005c08 <xTaskIncrementTick+0x164>)
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	3301      	adds	r3, #1
 8005abe:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005ac0:	4a51      	ldr	r2, [pc, #324]	; (8005c08 <xTaskIncrementTick+0x164>)
 8005ac2:	693b      	ldr	r3, [r7, #16]
 8005ac4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005ac6:	693b      	ldr	r3, [r7, #16]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d120      	bne.n	8005b0e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005acc:	4b4f      	ldr	r3, [pc, #316]	; (8005c0c <xTaskIncrementTick+0x168>)
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d00a      	beq.n	8005aec <xTaskIncrementTick+0x48>
	__asm volatile
 8005ad6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ada:	f383 8811 	msr	BASEPRI, r3
 8005ade:	f3bf 8f6f 	isb	sy
 8005ae2:	f3bf 8f4f 	dsb	sy
 8005ae6:	603b      	str	r3, [r7, #0]
}
 8005ae8:	bf00      	nop
 8005aea:	e7fe      	b.n	8005aea <xTaskIncrementTick+0x46>
 8005aec:	4b47      	ldr	r3, [pc, #284]	; (8005c0c <xTaskIncrementTick+0x168>)
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	60fb      	str	r3, [r7, #12]
 8005af2:	4b47      	ldr	r3, [pc, #284]	; (8005c10 <xTaskIncrementTick+0x16c>)
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	4a45      	ldr	r2, [pc, #276]	; (8005c0c <xTaskIncrementTick+0x168>)
 8005af8:	6013      	str	r3, [r2, #0]
 8005afa:	4a45      	ldr	r2, [pc, #276]	; (8005c10 <xTaskIncrementTick+0x16c>)
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	6013      	str	r3, [r2, #0]
 8005b00:	4b44      	ldr	r3, [pc, #272]	; (8005c14 <xTaskIncrementTick+0x170>)
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	3301      	adds	r3, #1
 8005b06:	4a43      	ldr	r2, [pc, #268]	; (8005c14 <xTaskIncrementTick+0x170>)
 8005b08:	6013      	str	r3, [r2, #0]
 8005b0a:	f000 fadb 	bl	80060c4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005b0e:	4b42      	ldr	r3, [pc, #264]	; (8005c18 <xTaskIncrementTick+0x174>)
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	693a      	ldr	r2, [r7, #16]
 8005b14:	429a      	cmp	r2, r3
 8005b16:	d34d      	bcc.n	8005bb4 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005b18:	4b3c      	ldr	r3, [pc, #240]	; (8005c0c <xTaskIncrementTick+0x168>)
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d101      	bne.n	8005b26 <xTaskIncrementTick+0x82>
 8005b22:	2301      	movs	r3, #1
 8005b24:	e000      	b.n	8005b28 <xTaskIncrementTick+0x84>
 8005b26:	2300      	movs	r3, #0
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d004      	beq.n	8005b36 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005b2c:	4b3a      	ldr	r3, [pc, #232]	; (8005c18 <xTaskIncrementTick+0x174>)
 8005b2e:	f04f 32ff 	mov.w	r2, #4294967295
 8005b32:	601a      	str	r2, [r3, #0]
					break;
 8005b34:	e03e      	b.n	8005bb4 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005b36:	4b35      	ldr	r3, [pc, #212]	; (8005c0c <xTaskIncrementTick+0x168>)
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	68db      	ldr	r3, [r3, #12]
 8005b3c:	68db      	ldr	r3, [r3, #12]
 8005b3e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005b40:	68bb      	ldr	r3, [r7, #8]
 8005b42:	685b      	ldr	r3, [r3, #4]
 8005b44:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005b46:	693a      	ldr	r2, [r7, #16]
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	429a      	cmp	r2, r3
 8005b4c:	d203      	bcs.n	8005b56 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005b4e:	4a32      	ldr	r2, [pc, #200]	; (8005c18 <xTaskIncrementTick+0x174>)
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	6013      	str	r3, [r2, #0]
						break;
 8005b54:	e02e      	b.n	8005bb4 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005b56:	68bb      	ldr	r3, [r7, #8]
 8005b58:	3304      	adds	r3, #4
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	f7fe fe1e 	bl	800479c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005b60:	68bb      	ldr	r3, [r7, #8]
 8005b62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d004      	beq.n	8005b72 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005b68:	68bb      	ldr	r3, [r7, #8]
 8005b6a:	3318      	adds	r3, #24
 8005b6c:	4618      	mov	r0, r3
 8005b6e:	f7fe fe15 	bl	800479c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005b72:	68bb      	ldr	r3, [r7, #8]
 8005b74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b76:	2201      	movs	r2, #1
 8005b78:	409a      	lsls	r2, r3
 8005b7a:	4b28      	ldr	r3, [pc, #160]	; (8005c1c <xTaskIncrementTick+0x178>)
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	4313      	orrs	r3, r2
 8005b80:	4a26      	ldr	r2, [pc, #152]	; (8005c1c <xTaskIncrementTick+0x178>)
 8005b82:	6013      	str	r3, [r2, #0]
 8005b84:	68bb      	ldr	r3, [r7, #8]
 8005b86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b88:	4613      	mov	r3, r2
 8005b8a:	009b      	lsls	r3, r3, #2
 8005b8c:	4413      	add	r3, r2
 8005b8e:	009b      	lsls	r3, r3, #2
 8005b90:	4a23      	ldr	r2, [pc, #140]	; (8005c20 <xTaskIncrementTick+0x17c>)
 8005b92:	441a      	add	r2, r3
 8005b94:	68bb      	ldr	r3, [r7, #8]
 8005b96:	3304      	adds	r3, #4
 8005b98:	4619      	mov	r1, r3
 8005b9a:	4610      	mov	r0, r2
 8005b9c:	f7fe fda1 	bl	80046e2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005ba0:	68bb      	ldr	r3, [r7, #8]
 8005ba2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ba4:	4b1f      	ldr	r3, [pc, #124]	; (8005c24 <xTaskIncrementTick+0x180>)
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005baa:	429a      	cmp	r2, r3
 8005bac:	d3b4      	bcc.n	8005b18 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005bae:	2301      	movs	r3, #1
 8005bb0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005bb2:	e7b1      	b.n	8005b18 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005bb4:	4b1b      	ldr	r3, [pc, #108]	; (8005c24 <xTaskIncrementTick+0x180>)
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bba:	4919      	ldr	r1, [pc, #100]	; (8005c20 <xTaskIncrementTick+0x17c>)
 8005bbc:	4613      	mov	r3, r2
 8005bbe:	009b      	lsls	r3, r3, #2
 8005bc0:	4413      	add	r3, r2
 8005bc2:	009b      	lsls	r3, r3, #2
 8005bc4:	440b      	add	r3, r1
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	2b01      	cmp	r3, #1
 8005bca:	d901      	bls.n	8005bd0 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 8005bcc:	2301      	movs	r3, #1
 8005bce:	617b      	str	r3, [r7, #20]

		#if ( configUSE_TICK_HOOK == 1 )
		{
			/* Guard against the tick hook being called when the pended tick
			count is being unwound (when the scheduler is being unlocked). */
			if( uxPendedTicks == ( UBaseType_t ) 0U )
 8005bd0:	4b15      	ldr	r3, [pc, #84]	; (8005c28 <xTaskIncrementTick+0x184>)
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d109      	bne.n	8005bec <xTaskIncrementTick+0x148>
			{
				vApplicationTickHook();
 8005bd8:	f7fa fb59 	bl	800028e <vApplicationTickHook>
 8005bdc:	e006      	b.n	8005bec <xTaskIncrementTick+0x148>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8005bde:	4b12      	ldr	r3, [pc, #72]	; (8005c28 <xTaskIncrementTick+0x184>)
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	3301      	adds	r3, #1
 8005be4:	4a10      	ldr	r2, [pc, #64]	; (8005c28 <xTaskIncrementTick+0x184>)
 8005be6:	6013      	str	r3, [r2, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
 8005be8:	f7fa fb51 	bl	800028e <vApplicationTickHook>
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8005bec:	4b0f      	ldr	r3, [pc, #60]	; (8005c2c <xTaskIncrementTick+0x188>)
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d001      	beq.n	8005bf8 <xTaskIncrementTick+0x154>
		{
			xSwitchRequired = pdTRUE;
 8005bf4:	2301      	movs	r3, #1
 8005bf6:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8005bf8:	697b      	ldr	r3, [r7, #20]
}
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	3718      	adds	r7, #24
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	bd80      	pop	{r7, pc}
 8005c02:	bf00      	nop
 8005c04:	20000704 	.word	0x20000704
 8005c08:	200006e0 	.word	0x200006e0
 8005c0c:	20000694 	.word	0x20000694
 8005c10:	20000698 	.word	0x20000698
 8005c14:	200006f4 	.word	0x200006f4
 8005c18:	200006fc 	.word	0x200006fc
 8005c1c:	200006e4 	.word	0x200006e4
 8005c20:	200005e0 	.word	0x200005e0
 8005c24:	200005dc 	.word	0x200005dc
 8005c28:	200006ec 	.word	0x200006ec
 8005c2c:	200006f0 	.word	0x200006f0

08005c30 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005c30:	b480      	push	{r7}
 8005c32:	b087      	sub	sp, #28
 8005c34:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005c36:	4b27      	ldr	r3, [pc, #156]	; (8005cd4 <vTaskSwitchContext+0xa4>)
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d003      	beq.n	8005c46 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005c3e:	4b26      	ldr	r3, [pc, #152]	; (8005cd8 <vTaskSwitchContext+0xa8>)
 8005c40:	2201      	movs	r2, #1
 8005c42:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005c44:	e03f      	b.n	8005cc6 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8005c46:	4b24      	ldr	r3, [pc, #144]	; (8005cd8 <vTaskSwitchContext+0xa8>)
 8005c48:	2200      	movs	r2, #0
 8005c4a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8005c4c:	4b23      	ldr	r3, [pc, #140]	; (8005cdc <vTaskSwitchContext+0xac>)
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	fab3 f383 	clz	r3, r3
 8005c58:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8005c5a:	7afb      	ldrb	r3, [r7, #11]
 8005c5c:	f1c3 031f 	rsb	r3, r3, #31
 8005c60:	617b      	str	r3, [r7, #20]
 8005c62:	491f      	ldr	r1, [pc, #124]	; (8005ce0 <vTaskSwitchContext+0xb0>)
 8005c64:	697a      	ldr	r2, [r7, #20]
 8005c66:	4613      	mov	r3, r2
 8005c68:	009b      	lsls	r3, r3, #2
 8005c6a:	4413      	add	r3, r2
 8005c6c:	009b      	lsls	r3, r3, #2
 8005c6e:	440b      	add	r3, r1
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d10a      	bne.n	8005c8c <vTaskSwitchContext+0x5c>
	__asm volatile
 8005c76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c7a:	f383 8811 	msr	BASEPRI, r3
 8005c7e:	f3bf 8f6f 	isb	sy
 8005c82:	f3bf 8f4f 	dsb	sy
 8005c86:	607b      	str	r3, [r7, #4]
}
 8005c88:	bf00      	nop
 8005c8a:	e7fe      	b.n	8005c8a <vTaskSwitchContext+0x5a>
 8005c8c:	697a      	ldr	r2, [r7, #20]
 8005c8e:	4613      	mov	r3, r2
 8005c90:	009b      	lsls	r3, r3, #2
 8005c92:	4413      	add	r3, r2
 8005c94:	009b      	lsls	r3, r3, #2
 8005c96:	4a12      	ldr	r2, [pc, #72]	; (8005ce0 <vTaskSwitchContext+0xb0>)
 8005c98:	4413      	add	r3, r2
 8005c9a:	613b      	str	r3, [r7, #16]
 8005c9c:	693b      	ldr	r3, [r7, #16]
 8005c9e:	685b      	ldr	r3, [r3, #4]
 8005ca0:	685a      	ldr	r2, [r3, #4]
 8005ca2:	693b      	ldr	r3, [r7, #16]
 8005ca4:	605a      	str	r2, [r3, #4]
 8005ca6:	693b      	ldr	r3, [r7, #16]
 8005ca8:	685a      	ldr	r2, [r3, #4]
 8005caa:	693b      	ldr	r3, [r7, #16]
 8005cac:	3308      	adds	r3, #8
 8005cae:	429a      	cmp	r2, r3
 8005cb0:	d104      	bne.n	8005cbc <vTaskSwitchContext+0x8c>
 8005cb2:	693b      	ldr	r3, [r7, #16]
 8005cb4:	685b      	ldr	r3, [r3, #4]
 8005cb6:	685a      	ldr	r2, [r3, #4]
 8005cb8:	693b      	ldr	r3, [r7, #16]
 8005cba:	605a      	str	r2, [r3, #4]
 8005cbc:	693b      	ldr	r3, [r7, #16]
 8005cbe:	685b      	ldr	r3, [r3, #4]
 8005cc0:	68db      	ldr	r3, [r3, #12]
 8005cc2:	4a08      	ldr	r2, [pc, #32]	; (8005ce4 <vTaskSwitchContext+0xb4>)
 8005cc4:	6013      	str	r3, [r2, #0]
}
 8005cc6:	bf00      	nop
 8005cc8:	371c      	adds	r7, #28
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd0:	4770      	bx	lr
 8005cd2:	bf00      	nop
 8005cd4:	20000704 	.word	0x20000704
 8005cd8:	200006f0 	.word	0x200006f0
 8005cdc:	200006e4 	.word	0x200006e4
 8005ce0:	200005e0 	.word	0x200005e0
 8005ce4:	200005dc 	.word	0x200005dc

08005ce8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005ce8:	b580      	push	{r7, lr}
 8005cea:	b084      	sub	sp, #16
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]
 8005cf0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d10a      	bne.n	8005d0e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8005cf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cfc:	f383 8811 	msr	BASEPRI, r3
 8005d00:	f3bf 8f6f 	isb	sy
 8005d04:	f3bf 8f4f 	dsb	sy
 8005d08:	60fb      	str	r3, [r7, #12]
}
 8005d0a:	bf00      	nop
 8005d0c:	e7fe      	b.n	8005d0c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005d0e:	4b07      	ldr	r3, [pc, #28]	; (8005d2c <vTaskPlaceOnEventList+0x44>)
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	3318      	adds	r3, #24
 8005d14:	4619      	mov	r1, r3
 8005d16:	6878      	ldr	r0, [r7, #4]
 8005d18:	f7fe fd07 	bl	800472a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005d1c:	2101      	movs	r1, #1
 8005d1e:	6838      	ldr	r0, [r7, #0]
 8005d20:	f000 fb98 	bl	8006454 <prvAddCurrentTaskToDelayedList>
}
 8005d24:	bf00      	nop
 8005d26:	3710      	adds	r7, #16
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	bd80      	pop	{r7, pc}
 8005d2c:	200005dc 	.word	0x200005dc

08005d30 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005d30:	b580      	push	{r7, lr}
 8005d32:	b086      	sub	sp, #24
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	60f8      	str	r0, [r7, #12]
 8005d38:	60b9      	str	r1, [r7, #8]
 8005d3a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d10a      	bne.n	8005d58 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8005d42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d46:	f383 8811 	msr	BASEPRI, r3
 8005d4a:	f3bf 8f6f 	isb	sy
 8005d4e:	f3bf 8f4f 	dsb	sy
 8005d52:	617b      	str	r3, [r7, #20]
}
 8005d54:	bf00      	nop
 8005d56:	e7fe      	b.n	8005d56 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005d58:	4b0a      	ldr	r3, [pc, #40]	; (8005d84 <vTaskPlaceOnEventListRestricted+0x54>)
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	3318      	adds	r3, #24
 8005d5e:	4619      	mov	r1, r3
 8005d60:	68f8      	ldr	r0, [r7, #12]
 8005d62:	f7fe fcbe 	bl	80046e2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d002      	beq.n	8005d72 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8005d6c:	f04f 33ff 	mov.w	r3, #4294967295
 8005d70:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005d72:	6879      	ldr	r1, [r7, #4]
 8005d74:	68b8      	ldr	r0, [r7, #8]
 8005d76:	f000 fb6d 	bl	8006454 <prvAddCurrentTaskToDelayedList>
	}
 8005d7a:	bf00      	nop
 8005d7c:	3718      	adds	r7, #24
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	bd80      	pop	{r7, pc}
 8005d82:	bf00      	nop
 8005d84:	200005dc 	.word	0x200005dc

08005d88 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	b086      	sub	sp, #24
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	68db      	ldr	r3, [r3, #12]
 8005d94:	68db      	ldr	r3, [r3, #12]
 8005d96:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005d98:	693b      	ldr	r3, [r7, #16]
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d10a      	bne.n	8005db4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8005d9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005da2:	f383 8811 	msr	BASEPRI, r3
 8005da6:	f3bf 8f6f 	isb	sy
 8005daa:	f3bf 8f4f 	dsb	sy
 8005dae:	60fb      	str	r3, [r7, #12]
}
 8005db0:	bf00      	nop
 8005db2:	e7fe      	b.n	8005db2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005db4:	693b      	ldr	r3, [r7, #16]
 8005db6:	3318      	adds	r3, #24
 8005db8:	4618      	mov	r0, r3
 8005dba:	f7fe fcef 	bl	800479c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005dbe:	4b1d      	ldr	r3, [pc, #116]	; (8005e34 <xTaskRemoveFromEventList+0xac>)
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d11c      	bne.n	8005e00 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005dc6:	693b      	ldr	r3, [r7, #16]
 8005dc8:	3304      	adds	r3, #4
 8005dca:	4618      	mov	r0, r3
 8005dcc:	f7fe fce6 	bl	800479c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005dd0:	693b      	ldr	r3, [r7, #16]
 8005dd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dd4:	2201      	movs	r2, #1
 8005dd6:	409a      	lsls	r2, r3
 8005dd8:	4b17      	ldr	r3, [pc, #92]	; (8005e38 <xTaskRemoveFromEventList+0xb0>)
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	4313      	orrs	r3, r2
 8005dde:	4a16      	ldr	r2, [pc, #88]	; (8005e38 <xTaskRemoveFromEventList+0xb0>)
 8005de0:	6013      	str	r3, [r2, #0]
 8005de2:	693b      	ldr	r3, [r7, #16]
 8005de4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005de6:	4613      	mov	r3, r2
 8005de8:	009b      	lsls	r3, r3, #2
 8005dea:	4413      	add	r3, r2
 8005dec:	009b      	lsls	r3, r3, #2
 8005dee:	4a13      	ldr	r2, [pc, #76]	; (8005e3c <xTaskRemoveFromEventList+0xb4>)
 8005df0:	441a      	add	r2, r3
 8005df2:	693b      	ldr	r3, [r7, #16]
 8005df4:	3304      	adds	r3, #4
 8005df6:	4619      	mov	r1, r3
 8005df8:	4610      	mov	r0, r2
 8005dfa:	f7fe fc72 	bl	80046e2 <vListInsertEnd>
 8005dfe:	e005      	b.n	8005e0c <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005e00:	693b      	ldr	r3, [r7, #16]
 8005e02:	3318      	adds	r3, #24
 8005e04:	4619      	mov	r1, r3
 8005e06:	480e      	ldr	r0, [pc, #56]	; (8005e40 <xTaskRemoveFromEventList+0xb8>)
 8005e08:	f7fe fc6b 	bl	80046e2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005e0c:	693b      	ldr	r3, [r7, #16]
 8005e0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e10:	4b0c      	ldr	r3, [pc, #48]	; (8005e44 <xTaskRemoveFromEventList+0xbc>)
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e16:	429a      	cmp	r2, r3
 8005e18:	d905      	bls.n	8005e26 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005e1a:	2301      	movs	r3, #1
 8005e1c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005e1e:	4b0a      	ldr	r3, [pc, #40]	; (8005e48 <xTaskRemoveFromEventList+0xc0>)
 8005e20:	2201      	movs	r2, #1
 8005e22:	601a      	str	r2, [r3, #0]
 8005e24:	e001      	b.n	8005e2a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8005e26:	2300      	movs	r3, #0
 8005e28:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8005e2a:	697b      	ldr	r3, [r7, #20]
}
 8005e2c:	4618      	mov	r0, r3
 8005e2e:	3718      	adds	r7, #24
 8005e30:	46bd      	mov	sp, r7
 8005e32:	bd80      	pop	{r7, pc}
 8005e34:	20000704 	.word	0x20000704
 8005e38:	200006e4 	.word	0x200006e4
 8005e3c:	200005e0 	.word	0x200005e0
 8005e40:	2000069c 	.word	0x2000069c
 8005e44:	200005dc 	.word	0x200005dc
 8005e48:	200006f0 	.word	0x200006f0

08005e4c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005e4c:	b480      	push	{r7}
 8005e4e:	b083      	sub	sp, #12
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005e54:	4b06      	ldr	r3, [pc, #24]	; (8005e70 <vTaskInternalSetTimeOutState+0x24>)
 8005e56:	681a      	ldr	r2, [r3, #0]
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005e5c:	4b05      	ldr	r3, [pc, #20]	; (8005e74 <vTaskInternalSetTimeOutState+0x28>)
 8005e5e:	681a      	ldr	r2, [r3, #0]
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	605a      	str	r2, [r3, #4]
}
 8005e64:	bf00      	nop
 8005e66:	370c      	adds	r7, #12
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6e:	4770      	bx	lr
 8005e70:	200006f4 	.word	0x200006f4
 8005e74:	200006e0 	.word	0x200006e0

08005e78 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b088      	sub	sp, #32
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
 8005e80:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d10a      	bne.n	8005e9e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8005e88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e8c:	f383 8811 	msr	BASEPRI, r3
 8005e90:	f3bf 8f6f 	isb	sy
 8005e94:	f3bf 8f4f 	dsb	sy
 8005e98:	613b      	str	r3, [r7, #16]
}
 8005e9a:	bf00      	nop
 8005e9c:	e7fe      	b.n	8005e9c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005e9e:	683b      	ldr	r3, [r7, #0]
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d10a      	bne.n	8005eba <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8005ea4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ea8:	f383 8811 	msr	BASEPRI, r3
 8005eac:	f3bf 8f6f 	isb	sy
 8005eb0:	f3bf 8f4f 	dsb	sy
 8005eb4:	60fb      	str	r3, [r7, #12]
}
 8005eb6:	bf00      	nop
 8005eb8:	e7fe      	b.n	8005eb8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8005eba:	f000 ff53 	bl	8006d64 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005ebe:	4b1d      	ldr	r3, [pc, #116]	; (8005f34 <xTaskCheckForTimeOut+0xbc>)
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	685b      	ldr	r3, [r3, #4]
 8005ec8:	69ba      	ldr	r2, [r7, #24]
 8005eca:	1ad3      	subs	r3, r2, r3
 8005ecc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005ece:	683b      	ldr	r3, [r7, #0]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ed6:	d102      	bne.n	8005ede <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005ed8:	2300      	movs	r3, #0
 8005eda:	61fb      	str	r3, [r7, #28]
 8005edc:	e023      	b.n	8005f26 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681a      	ldr	r2, [r3, #0]
 8005ee2:	4b15      	ldr	r3, [pc, #84]	; (8005f38 <xTaskCheckForTimeOut+0xc0>)
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	429a      	cmp	r2, r3
 8005ee8:	d007      	beq.n	8005efa <xTaskCheckForTimeOut+0x82>
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	685b      	ldr	r3, [r3, #4]
 8005eee:	69ba      	ldr	r2, [r7, #24]
 8005ef0:	429a      	cmp	r2, r3
 8005ef2:	d302      	bcc.n	8005efa <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005ef4:	2301      	movs	r3, #1
 8005ef6:	61fb      	str	r3, [r7, #28]
 8005ef8:	e015      	b.n	8005f26 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005efa:	683b      	ldr	r3, [r7, #0]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	697a      	ldr	r2, [r7, #20]
 8005f00:	429a      	cmp	r2, r3
 8005f02:	d20b      	bcs.n	8005f1c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	681a      	ldr	r2, [r3, #0]
 8005f08:	697b      	ldr	r3, [r7, #20]
 8005f0a:	1ad2      	subs	r2, r2, r3
 8005f0c:	683b      	ldr	r3, [r7, #0]
 8005f0e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005f10:	6878      	ldr	r0, [r7, #4]
 8005f12:	f7ff ff9b 	bl	8005e4c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005f16:	2300      	movs	r3, #0
 8005f18:	61fb      	str	r3, [r7, #28]
 8005f1a:	e004      	b.n	8005f26 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8005f1c:	683b      	ldr	r3, [r7, #0]
 8005f1e:	2200      	movs	r2, #0
 8005f20:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005f22:	2301      	movs	r3, #1
 8005f24:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005f26:	f000 ff4d 	bl	8006dc4 <vPortExitCritical>

	return xReturn;
 8005f2a:	69fb      	ldr	r3, [r7, #28]
}
 8005f2c:	4618      	mov	r0, r3
 8005f2e:	3720      	adds	r7, #32
 8005f30:	46bd      	mov	sp, r7
 8005f32:	bd80      	pop	{r7, pc}
 8005f34:	200006e0 	.word	0x200006e0
 8005f38:	200006f4 	.word	0x200006f4

08005f3c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005f3c:	b480      	push	{r7}
 8005f3e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005f40:	4b03      	ldr	r3, [pc, #12]	; (8005f50 <vTaskMissedYield+0x14>)
 8005f42:	2201      	movs	r2, #1
 8005f44:	601a      	str	r2, [r3, #0]
}
 8005f46:	bf00      	nop
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4e:	4770      	bx	lr
 8005f50:	200006f0 	.word	0x200006f0

08005f54 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005f54:	b580      	push	{r7, lr}
 8005f56:	b082      	sub	sp, #8
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005f5c:	f000 f854 	bl	8006008 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005f60:	4b07      	ldr	r3, [pc, #28]	; (8005f80 <prvIdleTask+0x2c>)
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	2b01      	cmp	r3, #1
 8005f66:	d907      	bls.n	8005f78 <prvIdleTask+0x24>
			{
				taskYIELD();
 8005f68:	4b06      	ldr	r3, [pc, #24]	; (8005f84 <prvIdleTask+0x30>)
 8005f6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f6e:	601a      	str	r2, [r3, #0]
 8005f70:	f3bf 8f4f 	dsb	sy
 8005f74:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 8005f78:	f7fa f982 	bl	8000280 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8005f7c:	e7ee      	b.n	8005f5c <prvIdleTask+0x8>
 8005f7e:	bf00      	nop
 8005f80:	200005e0 	.word	0x200005e0
 8005f84:	e000ed04 	.word	0xe000ed04

08005f88 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005f88:	b580      	push	{r7, lr}
 8005f8a:	b082      	sub	sp, #8
 8005f8c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005f8e:	2300      	movs	r3, #0
 8005f90:	607b      	str	r3, [r7, #4]
 8005f92:	e00c      	b.n	8005fae <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005f94:	687a      	ldr	r2, [r7, #4]
 8005f96:	4613      	mov	r3, r2
 8005f98:	009b      	lsls	r3, r3, #2
 8005f9a:	4413      	add	r3, r2
 8005f9c:	009b      	lsls	r3, r3, #2
 8005f9e:	4a12      	ldr	r2, [pc, #72]	; (8005fe8 <prvInitialiseTaskLists+0x60>)
 8005fa0:	4413      	add	r3, r2
 8005fa2:	4618      	mov	r0, r3
 8005fa4:	f7fe fb70 	bl	8004688 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	3301      	adds	r3, #1
 8005fac:	607b      	str	r3, [r7, #4]
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	2b06      	cmp	r3, #6
 8005fb2:	d9ef      	bls.n	8005f94 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005fb4:	480d      	ldr	r0, [pc, #52]	; (8005fec <prvInitialiseTaskLists+0x64>)
 8005fb6:	f7fe fb67 	bl	8004688 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005fba:	480d      	ldr	r0, [pc, #52]	; (8005ff0 <prvInitialiseTaskLists+0x68>)
 8005fbc:	f7fe fb64 	bl	8004688 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005fc0:	480c      	ldr	r0, [pc, #48]	; (8005ff4 <prvInitialiseTaskLists+0x6c>)
 8005fc2:	f7fe fb61 	bl	8004688 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005fc6:	480c      	ldr	r0, [pc, #48]	; (8005ff8 <prvInitialiseTaskLists+0x70>)
 8005fc8:	f7fe fb5e 	bl	8004688 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005fcc:	480b      	ldr	r0, [pc, #44]	; (8005ffc <prvInitialiseTaskLists+0x74>)
 8005fce:	f7fe fb5b 	bl	8004688 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005fd2:	4b0b      	ldr	r3, [pc, #44]	; (8006000 <prvInitialiseTaskLists+0x78>)
 8005fd4:	4a05      	ldr	r2, [pc, #20]	; (8005fec <prvInitialiseTaskLists+0x64>)
 8005fd6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005fd8:	4b0a      	ldr	r3, [pc, #40]	; (8006004 <prvInitialiseTaskLists+0x7c>)
 8005fda:	4a05      	ldr	r2, [pc, #20]	; (8005ff0 <prvInitialiseTaskLists+0x68>)
 8005fdc:	601a      	str	r2, [r3, #0]
}
 8005fde:	bf00      	nop
 8005fe0:	3708      	adds	r7, #8
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	bd80      	pop	{r7, pc}
 8005fe6:	bf00      	nop
 8005fe8:	200005e0 	.word	0x200005e0
 8005fec:	2000066c 	.word	0x2000066c
 8005ff0:	20000680 	.word	0x20000680
 8005ff4:	2000069c 	.word	0x2000069c
 8005ff8:	200006b0 	.word	0x200006b0
 8005ffc:	200006c8 	.word	0x200006c8
 8006000:	20000694 	.word	0x20000694
 8006004:	20000698 	.word	0x20000698

08006008 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006008:	b580      	push	{r7, lr}
 800600a:	b082      	sub	sp, #8
 800600c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800600e:	e019      	b.n	8006044 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006010:	f000 fea8 	bl	8006d64 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8006014:	4b10      	ldr	r3, [pc, #64]	; (8006058 <prvCheckTasksWaitingTermination+0x50>)
 8006016:	68db      	ldr	r3, [r3, #12]
 8006018:	68db      	ldr	r3, [r3, #12]
 800601a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	3304      	adds	r3, #4
 8006020:	4618      	mov	r0, r3
 8006022:	f7fe fbbb 	bl	800479c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006026:	4b0d      	ldr	r3, [pc, #52]	; (800605c <prvCheckTasksWaitingTermination+0x54>)
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	3b01      	subs	r3, #1
 800602c:	4a0b      	ldr	r2, [pc, #44]	; (800605c <prvCheckTasksWaitingTermination+0x54>)
 800602e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006030:	4b0b      	ldr	r3, [pc, #44]	; (8006060 <prvCheckTasksWaitingTermination+0x58>)
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	3b01      	subs	r3, #1
 8006036:	4a0a      	ldr	r2, [pc, #40]	; (8006060 <prvCheckTasksWaitingTermination+0x58>)
 8006038:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800603a:	f000 fec3 	bl	8006dc4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800603e:	6878      	ldr	r0, [r7, #4]
 8006040:	f000 f810 	bl	8006064 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006044:	4b06      	ldr	r3, [pc, #24]	; (8006060 <prvCheckTasksWaitingTermination+0x58>)
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	2b00      	cmp	r3, #0
 800604a:	d1e1      	bne.n	8006010 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800604c:	bf00      	nop
 800604e:	bf00      	nop
 8006050:	3708      	adds	r7, #8
 8006052:	46bd      	mov	sp, r7
 8006054:	bd80      	pop	{r7, pc}
 8006056:	bf00      	nop
 8006058:	200006b0 	.word	0x200006b0
 800605c:	200006dc 	.word	0x200006dc
 8006060:	200006c4 	.word	0x200006c4

08006064 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006064:	b580      	push	{r7, lr}
 8006066:	b084      	sub	sp, #16
 8006068:	af00      	add	r7, sp, #0
 800606a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006072:	2b00      	cmp	r3, #0
 8006074:	d108      	bne.n	8006088 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800607a:	4618      	mov	r0, r3
 800607c:	f001 f858 	bl	8007130 <vPortFree>
				vPortFree( pxTCB );
 8006080:	6878      	ldr	r0, [r7, #4]
 8006082:	f001 f855 	bl	8007130 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006086:	e018      	b.n	80060ba <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800608e:	2b01      	cmp	r3, #1
 8006090:	d103      	bne.n	800609a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006092:	6878      	ldr	r0, [r7, #4]
 8006094:	f001 f84c 	bl	8007130 <vPortFree>
	}
 8006098:	e00f      	b.n	80060ba <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80060a0:	2b02      	cmp	r3, #2
 80060a2:	d00a      	beq.n	80060ba <prvDeleteTCB+0x56>
	__asm volatile
 80060a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060a8:	f383 8811 	msr	BASEPRI, r3
 80060ac:	f3bf 8f6f 	isb	sy
 80060b0:	f3bf 8f4f 	dsb	sy
 80060b4:	60fb      	str	r3, [r7, #12]
}
 80060b6:	bf00      	nop
 80060b8:	e7fe      	b.n	80060b8 <prvDeleteTCB+0x54>
	}
 80060ba:	bf00      	nop
 80060bc:	3710      	adds	r7, #16
 80060be:	46bd      	mov	sp, r7
 80060c0:	bd80      	pop	{r7, pc}
	...

080060c4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80060c4:	b480      	push	{r7}
 80060c6:	b083      	sub	sp, #12
 80060c8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80060ca:	4b0f      	ldr	r3, [pc, #60]	; (8006108 <prvResetNextTaskUnblockTime+0x44>)
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d101      	bne.n	80060d8 <prvResetNextTaskUnblockTime+0x14>
 80060d4:	2301      	movs	r3, #1
 80060d6:	e000      	b.n	80060da <prvResetNextTaskUnblockTime+0x16>
 80060d8:	2300      	movs	r3, #0
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d004      	beq.n	80060e8 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80060de:	4b0b      	ldr	r3, [pc, #44]	; (800610c <prvResetNextTaskUnblockTime+0x48>)
 80060e0:	f04f 32ff 	mov.w	r2, #4294967295
 80060e4:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80060e6:	e008      	b.n	80060fa <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80060e8:	4b07      	ldr	r3, [pc, #28]	; (8006108 <prvResetNextTaskUnblockTime+0x44>)
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	68db      	ldr	r3, [r3, #12]
 80060ee:	68db      	ldr	r3, [r3, #12]
 80060f0:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	685b      	ldr	r3, [r3, #4]
 80060f6:	4a05      	ldr	r2, [pc, #20]	; (800610c <prvResetNextTaskUnblockTime+0x48>)
 80060f8:	6013      	str	r3, [r2, #0]
}
 80060fa:	bf00      	nop
 80060fc:	370c      	adds	r7, #12
 80060fe:	46bd      	mov	sp, r7
 8006100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006104:	4770      	bx	lr
 8006106:	bf00      	nop
 8006108:	20000694 	.word	0x20000694
 800610c:	200006fc 	.word	0x200006fc

08006110 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006110:	b480      	push	{r7}
 8006112:	b083      	sub	sp, #12
 8006114:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006116:	4b0b      	ldr	r3, [pc, #44]	; (8006144 <xTaskGetSchedulerState+0x34>)
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	2b00      	cmp	r3, #0
 800611c:	d102      	bne.n	8006124 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800611e:	2301      	movs	r3, #1
 8006120:	607b      	str	r3, [r7, #4]
 8006122:	e008      	b.n	8006136 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006124:	4b08      	ldr	r3, [pc, #32]	; (8006148 <xTaskGetSchedulerState+0x38>)
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	2b00      	cmp	r3, #0
 800612a:	d102      	bne.n	8006132 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800612c:	2302      	movs	r3, #2
 800612e:	607b      	str	r3, [r7, #4]
 8006130:	e001      	b.n	8006136 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006132:	2300      	movs	r3, #0
 8006134:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006136:	687b      	ldr	r3, [r7, #4]
	}
 8006138:	4618      	mov	r0, r3
 800613a:	370c      	adds	r7, #12
 800613c:	46bd      	mov	sp, r7
 800613e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006142:	4770      	bx	lr
 8006144:	200006e8 	.word	0x200006e8
 8006148:	20000704 	.word	0x20000704

0800614c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800614c:	b580      	push	{r7, lr}
 800614e:	b086      	sub	sp, #24
 8006150:	af00      	add	r7, sp, #0
 8006152:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006158:	2300      	movs	r3, #0
 800615a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2b00      	cmp	r3, #0
 8006160:	d06e      	beq.n	8006240 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006162:	4b3a      	ldr	r3, [pc, #232]	; (800624c <xTaskPriorityDisinherit+0x100>)
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	693a      	ldr	r2, [r7, #16]
 8006168:	429a      	cmp	r2, r3
 800616a:	d00a      	beq.n	8006182 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800616c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006170:	f383 8811 	msr	BASEPRI, r3
 8006174:	f3bf 8f6f 	isb	sy
 8006178:	f3bf 8f4f 	dsb	sy
 800617c:	60fb      	str	r3, [r7, #12]
}
 800617e:	bf00      	nop
 8006180:	e7fe      	b.n	8006180 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006182:	693b      	ldr	r3, [r7, #16]
 8006184:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006186:	2b00      	cmp	r3, #0
 8006188:	d10a      	bne.n	80061a0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800618a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800618e:	f383 8811 	msr	BASEPRI, r3
 8006192:	f3bf 8f6f 	isb	sy
 8006196:	f3bf 8f4f 	dsb	sy
 800619a:	60bb      	str	r3, [r7, #8]
}
 800619c:	bf00      	nop
 800619e:	e7fe      	b.n	800619e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80061a0:	693b      	ldr	r3, [r7, #16]
 80061a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80061a4:	1e5a      	subs	r2, r3, #1
 80061a6:	693b      	ldr	r3, [r7, #16]
 80061a8:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80061aa:	693b      	ldr	r3, [r7, #16]
 80061ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061ae:	693b      	ldr	r3, [r7, #16]
 80061b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061b2:	429a      	cmp	r2, r3
 80061b4:	d044      	beq.n	8006240 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80061b6:	693b      	ldr	r3, [r7, #16]
 80061b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d140      	bne.n	8006240 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80061be:	693b      	ldr	r3, [r7, #16]
 80061c0:	3304      	adds	r3, #4
 80061c2:	4618      	mov	r0, r3
 80061c4:	f7fe faea 	bl	800479c <uxListRemove>
 80061c8:	4603      	mov	r3, r0
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d115      	bne.n	80061fa <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80061ce:	693b      	ldr	r3, [r7, #16]
 80061d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061d2:	491f      	ldr	r1, [pc, #124]	; (8006250 <xTaskPriorityDisinherit+0x104>)
 80061d4:	4613      	mov	r3, r2
 80061d6:	009b      	lsls	r3, r3, #2
 80061d8:	4413      	add	r3, r2
 80061da:	009b      	lsls	r3, r3, #2
 80061dc:	440b      	add	r3, r1
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d10a      	bne.n	80061fa <xTaskPriorityDisinherit+0xae>
 80061e4:	693b      	ldr	r3, [r7, #16]
 80061e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061e8:	2201      	movs	r2, #1
 80061ea:	fa02 f303 	lsl.w	r3, r2, r3
 80061ee:	43da      	mvns	r2, r3
 80061f0:	4b18      	ldr	r3, [pc, #96]	; (8006254 <xTaskPriorityDisinherit+0x108>)
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	4013      	ands	r3, r2
 80061f6:	4a17      	ldr	r2, [pc, #92]	; (8006254 <xTaskPriorityDisinherit+0x108>)
 80061f8:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80061fa:	693b      	ldr	r3, [r7, #16]
 80061fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80061fe:	693b      	ldr	r3, [r7, #16]
 8006200:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006202:	693b      	ldr	r3, [r7, #16]
 8006204:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006206:	f1c3 0207 	rsb	r2, r3, #7
 800620a:	693b      	ldr	r3, [r7, #16]
 800620c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800620e:	693b      	ldr	r3, [r7, #16]
 8006210:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006212:	2201      	movs	r2, #1
 8006214:	409a      	lsls	r2, r3
 8006216:	4b0f      	ldr	r3, [pc, #60]	; (8006254 <xTaskPriorityDisinherit+0x108>)
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	4313      	orrs	r3, r2
 800621c:	4a0d      	ldr	r2, [pc, #52]	; (8006254 <xTaskPriorityDisinherit+0x108>)
 800621e:	6013      	str	r3, [r2, #0]
 8006220:	693b      	ldr	r3, [r7, #16]
 8006222:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006224:	4613      	mov	r3, r2
 8006226:	009b      	lsls	r3, r3, #2
 8006228:	4413      	add	r3, r2
 800622a:	009b      	lsls	r3, r3, #2
 800622c:	4a08      	ldr	r2, [pc, #32]	; (8006250 <xTaskPriorityDisinherit+0x104>)
 800622e:	441a      	add	r2, r3
 8006230:	693b      	ldr	r3, [r7, #16]
 8006232:	3304      	adds	r3, #4
 8006234:	4619      	mov	r1, r3
 8006236:	4610      	mov	r0, r2
 8006238:	f7fe fa53 	bl	80046e2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800623c:	2301      	movs	r3, #1
 800623e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006240:	697b      	ldr	r3, [r7, #20]
	}
 8006242:	4618      	mov	r0, r3
 8006244:	3718      	adds	r7, #24
 8006246:	46bd      	mov	sp, r7
 8006248:	bd80      	pop	{r7, pc}
 800624a:	bf00      	nop
 800624c:	200005dc 	.word	0x200005dc
 8006250:	200005e0 	.word	0x200005e0
 8006254:	200006e4 	.word	0x200006e4

08006258 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8006258:	b580      	push	{r7, lr}
 800625a:	b086      	sub	sp, #24
 800625c:	af00      	add	r7, sp, #0
 800625e:	60f8      	str	r0, [r7, #12]
 8006260:	60b9      	str	r1, [r7, #8]
 8006262:	607a      	str	r2, [r7, #4]
 8006264:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8006266:	f000 fd7d 	bl	8006d64 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800626a:	4b26      	ldr	r3, [pc, #152]	; (8006304 <xTaskNotifyWait+0xac>)
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006272:	b2db      	uxtb	r3, r3
 8006274:	2b02      	cmp	r3, #2
 8006276:	d01a      	beq.n	80062ae <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8006278:	4b22      	ldr	r3, [pc, #136]	; (8006304 <xTaskNotifyWait+0xac>)
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800627e:	68fa      	ldr	r2, [r7, #12]
 8006280:	43d2      	mvns	r2, r2
 8006282:	400a      	ands	r2, r1
 8006284:	64da      	str	r2, [r3, #76]	; 0x4c

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8006286:	4b1f      	ldr	r3, [pc, #124]	; (8006304 <xTaskNotifyWait+0xac>)
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	2201      	movs	r2, #1
 800628c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

				if( xTicksToWait > ( TickType_t ) 0 )
 8006290:	683b      	ldr	r3, [r7, #0]
 8006292:	2b00      	cmp	r3, #0
 8006294:	d00b      	beq.n	80062ae <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006296:	2101      	movs	r1, #1
 8006298:	6838      	ldr	r0, [r7, #0]
 800629a:	f000 f8db 	bl	8006454 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800629e:	4b1a      	ldr	r3, [pc, #104]	; (8006308 <xTaskNotifyWait+0xb0>)
 80062a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80062a4:	601a      	str	r2, [r3, #0]
 80062a6:	f3bf 8f4f 	dsb	sy
 80062aa:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80062ae:	f000 fd89 	bl	8006dc4 <vPortExitCritical>

		taskENTER_CRITICAL();
 80062b2:	f000 fd57 	bl	8006d64 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d004      	beq.n	80062c6 <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 80062bc:	4b11      	ldr	r3, [pc, #68]	; (8006304 <xTaskNotifyWait+0xac>)
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 80062c6:	4b0f      	ldr	r3, [pc, #60]	; (8006304 <xTaskNotifyWait+0xac>)
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80062ce:	b2db      	uxtb	r3, r3
 80062d0:	2b02      	cmp	r3, #2
 80062d2:	d002      	beq.n	80062da <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 80062d4:	2300      	movs	r3, #0
 80062d6:	617b      	str	r3, [r7, #20]
 80062d8:	e008      	b.n	80062ec <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 80062da:	4b0a      	ldr	r3, [pc, #40]	; (8006304 <xTaskNotifyWait+0xac>)
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80062e0:	68ba      	ldr	r2, [r7, #8]
 80062e2:	43d2      	mvns	r2, r2
 80062e4:	400a      	ands	r2, r1
 80062e6:	64da      	str	r2, [r3, #76]	; 0x4c
				xReturn = pdTRUE;
 80062e8:	2301      	movs	r3, #1
 80062ea:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80062ec:	4b05      	ldr	r3, [pc, #20]	; (8006304 <xTaskNotifyWait+0xac>)
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	2200      	movs	r2, #0
 80062f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
		}
		taskEXIT_CRITICAL();
 80062f6:	f000 fd65 	bl	8006dc4 <vPortExitCritical>

		return xReturn;
 80062fa:	697b      	ldr	r3, [r7, #20]
	}
 80062fc:	4618      	mov	r0, r3
 80062fe:	3718      	adds	r7, #24
 8006300:	46bd      	mov	sp, r7
 8006302:	bd80      	pop	{r7, pc}
 8006304:	200005dc 	.word	0x200005dc
 8006308:	e000ed04 	.word	0xe000ed04

0800630c <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800630c:	b580      	push	{r7, lr}
 800630e:	b08a      	sub	sp, #40	; 0x28
 8006310:	af00      	add	r7, sp, #0
 8006312:	60f8      	str	r0, [r7, #12]
 8006314:	60b9      	str	r1, [r7, #8]
 8006316:	603b      	str	r3, [r7, #0]
 8006318:	4613      	mov	r3, r2
 800631a:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 800631c:	2301      	movs	r3, #1
 800631e:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	2b00      	cmp	r3, #0
 8006324:	d10a      	bne.n	800633c <xTaskGenericNotify+0x30>
	__asm volatile
 8006326:	f04f 0350 	mov.w	r3, #80	; 0x50
 800632a:	f383 8811 	msr	BASEPRI, r3
 800632e:	f3bf 8f6f 	isb	sy
 8006332:	f3bf 8f4f 	dsb	sy
 8006336:	61bb      	str	r3, [r7, #24]
}
 8006338:	bf00      	nop
 800633a:	e7fe      	b.n	800633a <xTaskGenericNotify+0x2e>
		pxTCB = ( TCB_t * ) xTaskToNotify;
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8006340:	f000 fd10 	bl	8006d64 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8006344:	683b      	ldr	r3, [r7, #0]
 8006346:	2b00      	cmp	r3, #0
 8006348:	d003      	beq.n	8006352 <xTaskGenericNotify+0x46>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800634a:	6a3b      	ldr	r3, [r7, #32]
 800634c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800634e:	683b      	ldr	r3, [r7, #0]
 8006350:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8006352:	6a3b      	ldr	r3, [r7, #32]
 8006354:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006358:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800635a:	6a3b      	ldr	r3, [r7, #32]
 800635c:	2202      	movs	r2, #2
 800635e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

			switch( eAction )
 8006362:	79fb      	ldrb	r3, [r7, #7]
 8006364:	2b04      	cmp	r3, #4
 8006366:	d828      	bhi.n	80063ba <xTaskGenericNotify+0xae>
 8006368:	a201      	add	r2, pc, #4	; (adr r2, 8006370 <xTaskGenericNotify+0x64>)
 800636a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800636e:	bf00      	nop
 8006370:	080063bb 	.word	0x080063bb
 8006374:	08006385 	.word	0x08006385
 8006378:	08006393 	.word	0x08006393
 800637c:	0800639f 	.word	0x0800639f
 8006380:	080063a7 	.word	0x080063a7
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8006384:	6a3b      	ldr	r3, [r7, #32]
 8006386:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006388:	68bb      	ldr	r3, [r7, #8]
 800638a:	431a      	orrs	r2, r3
 800638c:	6a3b      	ldr	r3, [r7, #32]
 800638e:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8006390:	e013      	b.n	80063ba <xTaskGenericNotify+0xae>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8006392:	6a3b      	ldr	r3, [r7, #32]
 8006394:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006396:	1c5a      	adds	r2, r3, #1
 8006398:	6a3b      	ldr	r3, [r7, #32]
 800639a:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 800639c:	e00d      	b.n	80063ba <xTaskGenericNotify+0xae>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800639e:	6a3b      	ldr	r3, [r7, #32]
 80063a0:	68ba      	ldr	r2, [r7, #8]
 80063a2:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 80063a4:	e009      	b.n	80063ba <xTaskGenericNotify+0xae>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80063a6:	7ffb      	ldrb	r3, [r7, #31]
 80063a8:	2b02      	cmp	r3, #2
 80063aa:	d003      	beq.n	80063b4 <xTaskGenericNotify+0xa8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 80063ac:	6a3b      	ldr	r3, [r7, #32]
 80063ae:	68ba      	ldr	r2, [r7, #8]
 80063b0:	64da      	str	r2, [r3, #76]	; 0x4c
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 80063b2:	e001      	b.n	80063b8 <xTaskGenericNotify+0xac>
						xReturn = pdFAIL;
 80063b4:	2300      	movs	r3, #0
 80063b6:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 80063b8:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80063ba:	7ffb      	ldrb	r3, [r7, #31]
 80063bc:	2b01      	cmp	r3, #1
 80063be:	d139      	bne.n	8006434 <xTaskGenericNotify+0x128>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80063c0:	6a3b      	ldr	r3, [r7, #32]
 80063c2:	3304      	adds	r3, #4
 80063c4:	4618      	mov	r0, r3
 80063c6:	f7fe f9e9 	bl	800479c <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 80063ca:	6a3b      	ldr	r3, [r7, #32]
 80063cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063ce:	2201      	movs	r2, #1
 80063d0:	409a      	lsls	r2, r3
 80063d2:	4b1c      	ldr	r3, [pc, #112]	; (8006444 <xTaskGenericNotify+0x138>)
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	4313      	orrs	r3, r2
 80063d8:	4a1a      	ldr	r2, [pc, #104]	; (8006444 <xTaskGenericNotify+0x138>)
 80063da:	6013      	str	r3, [r2, #0]
 80063dc:	6a3b      	ldr	r3, [r7, #32]
 80063de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063e0:	4613      	mov	r3, r2
 80063e2:	009b      	lsls	r3, r3, #2
 80063e4:	4413      	add	r3, r2
 80063e6:	009b      	lsls	r3, r3, #2
 80063e8:	4a17      	ldr	r2, [pc, #92]	; (8006448 <xTaskGenericNotify+0x13c>)
 80063ea:	441a      	add	r2, r3
 80063ec:	6a3b      	ldr	r3, [r7, #32]
 80063ee:	3304      	adds	r3, #4
 80063f0:	4619      	mov	r1, r3
 80063f2:	4610      	mov	r0, r2
 80063f4:	f7fe f975 	bl	80046e2 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80063f8:	6a3b      	ldr	r3, [r7, #32]
 80063fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d00a      	beq.n	8006416 <xTaskGenericNotify+0x10a>
	__asm volatile
 8006400:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006404:	f383 8811 	msr	BASEPRI, r3
 8006408:	f3bf 8f6f 	isb	sy
 800640c:	f3bf 8f4f 	dsb	sy
 8006410:	617b      	str	r3, [r7, #20]
}
 8006412:	bf00      	nop
 8006414:	e7fe      	b.n	8006414 <xTaskGenericNotify+0x108>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006416:	6a3b      	ldr	r3, [r7, #32]
 8006418:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800641a:	4b0c      	ldr	r3, [pc, #48]	; (800644c <xTaskGenericNotify+0x140>)
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006420:	429a      	cmp	r2, r3
 8006422:	d907      	bls.n	8006434 <xTaskGenericNotify+0x128>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8006424:	4b0a      	ldr	r3, [pc, #40]	; (8006450 <xTaskGenericNotify+0x144>)
 8006426:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800642a:	601a      	str	r2, [r3, #0]
 800642c:	f3bf 8f4f 	dsb	sy
 8006430:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8006434:	f000 fcc6 	bl	8006dc4 <vPortExitCritical>

		return xReturn;
 8006438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800643a:	4618      	mov	r0, r3
 800643c:	3728      	adds	r7, #40	; 0x28
 800643e:	46bd      	mov	sp, r7
 8006440:	bd80      	pop	{r7, pc}
 8006442:	bf00      	nop
 8006444:	200006e4 	.word	0x200006e4
 8006448:	200005e0 	.word	0x200005e0
 800644c:	200005dc 	.word	0x200005dc
 8006450:	e000ed04 	.word	0xe000ed04

08006454 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006454:	b580      	push	{r7, lr}
 8006456:	b084      	sub	sp, #16
 8006458:	af00      	add	r7, sp, #0
 800645a:	6078      	str	r0, [r7, #4]
 800645c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800645e:	4b29      	ldr	r3, [pc, #164]	; (8006504 <prvAddCurrentTaskToDelayedList+0xb0>)
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006464:	4b28      	ldr	r3, [pc, #160]	; (8006508 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	3304      	adds	r3, #4
 800646a:	4618      	mov	r0, r3
 800646c:	f7fe f996 	bl	800479c <uxListRemove>
 8006470:	4603      	mov	r3, r0
 8006472:	2b00      	cmp	r3, #0
 8006474:	d10b      	bne.n	800648e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8006476:	4b24      	ldr	r3, [pc, #144]	; (8006508 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800647c:	2201      	movs	r2, #1
 800647e:	fa02 f303 	lsl.w	r3, r2, r3
 8006482:	43da      	mvns	r2, r3
 8006484:	4b21      	ldr	r3, [pc, #132]	; (800650c <prvAddCurrentTaskToDelayedList+0xb8>)
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	4013      	ands	r3, r2
 800648a:	4a20      	ldr	r2, [pc, #128]	; (800650c <prvAddCurrentTaskToDelayedList+0xb8>)
 800648c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006494:	d10a      	bne.n	80064ac <prvAddCurrentTaskToDelayedList+0x58>
 8006496:	683b      	ldr	r3, [r7, #0]
 8006498:	2b00      	cmp	r3, #0
 800649a:	d007      	beq.n	80064ac <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800649c:	4b1a      	ldr	r3, [pc, #104]	; (8006508 <prvAddCurrentTaskToDelayedList+0xb4>)
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	3304      	adds	r3, #4
 80064a2:	4619      	mov	r1, r3
 80064a4:	481a      	ldr	r0, [pc, #104]	; (8006510 <prvAddCurrentTaskToDelayedList+0xbc>)
 80064a6:	f7fe f91c 	bl	80046e2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80064aa:	e026      	b.n	80064fa <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80064ac:	68fa      	ldr	r2, [r7, #12]
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	4413      	add	r3, r2
 80064b2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80064b4:	4b14      	ldr	r3, [pc, #80]	; (8006508 <prvAddCurrentTaskToDelayedList+0xb4>)
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	68ba      	ldr	r2, [r7, #8]
 80064ba:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80064bc:	68ba      	ldr	r2, [r7, #8]
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	429a      	cmp	r2, r3
 80064c2:	d209      	bcs.n	80064d8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80064c4:	4b13      	ldr	r3, [pc, #76]	; (8006514 <prvAddCurrentTaskToDelayedList+0xc0>)
 80064c6:	681a      	ldr	r2, [r3, #0]
 80064c8:	4b0f      	ldr	r3, [pc, #60]	; (8006508 <prvAddCurrentTaskToDelayedList+0xb4>)
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	3304      	adds	r3, #4
 80064ce:	4619      	mov	r1, r3
 80064d0:	4610      	mov	r0, r2
 80064d2:	f7fe f92a 	bl	800472a <vListInsert>
}
 80064d6:	e010      	b.n	80064fa <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80064d8:	4b0f      	ldr	r3, [pc, #60]	; (8006518 <prvAddCurrentTaskToDelayedList+0xc4>)
 80064da:	681a      	ldr	r2, [r3, #0]
 80064dc:	4b0a      	ldr	r3, [pc, #40]	; (8006508 <prvAddCurrentTaskToDelayedList+0xb4>)
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	3304      	adds	r3, #4
 80064e2:	4619      	mov	r1, r3
 80064e4:	4610      	mov	r0, r2
 80064e6:	f7fe f920 	bl	800472a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80064ea:	4b0c      	ldr	r3, [pc, #48]	; (800651c <prvAddCurrentTaskToDelayedList+0xc8>)
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	68ba      	ldr	r2, [r7, #8]
 80064f0:	429a      	cmp	r2, r3
 80064f2:	d202      	bcs.n	80064fa <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80064f4:	4a09      	ldr	r2, [pc, #36]	; (800651c <prvAddCurrentTaskToDelayedList+0xc8>)
 80064f6:	68bb      	ldr	r3, [r7, #8]
 80064f8:	6013      	str	r3, [r2, #0]
}
 80064fa:	bf00      	nop
 80064fc:	3710      	adds	r7, #16
 80064fe:	46bd      	mov	sp, r7
 8006500:	bd80      	pop	{r7, pc}
 8006502:	bf00      	nop
 8006504:	200006e0 	.word	0x200006e0
 8006508:	200005dc 	.word	0x200005dc
 800650c:	200006e4 	.word	0x200006e4
 8006510:	200006c8 	.word	0x200006c8
 8006514:	20000698 	.word	0x20000698
 8006518:	20000694 	.word	0x20000694
 800651c:	200006fc 	.word	0x200006fc

08006520 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006520:	b580      	push	{r7, lr}
 8006522:	b08a      	sub	sp, #40	; 0x28
 8006524:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006526:	2300      	movs	r3, #0
 8006528:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800652a:	f000 fab1 	bl	8006a90 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800652e:	4b1c      	ldr	r3, [pc, #112]	; (80065a0 <xTimerCreateTimerTask+0x80>)
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	2b00      	cmp	r3, #0
 8006534:	d021      	beq.n	800657a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006536:	2300      	movs	r3, #0
 8006538:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800653a:	2300      	movs	r3, #0
 800653c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800653e:	1d3a      	adds	r2, r7, #4
 8006540:	f107 0108 	add.w	r1, r7, #8
 8006544:	f107 030c 	add.w	r3, r7, #12
 8006548:	4618      	mov	r0, r3
 800654a:	f7f9 fec1 	bl	80002d0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800654e:	6879      	ldr	r1, [r7, #4]
 8006550:	68bb      	ldr	r3, [r7, #8]
 8006552:	68fa      	ldr	r2, [r7, #12]
 8006554:	9202      	str	r2, [sp, #8]
 8006556:	9301      	str	r3, [sp, #4]
 8006558:	2302      	movs	r3, #2
 800655a:	9300      	str	r3, [sp, #0]
 800655c:	2300      	movs	r3, #0
 800655e:	460a      	mov	r2, r1
 8006560:	4910      	ldr	r1, [pc, #64]	; (80065a4 <xTimerCreateTimerTask+0x84>)
 8006562:	4811      	ldr	r0, [pc, #68]	; (80065a8 <xTimerCreateTimerTask+0x88>)
 8006564:	f7fe fe64 	bl	8005230 <xTaskCreateStatic>
 8006568:	4603      	mov	r3, r0
 800656a:	4a10      	ldr	r2, [pc, #64]	; (80065ac <xTimerCreateTimerTask+0x8c>)
 800656c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800656e:	4b0f      	ldr	r3, [pc, #60]	; (80065ac <xTimerCreateTimerTask+0x8c>)
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	2b00      	cmp	r3, #0
 8006574:	d001      	beq.n	800657a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006576:	2301      	movs	r3, #1
 8006578:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800657a:	697b      	ldr	r3, [r7, #20]
 800657c:	2b00      	cmp	r3, #0
 800657e:	d10a      	bne.n	8006596 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8006580:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006584:	f383 8811 	msr	BASEPRI, r3
 8006588:	f3bf 8f6f 	isb	sy
 800658c:	f3bf 8f4f 	dsb	sy
 8006590:	613b      	str	r3, [r7, #16]
}
 8006592:	bf00      	nop
 8006594:	e7fe      	b.n	8006594 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006596:	697b      	ldr	r3, [r7, #20]
}
 8006598:	4618      	mov	r0, r3
 800659a:	3718      	adds	r7, #24
 800659c:	46bd      	mov	sp, r7
 800659e:	bd80      	pop	{r7, pc}
 80065a0:	20000738 	.word	0x20000738
 80065a4:	08007d80 	.word	0x08007d80
 80065a8:	080066cd 	.word	0x080066cd
 80065ac:	2000073c 	.word	0x2000073c

080065b0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80065b0:	b580      	push	{r7, lr}
 80065b2:	b08a      	sub	sp, #40	; 0x28
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	60f8      	str	r0, [r7, #12]
 80065b8:	60b9      	str	r1, [r7, #8]
 80065ba:	607a      	str	r2, [r7, #4]
 80065bc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80065be:	2300      	movs	r3, #0
 80065c0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d10a      	bne.n	80065de <xTimerGenericCommand+0x2e>
	__asm volatile
 80065c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065cc:	f383 8811 	msr	BASEPRI, r3
 80065d0:	f3bf 8f6f 	isb	sy
 80065d4:	f3bf 8f4f 	dsb	sy
 80065d8:	623b      	str	r3, [r7, #32]
}
 80065da:	bf00      	nop
 80065dc:	e7fe      	b.n	80065dc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80065de:	4b1a      	ldr	r3, [pc, #104]	; (8006648 <xTimerGenericCommand+0x98>)
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d02a      	beq.n	800663c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80065e6:	68bb      	ldr	r3, [r7, #8]
 80065e8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80065f2:	68bb      	ldr	r3, [r7, #8]
 80065f4:	2b05      	cmp	r3, #5
 80065f6:	dc18      	bgt.n	800662a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80065f8:	f7ff fd8a 	bl	8006110 <xTaskGetSchedulerState>
 80065fc:	4603      	mov	r3, r0
 80065fe:	2b02      	cmp	r3, #2
 8006600:	d109      	bne.n	8006616 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006602:	4b11      	ldr	r3, [pc, #68]	; (8006648 <xTimerGenericCommand+0x98>)
 8006604:	6818      	ldr	r0, [r3, #0]
 8006606:	f107 0114 	add.w	r1, r7, #20
 800660a:	2300      	movs	r3, #0
 800660c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800660e:	f7fe fa2b 	bl	8004a68 <xQueueGenericSend>
 8006612:	6278      	str	r0, [r7, #36]	; 0x24
 8006614:	e012      	b.n	800663c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006616:	4b0c      	ldr	r3, [pc, #48]	; (8006648 <xTimerGenericCommand+0x98>)
 8006618:	6818      	ldr	r0, [r3, #0]
 800661a:	f107 0114 	add.w	r1, r7, #20
 800661e:	2300      	movs	r3, #0
 8006620:	2200      	movs	r2, #0
 8006622:	f7fe fa21 	bl	8004a68 <xQueueGenericSend>
 8006626:	6278      	str	r0, [r7, #36]	; 0x24
 8006628:	e008      	b.n	800663c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800662a:	4b07      	ldr	r3, [pc, #28]	; (8006648 <xTimerGenericCommand+0x98>)
 800662c:	6818      	ldr	r0, [r3, #0]
 800662e:	f107 0114 	add.w	r1, r7, #20
 8006632:	2300      	movs	r3, #0
 8006634:	683a      	ldr	r2, [r7, #0]
 8006636:	f7fe fb15 	bl	8004c64 <xQueueGenericSendFromISR>
 800663a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800663c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800663e:	4618      	mov	r0, r3
 8006640:	3728      	adds	r7, #40	; 0x28
 8006642:	46bd      	mov	sp, r7
 8006644:	bd80      	pop	{r7, pc}
 8006646:	bf00      	nop
 8006648:	20000738 	.word	0x20000738

0800664c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800664c:	b580      	push	{r7, lr}
 800664e:	b088      	sub	sp, #32
 8006650:	af02      	add	r7, sp, #8
 8006652:	6078      	str	r0, [r7, #4]
 8006654:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006656:	4b1c      	ldr	r3, [pc, #112]	; (80066c8 <prvProcessExpiredTimer+0x7c>)
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	68db      	ldr	r3, [r3, #12]
 800665c:	68db      	ldr	r3, [r3, #12]
 800665e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006660:	697b      	ldr	r3, [r7, #20]
 8006662:	3304      	adds	r3, #4
 8006664:	4618      	mov	r0, r3
 8006666:	f7fe f899 	bl	800479c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800666a:	697b      	ldr	r3, [r7, #20]
 800666c:	69db      	ldr	r3, [r3, #28]
 800666e:	2b01      	cmp	r3, #1
 8006670:	d122      	bne.n	80066b8 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006672:	697b      	ldr	r3, [r7, #20]
 8006674:	699a      	ldr	r2, [r3, #24]
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	18d1      	adds	r1, r2, r3
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	683a      	ldr	r2, [r7, #0]
 800667e:	6978      	ldr	r0, [r7, #20]
 8006680:	f000 f8c8 	bl	8006814 <prvInsertTimerInActiveList>
 8006684:	4603      	mov	r3, r0
 8006686:	2b00      	cmp	r3, #0
 8006688:	d016      	beq.n	80066b8 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800668a:	2300      	movs	r3, #0
 800668c:	9300      	str	r3, [sp, #0]
 800668e:	2300      	movs	r3, #0
 8006690:	687a      	ldr	r2, [r7, #4]
 8006692:	2100      	movs	r1, #0
 8006694:	6978      	ldr	r0, [r7, #20]
 8006696:	f7ff ff8b 	bl	80065b0 <xTimerGenericCommand>
 800669a:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800669c:	693b      	ldr	r3, [r7, #16]
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d10a      	bne.n	80066b8 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 80066a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066a6:	f383 8811 	msr	BASEPRI, r3
 80066aa:	f3bf 8f6f 	isb	sy
 80066ae:	f3bf 8f4f 	dsb	sy
 80066b2:	60fb      	str	r3, [r7, #12]
}
 80066b4:	bf00      	nop
 80066b6:	e7fe      	b.n	80066b6 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80066b8:	697b      	ldr	r3, [r7, #20]
 80066ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066bc:	6978      	ldr	r0, [r7, #20]
 80066be:	4798      	blx	r3
}
 80066c0:	bf00      	nop
 80066c2:	3718      	adds	r7, #24
 80066c4:	46bd      	mov	sp, r7
 80066c6:	bd80      	pop	{r7, pc}
 80066c8:	20000730 	.word	0x20000730

080066cc <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 80066cc:	b580      	push	{r7, lr}
 80066ce:	b084      	sub	sp, #16
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80066d4:	f107 0308 	add.w	r3, r7, #8
 80066d8:	4618      	mov	r0, r3
 80066da:	f000 f857 	bl	800678c <prvGetNextExpireTime>
 80066de:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80066e0:	68bb      	ldr	r3, [r7, #8]
 80066e2:	4619      	mov	r1, r3
 80066e4:	68f8      	ldr	r0, [r7, #12]
 80066e6:	f000 f803 	bl	80066f0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80066ea:	f000 f8d5 	bl	8006898 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80066ee:	e7f1      	b.n	80066d4 <prvTimerTask+0x8>

080066f0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80066f0:	b580      	push	{r7, lr}
 80066f2:	b084      	sub	sp, #16
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	6078      	str	r0, [r7, #4]
 80066f8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80066fa:	f7ff f84d 	bl	8005798 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80066fe:	f107 0308 	add.w	r3, r7, #8
 8006702:	4618      	mov	r0, r3
 8006704:	f000 f866 	bl	80067d4 <prvSampleTimeNow>
 8006708:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800670a:	68bb      	ldr	r3, [r7, #8]
 800670c:	2b00      	cmp	r3, #0
 800670e:	d130      	bne.n	8006772 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006710:	683b      	ldr	r3, [r7, #0]
 8006712:	2b00      	cmp	r3, #0
 8006714:	d10a      	bne.n	800672c <prvProcessTimerOrBlockTask+0x3c>
 8006716:	687a      	ldr	r2, [r7, #4]
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	429a      	cmp	r2, r3
 800671c:	d806      	bhi.n	800672c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800671e:	f7ff f849 	bl	80057b4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006722:	68f9      	ldr	r1, [r7, #12]
 8006724:	6878      	ldr	r0, [r7, #4]
 8006726:	f7ff ff91 	bl	800664c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800672a:	e024      	b.n	8006776 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800672c:	683b      	ldr	r3, [r7, #0]
 800672e:	2b00      	cmp	r3, #0
 8006730:	d008      	beq.n	8006744 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006732:	4b13      	ldr	r3, [pc, #76]	; (8006780 <prvProcessTimerOrBlockTask+0x90>)
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	2b00      	cmp	r3, #0
 800673a:	bf0c      	ite	eq
 800673c:	2301      	moveq	r3, #1
 800673e:	2300      	movne	r3, #0
 8006740:	b2db      	uxtb	r3, r3
 8006742:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006744:	4b0f      	ldr	r3, [pc, #60]	; (8006784 <prvProcessTimerOrBlockTask+0x94>)
 8006746:	6818      	ldr	r0, [r3, #0]
 8006748:	687a      	ldr	r2, [r7, #4]
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	1ad3      	subs	r3, r2, r3
 800674e:	683a      	ldr	r2, [r7, #0]
 8006750:	4619      	mov	r1, r3
 8006752:	f7fe fd39 	bl	80051c8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006756:	f7ff f82d 	bl	80057b4 <xTaskResumeAll>
 800675a:	4603      	mov	r3, r0
 800675c:	2b00      	cmp	r3, #0
 800675e:	d10a      	bne.n	8006776 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006760:	4b09      	ldr	r3, [pc, #36]	; (8006788 <prvProcessTimerOrBlockTask+0x98>)
 8006762:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006766:	601a      	str	r2, [r3, #0]
 8006768:	f3bf 8f4f 	dsb	sy
 800676c:	f3bf 8f6f 	isb	sy
}
 8006770:	e001      	b.n	8006776 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006772:	f7ff f81f 	bl	80057b4 <xTaskResumeAll>
}
 8006776:	bf00      	nop
 8006778:	3710      	adds	r7, #16
 800677a:	46bd      	mov	sp, r7
 800677c:	bd80      	pop	{r7, pc}
 800677e:	bf00      	nop
 8006780:	20000734 	.word	0x20000734
 8006784:	20000738 	.word	0x20000738
 8006788:	e000ed04 	.word	0xe000ed04

0800678c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800678c:	b480      	push	{r7}
 800678e:	b085      	sub	sp, #20
 8006790:	af00      	add	r7, sp, #0
 8006792:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006794:	4b0e      	ldr	r3, [pc, #56]	; (80067d0 <prvGetNextExpireTime+0x44>)
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	2b00      	cmp	r3, #0
 800679c:	bf0c      	ite	eq
 800679e:	2301      	moveq	r3, #1
 80067a0:	2300      	movne	r3, #0
 80067a2:	b2db      	uxtb	r3, r3
 80067a4:	461a      	mov	r2, r3
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d105      	bne.n	80067be <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80067b2:	4b07      	ldr	r3, [pc, #28]	; (80067d0 <prvGetNextExpireTime+0x44>)
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	68db      	ldr	r3, [r3, #12]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	60fb      	str	r3, [r7, #12]
 80067bc:	e001      	b.n	80067c2 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80067be:	2300      	movs	r3, #0
 80067c0:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80067c2:	68fb      	ldr	r3, [r7, #12]
}
 80067c4:	4618      	mov	r0, r3
 80067c6:	3714      	adds	r7, #20
 80067c8:	46bd      	mov	sp, r7
 80067ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ce:	4770      	bx	lr
 80067d0:	20000730 	.word	0x20000730

080067d4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80067d4:	b580      	push	{r7, lr}
 80067d6:	b084      	sub	sp, #16
 80067d8:	af00      	add	r7, sp, #0
 80067da:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80067dc:	f7ff f886 	bl	80058ec <xTaskGetTickCount>
 80067e0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80067e2:	4b0b      	ldr	r3, [pc, #44]	; (8006810 <prvSampleTimeNow+0x3c>)
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	68fa      	ldr	r2, [r7, #12]
 80067e8:	429a      	cmp	r2, r3
 80067ea:	d205      	bcs.n	80067f8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80067ec:	f000 f8ee 	bl	80069cc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	2201      	movs	r2, #1
 80067f4:	601a      	str	r2, [r3, #0]
 80067f6:	e002      	b.n	80067fe <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	2200      	movs	r2, #0
 80067fc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80067fe:	4a04      	ldr	r2, [pc, #16]	; (8006810 <prvSampleTimeNow+0x3c>)
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006804:	68fb      	ldr	r3, [r7, #12]
}
 8006806:	4618      	mov	r0, r3
 8006808:	3710      	adds	r7, #16
 800680a:	46bd      	mov	sp, r7
 800680c:	bd80      	pop	{r7, pc}
 800680e:	bf00      	nop
 8006810:	20000740 	.word	0x20000740

08006814 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006814:	b580      	push	{r7, lr}
 8006816:	b086      	sub	sp, #24
 8006818:	af00      	add	r7, sp, #0
 800681a:	60f8      	str	r0, [r7, #12]
 800681c:	60b9      	str	r1, [r7, #8]
 800681e:	607a      	str	r2, [r7, #4]
 8006820:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006822:	2300      	movs	r3, #0
 8006824:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	68ba      	ldr	r2, [r7, #8]
 800682a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	68fa      	ldr	r2, [r7, #12]
 8006830:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006832:	68ba      	ldr	r2, [r7, #8]
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	429a      	cmp	r2, r3
 8006838:	d812      	bhi.n	8006860 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800683a:	687a      	ldr	r2, [r7, #4]
 800683c:	683b      	ldr	r3, [r7, #0]
 800683e:	1ad2      	subs	r2, r2, r3
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	699b      	ldr	r3, [r3, #24]
 8006844:	429a      	cmp	r2, r3
 8006846:	d302      	bcc.n	800684e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006848:	2301      	movs	r3, #1
 800684a:	617b      	str	r3, [r7, #20]
 800684c:	e01b      	b.n	8006886 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800684e:	4b10      	ldr	r3, [pc, #64]	; (8006890 <prvInsertTimerInActiveList+0x7c>)
 8006850:	681a      	ldr	r2, [r3, #0]
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	3304      	adds	r3, #4
 8006856:	4619      	mov	r1, r3
 8006858:	4610      	mov	r0, r2
 800685a:	f7fd ff66 	bl	800472a <vListInsert>
 800685e:	e012      	b.n	8006886 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006860:	687a      	ldr	r2, [r7, #4]
 8006862:	683b      	ldr	r3, [r7, #0]
 8006864:	429a      	cmp	r2, r3
 8006866:	d206      	bcs.n	8006876 <prvInsertTimerInActiveList+0x62>
 8006868:	68ba      	ldr	r2, [r7, #8]
 800686a:	683b      	ldr	r3, [r7, #0]
 800686c:	429a      	cmp	r2, r3
 800686e:	d302      	bcc.n	8006876 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006870:	2301      	movs	r3, #1
 8006872:	617b      	str	r3, [r7, #20]
 8006874:	e007      	b.n	8006886 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006876:	4b07      	ldr	r3, [pc, #28]	; (8006894 <prvInsertTimerInActiveList+0x80>)
 8006878:	681a      	ldr	r2, [r3, #0]
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	3304      	adds	r3, #4
 800687e:	4619      	mov	r1, r3
 8006880:	4610      	mov	r0, r2
 8006882:	f7fd ff52 	bl	800472a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006886:	697b      	ldr	r3, [r7, #20]
}
 8006888:	4618      	mov	r0, r3
 800688a:	3718      	adds	r7, #24
 800688c:	46bd      	mov	sp, r7
 800688e:	bd80      	pop	{r7, pc}
 8006890:	20000734 	.word	0x20000734
 8006894:	20000730 	.word	0x20000730

08006898 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006898:	b580      	push	{r7, lr}
 800689a:	b08c      	sub	sp, #48	; 0x30
 800689c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800689e:	e081      	b.n	80069a4 <prvProcessReceivedCommands+0x10c>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80068a0:	68bb      	ldr	r3, [r7, #8]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	db7d      	blt.n	80069a2 <prvProcessReceivedCommands+0x10a>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80068a6:	693b      	ldr	r3, [r7, #16]
 80068a8:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80068aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068ac:	695b      	ldr	r3, [r3, #20]
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d004      	beq.n	80068bc <prvProcessReceivedCommands+0x24>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80068b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068b4:	3304      	adds	r3, #4
 80068b6:	4618      	mov	r0, r3
 80068b8:	f7fd ff70 	bl	800479c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80068bc:	1d3b      	adds	r3, r7, #4
 80068be:	4618      	mov	r0, r3
 80068c0:	f7ff ff88 	bl	80067d4 <prvSampleTimeNow>
 80068c4:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 80068c6:	68bb      	ldr	r3, [r7, #8]
 80068c8:	2b09      	cmp	r3, #9
 80068ca:	d86b      	bhi.n	80069a4 <prvProcessReceivedCommands+0x10c>
 80068cc:	a201      	add	r2, pc, #4	; (adr r2, 80068d4 <prvProcessReceivedCommands+0x3c>)
 80068ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068d2:	bf00      	nop
 80068d4:	080068fd 	.word	0x080068fd
 80068d8:	080068fd 	.word	0x080068fd
 80068dc:	080068fd 	.word	0x080068fd
 80068e0:	080069a5 	.word	0x080069a5
 80068e4:	08006959 	.word	0x08006959
 80068e8:	08006991 	.word	0x08006991
 80068ec:	080068fd 	.word	0x080068fd
 80068f0:	080068fd 	.word	0x080068fd
 80068f4:	080069a5 	.word	0x080069a5
 80068f8:	08006959 	.word	0x08006959
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80068fc:	68fa      	ldr	r2, [r7, #12]
 80068fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006900:	699b      	ldr	r3, [r3, #24]
 8006902:	18d1      	adds	r1, r2, r3
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	6a3a      	ldr	r2, [r7, #32]
 8006908:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800690a:	f7ff ff83 	bl	8006814 <prvInsertTimerInActiveList>
 800690e:	4603      	mov	r3, r0
 8006910:	2b00      	cmp	r3, #0
 8006912:	d047      	beq.n	80069a4 <prvProcessReceivedCommands+0x10c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006918:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800691a:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800691c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800691e:	69db      	ldr	r3, [r3, #28]
 8006920:	2b01      	cmp	r3, #1
 8006922:	d13f      	bne.n	80069a4 <prvProcessReceivedCommands+0x10c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006924:	68fa      	ldr	r2, [r7, #12]
 8006926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006928:	699b      	ldr	r3, [r3, #24]
 800692a:	441a      	add	r2, r3
 800692c:	2300      	movs	r3, #0
 800692e:	9300      	str	r3, [sp, #0]
 8006930:	2300      	movs	r3, #0
 8006932:	2100      	movs	r1, #0
 8006934:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006936:	f7ff fe3b 	bl	80065b0 <xTimerGenericCommand>
 800693a:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 800693c:	69fb      	ldr	r3, [r7, #28]
 800693e:	2b00      	cmp	r3, #0
 8006940:	d130      	bne.n	80069a4 <prvProcessReceivedCommands+0x10c>
	__asm volatile
 8006942:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006946:	f383 8811 	msr	BASEPRI, r3
 800694a:	f3bf 8f6f 	isb	sy
 800694e:	f3bf 8f4f 	dsb	sy
 8006952:	61bb      	str	r3, [r7, #24]
}
 8006954:	bf00      	nop
 8006956:	e7fe      	b.n	8006956 <prvProcessReceivedCommands+0xbe>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006958:	68fa      	ldr	r2, [r7, #12]
 800695a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800695c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800695e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006960:	699b      	ldr	r3, [r3, #24]
 8006962:	2b00      	cmp	r3, #0
 8006964:	d10a      	bne.n	800697c <prvProcessReceivedCommands+0xe4>
	__asm volatile
 8006966:	f04f 0350 	mov.w	r3, #80	; 0x50
 800696a:	f383 8811 	msr	BASEPRI, r3
 800696e:	f3bf 8f6f 	isb	sy
 8006972:	f3bf 8f4f 	dsb	sy
 8006976:	617b      	str	r3, [r7, #20]
}
 8006978:	bf00      	nop
 800697a:	e7fe      	b.n	800697a <prvProcessReceivedCommands+0xe2>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800697c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800697e:	699a      	ldr	r2, [r3, #24]
 8006980:	6a3b      	ldr	r3, [r7, #32]
 8006982:	18d1      	adds	r1, r2, r3
 8006984:	6a3b      	ldr	r3, [r7, #32]
 8006986:	6a3a      	ldr	r2, [r7, #32]
 8006988:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800698a:	f7ff ff43 	bl	8006814 <prvInsertTimerInActiveList>
					break;
 800698e:	e009      	b.n	80069a4 <prvProcessReceivedCommands+0x10c>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8006990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006992:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006996:	2b00      	cmp	r3, #0
 8006998:	d104      	bne.n	80069a4 <prvProcessReceivedCommands+0x10c>
						{
							vPortFree( pxTimer );
 800699a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800699c:	f000 fbc8 	bl	8007130 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80069a0:	e000      	b.n	80069a4 <prvProcessReceivedCommands+0x10c>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80069a2:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80069a4:	4b08      	ldr	r3, [pc, #32]	; (80069c8 <prvProcessReceivedCommands+0x130>)
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	f107 0108 	add.w	r1, r7, #8
 80069ac:	2200      	movs	r2, #0
 80069ae:	4618      	mov	r0, r3
 80069b0:	f7fe f9f0 	bl	8004d94 <xQueueReceive>
 80069b4:	4603      	mov	r3, r0
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	f47f af72 	bne.w	80068a0 <prvProcessReceivedCommands+0x8>
	}
}
 80069bc:	bf00      	nop
 80069be:	bf00      	nop
 80069c0:	3728      	adds	r7, #40	; 0x28
 80069c2:	46bd      	mov	sp, r7
 80069c4:	bd80      	pop	{r7, pc}
 80069c6:	bf00      	nop
 80069c8:	20000738 	.word	0x20000738

080069cc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80069cc:	b580      	push	{r7, lr}
 80069ce:	b088      	sub	sp, #32
 80069d0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80069d2:	e045      	b.n	8006a60 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80069d4:	4b2c      	ldr	r3, [pc, #176]	; (8006a88 <prvSwitchTimerLists+0xbc>)
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	68db      	ldr	r3, [r3, #12]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80069de:	4b2a      	ldr	r3, [pc, #168]	; (8006a88 <prvSwitchTimerLists+0xbc>)
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	68db      	ldr	r3, [r3, #12]
 80069e4:	68db      	ldr	r3, [r3, #12]
 80069e6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	3304      	adds	r3, #4
 80069ec:	4618      	mov	r0, r3
 80069ee:	f7fd fed5 	bl	800479c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069f6:	68f8      	ldr	r0, [r7, #12]
 80069f8:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	69db      	ldr	r3, [r3, #28]
 80069fe:	2b01      	cmp	r3, #1
 8006a00:	d12e      	bne.n	8006a60 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	699b      	ldr	r3, [r3, #24]
 8006a06:	693a      	ldr	r2, [r7, #16]
 8006a08:	4413      	add	r3, r2
 8006a0a:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006a0c:	68ba      	ldr	r2, [r7, #8]
 8006a0e:	693b      	ldr	r3, [r7, #16]
 8006a10:	429a      	cmp	r2, r3
 8006a12:	d90e      	bls.n	8006a32 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	68ba      	ldr	r2, [r7, #8]
 8006a18:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	68fa      	ldr	r2, [r7, #12]
 8006a1e:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006a20:	4b19      	ldr	r3, [pc, #100]	; (8006a88 <prvSwitchTimerLists+0xbc>)
 8006a22:	681a      	ldr	r2, [r3, #0]
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	3304      	adds	r3, #4
 8006a28:	4619      	mov	r1, r3
 8006a2a:	4610      	mov	r0, r2
 8006a2c:	f7fd fe7d 	bl	800472a <vListInsert>
 8006a30:	e016      	b.n	8006a60 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006a32:	2300      	movs	r3, #0
 8006a34:	9300      	str	r3, [sp, #0]
 8006a36:	2300      	movs	r3, #0
 8006a38:	693a      	ldr	r2, [r7, #16]
 8006a3a:	2100      	movs	r1, #0
 8006a3c:	68f8      	ldr	r0, [r7, #12]
 8006a3e:	f7ff fdb7 	bl	80065b0 <xTimerGenericCommand>
 8006a42:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d10a      	bne.n	8006a60 <prvSwitchTimerLists+0x94>
	__asm volatile
 8006a4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a4e:	f383 8811 	msr	BASEPRI, r3
 8006a52:	f3bf 8f6f 	isb	sy
 8006a56:	f3bf 8f4f 	dsb	sy
 8006a5a:	603b      	str	r3, [r7, #0]
}
 8006a5c:	bf00      	nop
 8006a5e:	e7fe      	b.n	8006a5e <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006a60:	4b09      	ldr	r3, [pc, #36]	; (8006a88 <prvSwitchTimerLists+0xbc>)
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d1b4      	bne.n	80069d4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006a6a:	4b07      	ldr	r3, [pc, #28]	; (8006a88 <prvSwitchTimerLists+0xbc>)
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006a70:	4b06      	ldr	r3, [pc, #24]	; (8006a8c <prvSwitchTimerLists+0xc0>)
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	4a04      	ldr	r2, [pc, #16]	; (8006a88 <prvSwitchTimerLists+0xbc>)
 8006a76:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006a78:	4a04      	ldr	r2, [pc, #16]	; (8006a8c <prvSwitchTimerLists+0xc0>)
 8006a7a:	697b      	ldr	r3, [r7, #20]
 8006a7c:	6013      	str	r3, [r2, #0]
}
 8006a7e:	bf00      	nop
 8006a80:	3718      	adds	r7, #24
 8006a82:	46bd      	mov	sp, r7
 8006a84:	bd80      	pop	{r7, pc}
 8006a86:	bf00      	nop
 8006a88:	20000730 	.word	0x20000730
 8006a8c:	20000734 	.word	0x20000734

08006a90 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006a90:	b580      	push	{r7, lr}
 8006a92:	b082      	sub	sp, #8
 8006a94:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006a96:	f000 f965 	bl	8006d64 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006a9a:	4b15      	ldr	r3, [pc, #84]	; (8006af0 <prvCheckForValidListAndQueue+0x60>)
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d120      	bne.n	8006ae4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006aa2:	4814      	ldr	r0, [pc, #80]	; (8006af4 <prvCheckForValidListAndQueue+0x64>)
 8006aa4:	f7fd fdf0 	bl	8004688 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006aa8:	4813      	ldr	r0, [pc, #76]	; (8006af8 <prvCheckForValidListAndQueue+0x68>)
 8006aaa:	f7fd fded 	bl	8004688 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006aae:	4b13      	ldr	r3, [pc, #76]	; (8006afc <prvCheckForValidListAndQueue+0x6c>)
 8006ab0:	4a10      	ldr	r2, [pc, #64]	; (8006af4 <prvCheckForValidListAndQueue+0x64>)
 8006ab2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006ab4:	4b12      	ldr	r3, [pc, #72]	; (8006b00 <prvCheckForValidListAndQueue+0x70>)
 8006ab6:	4a10      	ldr	r2, [pc, #64]	; (8006af8 <prvCheckForValidListAndQueue+0x68>)
 8006ab8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006aba:	2300      	movs	r3, #0
 8006abc:	9300      	str	r3, [sp, #0]
 8006abe:	4b11      	ldr	r3, [pc, #68]	; (8006b04 <prvCheckForValidListAndQueue+0x74>)
 8006ac0:	4a11      	ldr	r2, [pc, #68]	; (8006b08 <prvCheckForValidListAndQueue+0x78>)
 8006ac2:	210c      	movs	r1, #12
 8006ac4:	200a      	movs	r0, #10
 8006ac6:	f7fd fefb 	bl	80048c0 <xQueueGenericCreateStatic>
 8006aca:	4603      	mov	r3, r0
 8006acc:	4a08      	ldr	r2, [pc, #32]	; (8006af0 <prvCheckForValidListAndQueue+0x60>)
 8006ace:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006ad0:	4b07      	ldr	r3, [pc, #28]	; (8006af0 <prvCheckForValidListAndQueue+0x60>)
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d005      	beq.n	8006ae4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006ad8:	4b05      	ldr	r3, [pc, #20]	; (8006af0 <prvCheckForValidListAndQueue+0x60>)
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	490b      	ldr	r1, [pc, #44]	; (8006b0c <prvCheckForValidListAndQueue+0x7c>)
 8006ade:	4618      	mov	r0, r3
 8006ae0:	f7fe fb48 	bl	8005174 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006ae4:	f000 f96e 	bl	8006dc4 <vPortExitCritical>
}
 8006ae8:	bf00      	nop
 8006aea:	46bd      	mov	sp, r7
 8006aec:	bd80      	pop	{r7, pc}
 8006aee:	bf00      	nop
 8006af0:	20000738 	.word	0x20000738
 8006af4:	20000708 	.word	0x20000708
 8006af8:	2000071c 	.word	0x2000071c
 8006afc:	20000730 	.word	0x20000730
 8006b00:	20000734 	.word	0x20000734
 8006b04:	200007bc 	.word	0x200007bc
 8006b08:	20000744 	.word	0x20000744
 8006b0c:	08007d88 	.word	0x08007d88

08006b10 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006b10:	b480      	push	{r7}
 8006b12:	b085      	sub	sp, #20
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	60f8      	str	r0, [r7, #12]
 8006b18:	60b9      	str	r1, [r7, #8]
 8006b1a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	3b04      	subs	r3, #4
 8006b20:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006b28:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	3b04      	subs	r3, #4
 8006b2e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006b30:	68bb      	ldr	r3, [r7, #8]
 8006b32:	f023 0201 	bic.w	r2, r3, #1
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	3b04      	subs	r3, #4
 8006b3e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006b40:	4a0c      	ldr	r2, [pc, #48]	; (8006b74 <pxPortInitialiseStack+0x64>)
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	3b14      	subs	r3, #20
 8006b4a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006b4c:	687a      	ldr	r2, [r7, #4]
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	3b04      	subs	r3, #4
 8006b56:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	f06f 0202 	mvn.w	r2, #2
 8006b5e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	3b20      	subs	r3, #32
 8006b64:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006b66:	68fb      	ldr	r3, [r7, #12]
}
 8006b68:	4618      	mov	r0, r3
 8006b6a:	3714      	adds	r7, #20
 8006b6c:	46bd      	mov	sp, r7
 8006b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b72:	4770      	bx	lr
 8006b74:	08006b79 	.word	0x08006b79

08006b78 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006b78:	b480      	push	{r7}
 8006b7a:	b085      	sub	sp, #20
 8006b7c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006b7e:	2300      	movs	r3, #0
 8006b80:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006b82:	4b12      	ldr	r3, [pc, #72]	; (8006bcc <prvTaskExitError+0x54>)
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b8a:	d00a      	beq.n	8006ba2 <prvTaskExitError+0x2a>
	__asm volatile
 8006b8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b90:	f383 8811 	msr	BASEPRI, r3
 8006b94:	f3bf 8f6f 	isb	sy
 8006b98:	f3bf 8f4f 	dsb	sy
 8006b9c:	60fb      	str	r3, [r7, #12]
}
 8006b9e:	bf00      	nop
 8006ba0:	e7fe      	b.n	8006ba0 <prvTaskExitError+0x28>
	__asm volatile
 8006ba2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ba6:	f383 8811 	msr	BASEPRI, r3
 8006baa:	f3bf 8f6f 	isb	sy
 8006bae:	f3bf 8f4f 	dsb	sy
 8006bb2:	60bb      	str	r3, [r7, #8]
}
 8006bb4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006bb6:	bf00      	nop
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d0fc      	beq.n	8006bb8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006bbe:	bf00      	nop
 8006bc0:	bf00      	nop
 8006bc2:	3714      	adds	r7, #20
 8006bc4:	46bd      	mov	sp, r7
 8006bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bca:	4770      	bx	lr
 8006bcc:	2000000c 	.word	0x2000000c

08006bd0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006bd0:	4b07      	ldr	r3, [pc, #28]	; (8006bf0 <pxCurrentTCBConst2>)
 8006bd2:	6819      	ldr	r1, [r3, #0]
 8006bd4:	6808      	ldr	r0, [r1, #0]
 8006bd6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bda:	f380 8809 	msr	PSP, r0
 8006bde:	f3bf 8f6f 	isb	sy
 8006be2:	f04f 0000 	mov.w	r0, #0
 8006be6:	f380 8811 	msr	BASEPRI, r0
 8006bea:	4770      	bx	lr
 8006bec:	f3af 8000 	nop.w

08006bf0 <pxCurrentTCBConst2>:
 8006bf0:	200005dc 	.word	0x200005dc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006bf4:	bf00      	nop
 8006bf6:	bf00      	nop

08006bf8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006bf8:	4808      	ldr	r0, [pc, #32]	; (8006c1c <prvPortStartFirstTask+0x24>)
 8006bfa:	6800      	ldr	r0, [r0, #0]
 8006bfc:	6800      	ldr	r0, [r0, #0]
 8006bfe:	f380 8808 	msr	MSP, r0
 8006c02:	f04f 0000 	mov.w	r0, #0
 8006c06:	f380 8814 	msr	CONTROL, r0
 8006c0a:	b662      	cpsie	i
 8006c0c:	b661      	cpsie	f
 8006c0e:	f3bf 8f4f 	dsb	sy
 8006c12:	f3bf 8f6f 	isb	sy
 8006c16:	df00      	svc	0
 8006c18:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006c1a:	bf00      	nop
 8006c1c:	e000ed08 	.word	0xe000ed08

08006c20 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006c20:	b580      	push	{r7, lr}
 8006c22:	b086      	sub	sp, #24
 8006c24:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006c26:	4b46      	ldr	r3, [pc, #280]	; (8006d40 <xPortStartScheduler+0x120>)
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	4a46      	ldr	r2, [pc, #280]	; (8006d44 <xPortStartScheduler+0x124>)
 8006c2c:	4293      	cmp	r3, r2
 8006c2e:	d10a      	bne.n	8006c46 <xPortStartScheduler+0x26>
	__asm volatile
 8006c30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c34:	f383 8811 	msr	BASEPRI, r3
 8006c38:	f3bf 8f6f 	isb	sy
 8006c3c:	f3bf 8f4f 	dsb	sy
 8006c40:	613b      	str	r3, [r7, #16]
}
 8006c42:	bf00      	nop
 8006c44:	e7fe      	b.n	8006c44 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006c46:	4b3e      	ldr	r3, [pc, #248]	; (8006d40 <xPortStartScheduler+0x120>)
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	4a3f      	ldr	r2, [pc, #252]	; (8006d48 <xPortStartScheduler+0x128>)
 8006c4c:	4293      	cmp	r3, r2
 8006c4e:	d10a      	bne.n	8006c66 <xPortStartScheduler+0x46>
	__asm volatile
 8006c50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c54:	f383 8811 	msr	BASEPRI, r3
 8006c58:	f3bf 8f6f 	isb	sy
 8006c5c:	f3bf 8f4f 	dsb	sy
 8006c60:	60fb      	str	r3, [r7, #12]
}
 8006c62:	bf00      	nop
 8006c64:	e7fe      	b.n	8006c64 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006c66:	4b39      	ldr	r3, [pc, #228]	; (8006d4c <xPortStartScheduler+0x12c>)
 8006c68:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006c6a:	697b      	ldr	r3, [r7, #20]
 8006c6c:	781b      	ldrb	r3, [r3, #0]
 8006c6e:	b2db      	uxtb	r3, r3
 8006c70:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006c72:	697b      	ldr	r3, [r7, #20]
 8006c74:	22ff      	movs	r2, #255	; 0xff
 8006c76:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006c78:	697b      	ldr	r3, [r7, #20]
 8006c7a:	781b      	ldrb	r3, [r3, #0]
 8006c7c:	b2db      	uxtb	r3, r3
 8006c7e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006c80:	78fb      	ldrb	r3, [r7, #3]
 8006c82:	b2db      	uxtb	r3, r3
 8006c84:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006c88:	b2da      	uxtb	r2, r3
 8006c8a:	4b31      	ldr	r3, [pc, #196]	; (8006d50 <xPortStartScheduler+0x130>)
 8006c8c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006c8e:	4b31      	ldr	r3, [pc, #196]	; (8006d54 <xPortStartScheduler+0x134>)
 8006c90:	2207      	movs	r2, #7
 8006c92:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006c94:	e009      	b.n	8006caa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006c96:	4b2f      	ldr	r3, [pc, #188]	; (8006d54 <xPortStartScheduler+0x134>)
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	3b01      	subs	r3, #1
 8006c9c:	4a2d      	ldr	r2, [pc, #180]	; (8006d54 <xPortStartScheduler+0x134>)
 8006c9e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006ca0:	78fb      	ldrb	r3, [r7, #3]
 8006ca2:	b2db      	uxtb	r3, r3
 8006ca4:	005b      	lsls	r3, r3, #1
 8006ca6:	b2db      	uxtb	r3, r3
 8006ca8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006caa:	78fb      	ldrb	r3, [r7, #3]
 8006cac:	b2db      	uxtb	r3, r3
 8006cae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006cb2:	2b80      	cmp	r3, #128	; 0x80
 8006cb4:	d0ef      	beq.n	8006c96 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006cb6:	4b27      	ldr	r3, [pc, #156]	; (8006d54 <xPortStartScheduler+0x134>)
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	f1c3 0307 	rsb	r3, r3, #7
 8006cbe:	2b04      	cmp	r3, #4
 8006cc0:	d00a      	beq.n	8006cd8 <xPortStartScheduler+0xb8>
	__asm volatile
 8006cc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cc6:	f383 8811 	msr	BASEPRI, r3
 8006cca:	f3bf 8f6f 	isb	sy
 8006cce:	f3bf 8f4f 	dsb	sy
 8006cd2:	60bb      	str	r3, [r7, #8]
}
 8006cd4:	bf00      	nop
 8006cd6:	e7fe      	b.n	8006cd6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006cd8:	4b1e      	ldr	r3, [pc, #120]	; (8006d54 <xPortStartScheduler+0x134>)
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	021b      	lsls	r3, r3, #8
 8006cde:	4a1d      	ldr	r2, [pc, #116]	; (8006d54 <xPortStartScheduler+0x134>)
 8006ce0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006ce2:	4b1c      	ldr	r3, [pc, #112]	; (8006d54 <xPortStartScheduler+0x134>)
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006cea:	4a1a      	ldr	r2, [pc, #104]	; (8006d54 <xPortStartScheduler+0x134>)
 8006cec:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	b2da      	uxtb	r2, r3
 8006cf2:	697b      	ldr	r3, [r7, #20]
 8006cf4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006cf6:	4b18      	ldr	r3, [pc, #96]	; (8006d58 <xPortStartScheduler+0x138>)
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	4a17      	ldr	r2, [pc, #92]	; (8006d58 <xPortStartScheduler+0x138>)
 8006cfc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006d00:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006d02:	4b15      	ldr	r3, [pc, #84]	; (8006d58 <xPortStartScheduler+0x138>)
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	4a14      	ldr	r2, [pc, #80]	; (8006d58 <xPortStartScheduler+0x138>)
 8006d08:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006d0c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006d0e:	f000 f8dd 	bl	8006ecc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006d12:	4b12      	ldr	r3, [pc, #72]	; (8006d5c <xPortStartScheduler+0x13c>)
 8006d14:	2200      	movs	r2, #0
 8006d16:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006d18:	f000 f8fc 	bl	8006f14 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006d1c:	4b10      	ldr	r3, [pc, #64]	; (8006d60 <xPortStartScheduler+0x140>)
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	4a0f      	ldr	r2, [pc, #60]	; (8006d60 <xPortStartScheduler+0x140>)
 8006d22:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006d26:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006d28:	f7ff ff66 	bl	8006bf8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006d2c:	f7fe ff80 	bl	8005c30 <vTaskSwitchContext>
	prvTaskExitError();
 8006d30:	f7ff ff22 	bl	8006b78 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006d34:	2300      	movs	r3, #0
}
 8006d36:	4618      	mov	r0, r3
 8006d38:	3718      	adds	r7, #24
 8006d3a:	46bd      	mov	sp, r7
 8006d3c:	bd80      	pop	{r7, pc}
 8006d3e:	bf00      	nop
 8006d40:	e000ed00 	.word	0xe000ed00
 8006d44:	410fc271 	.word	0x410fc271
 8006d48:	410fc270 	.word	0x410fc270
 8006d4c:	e000e400 	.word	0xe000e400
 8006d50:	20000804 	.word	0x20000804
 8006d54:	20000808 	.word	0x20000808
 8006d58:	e000ed20 	.word	0xe000ed20
 8006d5c:	2000000c 	.word	0x2000000c
 8006d60:	e000ef34 	.word	0xe000ef34

08006d64 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006d64:	b480      	push	{r7}
 8006d66:	b083      	sub	sp, #12
 8006d68:	af00      	add	r7, sp, #0
	__asm volatile
 8006d6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d6e:	f383 8811 	msr	BASEPRI, r3
 8006d72:	f3bf 8f6f 	isb	sy
 8006d76:	f3bf 8f4f 	dsb	sy
 8006d7a:	607b      	str	r3, [r7, #4]
}
 8006d7c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006d7e:	4b0f      	ldr	r3, [pc, #60]	; (8006dbc <vPortEnterCritical+0x58>)
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	3301      	adds	r3, #1
 8006d84:	4a0d      	ldr	r2, [pc, #52]	; (8006dbc <vPortEnterCritical+0x58>)
 8006d86:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006d88:	4b0c      	ldr	r3, [pc, #48]	; (8006dbc <vPortEnterCritical+0x58>)
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	2b01      	cmp	r3, #1
 8006d8e:	d10f      	bne.n	8006db0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006d90:	4b0b      	ldr	r3, [pc, #44]	; (8006dc0 <vPortEnterCritical+0x5c>)
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	b2db      	uxtb	r3, r3
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d00a      	beq.n	8006db0 <vPortEnterCritical+0x4c>
	__asm volatile
 8006d9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d9e:	f383 8811 	msr	BASEPRI, r3
 8006da2:	f3bf 8f6f 	isb	sy
 8006da6:	f3bf 8f4f 	dsb	sy
 8006daa:	603b      	str	r3, [r7, #0]
}
 8006dac:	bf00      	nop
 8006dae:	e7fe      	b.n	8006dae <vPortEnterCritical+0x4a>
	}
}
 8006db0:	bf00      	nop
 8006db2:	370c      	adds	r7, #12
 8006db4:	46bd      	mov	sp, r7
 8006db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dba:	4770      	bx	lr
 8006dbc:	2000000c 	.word	0x2000000c
 8006dc0:	e000ed04 	.word	0xe000ed04

08006dc4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006dc4:	b480      	push	{r7}
 8006dc6:	b083      	sub	sp, #12
 8006dc8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006dca:	4b12      	ldr	r3, [pc, #72]	; (8006e14 <vPortExitCritical+0x50>)
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d10a      	bne.n	8006de8 <vPortExitCritical+0x24>
	__asm volatile
 8006dd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dd6:	f383 8811 	msr	BASEPRI, r3
 8006dda:	f3bf 8f6f 	isb	sy
 8006dde:	f3bf 8f4f 	dsb	sy
 8006de2:	607b      	str	r3, [r7, #4]
}
 8006de4:	bf00      	nop
 8006de6:	e7fe      	b.n	8006de6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006de8:	4b0a      	ldr	r3, [pc, #40]	; (8006e14 <vPortExitCritical+0x50>)
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	3b01      	subs	r3, #1
 8006dee:	4a09      	ldr	r2, [pc, #36]	; (8006e14 <vPortExitCritical+0x50>)
 8006df0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006df2:	4b08      	ldr	r3, [pc, #32]	; (8006e14 <vPortExitCritical+0x50>)
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d105      	bne.n	8006e06 <vPortExitCritical+0x42>
 8006dfa:	2300      	movs	r3, #0
 8006dfc:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006dfe:	683b      	ldr	r3, [r7, #0]
 8006e00:	f383 8811 	msr	BASEPRI, r3
}
 8006e04:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006e06:	bf00      	nop
 8006e08:	370c      	adds	r7, #12
 8006e0a:	46bd      	mov	sp, r7
 8006e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e10:	4770      	bx	lr
 8006e12:	bf00      	nop
 8006e14:	2000000c 	.word	0x2000000c
	...

08006e20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006e20:	f3ef 8009 	mrs	r0, PSP
 8006e24:	f3bf 8f6f 	isb	sy
 8006e28:	4b15      	ldr	r3, [pc, #84]	; (8006e80 <pxCurrentTCBConst>)
 8006e2a:	681a      	ldr	r2, [r3, #0]
 8006e2c:	f01e 0f10 	tst.w	lr, #16
 8006e30:	bf08      	it	eq
 8006e32:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006e36:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e3a:	6010      	str	r0, [r2, #0]
 8006e3c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006e40:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006e44:	f380 8811 	msr	BASEPRI, r0
 8006e48:	f3bf 8f4f 	dsb	sy
 8006e4c:	f3bf 8f6f 	isb	sy
 8006e50:	f7fe feee 	bl	8005c30 <vTaskSwitchContext>
 8006e54:	f04f 0000 	mov.w	r0, #0
 8006e58:	f380 8811 	msr	BASEPRI, r0
 8006e5c:	bc09      	pop	{r0, r3}
 8006e5e:	6819      	ldr	r1, [r3, #0]
 8006e60:	6808      	ldr	r0, [r1, #0]
 8006e62:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e66:	f01e 0f10 	tst.w	lr, #16
 8006e6a:	bf08      	it	eq
 8006e6c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006e70:	f380 8809 	msr	PSP, r0
 8006e74:	f3bf 8f6f 	isb	sy
 8006e78:	4770      	bx	lr
 8006e7a:	bf00      	nop
 8006e7c:	f3af 8000 	nop.w

08006e80 <pxCurrentTCBConst>:
 8006e80:	200005dc 	.word	0x200005dc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006e84:	bf00      	nop
 8006e86:	bf00      	nop

08006e88 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006e88:	b580      	push	{r7, lr}
 8006e8a:	b082      	sub	sp, #8
 8006e8c:	af00      	add	r7, sp, #0
	__asm volatile
 8006e8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e92:	f383 8811 	msr	BASEPRI, r3
 8006e96:	f3bf 8f6f 	isb	sy
 8006e9a:	f3bf 8f4f 	dsb	sy
 8006e9e:	607b      	str	r3, [r7, #4]
}
 8006ea0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006ea2:	f7fe fdff 	bl	8005aa4 <xTaskIncrementTick>
 8006ea6:	4603      	mov	r3, r0
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d003      	beq.n	8006eb4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006eac:	4b06      	ldr	r3, [pc, #24]	; (8006ec8 <SysTick_Handler+0x40>)
 8006eae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006eb2:	601a      	str	r2, [r3, #0]
 8006eb4:	2300      	movs	r3, #0
 8006eb6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006eb8:	683b      	ldr	r3, [r7, #0]
 8006eba:	f383 8811 	msr	BASEPRI, r3
}
 8006ebe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006ec0:	bf00      	nop
 8006ec2:	3708      	adds	r7, #8
 8006ec4:	46bd      	mov	sp, r7
 8006ec6:	bd80      	pop	{r7, pc}
 8006ec8:	e000ed04 	.word	0xe000ed04

08006ecc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006ecc:	b480      	push	{r7}
 8006ece:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006ed0:	4b0b      	ldr	r3, [pc, #44]	; (8006f00 <vPortSetupTimerInterrupt+0x34>)
 8006ed2:	2200      	movs	r2, #0
 8006ed4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006ed6:	4b0b      	ldr	r3, [pc, #44]	; (8006f04 <vPortSetupTimerInterrupt+0x38>)
 8006ed8:	2200      	movs	r2, #0
 8006eda:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006edc:	4b0a      	ldr	r3, [pc, #40]	; (8006f08 <vPortSetupTimerInterrupt+0x3c>)
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	4a0a      	ldr	r2, [pc, #40]	; (8006f0c <vPortSetupTimerInterrupt+0x40>)
 8006ee2:	fba2 2303 	umull	r2, r3, r2, r3
 8006ee6:	099b      	lsrs	r3, r3, #6
 8006ee8:	4a09      	ldr	r2, [pc, #36]	; (8006f10 <vPortSetupTimerInterrupt+0x44>)
 8006eea:	3b01      	subs	r3, #1
 8006eec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006eee:	4b04      	ldr	r3, [pc, #16]	; (8006f00 <vPortSetupTimerInterrupt+0x34>)
 8006ef0:	2207      	movs	r2, #7
 8006ef2:	601a      	str	r2, [r3, #0]
}
 8006ef4:	bf00      	nop
 8006ef6:	46bd      	mov	sp, r7
 8006ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006efc:	4770      	bx	lr
 8006efe:	bf00      	nop
 8006f00:	e000e010 	.word	0xe000e010
 8006f04:	e000e018 	.word	0xe000e018
 8006f08:	20000000 	.word	0x20000000
 8006f0c:	10624dd3 	.word	0x10624dd3
 8006f10:	e000e014 	.word	0xe000e014

08006f14 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006f14:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006f24 <vPortEnableVFP+0x10>
 8006f18:	6801      	ldr	r1, [r0, #0]
 8006f1a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006f1e:	6001      	str	r1, [r0, #0]
 8006f20:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006f22:	bf00      	nop
 8006f24:	e000ed88 	.word	0xe000ed88

08006f28 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006f28:	b480      	push	{r7}
 8006f2a:	b085      	sub	sp, #20
 8006f2c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006f2e:	f3ef 8305 	mrs	r3, IPSR
 8006f32:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	2b0f      	cmp	r3, #15
 8006f38:	d914      	bls.n	8006f64 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006f3a:	4a17      	ldr	r2, [pc, #92]	; (8006f98 <vPortValidateInterruptPriority+0x70>)
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	4413      	add	r3, r2
 8006f40:	781b      	ldrb	r3, [r3, #0]
 8006f42:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006f44:	4b15      	ldr	r3, [pc, #84]	; (8006f9c <vPortValidateInterruptPriority+0x74>)
 8006f46:	781b      	ldrb	r3, [r3, #0]
 8006f48:	7afa      	ldrb	r2, [r7, #11]
 8006f4a:	429a      	cmp	r2, r3
 8006f4c:	d20a      	bcs.n	8006f64 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8006f4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f52:	f383 8811 	msr	BASEPRI, r3
 8006f56:	f3bf 8f6f 	isb	sy
 8006f5a:	f3bf 8f4f 	dsb	sy
 8006f5e:	607b      	str	r3, [r7, #4]
}
 8006f60:	bf00      	nop
 8006f62:	e7fe      	b.n	8006f62 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006f64:	4b0e      	ldr	r3, [pc, #56]	; (8006fa0 <vPortValidateInterruptPriority+0x78>)
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006f6c:	4b0d      	ldr	r3, [pc, #52]	; (8006fa4 <vPortValidateInterruptPriority+0x7c>)
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	429a      	cmp	r2, r3
 8006f72:	d90a      	bls.n	8006f8a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8006f74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f78:	f383 8811 	msr	BASEPRI, r3
 8006f7c:	f3bf 8f6f 	isb	sy
 8006f80:	f3bf 8f4f 	dsb	sy
 8006f84:	603b      	str	r3, [r7, #0]
}
 8006f86:	bf00      	nop
 8006f88:	e7fe      	b.n	8006f88 <vPortValidateInterruptPriority+0x60>
	}
 8006f8a:	bf00      	nop
 8006f8c:	3714      	adds	r7, #20
 8006f8e:	46bd      	mov	sp, r7
 8006f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f94:	4770      	bx	lr
 8006f96:	bf00      	nop
 8006f98:	e000e3f0 	.word	0xe000e3f0
 8006f9c:	20000804 	.word	0x20000804
 8006fa0:	e000ed0c 	.word	0xe000ed0c
 8006fa4:	20000808 	.word	0x20000808

08006fa8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006fa8:	b580      	push	{r7, lr}
 8006faa:	b08a      	sub	sp, #40	; 0x28
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006fb0:	2300      	movs	r3, #0
 8006fb2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006fb4:	f7fe fbf0 	bl	8005798 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006fb8:	4b58      	ldr	r3, [pc, #352]	; (800711c <pvPortMalloc+0x174>)
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d101      	bne.n	8006fc4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006fc0:	f000 f910 	bl	80071e4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006fc4:	4b56      	ldr	r3, [pc, #344]	; (8007120 <pvPortMalloc+0x178>)
 8006fc6:	681a      	ldr	r2, [r3, #0]
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	4013      	ands	r3, r2
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	f040 808e 	bne.w	80070ee <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d01d      	beq.n	8007014 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006fd8:	2208      	movs	r2, #8
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	4413      	add	r3, r2
 8006fde:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	f003 0307 	and.w	r3, r3, #7
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d014      	beq.n	8007014 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	f023 0307 	bic.w	r3, r3, #7
 8006ff0:	3308      	adds	r3, #8
 8006ff2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	f003 0307 	and.w	r3, r3, #7
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d00a      	beq.n	8007014 <pvPortMalloc+0x6c>
	__asm volatile
 8006ffe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007002:	f383 8811 	msr	BASEPRI, r3
 8007006:	f3bf 8f6f 	isb	sy
 800700a:	f3bf 8f4f 	dsb	sy
 800700e:	617b      	str	r3, [r7, #20]
}
 8007010:	bf00      	nop
 8007012:	e7fe      	b.n	8007012 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	2b00      	cmp	r3, #0
 8007018:	d069      	beq.n	80070ee <pvPortMalloc+0x146>
 800701a:	4b42      	ldr	r3, [pc, #264]	; (8007124 <pvPortMalloc+0x17c>)
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	687a      	ldr	r2, [r7, #4]
 8007020:	429a      	cmp	r2, r3
 8007022:	d864      	bhi.n	80070ee <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007024:	4b40      	ldr	r3, [pc, #256]	; (8007128 <pvPortMalloc+0x180>)
 8007026:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007028:	4b3f      	ldr	r3, [pc, #252]	; (8007128 <pvPortMalloc+0x180>)
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800702e:	e004      	b.n	800703a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007032:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800703a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800703c:	685b      	ldr	r3, [r3, #4]
 800703e:	687a      	ldr	r2, [r7, #4]
 8007040:	429a      	cmp	r2, r3
 8007042:	d903      	bls.n	800704c <pvPortMalloc+0xa4>
 8007044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	2b00      	cmp	r3, #0
 800704a:	d1f1      	bne.n	8007030 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800704c:	4b33      	ldr	r3, [pc, #204]	; (800711c <pvPortMalloc+0x174>)
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007052:	429a      	cmp	r2, r3
 8007054:	d04b      	beq.n	80070ee <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007056:	6a3b      	ldr	r3, [r7, #32]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	2208      	movs	r2, #8
 800705c:	4413      	add	r3, r2
 800705e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007062:	681a      	ldr	r2, [r3, #0]
 8007064:	6a3b      	ldr	r3, [r7, #32]
 8007066:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800706a:	685a      	ldr	r2, [r3, #4]
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	1ad2      	subs	r2, r2, r3
 8007070:	2308      	movs	r3, #8
 8007072:	005b      	lsls	r3, r3, #1
 8007074:	429a      	cmp	r2, r3
 8007076:	d91f      	bls.n	80070b8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007078:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	4413      	add	r3, r2
 800707e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007080:	69bb      	ldr	r3, [r7, #24]
 8007082:	f003 0307 	and.w	r3, r3, #7
 8007086:	2b00      	cmp	r3, #0
 8007088:	d00a      	beq.n	80070a0 <pvPortMalloc+0xf8>
	__asm volatile
 800708a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800708e:	f383 8811 	msr	BASEPRI, r3
 8007092:	f3bf 8f6f 	isb	sy
 8007096:	f3bf 8f4f 	dsb	sy
 800709a:	613b      	str	r3, [r7, #16]
}
 800709c:	bf00      	nop
 800709e:	e7fe      	b.n	800709e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80070a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070a2:	685a      	ldr	r2, [r3, #4]
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	1ad2      	subs	r2, r2, r3
 80070a8:	69bb      	ldr	r3, [r7, #24]
 80070aa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80070ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070ae:	687a      	ldr	r2, [r7, #4]
 80070b0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80070b2:	69b8      	ldr	r0, [r7, #24]
 80070b4:	f000 f8f8 	bl	80072a8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80070b8:	4b1a      	ldr	r3, [pc, #104]	; (8007124 <pvPortMalloc+0x17c>)
 80070ba:	681a      	ldr	r2, [r3, #0]
 80070bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070be:	685b      	ldr	r3, [r3, #4]
 80070c0:	1ad3      	subs	r3, r2, r3
 80070c2:	4a18      	ldr	r2, [pc, #96]	; (8007124 <pvPortMalloc+0x17c>)
 80070c4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80070c6:	4b17      	ldr	r3, [pc, #92]	; (8007124 <pvPortMalloc+0x17c>)
 80070c8:	681a      	ldr	r2, [r3, #0]
 80070ca:	4b18      	ldr	r3, [pc, #96]	; (800712c <pvPortMalloc+0x184>)
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	429a      	cmp	r2, r3
 80070d0:	d203      	bcs.n	80070da <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80070d2:	4b14      	ldr	r3, [pc, #80]	; (8007124 <pvPortMalloc+0x17c>)
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	4a15      	ldr	r2, [pc, #84]	; (800712c <pvPortMalloc+0x184>)
 80070d8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80070da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070dc:	685a      	ldr	r2, [r3, #4]
 80070de:	4b10      	ldr	r3, [pc, #64]	; (8007120 <pvPortMalloc+0x178>)
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	431a      	orrs	r2, r3
 80070e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070e6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80070e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070ea:	2200      	movs	r2, #0
 80070ec:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80070ee:	f7fe fb61 	bl	80057b4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80070f2:	69fb      	ldr	r3, [r7, #28]
 80070f4:	f003 0307 	and.w	r3, r3, #7
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d00a      	beq.n	8007112 <pvPortMalloc+0x16a>
	__asm volatile
 80070fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007100:	f383 8811 	msr	BASEPRI, r3
 8007104:	f3bf 8f6f 	isb	sy
 8007108:	f3bf 8f4f 	dsb	sy
 800710c:	60fb      	str	r3, [r7, #12]
}
 800710e:	bf00      	nop
 8007110:	e7fe      	b.n	8007110 <pvPortMalloc+0x168>
	return pvReturn;
 8007112:	69fb      	ldr	r3, [r7, #28]
}
 8007114:	4618      	mov	r0, r3
 8007116:	3728      	adds	r7, #40	; 0x28
 8007118:	46bd      	mov	sp, r7
 800711a:	bd80      	pop	{r7, pc}
 800711c:	20001f84 	.word	0x20001f84
 8007120:	20001f90 	.word	0x20001f90
 8007124:	20001f88 	.word	0x20001f88
 8007128:	20001f7c 	.word	0x20001f7c
 800712c:	20001f8c 	.word	0x20001f8c

08007130 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007130:	b580      	push	{r7, lr}
 8007132:	b086      	sub	sp, #24
 8007134:	af00      	add	r7, sp, #0
 8007136:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	2b00      	cmp	r3, #0
 8007140:	d048      	beq.n	80071d4 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007142:	2308      	movs	r3, #8
 8007144:	425b      	negs	r3, r3
 8007146:	697a      	ldr	r2, [r7, #20]
 8007148:	4413      	add	r3, r2
 800714a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800714c:	697b      	ldr	r3, [r7, #20]
 800714e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007150:	693b      	ldr	r3, [r7, #16]
 8007152:	685a      	ldr	r2, [r3, #4]
 8007154:	4b21      	ldr	r3, [pc, #132]	; (80071dc <vPortFree+0xac>)
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	4013      	ands	r3, r2
 800715a:	2b00      	cmp	r3, #0
 800715c:	d10a      	bne.n	8007174 <vPortFree+0x44>
	__asm volatile
 800715e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007162:	f383 8811 	msr	BASEPRI, r3
 8007166:	f3bf 8f6f 	isb	sy
 800716a:	f3bf 8f4f 	dsb	sy
 800716e:	60fb      	str	r3, [r7, #12]
}
 8007170:	bf00      	nop
 8007172:	e7fe      	b.n	8007172 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007174:	693b      	ldr	r3, [r7, #16]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	2b00      	cmp	r3, #0
 800717a:	d00a      	beq.n	8007192 <vPortFree+0x62>
	__asm volatile
 800717c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007180:	f383 8811 	msr	BASEPRI, r3
 8007184:	f3bf 8f6f 	isb	sy
 8007188:	f3bf 8f4f 	dsb	sy
 800718c:	60bb      	str	r3, [r7, #8]
}
 800718e:	bf00      	nop
 8007190:	e7fe      	b.n	8007190 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007192:	693b      	ldr	r3, [r7, #16]
 8007194:	685a      	ldr	r2, [r3, #4]
 8007196:	4b11      	ldr	r3, [pc, #68]	; (80071dc <vPortFree+0xac>)
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	4013      	ands	r3, r2
 800719c:	2b00      	cmp	r3, #0
 800719e:	d019      	beq.n	80071d4 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80071a0:	693b      	ldr	r3, [r7, #16]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d115      	bne.n	80071d4 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80071a8:	693b      	ldr	r3, [r7, #16]
 80071aa:	685a      	ldr	r2, [r3, #4]
 80071ac:	4b0b      	ldr	r3, [pc, #44]	; (80071dc <vPortFree+0xac>)
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	43db      	mvns	r3, r3
 80071b2:	401a      	ands	r2, r3
 80071b4:	693b      	ldr	r3, [r7, #16]
 80071b6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80071b8:	f7fe faee 	bl	8005798 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80071bc:	693b      	ldr	r3, [r7, #16]
 80071be:	685a      	ldr	r2, [r3, #4]
 80071c0:	4b07      	ldr	r3, [pc, #28]	; (80071e0 <vPortFree+0xb0>)
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	4413      	add	r3, r2
 80071c6:	4a06      	ldr	r2, [pc, #24]	; (80071e0 <vPortFree+0xb0>)
 80071c8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80071ca:	6938      	ldr	r0, [r7, #16]
 80071cc:	f000 f86c 	bl	80072a8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80071d0:	f7fe faf0 	bl	80057b4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80071d4:	bf00      	nop
 80071d6:	3718      	adds	r7, #24
 80071d8:	46bd      	mov	sp, r7
 80071da:	bd80      	pop	{r7, pc}
 80071dc:	20001f90 	.word	0x20001f90
 80071e0:	20001f88 	.word	0x20001f88

080071e4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80071e4:	b480      	push	{r7}
 80071e6:	b085      	sub	sp, #20
 80071e8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80071ea:	f241 7370 	movw	r3, #6000	; 0x1770
 80071ee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80071f0:	4b27      	ldr	r3, [pc, #156]	; (8007290 <prvHeapInit+0xac>)
 80071f2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	f003 0307 	and.w	r3, r3, #7
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d00c      	beq.n	8007218 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	3307      	adds	r3, #7
 8007202:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	f023 0307 	bic.w	r3, r3, #7
 800720a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800720c:	68ba      	ldr	r2, [r7, #8]
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	1ad3      	subs	r3, r2, r3
 8007212:	4a1f      	ldr	r2, [pc, #124]	; (8007290 <prvHeapInit+0xac>)
 8007214:	4413      	add	r3, r2
 8007216:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800721c:	4a1d      	ldr	r2, [pc, #116]	; (8007294 <prvHeapInit+0xb0>)
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007222:	4b1c      	ldr	r3, [pc, #112]	; (8007294 <prvHeapInit+0xb0>)
 8007224:	2200      	movs	r2, #0
 8007226:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	68ba      	ldr	r2, [r7, #8]
 800722c:	4413      	add	r3, r2
 800722e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007230:	2208      	movs	r2, #8
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	1a9b      	subs	r3, r3, r2
 8007236:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	f023 0307 	bic.w	r3, r3, #7
 800723e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	4a15      	ldr	r2, [pc, #84]	; (8007298 <prvHeapInit+0xb4>)
 8007244:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007246:	4b14      	ldr	r3, [pc, #80]	; (8007298 <prvHeapInit+0xb4>)
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	2200      	movs	r2, #0
 800724c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800724e:	4b12      	ldr	r3, [pc, #72]	; (8007298 <prvHeapInit+0xb4>)
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	2200      	movs	r2, #0
 8007254:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800725a:	683b      	ldr	r3, [r7, #0]
 800725c:	68fa      	ldr	r2, [r7, #12]
 800725e:	1ad2      	subs	r2, r2, r3
 8007260:	683b      	ldr	r3, [r7, #0]
 8007262:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007264:	4b0c      	ldr	r3, [pc, #48]	; (8007298 <prvHeapInit+0xb4>)
 8007266:	681a      	ldr	r2, [r3, #0]
 8007268:	683b      	ldr	r3, [r7, #0]
 800726a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800726c:	683b      	ldr	r3, [r7, #0]
 800726e:	685b      	ldr	r3, [r3, #4]
 8007270:	4a0a      	ldr	r2, [pc, #40]	; (800729c <prvHeapInit+0xb8>)
 8007272:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007274:	683b      	ldr	r3, [r7, #0]
 8007276:	685b      	ldr	r3, [r3, #4]
 8007278:	4a09      	ldr	r2, [pc, #36]	; (80072a0 <prvHeapInit+0xbc>)
 800727a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800727c:	4b09      	ldr	r3, [pc, #36]	; (80072a4 <prvHeapInit+0xc0>)
 800727e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007282:	601a      	str	r2, [r3, #0]
}
 8007284:	bf00      	nop
 8007286:	3714      	adds	r7, #20
 8007288:	46bd      	mov	sp, r7
 800728a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800728e:	4770      	bx	lr
 8007290:	2000080c 	.word	0x2000080c
 8007294:	20001f7c 	.word	0x20001f7c
 8007298:	20001f84 	.word	0x20001f84
 800729c:	20001f8c 	.word	0x20001f8c
 80072a0:	20001f88 	.word	0x20001f88
 80072a4:	20001f90 	.word	0x20001f90

080072a8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80072a8:	b480      	push	{r7}
 80072aa:	b085      	sub	sp, #20
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80072b0:	4b28      	ldr	r3, [pc, #160]	; (8007354 <prvInsertBlockIntoFreeList+0xac>)
 80072b2:	60fb      	str	r3, [r7, #12]
 80072b4:	e002      	b.n	80072bc <prvInsertBlockIntoFreeList+0x14>
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	60fb      	str	r3, [r7, #12]
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	687a      	ldr	r2, [r7, #4]
 80072c2:	429a      	cmp	r2, r3
 80072c4:	d8f7      	bhi.n	80072b6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	685b      	ldr	r3, [r3, #4]
 80072ce:	68ba      	ldr	r2, [r7, #8]
 80072d0:	4413      	add	r3, r2
 80072d2:	687a      	ldr	r2, [r7, #4]
 80072d4:	429a      	cmp	r2, r3
 80072d6:	d108      	bne.n	80072ea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	685a      	ldr	r2, [r3, #4]
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	685b      	ldr	r3, [r3, #4]
 80072e0:	441a      	add	r2, r3
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	685b      	ldr	r3, [r3, #4]
 80072f2:	68ba      	ldr	r2, [r7, #8]
 80072f4:	441a      	add	r2, r3
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	429a      	cmp	r2, r3
 80072fc:	d118      	bne.n	8007330 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	681a      	ldr	r2, [r3, #0]
 8007302:	4b15      	ldr	r3, [pc, #84]	; (8007358 <prvInsertBlockIntoFreeList+0xb0>)
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	429a      	cmp	r2, r3
 8007308:	d00d      	beq.n	8007326 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	685a      	ldr	r2, [r3, #4]
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	685b      	ldr	r3, [r3, #4]
 8007314:	441a      	add	r2, r3
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	681a      	ldr	r2, [r3, #0]
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	601a      	str	r2, [r3, #0]
 8007324:	e008      	b.n	8007338 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007326:	4b0c      	ldr	r3, [pc, #48]	; (8007358 <prvInsertBlockIntoFreeList+0xb0>)
 8007328:	681a      	ldr	r2, [r3, #0]
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	601a      	str	r2, [r3, #0]
 800732e:	e003      	b.n	8007338 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	681a      	ldr	r2, [r3, #0]
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007338:	68fa      	ldr	r2, [r7, #12]
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	429a      	cmp	r2, r3
 800733e:	d002      	beq.n	8007346 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	687a      	ldr	r2, [r7, #4]
 8007344:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007346:	bf00      	nop
 8007348:	3714      	adds	r7, #20
 800734a:	46bd      	mov	sp, r7
 800734c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007350:	4770      	bx	lr
 8007352:	bf00      	nop
 8007354:	20001f7c 	.word	0x20001f7c
 8007358:	20001f84 	.word	0x20001f84

0800735c <arm_mean_q15>:
 800735c:	ea5f 0c91 	movs.w	ip, r1, lsr #2
 8007360:	b4f0      	push	{r4, r5, r6, r7}
 8007362:	d028      	beq.n	80073b6 <arm_mean_q15+0x5a>
 8007364:	4604      	mov	r4, r0
 8007366:	4665      	mov	r5, ip
 8007368:	2300      	movs	r3, #0
 800736a:	6827      	ldr	r7, [r4, #0]
 800736c:	6866      	ldr	r6, [r4, #4]
 800736e:	fa03 f387 	sxtah	r3, r3, r7
 8007372:	eb03 4327 	add.w	r3, r3, r7, asr #16
 8007376:	fa03 f386 	sxtah	r3, r3, r6
 800737a:	3d01      	subs	r5, #1
 800737c:	eb03 4326 	add.w	r3, r3, r6, asr #16
 8007380:	f104 0408 	add.w	r4, r4, #8
 8007384:	d1f1      	bne.n	800736a <arm_mean_q15+0xe>
 8007386:	eb00 00cc 	add.w	r0, r0, ip, lsl #3
 800738a:	f011 0403 	ands.w	r4, r1, #3
 800738e:	d00d      	beq.n	80073ac <arm_mean_q15+0x50>
 8007390:	f9b0 5000 	ldrsh.w	r5, [r0]
 8007394:	3c01      	subs	r4, #1
 8007396:	442b      	add	r3, r5
 8007398:	d008      	beq.n	80073ac <arm_mean_q15+0x50>
 800739a:	f9b0 5002 	ldrsh.w	r5, [r0, #2]
 800739e:	2c01      	cmp	r4, #1
 80073a0:	bf18      	it	ne
 80073a2:	f9b0 0004 	ldrshne.w	r0, [r0, #4]
 80073a6:	442b      	add	r3, r5
 80073a8:	bf18      	it	ne
 80073aa:	181b      	addne	r3, r3, r0
 80073ac:	fb93 f3f1 	sdiv	r3, r3, r1
 80073b0:	bcf0      	pop	{r4, r5, r6, r7}
 80073b2:	8013      	strh	r3, [r2, #0]
 80073b4:	4770      	bx	lr
 80073b6:	4663      	mov	r3, ip
 80073b8:	e7e7      	b.n	800738a <arm_mean_q15+0x2e>
 80073ba:	bf00      	nop

080073bc <__errno>:
 80073bc:	4b01      	ldr	r3, [pc, #4]	; (80073c4 <__errno+0x8>)
 80073be:	6818      	ldr	r0, [r3, #0]
 80073c0:	4770      	bx	lr
 80073c2:	bf00      	nop
 80073c4:	20000010 	.word	0x20000010

080073c8 <__libc_init_array>:
 80073c8:	b570      	push	{r4, r5, r6, lr}
 80073ca:	4d0d      	ldr	r5, [pc, #52]	; (8007400 <__libc_init_array+0x38>)
 80073cc:	4c0d      	ldr	r4, [pc, #52]	; (8007404 <__libc_init_array+0x3c>)
 80073ce:	1b64      	subs	r4, r4, r5
 80073d0:	10a4      	asrs	r4, r4, #2
 80073d2:	2600      	movs	r6, #0
 80073d4:	42a6      	cmp	r6, r4
 80073d6:	d109      	bne.n	80073ec <__libc_init_array+0x24>
 80073d8:	4d0b      	ldr	r5, [pc, #44]	; (8007408 <__libc_init_array+0x40>)
 80073da:	4c0c      	ldr	r4, [pc, #48]	; (800740c <__libc_init_array+0x44>)
 80073dc:	f000 fc8e 	bl	8007cfc <_init>
 80073e0:	1b64      	subs	r4, r4, r5
 80073e2:	10a4      	asrs	r4, r4, #2
 80073e4:	2600      	movs	r6, #0
 80073e6:	42a6      	cmp	r6, r4
 80073e8:	d105      	bne.n	80073f6 <__libc_init_array+0x2e>
 80073ea:	bd70      	pop	{r4, r5, r6, pc}
 80073ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80073f0:	4798      	blx	r3
 80073f2:	3601      	adds	r6, #1
 80073f4:	e7ee      	b.n	80073d4 <__libc_init_array+0xc>
 80073f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80073fa:	4798      	blx	r3
 80073fc:	3601      	adds	r6, #1
 80073fe:	e7f2      	b.n	80073e6 <__libc_init_array+0x1e>
 8007400:	08007dfc 	.word	0x08007dfc
 8007404:	08007dfc 	.word	0x08007dfc
 8007408:	08007dfc 	.word	0x08007dfc
 800740c:	08007e00 	.word	0x08007e00

08007410 <memcpy>:
 8007410:	440a      	add	r2, r1
 8007412:	4291      	cmp	r1, r2
 8007414:	f100 33ff 	add.w	r3, r0, #4294967295
 8007418:	d100      	bne.n	800741c <memcpy+0xc>
 800741a:	4770      	bx	lr
 800741c:	b510      	push	{r4, lr}
 800741e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007422:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007426:	4291      	cmp	r1, r2
 8007428:	d1f9      	bne.n	800741e <memcpy+0xe>
 800742a:	bd10      	pop	{r4, pc}

0800742c <memset>:
 800742c:	4402      	add	r2, r0
 800742e:	4603      	mov	r3, r0
 8007430:	4293      	cmp	r3, r2
 8007432:	d100      	bne.n	8007436 <memset+0xa>
 8007434:	4770      	bx	lr
 8007436:	f803 1b01 	strb.w	r1, [r3], #1
 800743a:	e7f9      	b.n	8007430 <memset+0x4>

0800743c <siprintf>:
 800743c:	b40e      	push	{r1, r2, r3}
 800743e:	b500      	push	{lr}
 8007440:	b09c      	sub	sp, #112	; 0x70
 8007442:	ab1d      	add	r3, sp, #116	; 0x74
 8007444:	9002      	str	r0, [sp, #8]
 8007446:	9006      	str	r0, [sp, #24]
 8007448:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800744c:	4809      	ldr	r0, [pc, #36]	; (8007474 <siprintf+0x38>)
 800744e:	9107      	str	r1, [sp, #28]
 8007450:	9104      	str	r1, [sp, #16]
 8007452:	4909      	ldr	r1, [pc, #36]	; (8007478 <siprintf+0x3c>)
 8007454:	f853 2b04 	ldr.w	r2, [r3], #4
 8007458:	9105      	str	r1, [sp, #20]
 800745a:	6800      	ldr	r0, [r0, #0]
 800745c:	9301      	str	r3, [sp, #4]
 800745e:	a902      	add	r1, sp, #8
 8007460:	f000 f868 	bl	8007534 <_svfiprintf_r>
 8007464:	9b02      	ldr	r3, [sp, #8]
 8007466:	2200      	movs	r2, #0
 8007468:	701a      	strb	r2, [r3, #0]
 800746a:	b01c      	add	sp, #112	; 0x70
 800746c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007470:	b003      	add	sp, #12
 8007472:	4770      	bx	lr
 8007474:	20000010 	.word	0x20000010
 8007478:	ffff0208 	.word	0xffff0208

0800747c <__ssputs_r>:
 800747c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007480:	688e      	ldr	r6, [r1, #8]
 8007482:	429e      	cmp	r6, r3
 8007484:	4682      	mov	sl, r0
 8007486:	460c      	mov	r4, r1
 8007488:	4690      	mov	r8, r2
 800748a:	461f      	mov	r7, r3
 800748c:	d838      	bhi.n	8007500 <__ssputs_r+0x84>
 800748e:	898a      	ldrh	r2, [r1, #12]
 8007490:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007494:	d032      	beq.n	80074fc <__ssputs_r+0x80>
 8007496:	6825      	ldr	r5, [r4, #0]
 8007498:	6909      	ldr	r1, [r1, #16]
 800749a:	eba5 0901 	sub.w	r9, r5, r1
 800749e:	6965      	ldr	r5, [r4, #20]
 80074a0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80074a4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80074a8:	3301      	adds	r3, #1
 80074aa:	444b      	add	r3, r9
 80074ac:	106d      	asrs	r5, r5, #1
 80074ae:	429d      	cmp	r5, r3
 80074b0:	bf38      	it	cc
 80074b2:	461d      	movcc	r5, r3
 80074b4:	0553      	lsls	r3, r2, #21
 80074b6:	d531      	bpl.n	800751c <__ssputs_r+0xa0>
 80074b8:	4629      	mov	r1, r5
 80074ba:	f000 fb55 	bl	8007b68 <_malloc_r>
 80074be:	4606      	mov	r6, r0
 80074c0:	b950      	cbnz	r0, 80074d8 <__ssputs_r+0x5c>
 80074c2:	230c      	movs	r3, #12
 80074c4:	f8ca 3000 	str.w	r3, [sl]
 80074c8:	89a3      	ldrh	r3, [r4, #12]
 80074ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80074ce:	81a3      	strh	r3, [r4, #12]
 80074d0:	f04f 30ff 	mov.w	r0, #4294967295
 80074d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80074d8:	6921      	ldr	r1, [r4, #16]
 80074da:	464a      	mov	r2, r9
 80074dc:	f7ff ff98 	bl	8007410 <memcpy>
 80074e0:	89a3      	ldrh	r3, [r4, #12]
 80074e2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80074e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80074ea:	81a3      	strh	r3, [r4, #12]
 80074ec:	6126      	str	r6, [r4, #16]
 80074ee:	6165      	str	r5, [r4, #20]
 80074f0:	444e      	add	r6, r9
 80074f2:	eba5 0509 	sub.w	r5, r5, r9
 80074f6:	6026      	str	r6, [r4, #0]
 80074f8:	60a5      	str	r5, [r4, #8]
 80074fa:	463e      	mov	r6, r7
 80074fc:	42be      	cmp	r6, r7
 80074fe:	d900      	bls.n	8007502 <__ssputs_r+0x86>
 8007500:	463e      	mov	r6, r7
 8007502:	6820      	ldr	r0, [r4, #0]
 8007504:	4632      	mov	r2, r6
 8007506:	4641      	mov	r1, r8
 8007508:	f000 faa8 	bl	8007a5c <memmove>
 800750c:	68a3      	ldr	r3, [r4, #8]
 800750e:	1b9b      	subs	r3, r3, r6
 8007510:	60a3      	str	r3, [r4, #8]
 8007512:	6823      	ldr	r3, [r4, #0]
 8007514:	4433      	add	r3, r6
 8007516:	6023      	str	r3, [r4, #0]
 8007518:	2000      	movs	r0, #0
 800751a:	e7db      	b.n	80074d4 <__ssputs_r+0x58>
 800751c:	462a      	mov	r2, r5
 800751e:	f000 fb97 	bl	8007c50 <_realloc_r>
 8007522:	4606      	mov	r6, r0
 8007524:	2800      	cmp	r0, #0
 8007526:	d1e1      	bne.n	80074ec <__ssputs_r+0x70>
 8007528:	6921      	ldr	r1, [r4, #16]
 800752a:	4650      	mov	r0, sl
 800752c:	f000 fab0 	bl	8007a90 <_free_r>
 8007530:	e7c7      	b.n	80074c2 <__ssputs_r+0x46>
	...

08007534 <_svfiprintf_r>:
 8007534:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007538:	4698      	mov	r8, r3
 800753a:	898b      	ldrh	r3, [r1, #12]
 800753c:	061b      	lsls	r3, r3, #24
 800753e:	b09d      	sub	sp, #116	; 0x74
 8007540:	4607      	mov	r7, r0
 8007542:	460d      	mov	r5, r1
 8007544:	4614      	mov	r4, r2
 8007546:	d50e      	bpl.n	8007566 <_svfiprintf_r+0x32>
 8007548:	690b      	ldr	r3, [r1, #16]
 800754a:	b963      	cbnz	r3, 8007566 <_svfiprintf_r+0x32>
 800754c:	2140      	movs	r1, #64	; 0x40
 800754e:	f000 fb0b 	bl	8007b68 <_malloc_r>
 8007552:	6028      	str	r0, [r5, #0]
 8007554:	6128      	str	r0, [r5, #16]
 8007556:	b920      	cbnz	r0, 8007562 <_svfiprintf_r+0x2e>
 8007558:	230c      	movs	r3, #12
 800755a:	603b      	str	r3, [r7, #0]
 800755c:	f04f 30ff 	mov.w	r0, #4294967295
 8007560:	e0d1      	b.n	8007706 <_svfiprintf_r+0x1d2>
 8007562:	2340      	movs	r3, #64	; 0x40
 8007564:	616b      	str	r3, [r5, #20]
 8007566:	2300      	movs	r3, #0
 8007568:	9309      	str	r3, [sp, #36]	; 0x24
 800756a:	2320      	movs	r3, #32
 800756c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007570:	f8cd 800c 	str.w	r8, [sp, #12]
 8007574:	2330      	movs	r3, #48	; 0x30
 8007576:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007720 <_svfiprintf_r+0x1ec>
 800757a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800757e:	f04f 0901 	mov.w	r9, #1
 8007582:	4623      	mov	r3, r4
 8007584:	469a      	mov	sl, r3
 8007586:	f813 2b01 	ldrb.w	r2, [r3], #1
 800758a:	b10a      	cbz	r2, 8007590 <_svfiprintf_r+0x5c>
 800758c:	2a25      	cmp	r2, #37	; 0x25
 800758e:	d1f9      	bne.n	8007584 <_svfiprintf_r+0x50>
 8007590:	ebba 0b04 	subs.w	fp, sl, r4
 8007594:	d00b      	beq.n	80075ae <_svfiprintf_r+0x7a>
 8007596:	465b      	mov	r3, fp
 8007598:	4622      	mov	r2, r4
 800759a:	4629      	mov	r1, r5
 800759c:	4638      	mov	r0, r7
 800759e:	f7ff ff6d 	bl	800747c <__ssputs_r>
 80075a2:	3001      	adds	r0, #1
 80075a4:	f000 80aa 	beq.w	80076fc <_svfiprintf_r+0x1c8>
 80075a8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80075aa:	445a      	add	r2, fp
 80075ac:	9209      	str	r2, [sp, #36]	; 0x24
 80075ae:	f89a 3000 	ldrb.w	r3, [sl]
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	f000 80a2 	beq.w	80076fc <_svfiprintf_r+0x1c8>
 80075b8:	2300      	movs	r3, #0
 80075ba:	f04f 32ff 	mov.w	r2, #4294967295
 80075be:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80075c2:	f10a 0a01 	add.w	sl, sl, #1
 80075c6:	9304      	str	r3, [sp, #16]
 80075c8:	9307      	str	r3, [sp, #28]
 80075ca:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80075ce:	931a      	str	r3, [sp, #104]	; 0x68
 80075d0:	4654      	mov	r4, sl
 80075d2:	2205      	movs	r2, #5
 80075d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80075d8:	4851      	ldr	r0, [pc, #324]	; (8007720 <_svfiprintf_r+0x1ec>)
 80075da:	f7f8 fe01 	bl	80001e0 <memchr>
 80075de:	9a04      	ldr	r2, [sp, #16]
 80075e0:	b9d8      	cbnz	r0, 800761a <_svfiprintf_r+0xe6>
 80075e2:	06d0      	lsls	r0, r2, #27
 80075e4:	bf44      	itt	mi
 80075e6:	2320      	movmi	r3, #32
 80075e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80075ec:	0711      	lsls	r1, r2, #28
 80075ee:	bf44      	itt	mi
 80075f0:	232b      	movmi	r3, #43	; 0x2b
 80075f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80075f6:	f89a 3000 	ldrb.w	r3, [sl]
 80075fa:	2b2a      	cmp	r3, #42	; 0x2a
 80075fc:	d015      	beq.n	800762a <_svfiprintf_r+0xf6>
 80075fe:	9a07      	ldr	r2, [sp, #28]
 8007600:	4654      	mov	r4, sl
 8007602:	2000      	movs	r0, #0
 8007604:	f04f 0c0a 	mov.w	ip, #10
 8007608:	4621      	mov	r1, r4
 800760a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800760e:	3b30      	subs	r3, #48	; 0x30
 8007610:	2b09      	cmp	r3, #9
 8007612:	d94e      	bls.n	80076b2 <_svfiprintf_r+0x17e>
 8007614:	b1b0      	cbz	r0, 8007644 <_svfiprintf_r+0x110>
 8007616:	9207      	str	r2, [sp, #28]
 8007618:	e014      	b.n	8007644 <_svfiprintf_r+0x110>
 800761a:	eba0 0308 	sub.w	r3, r0, r8
 800761e:	fa09 f303 	lsl.w	r3, r9, r3
 8007622:	4313      	orrs	r3, r2
 8007624:	9304      	str	r3, [sp, #16]
 8007626:	46a2      	mov	sl, r4
 8007628:	e7d2      	b.n	80075d0 <_svfiprintf_r+0x9c>
 800762a:	9b03      	ldr	r3, [sp, #12]
 800762c:	1d19      	adds	r1, r3, #4
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	9103      	str	r1, [sp, #12]
 8007632:	2b00      	cmp	r3, #0
 8007634:	bfbb      	ittet	lt
 8007636:	425b      	neglt	r3, r3
 8007638:	f042 0202 	orrlt.w	r2, r2, #2
 800763c:	9307      	strge	r3, [sp, #28]
 800763e:	9307      	strlt	r3, [sp, #28]
 8007640:	bfb8      	it	lt
 8007642:	9204      	strlt	r2, [sp, #16]
 8007644:	7823      	ldrb	r3, [r4, #0]
 8007646:	2b2e      	cmp	r3, #46	; 0x2e
 8007648:	d10c      	bne.n	8007664 <_svfiprintf_r+0x130>
 800764a:	7863      	ldrb	r3, [r4, #1]
 800764c:	2b2a      	cmp	r3, #42	; 0x2a
 800764e:	d135      	bne.n	80076bc <_svfiprintf_r+0x188>
 8007650:	9b03      	ldr	r3, [sp, #12]
 8007652:	1d1a      	adds	r2, r3, #4
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	9203      	str	r2, [sp, #12]
 8007658:	2b00      	cmp	r3, #0
 800765a:	bfb8      	it	lt
 800765c:	f04f 33ff 	movlt.w	r3, #4294967295
 8007660:	3402      	adds	r4, #2
 8007662:	9305      	str	r3, [sp, #20]
 8007664:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007730 <_svfiprintf_r+0x1fc>
 8007668:	7821      	ldrb	r1, [r4, #0]
 800766a:	2203      	movs	r2, #3
 800766c:	4650      	mov	r0, sl
 800766e:	f7f8 fdb7 	bl	80001e0 <memchr>
 8007672:	b140      	cbz	r0, 8007686 <_svfiprintf_r+0x152>
 8007674:	2340      	movs	r3, #64	; 0x40
 8007676:	eba0 000a 	sub.w	r0, r0, sl
 800767a:	fa03 f000 	lsl.w	r0, r3, r0
 800767e:	9b04      	ldr	r3, [sp, #16]
 8007680:	4303      	orrs	r3, r0
 8007682:	3401      	adds	r4, #1
 8007684:	9304      	str	r3, [sp, #16]
 8007686:	f814 1b01 	ldrb.w	r1, [r4], #1
 800768a:	4826      	ldr	r0, [pc, #152]	; (8007724 <_svfiprintf_r+0x1f0>)
 800768c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007690:	2206      	movs	r2, #6
 8007692:	f7f8 fda5 	bl	80001e0 <memchr>
 8007696:	2800      	cmp	r0, #0
 8007698:	d038      	beq.n	800770c <_svfiprintf_r+0x1d8>
 800769a:	4b23      	ldr	r3, [pc, #140]	; (8007728 <_svfiprintf_r+0x1f4>)
 800769c:	bb1b      	cbnz	r3, 80076e6 <_svfiprintf_r+0x1b2>
 800769e:	9b03      	ldr	r3, [sp, #12]
 80076a0:	3307      	adds	r3, #7
 80076a2:	f023 0307 	bic.w	r3, r3, #7
 80076a6:	3308      	adds	r3, #8
 80076a8:	9303      	str	r3, [sp, #12]
 80076aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80076ac:	4433      	add	r3, r6
 80076ae:	9309      	str	r3, [sp, #36]	; 0x24
 80076b0:	e767      	b.n	8007582 <_svfiprintf_r+0x4e>
 80076b2:	fb0c 3202 	mla	r2, ip, r2, r3
 80076b6:	460c      	mov	r4, r1
 80076b8:	2001      	movs	r0, #1
 80076ba:	e7a5      	b.n	8007608 <_svfiprintf_r+0xd4>
 80076bc:	2300      	movs	r3, #0
 80076be:	3401      	adds	r4, #1
 80076c0:	9305      	str	r3, [sp, #20]
 80076c2:	4619      	mov	r1, r3
 80076c4:	f04f 0c0a 	mov.w	ip, #10
 80076c8:	4620      	mov	r0, r4
 80076ca:	f810 2b01 	ldrb.w	r2, [r0], #1
 80076ce:	3a30      	subs	r2, #48	; 0x30
 80076d0:	2a09      	cmp	r2, #9
 80076d2:	d903      	bls.n	80076dc <_svfiprintf_r+0x1a8>
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d0c5      	beq.n	8007664 <_svfiprintf_r+0x130>
 80076d8:	9105      	str	r1, [sp, #20]
 80076da:	e7c3      	b.n	8007664 <_svfiprintf_r+0x130>
 80076dc:	fb0c 2101 	mla	r1, ip, r1, r2
 80076e0:	4604      	mov	r4, r0
 80076e2:	2301      	movs	r3, #1
 80076e4:	e7f0      	b.n	80076c8 <_svfiprintf_r+0x194>
 80076e6:	ab03      	add	r3, sp, #12
 80076e8:	9300      	str	r3, [sp, #0]
 80076ea:	462a      	mov	r2, r5
 80076ec:	4b0f      	ldr	r3, [pc, #60]	; (800772c <_svfiprintf_r+0x1f8>)
 80076ee:	a904      	add	r1, sp, #16
 80076f0:	4638      	mov	r0, r7
 80076f2:	f3af 8000 	nop.w
 80076f6:	1c42      	adds	r2, r0, #1
 80076f8:	4606      	mov	r6, r0
 80076fa:	d1d6      	bne.n	80076aa <_svfiprintf_r+0x176>
 80076fc:	89ab      	ldrh	r3, [r5, #12]
 80076fe:	065b      	lsls	r3, r3, #25
 8007700:	f53f af2c 	bmi.w	800755c <_svfiprintf_r+0x28>
 8007704:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007706:	b01d      	add	sp, #116	; 0x74
 8007708:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800770c:	ab03      	add	r3, sp, #12
 800770e:	9300      	str	r3, [sp, #0]
 8007710:	462a      	mov	r2, r5
 8007712:	4b06      	ldr	r3, [pc, #24]	; (800772c <_svfiprintf_r+0x1f8>)
 8007714:	a904      	add	r1, sp, #16
 8007716:	4638      	mov	r0, r7
 8007718:	f000 f87a 	bl	8007810 <_printf_i>
 800771c:	e7eb      	b.n	80076f6 <_svfiprintf_r+0x1c2>
 800771e:	bf00      	nop
 8007720:	08007dc8 	.word	0x08007dc8
 8007724:	08007dd2 	.word	0x08007dd2
 8007728:	00000000 	.word	0x00000000
 800772c:	0800747d 	.word	0x0800747d
 8007730:	08007dce 	.word	0x08007dce

08007734 <_printf_common>:
 8007734:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007738:	4616      	mov	r6, r2
 800773a:	4699      	mov	r9, r3
 800773c:	688a      	ldr	r2, [r1, #8]
 800773e:	690b      	ldr	r3, [r1, #16]
 8007740:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007744:	4293      	cmp	r3, r2
 8007746:	bfb8      	it	lt
 8007748:	4613      	movlt	r3, r2
 800774a:	6033      	str	r3, [r6, #0]
 800774c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007750:	4607      	mov	r7, r0
 8007752:	460c      	mov	r4, r1
 8007754:	b10a      	cbz	r2, 800775a <_printf_common+0x26>
 8007756:	3301      	adds	r3, #1
 8007758:	6033      	str	r3, [r6, #0]
 800775a:	6823      	ldr	r3, [r4, #0]
 800775c:	0699      	lsls	r1, r3, #26
 800775e:	bf42      	ittt	mi
 8007760:	6833      	ldrmi	r3, [r6, #0]
 8007762:	3302      	addmi	r3, #2
 8007764:	6033      	strmi	r3, [r6, #0]
 8007766:	6825      	ldr	r5, [r4, #0]
 8007768:	f015 0506 	ands.w	r5, r5, #6
 800776c:	d106      	bne.n	800777c <_printf_common+0x48>
 800776e:	f104 0a19 	add.w	sl, r4, #25
 8007772:	68e3      	ldr	r3, [r4, #12]
 8007774:	6832      	ldr	r2, [r6, #0]
 8007776:	1a9b      	subs	r3, r3, r2
 8007778:	42ab      	cmp	r3, r5
 800777a:	dc26      	bgt.n	80077ca <_printf_common+0x96>
 800777c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007780:	1e13      	subs	r3, r2, #0
 8007782:	6822      	ldr	r2, [r4, #0]
 8007784:	bf18      	it	ne
 8007786:	2301      	movne	r3, #1
 8007788:	0692      	lsls	r2, r2, #26
 800778a:	d42b      	bmi.n	80077e4 <_printf_common+0xb0>
 800778c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007790:	4649      	mov	r1, r9
 8007792:	4638      	mov	r0, r7
 8007794:	47c0      	blx	r8
 8007796:	3001      	adds	r0, #1
 8007798:	d01e      	beq.n	80077d8 <_printf_common+0xa4>
 800779a:	6823      	ldr	r3, [r4, #0]
 800779c:	68e5      	ldr	r5, [r4, #12]
 800779e:	6832      	ldr	r2, [r6, #0]
 80077a0:	f003 0306 	and.w	r3, r3, #6
 80077a4:	2b04      	cmp	r3, #4
 80077a6:	bf08      	it	eq
 80077a8:	1aad      	subeq	r5, r5, r2
 80077aa:	68a3      	ldr	r3, [r4, #8]
 80077ac:	6922      	ldr	r2, [r4, #16]
 80077ae:	bf0c      	ite	eq
 80077b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80077b4:	2500      	movne	r5, #0
 80077b6:	4293      	cmp	r3, r2
 80077b8:	bfc4      	itt	gt
 80077ba:	1a9b      	subgt	r3, r3, r2
 80077bc:	18ed      	addgt	r5, r5, r3
 80077be:	2600      	movs	r6, #0
 80077c0:	341a      	adds	r4, #26
 80077c2:	42b5      	cmp	r5, r6
 80077c4:	d11a      	bne.n	80077fc <_printf_common+0xc8>
 80077c6:	2000      	movs	r0, #0
 80077c8:	e008      	b.n	80077dc <_printf_common+0xa8>
 80077ca:	2301      	movs	r3, #1
 80077cc:	4652      	mov	r2, sl
 80077ce:	4649      	mov	r1, r9
 80077d0:	4638      	mov	r0, r7
 80077d2:	47c0      	blx	r8
 80077d4:	3001      	adds	r0, #1
 80077d6:	d103      	bne.n	80077e0 <_printf_common+0xac>
 80077d8:	f04f 30ff 	mov.w	r0, #4294967295
 80077dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80077e0:	3501      	adds	r5, #1
 80077e2:	e7c6      	b.n	8007772 <_printf_common+0x3e>
 80077e4:	18e1      	adds	r1, r4, r3
 80077e6:	1c5a      	adds	r2, r3, #1
 80077e8:	2030      	movs	r0, #48	; 0x30
 80077ea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80077ee:	4422      	add	r2, r4
 80077f0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80077f4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80077f8:	3302      	adds	r3, #2
 80077fa:	e7c7      	b.n	800778c <_printf_common+0x58>
 80077fc:	2301      	movs	r3, #1
 80077fe:	4622      	mov	r2, r4
 8007800:	4649      	mov	r1, r9
 8007802:	4638      	mov	r0, r7
 8007804:	47c0      	blx	r8
 8007806:	3001      	adds	r0, #1
 8007808:	d0e6      	beq.n	80077d8 <_printf_common+0xa4>
 800780a:	3601      	adds	r6, #1
 800780c:	e7d9      	b.n	80077c2 <_printf_common+0x8e>
	...

08007810 <_printf_i>:
 8007810:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007814:	7e0f      	ldrb	r7, [r1, #24]
 8007816:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007818:	2f78      	cmp	r7, #120	; 0x78
 800781a:	4691      	mov	r9, r2
 800781c:	4680      	mov	r8, r0
 800781e:	460c      	mov	r4, r1
 8007820:	469a      	mov	sl, r3
 8007822:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007826:	d807      	bhi.n	8007838 <_printf_i+0x28>
 8007828:	2f62      	cmp	r7, #98	; 0x62
 800782a:	d80a      	bhi.n	8007842 <_printf_i+0x32>
 800782c:	2f00      	cmp	r7, #0
 800782e:	f000 80d8 	beq.w	80079e2 <_printf_i+0x1d2>
 8007832:	2f58      	cmp	r7, #88	; 0x58
 8007834:	f000 80a3 	beq.w	800797e <_printf_i+0x16e>
 8007838:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800783c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007840:	e03a      	b.n	80078b8 <_printf_i+0xa8>
 8007842:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007846:	2b15      	cmp	r3, #21
 8007848:	d8f6      	bhi.n	8007838 <_printf_i+0x28>
 800784a:	a101      	add	r1, pc, #4	; (adr r1, 8007850 <_printf_i+0x40>)
 800784c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007850:	080078a9 	.word	0x080078a9
 8007854:	080078bd 	.word	0x080078bd
 8007858:	08007839 	.word	0x08007839
 800785c:	08007839 	.word	0x08007839
 8007860:	08007839 	.word	0x08007839
 8007864:	08007839 	.word	0x08007839
 8007868:	080078bd 	.word	0x080078bd
 800786c:	08007839 	.word	0x08007839
 8007870:	08007839 	.word	0x08007839
 8007874:	08007839 	.word	0x08007839
 8007878:	08007839 	.word	0x08007839
 800787c:	080079c9 	.word	0x080079c9
 8007880:	080078ed 	.word	0x080078ed
 8007884:	080079ab 	.word	0x080079ab
 8007888:	08007839 	.word	0x08007839
 800788c:	08007839 	.word	0x08007839
 8007890:	080079eb 	.word	0x080079eb
 8007894:	08007839 	.word	0x08007839
 8007898:	080078ed 	.word	0x080078ed
 800789c:	08007839 	.word	0x08007839
 80078a0:	08007839 	.word	0x08007839
 80078a4:	080079b3 	.word	0x080079b3
 80078a8:	682b      	ldr	r3, [r5, #0]
 80078aa:	1d1a      	adds	r2, r3, #4
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	602a      	str	r2, [r5, #0]
 80078b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80078b4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80078b8:	2301      	movs	r3, #1
 80078ba:	e0a3      	b.n	8007a04 <_printf_i+0x1f4>
 80078bc:	6820      	ldr	r0, [r4, #0]
 80078be:	6829      	ldr	r1, [r5, #0]
 80078c0:	0606      	lsls	r6, r0, #24
 80078c2:	f101 0304 	add.w	r3, r1, #4
 80078c6:	d50a      	bpl.n	80078de <_printf_i+0xce>
 80078c8:	680e      	ldr	r6, [r1, #0]
 80078ca:	602b      	str	r3, [r5, #0]
 80078cc:	2e00      	cmp	r6, #0
 80078ce:	da03      	bge.n	80078d8 <_printf_i+0xc8>
 80078d0:	232d      	movs	r3, #45	; 0x2d
 80078d2:	4276      	negs	r6, r6
 80078d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80078d8:	485e      	ldr	r0, [pc, #376]	; (8007a54 <_printf_i+0x244>)
 80078da:	230a      	movs	r3, #10
 80078dc:	e019      	b.n	8007912 <_printf_i+0x102>
 80078de:	680e      	ldr	r6, [r1, #0]
 80078e0:	602b      	str	r3, [r5, #0]
 80078e2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80078e6:	bf18      	it	ne
 80078e8:	b236      	sxthne	r6, r6
 80078ea:	e7ef      	b.n	80078cc <_printf_i+0xbc>
 80078ec:	682b      	ldr	r3, [r5, #0]
 80078ee:	6820      	ldr	r0, [r4, #0]
 80078f0:	1d19      	adds	r1, r3, #4
 80078f2:	6029      	str	r1, [r5, #0]
 80078f4:	0601      	lsls	r1, r0, #24
 80078f6:	d501      	bpl.n	80078fc <_printf_i+0xec>
 80078f8:	681e      	ldr	r6, [r3, #0]
 80078fa:	e002      	b.n	8007902 <_printf_i+0xf2>
 80078fc:	0646      	lsls	r6, r0, #25
 80078fe:	d5fb      	bpl.n	80078f8 <_printf_i+0xe8>
 8007900:	881e      	ldrh	r6, [r3, #0]
 8007902:	4854      	ldr	r0, [pc, #336]	; (8007a54 <_printf_i+0x244>)
 8007904:	2f6f      	cmp	r7, #111	; 0x6f
 8007906:	bf0c      	ite	eq
 8007908:	2308      	moveq	r3, #8
 800790a:	230a      	movne	r3, #10
 800790c:	2100      	movs	r1, #0
 800790e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007912:	6865      	ldr	r5, [r4, #4]
 8007914:	60a5      	str	r5, [r4, #8]
 8007916:	2d00      	cmp	r5, #0
 8007918:	bfa2      	ittt	ge
 800791a:	6821      	ldrge	r1, [r4, #0]
 800791c:	f021 0104 	bicge.w	r1, r1, #4
 8007920:	6021      	strge	r1, [r4, #0]
 8007922:	b90e      	cbnz	r6, 8007928 <_printf_i+0x118>
 8007924:	2d00      	cmp	r5, #0
 8007926:	d04d      	beq.n	80079c4 <_printf_i+0x1b4>
 8007928:	4615      	mov	r5, r2
 800792a:	fbb6 f1f3 	udiv	r1, r6, r3
 800792e:	fb03 6711 	mls	r7, r3, r1, r6
 8007932:	5dc7      	ldrb	r7, [r0, r7]
 8007934:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007938:	4637      	mov	r7, r6
 800793a:	42bb      	cmp	r3, r7
 800793c:	460e      	mov	r6, r1
 800793e:	d9f4      	bls.n	800792a <_printf_i+0x11a>
 8007940:	2b08      	cmp	r3, #8
 8007942:	d10b      	bne.n	800795c <_printf_i+0x14c>
 8007944:	6823      	ldr	r3, [r4, #0]
 8007946:	07de      	lsls	r6, r3, #31
 8007948:	d508      	bpl.n	800795c <_printf_i+0x14c>
 800794a:	6923      	ldr	r3, [r4, #16]
 800794c:	6861      	ldr	r1, [r4, #4]
 800794e:	4299      	cmp	r1, r3
 8007950:	bfde      	ittt	le
 8007952:	2330      	movle	r3, #48	; 0x30
 8007954:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007958:	f105 35ff 	addle.w	r5, r5, #4294967295
 800795c:	1b52      	subs	r2, r2, r5
 800795e:	6122      	str	r2, [r4, #16]
 8007960:	f8cd a000 	str.w	sl, [sp]
 8007964:	464b      	mov	r3, r9
 8007966:	aa03      	add	r2, sp, #12
 8007968:	4621      	mov	r1, r4
 800796a:	4640      	mov	r0, r8
 800796c:	f7ff fee2 	bl	8007734 <_printf_common>
 8007970:	3001      	adds	r0, #1
 8007972:	d14c      	bne.n	8007a0e <_printf_i+0x1fe>
 8007974:	f04f 30ff 	mov.w	r0, #4294967295
 8007978:	b004      	add	sp, #16
 800797a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800797e:	4835      	ldr	r0, [pc, #212]	; (8007a54 <_printf_i+0x244>)
 8007980:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007984:	6829      	ldr	r1, [r5, #0]
 8007986:	6823      	ldr	r3, [r4, #0]
 8007988:	f851 6b04 	ldr.w	r6, [r1], #4
 800798c:	6029      	str	r1, [r5, #0]
 800798e:	061d      	lsls	r5, r3, #24
 8007990:	d514      	bpl.n	80079bc <_printf_i+0x1ac>
 8007992:	07df      	lsls	r7, r3, #31
 8007994:	bf44      	itt	mi
 8007996:	f043 0320 	orrmi.w	r3, r3, #32
 800799a:	6023      	strmi	r3, [r4, #0]
 800799c:	b91e      	cbnz	r6, 80079a6 <_printf_i+0x196>
 800799e:	6823      	ldr	r3, [r4, #0]
 80079a0:	f023 0320 	bic.w	r3, r3, #32
 80079a4:	6023      	str	r3, [r4, #0]
 80079a6:	2310      	movs	r3, #16
 80079a8:	e7b0      	b.n	800790c <_printf_i+0xfc>
 80079aa:	6823      	ldr	r3, [r4, #0]
 80079ac:	f043 0320 	orr.w	r3, r3, #32
 80079b0:	6023      	str	r3, [r4, #0]
 80079b2:	2378      	movs	r3, #120	; 0x78
 80079b4:	4828      	ldr	r0, [pc, #160]	; (8007a58 <_printf_i+0x248>)
 80079b6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80079ba:	e7e3      	b.n	8007984 <_printf_i+0x174>
 80079bc:	0659      	lsls	r1, r3, #25
 80079be:	bf48      	it	mi
 80079c0:	b2b6      	uxthmi	r6, r6
 80079c2:	e7e6      	b.n	8007992 <_printf_i+0x182>
 80079c4:	4615      	mov	r5, r2
 80079c6:	e7bb      	b.n	8007940 <_printf_i+0x130>
 80079c8:	682b      	ldr	r3, [r5, #0]
 80079ca:	6826      	ldr	r6, [r4, #0]
 80079cc:	6961      	ldr	r1, [r4, #20]
 80079ce:	1d18      	adds	r0, r3, #4
 80079d0:	6028      	str	r0, [r5, #0]
 80079d2:	0635      	lsls	r5, r6, #24
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	d501      	bpl.n	80079dc <_printf_i+0x1cc>
 80079d8:	6019      	str	r1, [r3, #0]
 80079da:	e002      	b.n	80079e2 <_printf_i+0x1d2>
 80079dc:	0670      	lsls	r0, r6, #25
 80079de:	d5fb      	bpl.n	80079d8 <_printf_i+0x1c8>
 80079e0:	8019      	strh	r1, [r3, #0]
 80079e2:	2300      	movs	r3, #0
 80079e4:	6123      	str	r3, [r4, #16]
 80079e6:	4615      	mov	r5, r2
 80079e8:	e7ba      	b.n	8007960 <_printf_i+0x150>
 80079ea:	682b      	ldr	r3, [r5, #0]
 80079ec:	1d1a      	adds	r2, r3, #4
 80079ee:	602a      	str	r2, [r5, #0]
 80079f0:	681d      	ldr	r5, [r3, #0]
 80079f2:	6862      	ldr	r2, [r4, #4]
 80079f4:	2100      	movs	r1, #0
 80079f6:	4628      	mov	r0, r5
 80079f8:	f7f8 fbf2 	bl	80001e0 <memchr>
 80079fc:	b108      	cbz	r0, 8007a02 <_printf_i+0x1f2>
 80079fe:	1b40      	subs	r0, r0, r5
 8007a00:	6060      	str	r0, [r4, #4]
 8007a02:	6863      	ldr	r3, [r4, #4]
 8007a04:	6123      	str	r3, [r4, #16]
 8007a06:	2300      	movs	r3, #0
 8007a08:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007a0c:	e7a8      	b.n	8007960 <_printf_i+0x150>
 8007a0e:	6923      	ldr	r3, [r4, #16]
 8007a10:	462a      	mov	r2, r5
 8007a12:	4649      	mov	r1, r9
 8007a14:	4640      	mov	r0, r8
 8007a16:	47d0      	blx	sl
 8007a18:	3001      	adds	r0, #1
 8007a1a:	d0ab      	beq.n	8007974 <_printf_i+0x164>
 8007a1c:	6823      	ldr	r3, [r4, #0]
 8007a1e:	079b      	lsls	r3, r3, #30
 8007a20:	d413      	bmi.n	8007a4a <_printf_i+0x23a>
 8007a22:	68e0      	ldr	r0, [r4, #12]
 8007a24:	9b03      	ldr	r3, [sp, #12]
 8007a26:	4298      	cmp	r0, r3
 8007a28:	bfb8      	it	lt
 8007a2a:	4618      	movlt	r0, r3
 8007a2c:	e7a4      	b.n	8007978 <_printf_i+0x168>
 8007a2e:	2301      	movs	r3, #1
 8007a30:	4632      	mov	r2, r6
 8007a32:	4649      	mov	r1, r9
 8007a34:	4640      	mov	r0, r8
 8007a36:	47d0      	blx	sl
 8007a38:	3001      	adds	r0, #1
 8007a3a:	d09b      	beq.n	8007974 <_printf_i+0x164>
 8007a3c:	3501      	adds	r5, #1
 8007a3e:	68e3      	ldr	r3, [r4, #12]
 8007a40:	9903      	ldr	r1, [sp, #12]
 8007a42:	1a5b      	subs	r3, r3, r1
 8007a44:	42ab      	cmp	r3, r5
 8007a46:	dcf2      	bgt.n	8007a2e <_printf_i+0x21e>
 8007a48:	e7eb      	b.n	8007a22 <_printf_i+0x212>
 8007a4a:	2500      	movs	r5, #0
 8007a4c:	f104 0619 	add.w	r6, r4, #25
 8007a50:	e7f5      	b.n	8007a3e <_printf_i+0x22e>
 8007a52:	bf00      	nop
 8007a54:	08007dd9 	.word	0x08007dd9
 8007a58:	08007dea 	.word	0x08007dea

08007a5c <memmove>:
 8007a5c:	4288      	cmp	r0, r1
 8007a5e:	b510      	push	{r4, lr}
 8007a60:	eb01 0402 	add.w	r4, r1, r2
 8007a64:	d902      	bls.n	8007a6c <memmove+0x10>
 8007a66:	4284      	cmp	r4, r0
 8007a68:	4623      	mov	r3, r4
 8007a6a:	d807      	bhi.n	8007a7c <memmove+0x20>
 8007a6c:	1e43      	subs	r3, r0, #1
 8007a6e:	42a1      	cmp	r1, r4
 8007a70:	d008      	beq.n	8007a84 <memmove+0x28>
 8007a72:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007a76:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007a7a:	e7f8      	b.n	8007a6e <memmove+0x12>
 8007a7c:	4402      	add	r2, r0
 8007a7e:	4601      	mov	r1, r0
 8007a80:	428a      	cmp	r2, r1
 8007a82:	d100      	bne.n	8007a86 <memmove+0x2a>
 8007a84:	bd10      	pop	{r4, pc}
 8007a86:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007a8a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007a8e:	e7f7      	b.n	8007a80 <memmove+0x24>

08007a90 <_free_r>:
 8007a90:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007a92:	2900      	cmp	r1, #0
 8007a94:	d044      	beq.n	8007b20 <_free_r+0x90>
 8007a96:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007a9a:	9001      	str	r0, [sp, #4]
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	f1a1 0404 	sub.w	r4, r1, #4
 8007aa2:	bfb8      	it	lt
 8007aa4:	18e4      	addlt	r4, r4, r3
 8007aa6:	f000 f913 	bl	8007cd0 <__malloc_lock>
 8007aaa:	4a1e      	ldr	r2, [pc, #120]	; (8007b24 <_free_r+0x94>)
 8007aac:	9801      	ldr	r0, [sp, #4]
 8007aae:	6813      	ldr	r3, [r2, #0]
 8007ab0:	b933      	cbnz	r3, 8007ac0 <_free_r+0x30>
 8007ab2:	6063      	str	r3, [r4, #4]
 8007ab4:	6014      	str	r4, [r2, #0]
 8007ab6:	b003      	add	sp, #12
 8007ab8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007abc:	f000 b90e 	b.w	8007cdc <__malloc_unlock>
 8007ac0:	42a3      	cmp	r3, r4
 8007ac2:	d908      	bls.n	8007ad6 <_free_r+0x46>
 8007ac4:	6825      	ldr	r5, [r4, #0]
 8007ac6:	1961      	adds	r1, r4, r5
 8007ac8:	428b      	cmp	r3, r1
 8007aca:	bf01      	itttt	eq
 8007acc:	6819      	ldreq	r1, [r3, #0]
 8007ace:	685b      	ldreq	r3, [r3, #4]
 8007ad0:	1949      	addeq	r1, r1, r5
 8007ad2:	6021      	streq	r1, [r4, #0]
 8007ad4:	e7ed      	b.n	8007ab2 <_free_r+0x22>
 8007ad6:	461a      	mov	r2, r3
 8007ad8:	685b      	ldr	r3, [r3, #4]
 8007ada:	b10b      	cbz	r3, 8007ae0 <_free_r+0x50>
 8007adc:	42a3      	cmp	r3, r4
 8007ade:	d9fa      	bls.n	8007ad6 <_free_r+0x46>
 8007ae0:	6811      	ldr	r1, [r2, #0]
 8007ae2:	1855      	adds	r5, r2, r1
 8007ae4:	42a5      	cmp	r5, r4
 8007ae6:	d10b      	bne.n	8007b00 <_free_r+0x70>
 8007ae8:	6824      	ldr	r4, [r4, #0]
 8007aea:	4421      	add	r1, r4
 8007aec:	1854      	adds	r4, r2, r1
 8007aee:	42a3      	cmp	r3, r4
 8007af0:	6011      	str	r1, [r2, #0]
 8007af2:	d1e0      	bne.n	8007ab6 <_free_r+0x26>
 8007af4:	681c      	ldr	r4, [r3, #0]
 8007af6:	685b      	ldr	r3, [r3, #4]
 8007af8:	6053      	str	r3, [r2, #4]
 8007afa:	4421      	add	r1, r4
 8007afc:	6011      	str	r1, [r2, #0]
 8007afe:	e7da      	b.n	8007ab6 <_free_r+0x26>
 8007b00:	d902      	bls.n	8007b08 <_free_r+0x78>
 8007b02:	230c      	movs	r3, #12
 8007b04:	6003      	str	r3, [r0, #0]
 8007b06:	e7d6      	b.n	8007ab6 <_free_r+0x26>
 8007b08:	6825      	ldr	r5, [r4, #0]
 8007b0a:	1961      	adds	r1, r4, r5
 8007b0c:	428b      	cmp	r3, r1
 8007b0e:	bf04      	itt	eq
 8007b10:	6819      	ldreq	r1, [r3, #0]
 8007b12:	685b      	ldreq	r3, [r3, #4]
 8007b14:	6063      	str	r3, [r4, #4]
 8007b16:	bf04      	itt	eq
 8007b18:	1949      	addeq	r1, r1, r5
 8007b1a:	6021      	streq	r1, [r4, #0]
 8007b1c:	6054      	str	r4, [r2, #4]
 8007b1e:	e7ca      	b.n	8007ab6 <_free_r+0x26>
 8007b20:	b003      	add	sp, #12
 8007b22:	bd30      	pop	{r4, r5, pc}
 8007b24:	20001f94 	.word	0x20001f94

08007b28 <sbrk_aligned>:
 8007b28:	b570      	push	{r4, r5, r6, lr}
 8007b2a:	4e0e      	ldr	r6, [pc, #56]	; (8007b64 <sbrk_aligned+0x3c>)
 8007b2c:	460c      	mov	r4, r1
 8007b2e:	6831      	ldr	r1, [r6, #0]
 8007b30:	4605      	mov	r5, r0
 8007b32:	b911      	cbnz	r1, 8007b3a <sbrk_aligned+0x12>
 8007b34:	f000 f8bc 	bl	8007cb0 <_sbrk_r>
 8007b38:	6030      	str	r0, [r6, #0]
 8007b3a:	4621      	mov	r1, r4
 8007b3c:	4628      	mov	r0, r5
 8007b3e:	f000 f8b7 	bl	8007cb0 <_sbrk_r>
 8007b42:	1c43      	adds	r3, r0, #1
 8007b44:	d00a      	beq.n	8007b5c <sbrk_aligned+0x34>
 8007b46:	1cc4      	adds	r4, r0, #3
 8007b48:	f024 0403 	bic.w	r4, r4, #3
 8007b4c:	42a0      	cmp	r0, r4
 8007b4e:	d007      	beq.n	8007b60 <sbrk_aligned+0x38>
 8007b50:	1a21      	subs	r1, r4, r0
 8007b52:	4628      	mov	r0, r5
 8007b54:	f000 f8ac 	bl	8007cb0 <_sbrk_r>
 8007b58:	3001      	adds	r0, #1
 8007b5a:	d101      	bne.n	8007b60 <sbrk_aligned+0x38>
 8007b5c:	f04f 34ff 	mov.w	r4, #4294967295
 8007b60:	4620      	mov	r0, r4
 8007b62:	bd70      	pop	{r4, r5, r6, pc}
 8007b64:	20001f98 	.word	0x20001f98

08007b68 <_malloc_r>:
 8007b68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b6c:	1ccd      	adds	r5, r1, #3
 8007b6e:	f025 0503 	bic.w	r5, r5, #3
 8007b72:	3508      	adds	r5, #8
 8007b74:	2d0c      	cmp	r5, #12
 8007b76:	bf38      	it	cc
 8007b78:	250c      	movcc	r5, #12
 8007b7a:	2d00      	cmp	r5, #0
 8007b7c:	4607      	mov	r7, r0
 8007b7e:	db01      	blt.n	8007b84 <_malloc_r+0x1c>
 8007b80:	42a9      	cmp	r1, r5
 8007b82:	d905      	bls.n	8007b90 <_malloc_r+0x28>
 8007b84:	230c      	movs	r3, #12
 8007b86:	603b      	str	r3, [r7, #0]
 8007b88:	2600      	movs	r6, #0
 8007b8a:	4630      	mov	r0, r6
 8007b8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007b90:	4e2e      	ldr	r6, [pc, #184]	; (8007c4c <_malloc_r+0xe4>)
 8007b92:	f000 f89d 	bl	8007cd0 <__malloc_lock>
 8007b96:	6833      	ldr	r3, [r6, #0]
 8007b98:	461c      	mov	r4, r3
 8007b9a:	bb34      	cbnz	r4, 8007bea <_malloc_r+0x82>
 8007b9c:	4629      	mov	r1, r5
 8007b9e:	4638      	mov	r0, r7
 8007ba0:	f7ff ffc2 	bl	8007b28 <sbrk_aligned>
 8007ba4:	1c43      	adds	r3, r0, #1
 8007ba6:	4604      	mov	r4, r0
 8007ba8:	d14d      	bne.n	8007c46 <_malloc_r+0xde>
 8007baa:	6834      	ldr	r4, [r6, #0]
 8007bac:	4626      	mov	r6, r4
 8007bae:	2e00      	cmp	r6, #0
 8007bb0:	d140      	bne.n	8007c34 <_malloc_r+0xcc>
 8007bb2:	6823      	ldr	r3, [r4, #0]
 8007bb4:	4631      	mov	r1, r6
 8007bb6:	4638      	mov	r0, r7
 8007bb8:	eb04 0803 	add.w	r8, r4, r3
 8007bbc:	f000 f878 	bl	8007cb0 <_sbrk_r>
 8007bc0:	4580      	cmp	r8, r0
 8007bc2:	d13a      	bne.n	8007c3a <_malloc_r+0xd2>
 8007bc4:	6821      	ldr	r1, [r4, #0]
 8007bc6:	3503      	adds	r5, #3
 8007bc8:	1a6d      	subs	r5, r5, r1
 8007bca:	f025 0503 	bic.w	r5, r5, #3
 8007bce:	3508      	adds	r5, #8
 8007bd0:	2d0c      	cmp	r5, #12
 8007bd2:	bf38      	it	cc
 8007bd4:	250c      	movcc	r5, #12
 8007bd6:	4629      	mov	r1, r5
 8007bd8:	4638      	mov	r0, r7
 8007bda:	f7ff ffa5 	bl	8007b28 <sbrk_aligned>
 8007bde:	3001      	adds	r0, #1
 8007be0:	d02b      	beq.n	8007c3a <_malloc_r+0xd2>
 8007be2:	6823      	ldr	r3, [r4, #0]
 8007be4:	442b      	add	r3, r5
 8007be6:	6023      	str	r3, [r4, #0]
 8007be8:	e00e      	b.n	8007c08 <_malloc_r+0xa0>
 8007bea:	6822      	ldr	r2, [r4, #0]
 8007bec:	1b52      	subs	r2, r2, r5
 8007bee:	d41e      	bmi.n	8007c2e <_malloc_r+0xc6>
 8007bf0:	2a0b      	cmp	r2, #11
 8007bf2:	d916      	bls.n	8007c22 <_malloc_r+0xba>
 8007bf4:	1961      	adds	r1, r4, r5
 8007bf6:	42a3      	cmp	r3, r4
 8007bf8:	6025      	str	r5, [r4, #0]
 8007bfa:	bf18      	it	ne
 8007bfc:	6059      	strne	r1, [r3, #4]
 8007bfe:	6863      	ldr	r3, [r4, #4]
 8007c00:	bf08      	it	eq
 8007c02:	6031      	streq	r1, [r6, #0]
 8007c04:	5162      	str	r2, [r4, r5]
 8007c06:	604b      	str	r3, [r1, #4]
 8007c08:	4638      	mov	r0, r7
 8007c0a:	f104 060b 	add.w	r6, r4, #11
 8007c0e:	f000 f865 	bl	8007cdc <__malloc_unlock>
 8007c12:	f026 0607 	bic.w	r6, r6, #7
 8007c16:	1d23      	adds	r3, r4, #4
 8007c18:	1af2      	subs	r2, r6, r3
 8007c1a:	d0b6      	beq.n	8007b8a <_malloc_r+0x22>
 8007c1c:	1b9b      	subs	r3, r3, r6
 8007c1e:	50a3      	str	r3, [r4, r2]
 8007c20:	e7b3      	b.n	8007b8a <_malloc_r+0x22>
 8007c22:	6862      	ldr	r2, [r4, #4]
 8007c24:	42a3      	cmp	r3, r4
 8007c26:	bf0c      	ite	eq
 8007c28:	6032      	streq	r2, [r6, #0]
 8007c2a:	605a      	strne	r2, [r3, #4]
 8007c2c:	e7ec      	b.n	8007c08 <_malloc_r+0xa0>
 8007c2e:	4623      	mov	r3, r4
 8007c30:	6864      	ldr	r4, [r4, #4]
 8007c32:	e7b2      	b.n	8007b9a <_malloc_r+0x32>
 8007c34:	4634      	mov	r4, r6
 8007c36:	6876      	ldr	r6, [r6, #4]
 8007c38:	e7b9      	b.n	8007bae <_malloc_r+0x46>
 8007c3a:	230c      	movs	r3, #12
 8007c3c:	603b      	str	r3, [r7, #0]
 8007c3e:	4638      	mov	r0, r7
 8007c40:	f000 f84c 	bl	8007cdc <__malloc_unlock>
 8007c44:	e7a1      	b.n	8007b8a <_malloc_r+0x22>
 8007c46:	6025      	str	r5, [r4, #0]
 8007c48:	e7de      	b.n	8007c08 <_malloc_r+0xa0>
 8007c4a:	bf00      	nop
 8007c4c:	20001f94 	.word	0x20001f94

08007c50 <_realloc_r>:
 8007c50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c54:	4680      	mov	r8, r0
 8007c56:	4614      	mov	r4, r2
 8007c58:	460e      	mov	r6, r1
 8007c5a:	b921      	cbnz	r1, 8007c66 <_realloc_r+0x16>
 8007c5c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007c60:	4611      	mov	r1, r2
 8007c62:	f7ff bf81 	b.w	8007b68 <_malloc_r>
 8007c66:	b92a      	cbnz	r2, 8007c74 <_realloc_r+0x24>
 8007c68:	f7ff ff12 	bl	8007a90 <_free_r>
 8007c6c:	4625      	mov	r5, r4
 8007c6e:	4628      	mov	r0, r5
 8007c70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c74:	f000 f838 	bl	8007ce8 <_malloc_usable_size_r>
 8007c78:	4284      	cmp	r4, r0
 8007c7a:	4607      	mov	r7, r0
 8007c7c:	d802      	bhi.n	8007c84 <_realloc_r+0x34>
 8007c7e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007c82:	d812      	bhi.n	8007caa <_realloc_r+0x5a>
 8007c84:	4621      	mov	r1, r4
 8007c86:	4640      	mov	r0, r8
 8007c88:	f7ff ff6e 	bl	8007b68 <_malloc_r>
 8007c8c:	4605      	mov	r5, r0
 8007c8e:	2800      	cmp	r0, #0
 8007c90:	d0ed      	beq.n	8007c6e <_realloc_r+0x1e>
 8007c92:	42bc      	cmp	r4, r7
 8007c94:	4622      	mov	r2, r4
 8007c96:	4631      	mov	r1, r6
 8007c98:	bf28      	it	cs
 8007c9a:	463a      	movcs	r2, r7
 8007c9c:	f7ff fbb8 	bl	8007410 <memcpy>
 8007ca0:	4631      	mov	r1, r6
 8007ca2:	4640      	mov	r0, r8
 8007ca4:	f7ff fef4 	bl	8007a90 <_free_r>
 8007ca8:	e7e1      	b.n	8007c6e <_realloc_r+0x1e>
 8007caa:	4635      	mov	r5, r6
 8007cac:	e7df      	b.n	8007c6e <_realloc_r+0x1e>
	...

08007cb0 <_sbrk_r>:
 8007cb0:	b538      	push	{r3, r4, r5, lr}
 8007cb2:	4d06      	ldr	r5, [pc, #24]	; (8007ccc <_sbrk_r+0x1c>)
 8007cb4:	2300      	movs	r3, #0
 8007cb6:	4604      	mov	r4, r0
 8007cb8:	4608      	mov	r0, r1
 8007cba:	602b      	str	r3, [r5, #0]
 8007cbc:	f7f8 feda 	bl	8000a74 <_sbrk>
 8007cc0:	1c43      	adds	r3, r0, #1
 8007cc2:	d102      	bne.n	8007cca <_sbrk_r+0x1a>
 8007cc4:	682b      	ldr	r3, [r5, #0]
 8007cc6:	b103      	cbz	r3, 8007cca <_sbrk_r+0x1a>
 8007cc8:	6023      	str	r3, [r4, #0]
 8007cca:	bd38      	pop	{r3, r4, r5, pc}
 8007ccc:	20001f9c 	.word	0x20001f9c

08007cd0 <__malloc_lock>:
 8007cd0:	4801      	ldr	r0, [pc, #4]	; (8007cd8 <__malloc_lock+0x8>)
 8007cd2:	f000 b811 	b.w	8007cf8 <__retarget_lock_acquire_recursive>
 8007cd6:	bf00      	nop
 8007cd8:	20001fa0 	.word	0x20001fa0

08007cdc <__malloc_unlock>:
 8007cdc:	4801      	ldr	r0, [pc, #4]	; (8007ce4 <__malloc_unlock+0x8>)
 8007cde:	f000 b80c 	b.w	8007cfa <__retarget_lock_release_recursive>
 8007ce2:	bf00      	nop
 8007ce4:	20001fa0 	.word	0x20001fa0

08007ce8 <_malloc_usable_size_r>:
 8007ce8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007cec:	1f18      	subs	r0, r3, #4
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	bfbc      	itt	lt
 8007cf2:	580b      	ldrlt	r3, [r1, r0]
 8007cf4:	18c0      	addlt	r0, r0, r3
 8007cf6:	4770      	bx	lr

08007cf8 <__retarget_lock_acquire_recursive>:
 8007cf8:	4770      	bx	lr

08007cfa <__retarget_lock_release_recursive>:
 8007cfa:	4770      	bx	lr

08007cfc <_init>:
 8007cfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cfe:	bf00      	nop
 8007d00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d02:	bc08      	pop	{r3}
 8007d04:	469e      	mov	lr, r3
 8007d06:	4770      	bx	lr

08007d08 <_fini>:
 8007d08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d0a:	bf00      	nop
 8007d0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d0e:	bc08      	pop	{r3}
 8007d10:	469e      	mov	lr, r3
 8007d12:	4770      	bx	lr
